
spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6c4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800c7d8  0800c7d8  0001c7d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd3c  0800cd3c  00020228  2**0
                  CONTENTS
  4 .ARM          00000000  0800cd3c  0800cd3c  00020228  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cd3c  0800cd3c  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd3c  0800cd3c  0001cd3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd40  0800cd40  0001cd40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0800cd44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000838  20000228  0800cf6c  00020228  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000a60  0800cf6c  00020a60  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012617  00000000  00000000  00020251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030ce  00000000  00000000  00032868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00035938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e48  00000000  00000000  000368e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016438  00000000  00000000  00037730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b52  00000000  00000000  0004db68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074841  00000000  00000000  0005e6ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2efb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005504  00000000  00000000  000d2f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000228 	.word	0x20000228
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c7bc 	.word	0x0800c7bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000022c 	.word	0x2000022c
 800014c:	0800c7bc 	.word	0x0800c7bc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2iz>:
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30f      	bcc.n	800104e <__aeabi_f2iz+0x2a>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d90d      	bls.n	8001054 <__aeabi_f2iz+0x30>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	bf18      	it	ne
 800104a:	4240      	negne	r0, r0
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2iz+0x3a>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d105      	bne.n	800106a <__aeabi_f2iz+0x46>
 800105e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001062:	bf08      	it	eq
 8001064:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <__aeabi_d2lz>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	460c      	mov	r4, r1
 8001074:	4605      	mov	r5, r0
 8001076:	4621      	mov	r1, r4
 8001078:	4628      	mov	r0, r5
 800107a:	2200      	movs	r2, #0
 800107c:	2300      	movs	r3, #0
 800107e:	f7ff fc9d 	bl	80009bc <__aeabi_dcmplt>
 8001082:	b928      	cbnz	r0, 8001090 <__aeabi_d2lz+0x20>
 8001084:	4628      	mov	r0, r5
 8001086:	4621      	mov	r1, r4
 8001088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800108c:	f000 b80a 	b.w	80010a4 <__aeabi_d2ulz>
 8001090:	4628      	mov	r0, r5
 8001092:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001096:	f000 f805 	bl	80010a4 <__aeabi_d2ulz>
 800109a:	4240      	negs	r0, r0
 800109c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010a0:	bd38      	pop	{r3, r4, r5, pc}
 80010a2:	bf00      	nop

080010a4 <__aeabi_d2ulz>:
 80010a4:	b5d0      	push	{r4, r6, r7, lr}
 80010a6:	2200      	movs	r2, #0
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <__aeabi_d2ulz+0x34>)
 80010aa:	4606      	mov	r6, r0
 80010ac:	460f      	mov	r7, r1
 80010ae:	f7ff fa13 	bl	80004d8 <__aeabi_dmul>
 80010b2:	f7ff fce9 	bl	8000a88 <__aeabi_d2uiz>
 80010b6:	4604      	mov	r4, r0
 80010b8:	f7ff f994 	bl	80003e4 <__aeabi_ui2d>
 80010bc:	2200      	movs	r2, #0
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <__aeabi_d2ulz+0x38>)
 80010c0:	f7ff fa0a 	bl	80004d8 <__aeabi_dmul>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4630      	mov	r0, r6
 80010ca:	4639      	mov	r1, r7
 80010cc:	f7ff f84c 	bl	8000168 <__aeabi_dsub>
 80010d0:	f7ff fcda 	bl	8000a88 <__aeabi_d2uiz>
 80010d4:	4621      	mov	r1, r4
 80010d6:	bdd0      	pop	{r4, r6, r7, pc}
 80010d8:	3df00000 	.word	0x3df00000
 80010dc:	41f00000 	.word	0x41f00000

080010e0 <SET_COUNT>:
extern uint8_t read_X2[4], read_X1[4], read_X0[4];
extern uint8_t read_Y2[4], read_Y1[4], read_Y0[4];
extern uint8_t read_Z2[4], read_Z1[4], read_Z0[4];


void SET_COUNT(int chip_select) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 80010e8:	4a2c      	ldr	r2, [pc, #176]	; (800119c <SET_COUNT+0xbc>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010f0:	4a2b      	ldr	r2, [pc, #172]	; (80011a0 <SET_COUNT+0xc0>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010f8:	2201      	movs	r2, #1
 80010fa:	4619      	mov	r1, r3
 80010fc:	f002 f920 	bl	8003340 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_LOW); //SSN LOW TO COMMUNICATE WITH SENSOR
 8001100:	4a26      	ldr	r2, [pc, #152]	; (800119c <SET_COUNT+0xbc>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001108:	4a25      	ldr	r2, [pc, #148]	; (80011a0 <SET_COUNT+0xc0>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001110:	2200      	movs	r2, #0
 8001112:	4619      	mov	r1, r3
 8001114:	f002 f914 	bl	8003340 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, rm3100_MSB_X_buf, sizeof(rm3100_MSB_X_buf), 1000); //Not need to necessary to send multiple value or register
 8001118:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111c:	2201      	movs	r2, #1
 800111e:	4921      	ldr	r1, [pc, #132]	; (80011a4 <SET_COUNT+0xc4>)
 8001120:	4821      	ldr	r0, [pc, #132]	; (80011a8 <SET_COUNT+0xc8>)
 8001122:	f004 fa3c 	bl	800559e <HAL_SPI_Transmit>
	//Initiate Count cycle
	HAL_SPI_Transmit(&hspi1, MSB_X_buf, sizeof(MSB_X_buf), 1000);
 8001126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112a:	2201      	movs	r2, #1
 800112c:	491f      	ldr	r1, [pc, #124]	; (80011ac <SET_COUNT+0xcc>)
 800112e:	481e      	ldr	r0, [pc, #120]	; (80011a8 <SET_COUNT+0xc8>)
 8001130:	f004 fa35 	bl	800559e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, LSB_X_buf, sizeof(LSB_X_buf), 1000);
 8001134:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001138:	2201      	movs	r2, #1
 800113a:	491d      	ldr	r1, [pc, #116]	; (80011b0 <SET_COUNT+0xd0>)
 800113c:	481a      	ldr	r0, [pc, #104]	; (80011a8 <SET_COUNT+0xc8>)
 800113e:	f004 fa2e 	bl	800559e <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, MSB_Y_buf, sizeof(MSB_Y_buf), 1000);
 8001142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001146:	2201      	movs	r2, #1
 8001148:	491a      	ldr	r1, [pc, #104]	; (80011b4 <SET_COUNT+0xd4>)
 800114a:	4817      	ldr	r0, [pc, #92]	; (80011a8 <SET_COUNT+0xc8>)
 800114c:	f004 fa27 	bl	800559e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, LSB_Y_buf, sizeof(LSB_Y_buf), 1000);
 8001150:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001154:	2201      	movs	r2, #1
 8001156:	4918      	ldr	r1, [pc, #96]	; (80011b8 <SET_COUNT+0xd8>)
 8001158:	4813      	ldr	r0, [pc, #76]	; (80011a8 <SET_COUNT+0xc8>)
 800115a:	f004 fa20 	bl	800559e <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, MSB_Z_buf, sizeof(MSB_Z_buf), 1000);
 800115e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001162:	2201      	movs	r2, #1
 8001164:	4915      	ldr	r1, [pc, #84]	; (80011bc <SET_COUNT+0xdc>)
 8001166:	4810      	ldr	r0, [pc, #64]	; (80011a8 <SET_COUNT+0xc8>)
 8001168:	f004 fa19 	bl	800559e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, LSB_Z_buf, sizeof(LSB_Z_buf), 1000);
 800116c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001170:	2201      	movs	r2, #1
 8001172:	4913      	ldr	r1, [pc, #76]	; (80011c0 <SET_COUNT+0xe0>)
 8001174:	480c      	ldr	r0, [pc, #48]	; (80011a8 <SET_COUNT+0xc8>)
 8001176:	f004 fa12 	bl	800559e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH);
 800117a:	4a08      	ldr	r2, [pc, #32]	; (800119c <SET_COUNT+0xbc>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001182:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <SET_COUNT+0xc0>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800118a:	2201      	movs	r2, #1
 800118c:	4619      	mov	r1, r3
 800118e:	f002 f8d7 	bl	8003340 <HAL_GPIO_WritePin>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000028 	.word	0x20000028
 80011a0:	20000038 	.word	0x20000038
 80011a4:	20000004 	.word	0x20000004
 80011a8:	20000620 	.word	0x20000620
 80011ac:	20000248 	.word	0x20000248
 80011b0:	20000008 	.word	0x20000008
 80011b4:	2000024c 	.word	0x2000024c
 80011b8:	2000000c 	.word	0x2000000c
 80011bc:	20000250 	.word	0x20000250
 80011c0:	20000010 	.word	0x20000010

080011c4 <Continuous_Mode>:
//Initiate Continuous Measurements Mode

void Continuous_Mode(int chip_select) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 80011cc:	4a1a      	ldr	r2, [pc, #104]	; (8001238 <Continuous_Mode+0x74>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011d4:	4a19      	ldr	r2, [pc, #100]	; (800123c <Continuous_Mode+0x78>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011dc:	2201      	movs	r2, #1
 80011de:	4619      	mov	r1, r3
 80011e0:	f002 f8ae 	bl	8003340 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_LOW); //SSN LOW TO COMMUNICATE WITH SENSOR
 80011e4:	4a14      	ldr	r2, [pc, #80]	; (8001238 <Continuous_Mode+0x74>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011ec:	4a13      	ldr	r2, [pc, #76]	; (800123c <Continuous_Mode+0x78>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011f4:	2200      	movs	r2, #0
 80011f6:	4619      	mov	r1, r3
 80011f8:	f002 f8a2 	bl	8003340 <HAL_GPIO_WritePin>
	//Initiate Continuous Measurements Mode
	HAL_SPI_Transmit(&hspi1, rm3100_cmm_buf, sizeof(rm3100_cmm_buf), 1000);
 80011fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001200:	2201      	movs	r2, #1
 8001202:	490f      	ldr	r1, [pc, #60]	; (8001240 <Continuous_Mode+0x7c>)
 8001204:	480f      	ldr	r0, [pc, #60]	; (8001244 <Continuous_Mode+0x80>)
 8001206:	f004 f9ca 	bl	800559e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, rm3100_cmm_mod_buf, sizeof(rm3100_cmm_mod_buf), 1000);
 800120a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120e:	2201      	movs	r2, #1
 8001210:	490d      	ldr	r1, [pc, #52]	; (8001248 <Continuous_Mode+0x84>)
 8001212:	480c      	ldr	r0, [pc, #48]	; (8001244 <Continuous_Mode+0x80>)
 8001214:	f004 f9c3 	bl	800559e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 8001218:	4a07      	ldr	r2, [pc, #28]	; (8001238 <Continuous_Mode+0x74>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001220:	4a06      	ldr	r2, [pc, #24]	; (800123c <Continuous_Mode+0x78>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001228:	2201      	movs	r2, #1
 800122a:	4619      	mov	r1, r3
 800122c:	f002 f888 	bl	8003340 <HAL_GPIO_WritePin>
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000028 	.word	0x20000028
 800123c:	20000038 	.word	0x20000038
 8001240:	20000014 	.word	0x20000014
 8001244:	20000620 	.word	0x20000620
 8001248:	20000018 	.word	0x20000018

0800124c <TMRC_Mode>:
//Initiate Time Measurements and Rate Control

void TMRC_Mode(int chip_select) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 8001254:	4a1a      	ldr	r2, [pc, #104]	; (80012c0 <TMRC_Mode+0x74>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800125c:	4a19      	ldr	r2, [pc, #100]	; (80012c4 <TMRC_Mode+0x78>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001264:	2201      	movs	r2, #1
 8001266:	4619      	mov	r1, r3
 8001268:	f002 f86a 	bl	8003340 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_LOW); //SSN LOW TO COMMUNICATE WITH SENSOR
 800126c:	4a14      	ldr	r2, [pc, #80]	; (80012c0 <TMRC_Mode+0x74>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001274:	4a13      	ldr	r2, [pc, #76]	; (80012c4 <TMRC_Mode+0x78>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800127c:	2200      	movs	r2, #0
 800127e:	4619      	mov	r1, r3
 8001280:	f002 f85e 	bl	8003340 <HAL_GPIO_WritePin>
	//initiate Time Measurements and Reset Control
	HAL_SPI_Transmit(&hspi1, rm3100_tmrc_add_buf, sizeof(rm3100_tmrc_add_buf), 1000);
 8001284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001288:	2201      	movs	r2, #1
 800128a:	490f      	ldr	r1, [pc, #60]	; (80012c8 <TMRC_Mode+0x7c>)
 800128c:	480f      	ldr	r0, [pc, #60]	; (80012cc <TMRC_Mode+0x80>)
 800128e:	f004 f986 	bl	800559e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, rm3100_tmrc_Val_buf, sizeof(rm3100_tmrc_Val_buf), 1000);
 8001292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001296:	2201      	movs	r2, #1
 8001298:	490d      	ldr	r1, [pc, #52]	; (80012d0 <TMRC_Mode+0x84>)
 800129a:	480c      	ldr	r0, [pc, #48]	; (80012cc <TMRC_Mode+0x80>)
 800129c:	f004 f97f 	bl	800559e <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(&hspi1, rm3100_tmrc_read_buf, sizeof(rm3100_tmrc_read_buf),
//			1000);
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 80012a0:	4a07      	ldr	r2, [pc, #28]	; (80012c0 <TMRC_Mode+0x74>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012a8:	4a06      	ldr	r2, [pc, #24]	; (80012c4 <TMRC_Mode+0x78>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012b0:	2201      	movs	r2, #1
 80012b2:	4619      	mov	r1, r3
 80012b4:	f002 f844 	bl	8003340 <HAL_GPIO_WritePin>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000028 	.word	0x20000028
 80012c4:	20000038 	.word	0x20000038
 80012c8:	2000001c 	.word	0x2000001c
 80012cc:	20000620 	.word	0x20000620
 80012d0:	20000020 	.word	0x20000020

080012d4 <Mea_Result>:

//Read Measurements Results
void Mea_Result(int chip_select) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 80012dc:	4a3f      	ldr	r2, [pc, #252]	; (80013dc <Mea_Result+0x108>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012e4:	4a3e      	ldr	r2, [pc, #248]	; (80013e0 <Mea_Result+0x10c>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012ec:	2201      	movs	r2, #1
 80012ee:	4619      	mov	r1, r3
 80012f0:	f002 f826 	bl	8003340 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_LOW); //SSN LOW TO COMMUNICATE WITH SENSOR
 80012f4:	4a39      	ldr	r2, [pc, #228]	; (80013dc <Mea_Result+0x108>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012fc:	4a38      	ldr	r2, [pc, #224]	; (80013e0 <Mea_Result+0x10c>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001304:	2200      	movs	r2, #0
 8001306:	4619      	mov	r1, r3
 8001308:	f002 f81a 	bl	8003340 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, MRRW2_X_buf, sizeof(MRRW2_X_buf), 1000);
 800130c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001310:	2201      	movs	r2, #1
 8001312:	4934      	ldr	r1, [pc, #208]	; (80013e4 <Mea_Result+0x110>)
 8001314:	4834      	ldr	r0, [pc, #208]	; (80013e8 <Mea_Result+0x114>)
 8001316:	f004 f942 	bl	800559e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &read_X2[chip_select], sizeof(read_X2[chip_select]), 1000);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a33      	ldr	r2, [pc, #204]	; (80013ec <Mea_Result+0x118>)
 800131e:	1899      	adds	r1, r3, r2
 8001320:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001324:	2201      	movs	r2, #1
 8001326:	4830      	ldr	r0, [pc, #192]	; (80013e8 <Mea_Result+0x114>)
 8001328:	f004 fa6d 	bl	8005806 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_X1[chip_select], sizeof(read_X1[chip_select]), 1000);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a30      	ldr	r2, [pc, #192]	; (80013f0 <Mea_Result+0x11c>)
 8001330:	1899      	adds	r1, r3, r2
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	2201      	movs	r2, #1
 8001338:	482b      	ldr	r0, [pc, #172]	; (80013e8 <Mea_Result+0x114>)
 800133a:	f004 fa64 	bl	8005806 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_X0[chip_select], sizeof(read_X0[chip_select]), 1000);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a2c      	ldr	r2, [pc, #176]	; (80013f4 <Mea_Result+0x120>)
 8001342:	1899      	adds	r1, r3, r2
 8001344:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001348:	2201      	movs	r2, #1
 800134a:	4827      	ldr	r0, [pc, #156]	; (80013e8 <Mea_Result+0x114>)
 800134c:	f004 fa5b 	bl	8005806 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Y2[chip_select], sizeof(read_Y2[chip_select]), 1000);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a29      	ldr	r2, [pc, #164]	; (80013f8 <Mea_Result+0x124>)
 8001354:	1899      	adds	r1, r3, r2
 8001356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135a:	2201      	movs	r2, #1
 800135c:	4822      	ldr	r0, [pc, #136]	; (80013e8 <Mea_Result+0x114>)
 800135e:	f004 fa52 	bl	8005806 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Y1[chip_select], sizeof(read_Y1[chip_select]), 1000);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a25      	ldr	r2, [pc, #148]	; (80013fc <Mea_Result+0x128>)
 8001366:	1899      	adds	r1, r3, r2
 8001368:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136c:	2201      	movs	r2, #1
 800136e:	481e      	ldr	r0, [pc, #120]	; (80013e8 <Mea_Result+0x114>)
 8001370:	f004 fa49 	bl	8005806 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Y0[chip_select], sizeof(read_Y0[chip_select]), 1000);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a22      	ldr	r2, [pc, #136]	; (8001400 <Mea_Result+0x12c>)
 8001378:	1899      	adds	r1, r3, r2
 800137a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137e:	2201      	movs	r2, #1
 8001380:	4819      	ldr	r0, [pc, #100]	; (80013e8 <Mea_Result+0x114>)
 8001382:	f004 fa40 	bl	8005806 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Z2[chip_select], sizeof(read_Z2[chip_select]), 1000);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a1e      	ldr	r2, [pc, #120]	; (8001404 <Mea_Result+0x130>)
 800138a:	1899      	adds	r1, r3, r2
 800138c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001390:	2201      	movs	r2, #1
 8001392:	4815      	ldr	r0, [pc, #84]	; (80013e8 <Mea_Result+0x114>)
 8001394:	f004 fa37 	bl	8005806 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Z1[chip_select], sizeof(read_Z1[chip_select]), 1000);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a1b      	ldr	r2, [pc, #108]	; (8001408 <Mea_Result+0x134>)
 800139c:	1899      	adds	r1, r3, r2
 800139e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a2:	2201      	movs	r2, #1
 80013a4:	4810      	ldr	r0, [pc, #64]	; (80013e8 <Mea_Result+0x114>)
 80013a6:	f004 fa2e 	bl	8005806 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Z0[chip_select], sizeof(read_Z0[chip_select]), 1000);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a17      	ldr	r2, [pc, #92]	; (800140c <Mea_Result+0x138>)
 80013ae:	1899      	adds	r1, r3, r2
 80013b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b4:	2201      	movs	r2, #1
 80013b6:	480c      	ldr	r0, [pc, #48]	; (80013e8 <Mea_Result+0x114>)
 80013b8:	f004 fa25 	bl	8005806 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 80013bc:	4a07      	ldr	r2, [pc, #28]	; (80013dc <Mea_Result+0x108>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80013c4:	4a06      	ldr	r2, [pc, #24]	; (80013e0 <Mea_Result+0x10c>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013cc:	2201      	movs	r2, #1
 80013ce:	4619      	mov	r1, r3
 80013d0:	f001 ffb6 	bl	8003340 <HAL_GPIO_WritePin>
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000028 	.word	0x20000028
 80013e0:	20000038 	.word	0x20000038
 80013e4:	20000024 	.word	0x20000024
 80013e8:	20000620 	.word	0x20000620
 80013ec:	20000404 	.word	0x20000404
 80013f0:	200003c4 	.word	0x200003c4
 80013f4:	20000418 	.word	0x20000418
 80013f8:	20000438 	.word	0x20000438
 80013fc:	2000035c 	.word	0x2000035c
 8001400:	20000430 	.word	0x20000430
 8001404:	200003c8 	.word	0x200003c8
 8001408:	20000380 	.word	0x20000380
 800140c:	2000042c 	.word	0x2000042c

08001410 <Comb_measurement>:
//    HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
//}


//Combine Measurements
void Comb_measurement(int chip_select) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
//    // Get current time from RTC
//    HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
//    HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);

    // Combine bytes for X-axis
    mag_X[chip_select] = (read_X2[chip_select] << 16) | (read_X1[chip_select] << 8) | read_X0[chip_select];
 8001418:	4a93      	ldr	r2, [pc, #588]	; (8001668 <Comb_measurement+0x258>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	041a      	lsls	r2, r3, #16
 8001422:	4992      	ldr	r1, [pc, #584]	; (800166c <Comb_measurement+0x25c>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	440b      	add	r3, r1
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	021b      	lsls	r3, r3, #8
 800142c:	4313      	orrs	r3, r2
 800142e:	4990      	ldr	r1, [pc, #576]	; (8001670 <Comb_measurement+0x260>)
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	440a      	add	r2, r1
 8001434:	7812      	ldrb	r2, [r2, #0]
 8001436:	4313      	orrs	r3, r2
 8001438:	4619      	mov	r1, r3
 800143a:	4a8e      	ldr	r2, [pc, #568]	; (8001674 <Comb_measurement+0x264>)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // Extend the sign bit for negative values
    signed_mag_X[chip_select] = (mag_X[chip_select] & 0x800000) ? (mag_X[chip_select] | 0xFF000000) : mag_X[chip_select];
 8001442:	4a8c      	ldr	r2, [pc, #560]	; (8001674 <Comb_measurement+0x264>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d007      	beq.n	8001462 <Comb_measurement+0x52>
 8001452:	4a88      	ldr	r2, [pc, #544]	; (8001674 <Comb_measurement+0x264>)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800145e:	4619      	mov	r1, r3
 8001460:	e004      	b.n	800146c <Comb_measurement+0x5c>
 8001462:	4a84      	ldr	r2, [pc, #528]	; (8001674 <Comb_measurement+0x264>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146a:	4619      	mov	r1, r3
 800146c:	4a82      	ldr	r2, [pc, #520]	; (8001678 <Comb_measurement+0x268>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    // Combine bytes for Y-axis
    mag_Y[chip_select] = (read_Y2[chip_select] << 16) | (read_Y1[chip_select] << 8) | read_Y0[chip_select];
 8001474:	4a81      	ldr	r2, [pc, #516]	; (800167c <Comb_measurement+0x26c>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4413      	add	r3, r2
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	041a      	lsls	r2, r3, #16
 800147e:	4980      	ldr	r1, [pc, #512]	; (8001680 <Comb_measurement+0x270>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	440b      	add	r3, r1
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	021b      	lsls	r3, r3, #8
 8001488:	4313      	orrs	r3, r2
 800148a:	497e      	ldr	r1, [pc, #504]	; (8001684 <Comb_measurement+0x274>)
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	440a      	add	r2, r1
 8001490:	7812      	ldrb	r2, [r2, #0]
 8001492:	4313      	orrs	r3, r2
 8001494:	4619      	mov	r1, r3
 8001496:	4a7c      	ldr	r2, [pc, #496]	; (8001688 <Comb_measurement+0x278>)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // Extend the sign bit for negative values
    signed_mag_Y[chip_select] = (mag_Y[chip_select] & 0x800000) ? (mag_Y[chip_select] | 0xFF000000) : mag_Y[chip_select];
 800149e:	4a7a      	ldr	r2, [pc, #488]	; (8001688 <Comb_measurement+0x278>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d007      	beq.n	80014be <Comb_measurement+0xae>
 80014ae:	4a76      	ldr	r2, [pc, #472]	; (8001688 <Comb_measurement+0x278>)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80014ba:	4619      	mov	r1, r3
 80014bc:	e004      	b.n	80014c8 <Comb_measurement+0xb8>
 80014be:	4a72      	ldr	r2, [pc, #456]	; (8001688 <Comb_measurement+0x278>)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c6:	4619      	mov	r1, r3
 80014c8:	4a70      	ldr	r2, [pc, #448]	; (800168c <Comb_measurement+0x27c>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    // Combine bytes for Z-axis
    mag_Z[chip_select] = (read_Z2[chip_select] << 16) | (read_Z1[chip_select] << 8) | read_Z0[chip_select];
 80014d0:	4a6f      	ldr	r2, [pc, #444]	; (8001690 <Comb_measurement+0x280>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	041a      	lsls	r2, r3, #16
 80014da:	496e      	ldr	r1, [pc, #440]	; (8001694 <Comb_measurement+0x284>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	440b      	add	r3, r1
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	4313      	orrs	r3, r2
 80014e6:	496c      	ldr	r1, [pc, #432]	; (8001698 <Comb_measurement+0x288>)
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	440a      	add	r2, r1
 80014ec:	7812      	ldrb	r2, [r2, #0]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	4a6a      	ldr	r2, [pc, #424]	; (800169c <Comb_measurement+0x28c>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // Extend the sign bit for negative values
    signed_mag_Z[chip_select] = (mag_Z[chip_select] & 0x800000) ? (mag_Z[chip_select] | 0xFF000000) : mag_Z[chip_select];
 80014fa:	4a68      	ldr	r2, [pc, #416]	; (800169c <Comb_measurement+0x28c>)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001502:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d007      	beq.n	800151a <Comb_measurement+0x10a>
 800150a:	4a64      	ldr	r2, [pc, #400]	; (800169c <Comb_measurement+0x28c>)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001512:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001516:	4619      	mov	r1, r3
 8001518:	e004      	b.n	8001524 <Comb_measurement+0x114>
 800151a:	4a60      	ldr	r2, [pc, #384]	; (800169c <Comb_measurement+0x28c>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001522:	4619      	mov	r1, r3
 8001524:	4a5e      	ldr	r2, [pc, #376]	; (80016a0 <Comb_measurement+0x290>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    // Calculate magnitude
   // magnitude[chip_select] = sqrt((float)(signed_mag_X[chip_select] * signed_mag_X[chip_select]) + (signed_mag_Y[chip_select] * signed_mag_Y[chip_select]) + (signed_mag_Z[chip_select] * signed_mag_Z[chip_select]));

    // Calculate axis values in float
    X_axis[chip_select] = (float)signed_mag_X[chip_select] / gain;
 800152c:	4a52      	ldr	r2, [pc, #328]	; (8001678 <Comb_measurement+0x268>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fbd1 	bl	8000cdc <__aeabi_i2f>
 800153a:	4602      	mov	r2, r0
 800153c:	4b59      	ldr	r3, [pc, #356]	; (80016a4 <Comb_measurement+0x294>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4619      	mov	r1, r3
 8001542:	4610      	mov	r0, r2
 8001544:	f7ff fcd2 	bl	8000eec <__aeabi_fdiv>
 8001548:	4603      	mov	r3, r0
 800154a:	4619      	mov	r1, r3
 800154c:	4a56      	ldr	r2, [pc, #344]	; (80016a8 <Comb_measurement+0x298>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Y_axis[chip_select] = (float)signed_mag_Y[chip_select] / gain;
 8001554:	4a4d      	ldr	r2, [pc, #308]	; (800168c <Comb_measurement+0x27c>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fbbd 	bl	8000cdc <__aeabi_i2f>
 8001562:	4602      	mov	r2, r0
 8001564:	4b4f      	ldr	r3, [pc, #316]	; (80016a4 <Comb_measurement+0x294>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4619      	mov	r1, r3
 800156a:	4610      	mov	r0, r2
 800156c:	f7ff fcbe 	bl	8000eec <__aeabi_fdiv>
 8001570:	4603      	mov	r3, r0
 8001572:	4619      	mov	r1, r3
 8001574:	4a4d      	ldr	r2, [pc, #308]	; (80016ac <Comb_measurement+0x29c>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Z_axis[chip_select] = (float)signed_mag_Z[chip_select] / gain;
 800157c:	4a48      	ldr	r2, [pc, #288]	; (80016a0 <Comb_measurement+0x290>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fba9 	bl	8000cdc <__aeabi_i2f>
 800158a:	4602      	mov	r2, r0
 800158c:	4b45      	ldr	r3, [pc, #276]	; (80016a4 <Comb_measurement+0x294>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	4610      	mov	r0, r2
 8001594:	f7ff fcaa 	bl	8000eec <__aeabi_fdiv>
 8001598:	4603      	mov	r3, r0
 800159a:	4619      	mov	r1, r3
 800159c:	4a44      	ldr	r2, [pc, #272]	; (80016b0 <Comb_measurement+0x2a0>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    //Converting float axis data in to  integer data
    x_axis[chip_select] = (int16_t)(X_axis[chip_select] * 1000);
 80015a4:	4a40      	ldr	r2, [pc, #256]	; (80016a8 <Comb_measurement+0x298>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ac:	4941      	ldr	r1, [pc, #260]	; (80016b4 <Comb_measurement+0x2a4>)
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fbe8 	bl	8000d84 <__aeabi_fmul>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fd34 	bl	8001024 <__aeabi_f2iz>
 80015bc:	4603      	mov	r3, r0
 80015be:	b21b      	sxth	r3, r3
 80015c0:	b2d9      	uxtb	r1, r3
 80015c2:	4a3d      	ldr	r2, [pc, #244]	; (80016b8 <Comb_measurement+0x2a8>)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4413      	add	r3, r2
 80015c8:	460a      	mov	r2, r1
 80015ca:	701a      	strb	r2, [r3, #0]
    y_axis[chip_select] = (int16_t)(Y_axis[chip_select] * 1000);
 80015cc:	4a37      	ldr	r2, [pc, #220]	; (80016ac <Comb_measurement+0x29c>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d4:	4937      	ldr	r1, [pc, #220]	; (80016b4 <Comb_measurement+0x2a4>)
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fbd4 	bl	8000d84 <__aeabi_fmul>
 80015dc:	4603      	mov	r3, r0
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fd20 	bl	8001024 <__aeabi_f2iz>
 80015e4:	4603      	mov	r3, r0
 80015e6:	b21b      	sxth	r3, r3
 80015e8:	b2d9      	uxtb	r1, r3
 80015ea:	4a34      	ldr	r2, [pc, #208]	; (80016bc <Comb_measurement+0x2ac>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4413      	add	r3, r2
 80015f0:	460a      	mov	r2, r1
 80015f2:	701a      	strb	r2, [r3, #0]
    z_axis[chip_select] = (int16_t)(Z_axis[chip_select] * 1000);
 80015f4:	4a2e      	ldr	r2, [pc, #184]	; (80016b0 <Comb_measurement+0x2a0>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fc:	492d      	ldr	r1, [pc, #180]	; (80016b4 <Comb_measurement+0x2a4>)
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fbc0 	bl	8000d84 <__aeabi_fmul>
 8001604:	4603      	mov	r3, r0
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fd0c 	bl	8001024 <__aeabi_f2iz>
 800160c:	4603      	mov	r3, r0
 800160e:	b21b      	sxth	r3, r3
 8001610:	b2d9      	uxtb	r1, r3
 8001612:	4a2b      	ldr	r2, [pc, #172]	; (80016c0 <Comb_measurement+0x2b0>)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4413      	add	r3, r2
 8001618:	460a      	mov	r2, r1
 800161a:	701a      	strb	r2, [r3, #0]

//    data1[counter++]=x_axis[chip_select];
//    data1[counter++]=y_axis[chip_select];
//    data1[counter++]=z_axis[chip_select];
    HAL_UART_Transmit(&huart2,  x_axis[chip_select], sizeof( x_axis[chip_select]), 1000);
 800161c:	4a26      	ldr	r2, [pc, #152]	; (80016b8 <Comb_measurement+0x2a8>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	4619      	mov	r1, r3
 8001626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800162a:	2201      	movs	r2, #1
 800162c:	4825      	ldr	r0, [pc, #148]	; (80016c4 <Comb_measurement+0x2b4>)
 800162e:	f004 fdbf 	bl	80061b0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2,  y_axis[chip_select], sizeof( y_axis[chip_select]), 1000);
 8001632:	4a22      	ldr	r2, [pc, #136]	; (80016bc <Comb_measurement+0x2ac>)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4413      	add	r3, r2
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	4619      	mov	r1, r3
 800163c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001640:	2201      	movs	r2, #1
 8001642:	4820      	ldr	r0, [pc, #128]	; (80016c4 <Comb_measurement+0x2b4>)
 8001644:	f004 fdb4 	bl	80061b0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2,  z_axis[chip_select], sizeof( z_axis[chip_select]), 1000);
 8001648:	4a1d      	ldr	r2, [pc, #116]	; (80016c0 <Comb_measurement+0x2b0>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4619      	mov	r1, r3
 8001652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001656:	2201      	movs	r2, #1
 8001658:	481a      	ldr	r0, [pc, #104]	; (80016c4 <Comb_measurement+0x2b4>)
 800165a:	f004 fda9 	bl	80061b0 <HAL_UART_Transmit>
      //  myDebug("%.2f %.2f %.2f %.2f ", X_axis[chip_select],Y_axis[chip_select],Z_axis[chip_select],Magnitude[chip_select]);
//    	myDebug("%.2f", x_axis[chip_select]);
//    	myDebug("%.2f", y_axis[chip_select]);
//    	myDebug("%.2f", z_axis[chip_select]);
//        myDebug("%.2f", Magnitude[chip_select]);
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000404 	.word	0x20000404
 800166c:	200003c4 	.word	0x200003c4
 8001670:	20000418 	.word	0x20000418
 8001674:	20000408 	.word	0x20000408
 8001678:	2000033c 	.word	0x2000033c
 800167c:	20000438 	.word	0x20000438
 8001680:	2000035c 	.word	0x2000035c
 8001684:	20000430 	.word	0x20000430
 8001688:	20000264 	.word	0x20000264
 800168c:	2000041c 	.word	0x2000041c
 8001690:	200003c8 	.word	0x200003c8
 8001694:	20000380 	.word	0x20000380
 8001698:	2000042c 	.word	0x2000042c
 800169c:	20000360 	.word	0x20000360
 80016a0:	200003b4 	.word	0x200003b4
 80016a4:	20000000 	.word	0x20000000
 80016a8:	200003a4 	.word	0x200003a4
 80016ac:	20000384 	.word	0x20000384
 80016b0:	2000034c 	.word	0x2000034c
 80016b4:	447a0000 	.word	0x447a0000
 80016b8:	20000400 	.word	0x20000400
 80016bc:	20000434 	.word	0x20000434
 80016c0:	20000260 	.word	0x20000260
 80016c4:	20000678 	.word	0x20000678

080016c8 <READ_DATA>:
//    while (*buffer++ != '\0')
//        i++;
//    return i;
//}

READ_DATA(){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af00      	add	r7, sp, #0
	// Define the command sequence to compare
	uint8_t command[7] = {0x53, 0x0e, 0x0d, 0x0e, 0x01, 0x7e};
 80016ce:	4a3a      	ldr	r2, [pc, #232]	; (80017b8 <READ_DATA+0xf0>)
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016d6:	6018      	str	r0, [r3, #0]
 80016d8:	3304      	adds	r3, #4
 80016da:	8019      	strh	r1, [r3, #0]
 80016dc:	3302      	adds	r3, #2
 80016de:	0c0a      	lsrs	r2, r1, #16
 80016e0:	701a      	strb	r2, [r3, #0]
	uint8_t match = 1;  // Flag to track if the command matches
 80016e2:	2301      	movs	r3, #1
 80016e4:	75fb      	strb	r3, [r7, #23]
	uint32_t startTime = HAL_GetTick();  // Record the start time
 80016e6:	f001 f813 	bl	8002710 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]
	uint32_t maxDuration = 1 * 60 * 1000;  // Maximum duration (1 minute in milliseconds)
 80016ec:	f64e 2360 	movw	r3, #60000	; 0xea60
 80016f0:	60fb      	str	r3, [r7, #12]

	if(HAL_UART_Receive(&huart2, OBC_CMD_RX, sizeof(OBC_CMD_RX),1000)==HAL_OK){
 80016f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f6:	2207      	movs	r2, #7
 80016f8:	4930      	ldr	r1, [pc, #192]	; (80017bc <READ_DATA+0xf4>)
 80016fa:	4831      	ldr	r0, [pc, #196]	; (80017c0 <READ_DATA+0xf8>)
 80016fc:	f004 fdf1 	bl	80062e2 <HAL_UART_Receive>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d153      	bne.n	80017ae <READ_DATA+0xe6>
			if(HAL_UART_Transmit(&huart2, OBC_CMD_RX, sizeof(OBC_CMD_RX), 3000)==HAL_OK){
 8001706:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800170a:	2207      	movs	r2, #7
 800170c:	492b      	ldr	r1, [pc, #172]	; (80017bc <READ_DATA+0xf4>)
 800170e:	482c      	ldr	r0, [pc, #176]	; (80017c0 <READ_DATA+0xf8>)
 8001710:	f004 fd4e 	bl	80061b0 <HAL_UART_Transmit>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d149      	bne.n	80017ae <READ_DATA+0xe6>
				HAL_UART_Transmit(&huart1, "COMMAND RECEIVED\n", sizeof("COMMAND RECEIVED"), 1000);
 800171a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800171e:	2211      	movs	r2, #17
 8001720:	4928      	ldr	r1, [pc, #160]	; (80017c4 <READ_DATA+0xfc>)
 8001722:	4829      	ldr	r0, [pc, #164]	; (80017c8 <READ_DATA+0x100>)
 8001724:	f004 fd44 	bl	80061b0 <HAL_UART_Transmit>
				for(int i = 0; i<4; i++){
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
 800172c:	e00b      	b.n	8001746 <READ_DATA+0x7e>
					SET_COUNT(i);
 800172e:	69f8      	ldr	r0, [r7, #28]
 8001730:	f7ff fcd6 	bl	80010e0 <SET_COUNT>
					Continuous_Mode(i);
 8001734:	69f8      	ldr	r0, [r7, #28]
 8001736:	f7ff fd45 	bl	80011c4 <Continuous_Mode>
					TMRC_Mode(i);
 800173a:	69f8      	ldr	r0, [r7, #28]
 800173c:	f7ff fd86 	bl	800124c <TMRC_Mode>
				for(int i = 0; i<4; i++){
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	3301      	adds	r3, #1
 8001744:	61fb      	str	r3, [r7, #28]
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	2b03      	cmp	r3, #3
 800174a:	ddf0      	ble.n	800172e <READ_DATA+0x66>
				}
				 while (HAL_GetTick() - startTime < maxDuration) {  // Run loop for 1 minute
 800174c:	e01d      	b.n	800178a <READ_DATA+0xc2>
					            for (int i = 0; i < 4; i++) {
 800174e:	2300      	movs	r3, #0
 8001750:	61bb      	str	r3, [r7, #24]
 8001752:	e017      	b.n	8001784 <READ_DATA+0xbc>
					                Mea_Result(i);
 8001754:	69b8      	ldr	r0, [r7, #24]
 8001756:	f7ff fdbd 	bl	80012d4 <Mea_Result>
					                Comb_measurement(i);
 800175a:	69b8      	ldr	r0, [r7, #24]
 800175c:	f7ff fe58 	bl	8001410 <Comb_measurement>
					                HAL_Delay(100);  // Delay 100ms between iterations
 8001760:	2064      	movs	r0, #100	; 0x64
 8001762:	f000 ffdf 	bl	8002724 <HAL_Delay>
					                HAL_UART_Transmit(&huart1, "QUD_MAG IS WORKING\n", sizeof("QUDD_MAG IS WORKING"), 1000);
 8001766:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800176a:	2214      	movs	r2, #20
 800176c:	4917      	ldr	r1, [pc, #92]	; (80017cc <READ_DATA+0x104>)
 800176e:	4816      	ldr	r0, [pc, #88]	; (80017c8 <READ_DATA+0x100>)
 8001770:	f004 fd1e 	bl	80061b0 <HAL_UART_Transmit>
					                counter++;
 8001774:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <READ_DATA+0x108>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	3301      	adds	r3, #1
 800177a:	4a15      	ldr	r2, [pc, #84]	; (80017d0 <READ_DATA+0x108>)
 800177c:	6013      	str	r3, [r2, #0]
					            for (int i = 0; i < 4; i++) {
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	3301      	adds	r3, #1
 8001782:	61bb      	str	r3, [r7, #24]
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	2b03      	cmp	r3, #3
 8001788:	dde4      	ble.n	8001754 <READ_DATA+0x8c>
				 while (HAL_GetTick() - startTime < maxDuration) {  // Run loop for 1 minute
 800178a:	f000 ffc1 	bl	8002710 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	429a      	cmp	r2, r3
 8001798:	d8d9      	bhi.n	800174e <READ_DATA+0x86>
					            }
			}
				uint8_t END[]={0xff, 0xd9};
 800179a:	f64d 13ff 	movw	r3, #55807	; 0xd9ff
 800179e:	803b      	strh	r3, [r7, #0]
				HAL_UART_Transmit(&huart2, END, sizeof(END), 1000);
 80017a0:	4639      	mov	r1, r7
 80017a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a6:	2202      	movs	r2, #2
 80017a8:	4805      	ldr	r0, [pc, #20]	; (80017c0 <READ_DATA+0xf8>)
 80017aa:	f004 fd01 	bl	80061b0 <HAL_UART_Transmit>
//	    }




}
 80017ae:	bf00      	nop
 80017b0:	3720      	adds	r7, #32
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	0800c800 	.word	0x0800c800
 80017bc:	20000040 	.word	0x20000040
 80017c0:	20000678 	.word	0x20000678
 80017c4:	0800c7d8 	.word	0x0800c7d8
 80017c8:	200005b0 	.word	0x200005b0
 80017cc:	0800c7ec 	.word	0x0800c7ec
 80017d0:	20000244 	.word	0x20000244

080017d4 <OBC_HANDSHAKE>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//HANDSHAKE WITH ON-BOARD COMPUTER
uint8_t OBC_HANDSHAKE(){
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
	memset(OBC_HANDSHAKE_RX, '\0', sizeof(OBC_HANDSHAKE_RX));
 80017d8:	2207      	movs	r2, #7
 80017da:	2100      	movs	r1, #0
 80017dc:	4816      	ldr	r0, [pc, #88]	; (8001838 <OBC_HANDSHAKE+0x64>)
 80017de:	f006 fc25 	bl	800802c <memset>
	memset(OBC_HANDSHAKE_TX, '\0', sizeof(OBC_HANDSHAKE_TX));
 80017e2:	2207      	movs	r2, #7
 80017e4:	2100      	movs	r1, #0
 80017e6:	4815      	ldr	r0, [pc, #84]	; (800183c <OBC_HANDSHAKE+0x68>)
 80017e8:	f006 fc20 	bl	800802c <memset>
	OBC_HANDSHAKE_SUCESS = 0;
 80017ec:	4b14      	ldr	r3, [pc, #80]	; (8001840 <OBC_HANDSHAKE+0x6c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
	if(HAL_UART_Receive(&huart2, OBC_HANDSHAKE_RX, sizeof(OBC_HANDSHAKE_RX),1000)==HAL_OK){
 80017f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f6:	2207      	movs	r2, #7
 80017f8:	490f      	ldr	r1, [pc, #60]	; (8001838 <OBC_HANDSHAKE+0x64>)
 80017fa:	4812      	ldr	r0, [pc, #72]	; (8001844 <OBC_HANDSHAKE+0x70>)
 80017fc:	f004 fd71 	bl	80062e2 <HAL_UART_Receive>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d114      	bne.n	8001830 <OBC_HANDSHAKE+0x5c>
		if(HAL_UART_Transmit(&huart2, OBC_HANDSHAKE_RX, sizeof(OBC_HANDSHAKE_RX), 3000)==HAL_OK){
 8001806:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800180a:	2207      	movs	r2, #7
 800180c:	490a      	ldr	r1, [pc, #40]	; (8001838 <OBC_HANDSHAKE+0x64>)
 800180e:	480d      	ldr	r0, [pc, #52]	; (8001844 <OBC_HANDSHAKE+0x70>)
 8001810:	f004 fcce 	bl	80061b0 <HAL_UART_Transmit>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10a      	bne.n	8001830 <OBC_HANDSHAKE+0x5c>
			OBC_HANDSHAKE_SUCESS = 1;
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <OBC_HANDSHAKE+0x6c>)
 800181c:	2201      	movs	r2, #1
 800181e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, "HANDSHAKE SUCCESSFULLY\n", "HANDSHAKE SUCCESSFULLY", 1000);
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <OBC_HANDSHAKE+0x74>)
 8001822:	b29a      	uxth	r2, r3
 8001824:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001828:	4908      	ldr	r1, [pc, #32]	; (800184c <OBC_HANDSHAKE+0x78>)
 800182a:	4809      	ldr	r0, [pc, #36]	; (8001850 <OBC_HANDSHAKE+0x7c>)
 800182c:	f004 fcc0 	bl	80061b0 <HAL_UART_Transmit>
		}
	}
	return OBC_HANDSHAKE_SUCESS;
 8001830:	4b03      	ldr	r3, [pc, #12]	; (8001840 <OBC_HANDSHAKE+0x6c>)
 8001832:	781b      	ldrb	r3, [r3, #0]
}
 8001834:	4618      	mov	r0, r3
 8001836:	bd80      	pop	{r7, pc}
 8001838:	200004dc 	.word	0x200004dc
 800183c:	20000618 	.word	0x20000618
 8001840:	20000252 	.word	0x20000252
 8001844:	20000678 	.word	0x20000678
 8001848:	0800c808 	.word	0x0800c808
 800184c:	0800c820 	.word	0x0800c820
 8001850:	200005b0 	.word	0x200005b0

08001854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800185a:	f000 ff01 	bl	8002660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800185e:	f000 f85b 	bl	8001918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001862:	f000 f9fd 	bl	8001c60 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001866:	f000 f8d3 	bl	8001a10 <MX_SPI1_Init>
  MX_DMA_Init();
 800186a:	f000 f9b3 	bl	8001bd4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800186e:	f000 f965 	bl	8001b3c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001872:	f000 f903 	bl	8001a7c <MX_SPI2_Init>
  MX_USB_PCD_Init();
 8001876:	f000 f98b 	bl	8001b90 <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 800187a:	f000 f935 	bl	8001ae8 <MX_USART1_UART_Init>
  MX_RTC_Init();
 800187e:	f000 f8ab 	bl	80019d8 <MX_RTC_Init>
//while(1){
//	if(HAL_UART_Receive(&huart2,&rx, 1, 1000)==HAL_OK){
//		HAL_UART_Transmit(&huart1, &rx, 1, 1000);
//	}
//}
   while(OBC_HANDSHAKE_SUCESS ==0){
 8001882:	e001      	b.n	8001888 <main+0x34>
  	 OBC_HANDSHAKE();
 8001884:	f7ff ffa6 	bl	80017d4 <OBC_HANDSHAKE>
   while(OBC_HANDSHAKE_SUCESS ==0){
 8001888:	4b1c      	ldr	r3, [pc, #112]	; (80018fc <main+0xa8>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0f9      	beq.n	8001884 <main+0x30>
   }

   while(OBC_CMD_RX_FLAG != 1){
 8001890:	e00e      	b.n	80018b0 <main+0x5c>
  	 OBC_HANDSHAKE();
 8001892:	f7ff ff9f 	bl	80017d4 <OBC_HANDSHAKE>
  	 if(HAL_UART_Receive(&huart2, OBC_HANDSHAKE_RX, sizeof(OBC_HANDSHAKE_RX),1000) >0){
 8001896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189a:	2207      	movs	r2, #7
 800189c:	4918      	ldr	r1, [pc, #96]	; (8001900 <main+0xac>)
 800189e:	4819      	ldr	r0, [pc, #100]	; (8001904 <main+0xb0>)
 80018a0:	f004 fd1f 	bl	80062e2 <HAL_UART_Receive>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <main+0x5c>
  		 OBC_CMD_RX_FLAG = 1;
 80018aa:	4b17      	ldr	r3, [pc, #92]	; (8001908 <main+0xb4>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	701a      	strb	r2, [r3, #0]
   while(OBC_CMD_RX_FLAG != 1){
 80018b0:	4b15      	ldr	r3, [pc, #84]	; (8001908 <main+0xb4>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d1ec      	bne.n	8001892 <main+0x3e>
  	 }

   }

  HAL_GPIO_WritePin(GPIOB, MSN_EN1_Pin, SET); // Set PB9 high
 80018b8:	2201      	movs	r2, #1
 80018ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018be:	4813      	ldr	r0, [pc, #76]	; (800190c <main+0xb8>)
 80018c0:	f001 fd3e 	bl	8003340 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, MSN_EN2_Pin, SET); // Set PB8 high
 80018c4:	2201      	movs	r2, #1
 80018c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018ca:	4810      	ldr	r0, [pc, #64]	; (800190c <main+0xb8>)
 80018cc:	f001 fd38 	bl	8003340 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, MSN_EN3_Pin, SET); // Set PA15 high
 80018d0:	2201      	movs	r2, #1
 80018d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018d6:	480d      	ldr	r0, [pc, #52]	; (800190c <main+0xb8>)
 80018d8:	f001 fd32 	bl	8003340 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, MSN_EN4_Pin, SET); // Set PA8 high
 80018dc:	2201      	movs	r2, #1
 80018de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018e2:	480a      	ldr	r0, [pc, #40]	; (800190c <main+0xb8>)
 80018e4:	f001 fd2c 	bl	8003340 <HAL_GPIO_WritePin>
  uint8_t data[20];
// Read_ID(&hspi2, GPIOB, GPIO_PIN_12, data);
 //   HAL_Delay(100);
    HAL_UART_Transmit(&huart1, "STARTING DATA READING", sizeof("STARTING DATA READING"), 1000);
 80018e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ec:	2216      	movs	r2, #22
 80018ee:	4908      	ldr	r1, [pc, #32]	; (8001910 <main+0xbc>)
 80018f0:	4808      	ldr	r0, [pc, #32]	; (8001914 <main+0xc0>)
 80018f2:	f004 fc5d 	bl	80061b0 <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  READ_DATA();
 80018f6:	f7ff fee7 	bl	80016c8 <READ_DATA>
 80018fa:	e7fc      	b.n	80018f6 <main+0xa2>
 80018fc:	20000252 	.word	0x20000252
 8001900:	200004dc 	.word	0x200004dc
 8001904:	20000678 	.word	0x20000678
 8001908:	20000251 	.word	0x20000251
 800190c:	40010c00 	.word	0x40010c00
 8001910:	0800c838 	.word	0x0800c838
 8001914:	200005b0 	.word	0x200005b0

08001918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b094      	sub	sp, #80	; 0x50
 800191c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800191e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001922:	2228      	movs	r2, #40	; 0x28
 8001924:	2100      	movs	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f006 fb80 	bl	800802c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001948:	2309      	movs	r3, #9
 800194a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800194c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001952:	2300      	movs	r3, #0
 8001954:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001956:	2301      	movs	r3, #1
 8001958:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800195a:	2301      	movs	r3, #1
 800195c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800195e:	2302      	movs	r3, #2
 8001960:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001962:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001966:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001968:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800196c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800196e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001972:	4618      	mov	r0, r3
 8001974:	f002 fe94 	bl	80046a0 <HAL_RCC_OscConfig>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800197e:	f000 f9e1 	bl	8001d44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001982:	230f      	movs	r3, #15
 8001984:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001986:	2302      	movs	r3, #2
 8001988:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800198e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001992:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001994:	2300      	movs	r3, #0
 8001996:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	2101      	movs	r1, #1
 800199e:	4618      	mov	r0, r3
 80019a0:	f003 f8fe 	bl	8004ba0 <HAL_RCC_ClockConfig>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80019aa:	f000 f9cb 	bl	8001d44 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 80019ae:	2311      	movs	r3, #17
 80019b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80019b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019b6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80019b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019bc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	4618      	mov	r0, r3
 80019c2:	f003 fa87 	bl	8004ed4 <HAL_RCCEx_PeriphCLKConfig>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80019cc:	f000 f9ba 	bl	8001d44 <Error_Handler>
  }
}
 80019d0:	bf00      	nop
 80019d2:	3750      	adds	r7, #80	; 0x50
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80019dc:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <MX_RTC_Init+0x30>)
 80019de:	4a0b      	ldr	r2, [pc, #44]	; (8001a0c <MX_RTC_Init+0x34>)
 80019e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <MX_RTC_Init+0x30>)
 80019e4:	f04f 32ff 	mov.w	r2, #4294967295
 80019e8:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80019ea:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <MX_RTC_Init+0x30>)
 80019ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019f0:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019f2:	4805      	ldr	r0, [pc, #20]	; (8001a08 <MX_RTC_Init+0x30>)
 80019f4:	f003 fbe8 	bl	80051c8 <HAL_RTC_Init>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 80019fe:	f000 f9a1 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200005f0 	.word	0x200005f0
 8001a0c:	40002800 	.word	0x40002800

08001a10 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a14:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <MX_SPI1_Init+0x64>)
 8001a16:	4a18      	ldr	r2, [pc, #96]	; (8001a78 <MX_SPI1_Init+0x68>)
 8001a18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a1a:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <MX_SPI1_Init+0x64>)
 8001a1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a22:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <MX_SPI1_Init+0x64>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <MX_SPI1_Init+0x64>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a2e:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <MX_SPI1_Init+0x64>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <MX_SPI1_Init+0x64>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <MX_SPI1_Init+0x64>)
 8001a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a40:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001a42:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <MX_SPI1_Init+0x64>)
 8001a44:	2220      	movs	r2, #32
 8001a46:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a48:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <MX_SPI1_Init+0x64>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <MX_SPI1_Init+0x64>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a54:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <MX_SPI1_Init+0x64>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a5a:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <MX_SPI1_Init+0x64>)
 8001a5c:	220a      	movs	r2, #10
 8001a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a60:	4804      	ldr	r0, [pc, #16]	; (8001a74 <MX_SPI1_Init+0x64>)
 8001a62:	f003 fd3b 	bl	80054dc <HAL_SPI_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a6c:	f000 f96a 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000620 	.word	0x20000620
 8001a78:	40013000 	.word	0x40013000

08001a7c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a80:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001a82:	4a18      	ldr	r2, [pc, #96]	; (8001ae4 <MX_SPI2_Init+0x68>)
 8001a84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a86:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001a88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a8c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a8e:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001aa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001aae:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001ab0:	2218      	movs	r2, #24
 8001ab2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ac0:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001ac8:	220a      	movs	r2, #10
 8001aca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001acc:	4804      	ldr	r0, [pc, #16]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001ace:	f003 fd05 	bl	80054dc <HAL_SPI_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ad8:	f000 f934 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000484 	.word	0x20000484
 8001ae4:	40003800 	.word	0x40003800

08001ae8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <MX_USART1_UART_Init+0x4c>)
 8001aee:	4a12      	ldr	r2, [pc, #72]	; (8001b38 <MX_USART1_UART_Init+0x50>)
 8001af0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <MX_USART1_UART_Init+0x4c>)
 8001af4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001af8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <MX_USART1_UART_Init+0x4c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <MX_USART1_UART_Init+0x4c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <MX_USART1_UART_Init+0x4c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b0c:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <MX_USART1_UART_Init+0x4c>)
 8001b0e:	220c      	movs	r2, #12
 8001b10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b12:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <MX_USART1_UART_Init+0x4c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <MX_USART1_UART_Init+0x4c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b1e:	4805      	ldr	r0, [pc, #20]	; (8001b34 <MX_USART1_UART_Init+0x4c>)
 8001b20:	f004 faf9 	bl	8006116 <HAL_UART_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b2a:	f000 f90b 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200005b0 	.word	0x200005b0
 8001b38:	40013800 	.word	0x40013800

08001b3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b40:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <MX_USART2_UART_Init+0x4c>)
 8001b42:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <MX_USART2_UART_Init+0x50>)
 8001b44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <MX_USART2_UART_Init+0x4c>)
 8001b48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <MX_USART2_UART_Init+0x4c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <MX_USART2_UART_Init+0x4c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <MX_USART2_UART_Init+0x4c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <MX_USART2_UART_Init+0x4c>)
 8001b62:	220c      	movs	r2, #12
 8001b64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b66:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <MX_USART2_UART_Init+0x4c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <MX_USART2_UART_Init+0x4c>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b72:	4805      	ldr	r0, [pc, #20]	; (8001b88 <MX_USART2_UART_Init+0x4c>)
 8001b74:	f004 facf 	bl	8006116 <HAL_UART_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b7e:	f000 f8e1 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000678 	.word	0x20000678
 8001b8c:	40004400 	.word	0x40004400

08001b90 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001b94:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <MX_USB_PCD_Init+0x3c>)
 8001b96:	4a0e      	ldr	r2, [pc, #56]	; (8001bd0 <MX_USB_PCD_Init+0x40>)
 8001b98:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001b9a:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <MX_USB_PCD_Init+0x3c>)
 8001b9c:	2208      	movs	r2, #8
 8001b9e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001ba0:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <MX_USB_PCD_Init+0x3c>)
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <MX_USB_PCD_Init+0x3c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001bac:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <MX_USB_PCD_Init+0x3c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <MX_USB_PCD_Init+0x3c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001bb8:	4804      	ldr	r0, [pc, #16]	; (8001bcc <MX_USB_PCD_Init+0x3c>)
 8001bba:	f001 fbd9 	bl	8003370 <HAL_PCD_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001bc4:	f000 f8be 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	200006fc 	.word	0x200006fc
 8001bd0:	40005c00 	.word	0x40005c00

08001bd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bda:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <MX_DMA_Init+0x88>)
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	4a1f      	ldr	r2, [pc, #124]	; (8001c5c <MX_DMA_Init+0x88>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	6153      	str	r3, [r2, #20]
 8001be6:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <MX_DMA_Init+0x88>)
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	607b      	str	r3, [r7, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	200c      	movs	r0, #12
 8001bf8:	f000 fe8f 	bl	800291a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001bfc:	200c      	movs	r0, #12
 8001bfe:	f000 fea8 	bl	8002952 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001c02:	2200      	movs	r2, #0
 8001c04:	2100      	movs	r1, #0
 8001c06:	200d      	movs	r0, #13
 8001c08:	f000 fe87 	bl	800291a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001c0c:	200d      	movs	r0, #13
 8001c0e:	f000 fea0 	bl	8002952 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2100      	movs	r1, #0
 8001c16:	200e      	movs	r0, #14
 8001c18:	f000 fe7f 	bl	800291a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001c1c:	200e      	movs	r0, #14
 8001c1e:	f000 fe98 	bl	8002952 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001c22:	2200      	movs	r2, #0
 8001c24:	2100      	movs	r1, #0
 8001c26:	200f      	movs	r0, #15
 8001c28:	f000 fe77 	bl	800291a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001c2c:	200f      	movs	r0, #15
 8001c2e:	f000 fe90 	bl	8002952 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2100      	movs	r1, #0
 8001c36:	2010      	movs	r0, #16
 8001c38:	f000 fe6f 	bl	800291a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001c3c:	2010      	movs	r0, #16
 8001c3e:	f000 fe88 	bl	8002952 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2100      	movs	r1, #0
 8001c46:	2011      	movs	r0, #17
 8001c48:	f000 fe67 	bl	800291a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001c4c:	2011      	movs	r0, #17
 8001c4e:	f000 fe80 	bl	8002952 <HAL_NVIC_EnableIRQ>

}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40021000 	.word	0x40021000

08001c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c66:	f107 0310 	add.w	r3, r7, #16
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c74:	4b30      	ldr	r3, [pc, #192]	; (8001d38 <MX_GPIO_Init+0xd8>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	4a2f      	ldr	r2, [pc, #188]	; (8001d38 <MX_GPIO_Init+0xd8>)
 8001c7a:	f043 0320 	orr.w	r3, r3, #32
 8001c7e:	6193      	str	r3, [r2, #24]
 8001c80:	4b2d      	ldr	r3, [pc, #180]	; (8001d38 <MX_GPIO_Init+0xd8>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f003 0320 	and.w	r3, r3, #32
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8c:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <MX_GPIO_Init+0xd8>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	4a29      	ldr	r2, [pc, #164]	; (8001d38 <MX_GPIO_Init+0xd8>)
 8001c92:	f043 0304 	orr.w	r3, r3, #4
 8001c96:	6193      	str	r3, [r2, #24]
 8001c98:	4b27      	ldr	r3, [pc, #156]	; (8001d38 <MX_GPIO_Init+0xd8>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca4:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <MX_GPIO_Init+0xd8>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	4a23      	ldr	r2, [pc, #140]	; (8001d38 <MX_GPIO_Init+0xd8>)
 8001caa:	f043 0308 	orr.w	r3, r3, #8
 8001cae:	6193      	str	r3, [r2, #24]
 8001cb0:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <MX_GPIO_Init+0xd8>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	607b      	str	r3, [r7, #4]
 8001cba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS1_Pin|SS2_Pin|SS3_Pin|SS4_Pin
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f241 717f 	movw	r1, #6015	; 0x177f
 8001cc2:	481e      	ldr	r0, [pc, #120]	; (8001d3c <MX_GPIO_Init+0xdc>)
 8001cc4:	f001 fb3c 	bl	8003340 <HAL_GPIO_WritePin>
                          |SS_FM_Pin|DRDY4_Pin|DRDY3_Pin|DRDY2_Pin
                          |DRDY1_Pin|MSN_EN3_Pin|MSN_EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MSN_EN4_Pin|MSN_EN2_Pin, GPIO_PIN_RESET);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8001cce:	481c      	ldr	r0, [pc, #112]	; (8001d40 <MX_GPIO_Init+0xe0>)
 8001cd0:	f001 fb36 	bl	8003340 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SS1_Pin SS2_Pin SS3_Pin SS4_Pin
                           SS_FM_Pin DRDY4_Pin DRDY3_Pin DRDY2_Pin
                           DRDY1_Pin */
  GPIO_InitStruct.Pin = SS1_Pin|SS2_Pin|SS3_Pin|SS4_Pin
 8001cd4:	f241 437f 	movw	r3, #5247	; 0x147f
 8001cd8:	613b      	str	r3, [r7, #16]
                          |SS_FM_Pin|DRDY4_Pin|DRDY3_Pin|DRDY2_Pin
                          |DRDY1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce6:	f107 0310 	add.w	r3, r7, #16
 8001cea:	4619      	mov	r1, r3
 8001cec:	4813      	ldr	r0, [pc, #76]	; (8001d3c <MX_GPIO_Init+0xdc>)
 8001cee:	f001 f9a3 	bl	8003038 <HAL_GPIO_Init>

  /*Configure GPIO pins : MSN_EN4_Pin MSN_EN2_Pin */
  GPIO_InitStruct.Pin = MSN_EN4_Pin|MSN_EN2_Pin;
 8001cf2:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001cf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d00:	2302      	movs	r3, #2
 8001d02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d04:	f107 0310 	add.w	r3, r7, #16
 8001d08:	4619      	mov	r1, r3
 8001d0a:	480d      	ldr	r0, [pc, #52]	; (8001d40 <MX_GPIO_Init+0xe0>)
 8001d0c:	f001 f994 	bl	8003038 <HAL_GPIO_Init>

  /*Configure GPIO pins : MSN_EN3_Pin MSN_EN1_Pin */
  GPIO_InitStruct.Pin = MSN_EN3_Pin|MSN_EN1_Pin;
 8001d10:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d16:	2301      	movs	r3, #1
 8001d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d22:	f107 0310 	add.w	r3, r7, #16
 8001d26:	4619      	mov	r1, r3
 8001d28:	4804      	ldr	r0, [pc, #16]	; (8001d3c <MX_GPIO_Init+0xdc>)
 8001d2a:	f001 f985 	bl	8003038 <HAL_GPIO_Init>

}
 8001d2e:	bf00      	nop
 8001d30:	3720      	adds	r7, #32
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40010c00 	.word	0x40010c00
 8001d40:	40010800 	.word	0x40010800

08001d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d48:	b672      	cpsid	i
}
 8001d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <Error_Handler+0x8>
	...

08001d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d56:	4b21      	ldr	r3, [pc, #132]	; (8001ddc <HAL_MspInit+0x8c>)
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	4a20      	ldr	r2, [pc, #128]	; (8001ddc <HAL_MspInit+0x8c>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	6193      	str	r3, [r2, #24]
 8001d62:	4b1e      	ldr	r3, [pc, #120]	; (8001ddc <HAL_MspInit+0x8c>)
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6e:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <HAL_MspInit+0x8c>)
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	4a1a      	ldr	r2, [pc, #104]	; (8001ddc <HAL_MspInit+0x8c>)
 8001d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d78:	61d3      	str	r3, [r2, #28]
 8001d7a:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <HAL_MspInit+0x8c>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2100      	movs	r1, #0
 8001d8a:	2001      	movs	r0, #1
 8001d8c:	f000 fdc5 	bl	800291a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001d90:	2001      	movs	r0, #1
 8001d92:	f000 fdde 	bl	8002952 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8001d96:	2200      	movs	r2, #0
 8001d98:	2100      	movs	r1, #0
 8001d9a:	2004      	movs	r0, #4
 8001d9c:	f000 fdbd 	bl	800291a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001da0:	2004      	movs	r0, #4
 8001da2:	f000 fdd6 	bl	8002952 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001da6:	2200      	movs	r2, #0
 8001da8:	2100      	movs	r1, #0
 8001daa:	2005      	movs	r0, #5
 8001dac:	f000 fdb5 	bl	800291a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001db0:	2005      	movs	r0, #5
 8001db2:	f000 fdce 	bl	8002952 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001db6:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <HAL_MspInit+0x90>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	4a04      	ldr	r2, [pc, #16]	; (8001de0 <HAL_MspInit+0x90>)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40010000 	.word	0x40010000

08001de4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a13      	ldr	r2, [pc, #76]	; (8001e40 <HAL_RTC_MspInit+0x5c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d120      	bne.n	8001e38 <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001df6:	f002 fc2f 	bl	8004658 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001dfa:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_RTC_MspInit+0x60>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	4a11      	ldr	r2, [pc, #68]	; (8001e44 <HAL_RTC_MspInit+0x60>)
 8001e00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e04:	61d3      	str	r3, [r2, #28]
 8001e06:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <HAL_RTC_MspInit+0x60>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e12:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <HAL_RTC_MspInit+0x64>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	2003      	movs	r0, #3
 8001e1e:	f000 fd7c 	bl	800291a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001e22:	2003      	movs	r0, #3
 8001e24:	f000 fd95 	bl	8002952 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	2029      	movs	r0, #41	; 0x29
 8001e2e:	f000 fd74 	bl	800291a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001e32:	2029      	movs	r0, #41	; 0x29
 8001e34:	f000 fd8d 	bl	8002952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001e38:	bf00      	nop
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40002800 	.word	0x40002800
 8001e44:	40021000 	.word	0x40021000
 8001e48:	4242043c 	.word	0x4242043c

08001e4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	; 0x28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	f107 0318 	add.w	r3, r7, #24
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a66      	ldr	r2, [pc, #408]	; (8002000 <HAL_SPI_MspInit+0x1b4>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	f040 8085 	bne.w	8001f78 <HAL_SPI_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e6e:	4b65      	ldr	r3, [pc, #404]	; (8002004 <HAL_SPI_MspInit+0x1b8>)
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	4a64      	ldr	r2, [pc, #400]	; (8002004 <HAL_SPI_MspInit+0x1b8>)
 8001e74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e78:	6193      	str	r3, [r2, #24]
 8001e7a:	4b62      	ldr	r3, [pc, #392]	; (8002004 <HAL_SPI_MspInit+0x1b8>)
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e86:	4b5f      	ldr	r3, [pc, #380]	; (8002004 <HAL_SPI_MspInit+0x1b8>)
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	4a5e      	ldr	r2, [pc, #376]	; (8002004 <HAL_SPI_MspInit+0x1b8>)
 8001e8c:	f043 0304 	orr.w	r3, r3, #4
 8001e90:	6193      	str	r3, [r2, #24]
 8001e92:	4b5c      	ldr	r3, [pc, #368]	; (8002004 <HAL_SPI_MspInit+0x1b8>)
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	f003 0304 	and.w	r3, r3, #4
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001e9e:	23a0      	movs	r3, #160	; 0xa0
 8001ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eaa:	f107 0318 	add.w	r3, r7, #24
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4855      	ldr	r0, [pc, #340]	; (8002008 <HAL_SPI_MspInit+0x1bc>)
 8001eb2:	f001 f8c1 	bl	8003038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001eb6:	2340      	movs	r3, #64	; 0x40
 8001eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec2:	f107 0318 	add.w	r3, r7, #24
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	484f      	ldr	r0, [pc, #316]	; (8002008 <HAL_SPI_MspInit+0x1bc>)
 8001eca:	f001 f8b5 	bl	8003038 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001ece:	4b4f      	ldr	r3, [pc, #316]	; (800200c <HAL_SPI_MspInit+0x1c0>)
 8001ed0:	4a4f      	ldr	r2, [pc, #316]	; (8002010 <HAL_SPI_MspInit+0x1c4>)
 8001ed2:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ed4:	4b4d      	ldr	r3, [pc, #308]	; (800200c <HAL_SPI_MspInit+0x1c0>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eda:	4b4c      	ldr	r3, [pc, #304]	; (800200c <HAL_SPI_MspInit+0x1c0>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ee0:	4b4a      	ldr	r3, [pc, #296]	; (800200c <HAL_SPI_MspInit+0x1c0>)
 8001ee2:	2280      	movs	r2, #128	; 0x80
 8001ee4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ee6:	4b49      	ldr	r3, [pc, #292]	; (800200c <HAL_SPI_MspInit+0x1c0>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001eec:	4b47      	ldr	r3, [pc, #284]	; (800200c <HAL_SPI_MspInit+0x1c0>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001ef2:	4b46      	ldr	r3, [pc, #280]	; (800200c <HAL_SPI_MspInit+0x1c0>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ef8:	4b44      	ldr	r3, [pc, #272]	; (800200c <HAL_SPI_MspInit+0x1c0>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001efe:	4843      	ldr	r0, [pc, #268]	; (800200c <HAL_SPI_MspInit+0x1c0>)
 8001f00:	f000 fd42 	bl	8002988 <HAL_DMA_Init>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_SPI_MspInit+0xc2>
    {
      Error_Handler();
 8001f0a:	f7ff ff1b 	bl	8001d44 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a3e      	ldr	r2, [pc, #248]	; (800200c <HAL_SPI_MspInit+0x1c0>)
 8001f12:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f14:	4a3d      	ldr	r2, [pc, #244]	; (800200c <HAL_SPI_MspInit+0x1c0>)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001f1a:	4b3e      	ldr	r3, [pc, #248]	; (8002014 <HAL_SPI_MspInit+0x1c8>)
 8001f1c:	4a3e      	ldr	r2, [pc, #248]	; (8002018 <HAL_SPI_MspInit+0x1cc>)
 8001f1e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f20:	4b3c      	ldr	r3, [pc, #240]	; (8002014 <HAL_SPI_MspInit+0x1c8>)
 8001f22:	2210      	movs	r2, #16
 8001f24:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f26:	4b3b      	ldr	r3, [pc, #236]	; (8002014 <HAL_SPI_MspInit+0x1c8>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f2c:	4b39      	ldr	r3, [pc, #228]	; (8002014 <HAL_SPI_MspInit+0x1c8>)
 8001f2e:	2280      	movs	r2, #128	; 0x80
 8001f30:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f32:	4b38      	ldr	r3, [pc, #224]	; (8002014 <HAL_SPI_MspInit+0x1c8>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f38:	4b36      	ldr	r3, [pc, #216]	; (8002014 <HAL_SPI_MspInit+0x1c8>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001f3e:	4b35      	ldr	r3, [pc, #212]	; (8002014 <HAL_SPI_MspInit+0x1c8>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f44:	4b33      	ldr	r3, [pc, #204]	; (8002014 <HAL_SPI_MspInit+0x1c8>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001f4a:	4832      	ldr	r0, [pc, #200]	; (8002014 <HAL_SPI_MspInit+0x1c8>)
 8001f4c:	f000 fd1c 	bl	8002988 <HAL_DMA_Init>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 8001f56:	f7ff fef5 	bl	8001d44 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a2d      	ldr	r2, [pc, #180]	; (8002014 <HAL_SPI_MspInit+0x1c8>)
 8001f5e:	649a      	str	r2, [r3, #72]	; 0x48
 8001f60:	4a2c      	ldr	r2, [pc, #176]	; (8002014 <HAL_SPI_MspInit+0x1c8>)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2100      	movs	r1, #0
 8001f6a:	2023      	movs	r0, #35	; 0x23
 8001f6c:	f000 fcd5 	bl	800291a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001f70:	2023      	movs	r0, #35	; 0x23
 8001f72:	f000 fcee 	bl	8002952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001f76:	e03e      	b.n	8001ff6 <HAL_SPI_MspInit+0x1aa>
  else if(hspi->Instance==SPI2)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a27      	ldr	r2, [pc, #156]	; (800201c <HAL_SPI_MspInit+0x1d0>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d139      	bne.n	8001ff6 <HAL_SPI_MspInit+0x1aa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f82:	4b20      	ldr	r3, [pc, #128]	; (8002004 <HAL_SPI_MspInit+0x1b8>)
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	4a1f      	ldr	r2, [pc, #124]	; (8002004 <HAL_SPI_MspInit+0x1b8>)
 8001f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f8c:	61d3      	str	r3, [r2, #28]
 8001f8e:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <HAL_SPI_MspInit+0x1b8>)
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <HAL_SPI_MspInit+0x1b8>)
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	4a19      	ldr	r2, [pc, #100]	; (8002004 <HAL_SPI_MspInit+0x1b8>)
 8001fa0:	f043 0308 	orr.w	r3, r3, #8
 8001fa4:	6193      	str	r3, [r2, #24]
 8001fa6:	4b17      	ldr	r3, [pc, #92]	; (8002004 <HAL_SPI_MspInit+0x1b8>)
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001fb2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc0:	f107 0318 	add.w	r3, r7, #24
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4816      	ldr	r0, [pc, #88]	; (8002020 <HAL_SPI_MspInit+0x1d4>)
 8001fc8:	f001 f836 	bl	8003038 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001fcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fda:	f107 0318 	add.w	r3, r7, #24
 8001fde:	4619      	mov	r1, r3
 8001fe0:	480f      	ldr	r0, [pc, #60]	; (8002020 <HAL_SPI_MspInit+0x1d4>)
 8001fe2:	f001 f829 	bl	8003038 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2100      	movs	r1, #0
 8001fea:	2024      	movs	r0, #36	; 0x24
 8001fec:	f000 fc95 	bl	800291a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001ff0:	2024      	movs	r0, #36	; 0x24
 8001ff2:	f000 fcae 	bl	8002952 <HAL_NVIC_EnableIRQ>
}
 8001ff6:	bf00      	nop
 8001ff8:	3728      	adds	r7, #40	; 0x28
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40013000 	.word	0x40013000
 8002004:	40021000 	.word	0x40021000
 8002008:	40010800 	.word	0x40010800
 800200c:	200006b8 	.word	0x200006b8
 8002010:	4002001c 	.word	0x4002001c
 8002014:	200009e8 	.word	0x200009e8
 8002018:	40020030 	.word	0x40020030
 800201c:	40003800 	.word	0x40003800
 8002020:	40010c00 	.word	0x40010c00

08002024 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08a      	sub	sp, #40	; 0x28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 0318 	add.w	r3, r7, #24
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a8c      	ldr	r2, [pc, #560]	; (8002270 <HAL_UART_MspInit+0x24c>)
 8002040:	4293      	cmp	r3, r2
 8002042:	f040 8087 	bne.w	8002154 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002046:	4b8b      	ldr	r3, [pc, #556]	; (8002274 <HAL_UART_MspInit+0x250>)
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	4a8a      	ldr	r2, [pc, #552]	; (8002274 <HAL_UART_MspInit+0x250>)
 800204c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002050:	6193      	str	r3, [r2, #24]
 8002052:	4b88      	ldr	r3, [pc, #544]	; (8002274 <HAL_UART_MspInit+0x250>)
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205e:	4b85      	ldr	r3, [pc, #532]	; (8002274 <HAL_UART_MspInit+0x250>)
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	4a84      	ldr	r2, [pc, #528]	; (8002274 <HAL_UART_MspInit+0x250>)
 8002064:	f043 0304 	orr.w	r3, r3, #4
 8002068:	6193      	str	r3, [r2, #24]
 800206a:	4b82      	ldr	r3, [pc, #520]	; (8002274 <HAL_UART_MspInit+0x250>)
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002076:	f44f 7300 	mov.w	r3, #512	; 0x200
 800207a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207c:	2302      	movs	r3, #2
 800207e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002080:	2303      	movs	r3, #3
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002084:	f107 0318 	add.w	r3, r7, #24
 8002088:	4619      	mov	r1, r3
 800208a:	487b      	ldr	r0, [pc, #492]	; (8002278 <HAL_UART_MspInit+0x254>)
 800208c:	f000 ffd4 	bl	8003038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002090:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002096:	2300      	movs	r3, #0
 8002098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209e:	f107 0318 	add.w	r3, r7, #24
 80020a2:	4619      	mov	r1, r3
 80020a4:	4874      	ldr	r0, [pc, #464]	; (8002278 <HAL_UART_MspInit+0x254>)
 80020a6:	f000 ffc7 	bl	8003038 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80020aa:	4b74      	ldr	r3, [pc, #464]	; (800227c <HAL_UART_MspInit+0x258>)
 80020ac:	4a74      	ldr	r2, [pc, #464]	; (8002280 <HAL_UART_MspInit+0x25c>)
 80020ae:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020b0:	4b72      	ldr	r3, [pc, #456]	; (800227c <HAL_UART_MspInit+0x258>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020b6:	4b71      	ldr	r3, [pc, #452]	; (800227c <HAL_UART_MspInit+0x258>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020bc:	4b6f      	ldr	r3, [pc, #444]	; (800227c <HAL_UART_MspInit+0x258>)
 80020be:	2280      	movs	r2, #128	; 0x80
 80020c0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020c2:	4b6e      	ldr	r3, [pc, #440]	; (800227c <HAL_UART_MspInit+0x258>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020c8:	4b6c      	ldr	r3, [pc, #432]	; (800227c <HAL_UART_MspInit+0x258>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80020ce:	4b6b      	ldr	r3, [pc, #428]	; (800227c <HAL_UART_MspInit+0x258>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020d4:	4b69      	ldr	r3, [pc, #420]	; (800227c <HAL_UART_MspInit+0x258>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80020da:	4868      	ldr	r0, [pc, #416]	; (800227c <HAL_UART_MspInit+0x258>)
 80020dc:	f000 fc54 	bl	8002988 <HAL_DMA_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80020e6:	f7ff fe2d 	bl	8001d44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a63      	ldr	r2, [pc, #396]	; (800227c <HAL_UART_MspInit+0x258>)
 80020ee:	635a      	str	r2, [r3, #52]	; 0x34
 80020f0:	4a62      	ldr	r2, [pc, #392]	; (800227c <HAL_UART_MspInit+0x258>)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80020f6:	4b63      	ldr	r3, [pc, #396]	; (8002284 <HAL_UART_MspInit+0x260>)
 80020f8:	4a63      	ldr	r2, [pc, #396]	; (8002288 <HAL_UART_MspInit+0x264>)
 80020fa:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020fc:	4b61      	ldr	r3, [pc, #388]	; (8002284 <HAL_UART_MspInit+0x260>)
 80020fe:	2210      	movs	r2, #16
 8002100:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002102:	4b60      	ldr	r3, [pc, #384]	; (8002284 <HAL_UART_MspInit+0x260>)
 8002104:	2200      	movs	r2, #0
 8002106:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002108:	4b5e      	ldr	r3, [pc, #376]	; (8002284 <HAL_UART_MspInit+0x260>)
 800210a:	2280      	movs	r2, #128	; 0x80
 800210c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800210e:	4b5d      	ldr	r3, [pc, #372]	; (8002284 <HAL_UART_MspInit+0x260>)
 8002110:	2200      	movs	r2, #0
 8002112:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002114:	4b5b      	ldr	r3, [pc, #364]	; (8002284 <HAL_UART_MspInit+0x260>)
 8002116:	2200      	movs	r2, #0
 8002118:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800211a:	4b5a      	ldr	r3, [pc, #360]	; (8002284 <HAL_UART_MspInit+0x260>)
 800211c:	2200      	movs	r2, #0
 800211e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002120:	4b58      	ldr	r3, [pc, #352]	; (8002284 <HAL_UART_MspInit+0x260>)
 8002122:	2200      	movs	r2, #0
 8002124:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002126:	4857      	ldr	r0, [pc, #348]	; (8002284 <HAL_UART_MspInit+0x260>)
 8002128:	f000 fc2e 	bl	8002988 <HAL_DMA_Init>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8002132:	f7ff fe07 	bl	8001d44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a52      	ldr	r2, [pc, #328]	; (8002284 <HAL_UART_MspInit+0x260>)
 800213a:	631a      	str	r2, [r3, #48]	; 0x30
 800213c:	4a51      	ldr	r2, [pc, #324]	; (8002284 <HAL_UART_MspInit+0x260>)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002142:	2200      	movs	r2, #0
 8002144:	2100      	movs	r1, #0
 8002146:	2025      	movs	r0, #37	; 0x25
 8002148:	f000 fbe7 	bl	800291a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800214c:	2025      	movs	r0, #37	; 0x25
 800214e:	f000 fc00 	bl	8002952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002152:	e089      	b.n	8002268 <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a4c      	ldr	r2, [pc, #304]	; (800228c <HAL_UART_MspInit+0x268>)
 800215a:	4293      	cmp	r3, r2
 800215c:	f040 8084 	bne.w	8002268 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002160:	4b44      	ldr	r3, [pc, #272]	; (8002274 <HAL_UART_MspInit+0x250>)
 8002162:	69db      	ldr	r3, [r3, #28]
 8002164:	4a43      	ldr	r2, [pc, #268]	; (8002274 <HAL_UART_MspInit+0x250>)
 8002166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800216a:	61d3      	str	r3, [r2, #28]
 800216c:	4b41      	ldr	r3, [pc, #260]	; (8002274 <HAL_UART_MspInit+0x250>)
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002178:	4b3e      	ldr	r3, [pc, #248]	; (8002274 <HAL_UART_MspInit+0x250>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	4a3d      	ldr	r2, [pc, #244]	; (8002274 <HAL_UART_MspInit+0x250>)
 800217e:	f043 0304 	orr.w	r3, r3, #4
 8002182:	6193      	str	r3, [r2, #24]
 8002184:	4b3b      	ldr	r3, [pc, #236]	; (8002274 <HAL_UART_MspInit+0x250>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002190:	2304      	movs	r3, #4
 8002192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002198:	2303      	movs	r3, #3
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219c:	f107 0318 	add.w	r3, r7, #24
 80021a0:	4619      	mov	r1, r3
 80021a2:	4835      	ldr	r0, [pc, #212]	; (8002278 <HAL_UART_MspInit+0x254>)
 80021a4:	f000 ff48 	bl	8003038 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021a8:	2308      	movs	r3, #8
 80021aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ac:	2300      	movs	r3, #0
 80021ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b4:	f107 0318 	add.w	r3, r7, #24
 80021b8:	4619      	mov	r1, r3
 80021ba:	482f      	ldr	r0, [pc, #188]	; (8002278 <HAL_UART_MspInit+0x254>)
 80021bc:	f000 ff3c 	bl	8003038 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80021c0:	4b33      	ldr	r3, [pc, #204]	; (8002290 <HAL_UART_MspInit+0x26c>)
 80021c2:	4a34      	ldr	r2, [pc, #208]	; (8002294 <HAL_UART_MspInit+0x270>)
 80021c4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021c6:	4b32      	ldr	r3, [pc, #200]	; (8002290 <HAL_UART_MspInit+0x26c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021cc:	4b30      	ldr	r3, [pc, #192]	; (8002290 <HAL_UART_MspInit+0x26c>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021d2:	4b2f      	ldr	r3, [pc, #188]	; (8002290 <HAL_UART_MspInit+0x26c>)
 80021d4:	2280      	movs	r2, #128	; 0x80
 80021d6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021d8:	4b2d      	ldr	r3, [pc, #180]	; (8002290 <HAL_UART_MspInit+0x26c>)
 80021da:	2200      	movs	r2, #0
 80021dc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021de:	4b2c      	ldr	r3, [pc, #176]	; (8002290 <HAL_UART_MspInit+0x26c>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80021e4:	4b2a      	ldr	r3, [pc, #168]	; (8002290 <HAL_UART_MspInit+0x26c>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021ea:	4b29      	ldr	r3, [pc, #164]	; (8002290 <HAL_UART_MspInit+0x26c>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80021f0:	4827      	ldr	r0, [pc, #156]	; (8002290 <HAL_UART_MspInit+0x26c>)
 80021f2:	f000 fbc9 	bl	8002988 <HAL_DMA_Init>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 80021fc:	f7ff fda2 	bl	8001d44 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a23      	ldr	r2, [pc, #140]	; (8002290 <HAL_UART_MspInit+0x26c>)
 8002204:	635a      	str	r2, [r3, #52]	; 0x34
 8002206:	4a22      	ldr	r2, [pc, #136]	; (8002290 <HAL_UART_MspInit+0x26c>)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800220c:	4b22      	ldr	r3, [pc, #136]	; (8002298 <HAL_UART_MspInit+0x274>)
 800220e:	4a23      	ldr	r2, [pc, #140]	; (800229c <HAL_UART_MspInit+0x278>)
 8002210:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002212:	4b21      	ldr	r3, [pc, #132]	; (8002298 <HAL_UART_MspInit+0x274>)
 8002214:	2210      	movs	r2, #16
 8002216:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002218:	4b1f      	ldr	r3, [pc, #124]	; (8002298 <HAL_UART_MspInit+0x274>)
 800221a:	2200      	movs	r2, #0
 800221c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800221e:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <HAL_UART_MspInit+0x274>)
 8002220:	2280      	movs	r2, #128	; 0x80
 8002222:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002224:	4b1c      	ldr	r3, [pc, #112]	; (8002298 <HAL_UART_MspInit+0x274>)
 8002226:	2200      	movs	r2, #0
 8002228:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800222a:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <HAL_UART_MspInit+0x274>)
 800222c:	2200      	movs	r2, #0
 800222e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002230:	4b19      	ldr	r3, [pc, #100]	; (8002298 <HAL_UART_MspInit+0x274>)
 8002232:	2200      	movs	r2, #0
 8002234:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002236:	4b18      	ldr	r3, [pc, #96]	; (8002298 <HAL_UART_MspInit+0x274>)
 8002238:	2200      	movs	r2, #0
 800223a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800223c:	4816      	ldr	r0, [pc, #88]	; (8002298 <HAL_UART_MspInit+0x274>)
 800223e:	f000 fba3 	bl	8002988 <HAL_DMA_Init>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <HAL_UART_MspInit+0x228>
      Error_Handler();
 8002248:	f7ff fd7c 	bl	8001d44 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a12      	ldr	r2, [pc, #72]	; (8002298 <HAL_UART_MspInit+0x274>)
 8002250:	631a      	str	r2, [r3, #48]	; 0x30
 8002252:	4a11      	ldr	r2, [pc, #68]	; (8002298 <HAL_UART_MspInit+0x274>)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002258:	2200      	movs	r2, #0
 800225a:	2100      	movs	r1, #0
 800225c:	2026      	movs	r0, #38	; 0x26
 800225e:	f000 fb5c 	bl	800291a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002262:	2026      	movs	r0, #38	; 0x26
 8002264:	f000 fb75 	bl	8002952 <HAL_NVIC_EnableIRQ>
}
 8002268:	bf00      	nop
 800226a:	3728      	adds	r7, #40	; 0x28
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40013800 	.word	0x40013800
 8002274:	40021000 	.word	0x40021000
 8002278:	40010800 	.word	0x40010800
 800227c:	20000528 	.word	0x20000528
 8002280:	40020058 	.word	0x40020058
 8002284:	200004e4 	.word	0x200004e4
 8002288:	40020044 	.word	0x40020044
 800228c:	40004400 	.word	0x40004400
 8002290:	20000440 	.word	0x20000440
 8002294:	4002006c 	.word	0x4002006c
 8002298:	2000056c 	.word	0x2000056c
 800229c:	40020080 	.word	0x40020080

080022a0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a11      	ldr	r2, [pc, #68]	; (80022f4 <HAL_PCD_MspInit+0x54>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d11b      	bne.n	80022ea <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80022b2:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <HAL_PCD_MspInit+0x58>)
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	4a10      	ldr	r2, [pc, #64]	; (80022f8 <HAL_PCD_MspInit+0x58>)
 80022b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022bc:	61d3      	str	r3, [r2, #28]
 80022be:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <HAL_PCD_MspInit+0x58>)
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80022ca:	2200      	movs	r2, #0
 80022cc:	2100      	movs	r1, #0
 80022ce:	2013      	movs	r0, #19
 80022d0:	f000 fb23 	bl	800291a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80022d4:	2013      	movs	r0, #19
 80022d6:	f000 fb3c 	bl	8002952 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80022da:	2200      	movs	r2, #0
 80022dc:	2100      	movs	r1, #0
 80022de:	2014      	movs	r0, #20
 80022e0:	f000 fb1b 	bl	800291a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80022e4:	2014      	movs	r0, #20
 80022e6:	f000 fb34 	bl	8002952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80022ea:	bf00      	nop
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40005c00 	.word	0x40005c00
 80022f8:	40021000 	.word	0x40021000

080022fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002300:	e7fe      	b.n	8002300 <NMI_Handler+0x4>

08002302 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002302:	b480      	push	{r7}
 8002304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002306:	e7fe      	b.n	8002306 <HardFault_Handler+0x4>

08002308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800230c:	e7fe      	b.n	800230c <MemManage_Handler+0x4>

0800230e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002312:	e7fe      	b.n	8002312 <BusFault_Handler+0x4>

08002314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002318:	e7fe      	b.n	8002318 <UsageFault_Handler+0x4>

0800231a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr

08002326 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002326:	b480      	push	{r7}
 8002328:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr

08002332 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr

0800233e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002342:	f000 f9d3 	bl	80026ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}

0800234a <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 800234e:	f002 f98f 	bl	8004670 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 800235c:	4802      	ldr	r0, [pc, #8]	; (8002368 <RTC_IRQHandler+0x10>)
 800235e:	f003 f877 	bl	8005450 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	200005f0 	.word	0x200005f0

0800236c <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8002370:	f000 fce0 	bl	8002d34 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8002374:	bf00      	nop
 8002376:	bd80      	pop	{r7, pc}

08002378 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr

08002384 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002388:	4802      	ldr	r0, [pc, #8]	; (8002394 <DMA1_Channel2_IRQHandler+0x10>)
 800238a:	f000 fbcd 	bl	8002b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	200006b8 	.word	0x200006b8

08002398 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800239c:	4802      	ldr	r0, [pc, #8]	; (80023a8 <DMA1_Channel3_IRQHandler+0x10>)
 800239e:	f000 fbc3 	bl	8002b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	200009e8 	.word	0x200009e8

080023ac <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80023b0:	4802      	ldr	r0, [pc, #8]	; (80023bc <DMA1_Channel4_IRQHandler+0x10>)
 80023b2:	f000 fbb9 	bl	8002b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	200004e4 	.word	0x200004e4

080023c0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80023c4:	4802      	ldr	r0, [pc, #8]	; (80023d0 <DMA1_Channel5_IRQHandler+0x10>)
 80023c6:	f000 fbaf 	bl	8002b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000528 	.word	0x20000528

080023d4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80023d8:	4802      	ldr	r0, [pc, #8]	; (80023e4 <DMA1_Channel6_IRQHandler+0x10>)
 80023da:	f000 fba5 	bl	8002b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000440 	.word	0x20000440

080023e8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80023ec:	4802      	ldr	r0, [pc, #8]	; (80023f8 <DMA1_Channel7_IRQHandler+0x10>)
 80023ee:	f000 fb9b 	bl	8002b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	2000056c 	.word	0x2000056c

080023fc <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002400:	4802      	ldr	r0, [pc, #8]	; (800240c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8002402:	f001 f8c0 	bl	8003586 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	200006fc 	.word	0x200006fc

08002410 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002414:	4802      	ldr	r0, [pc, #8]	; (8002420 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002416:	f001 f8b6 	bl	8003586 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	200006fc 	.word	0x200006fc

08002424 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002428:	4802      	ldr	r0, [pc, #8]	; (8002434 <SPI1_IRQHandler+0x10>)
 800242a:	f003 fc97 	bl	8005d5c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000620 	.word	0x20000620

08002438 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800243c:	4802      	ldr	r0, [pc, #8]	; (8002448 <SPI2_IRQHandler+0x10>)
 800243e:	f003 fc8d 	bl	8005d5c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000484 	.word	0x20000484

0800244c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002450:	4802      	ldr	r0, [pc, #8]	; (800245c <USART1_IRQHandler+0x10>)
 8002452:	f003 ffed 	bl	8006430 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	200005b0 	.word	0x200005b0

08002460 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002464:	4802      	ldr	r0, [pc, #8]	; (8002470 <USART2_IRQHandler+0x10>)
 8002466:	f003 ffe3 	bl	8006430 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000678 	.word	0x20000678

08002474 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002478:	4802      	ldr	r0, [pc, #8]	; (8002484 <RTC_Alarm_IRQHandler+0x10>)
 800247a:	f002 ff3b 	bl	80052f4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	200005f0 	.word	0x200005f0

08002488 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
	return 1;
 800248c:	2301      	movs	r3, #1
}
 800248e:	4618      	mov	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr

08002496 <_kill>:

int _kill(int pid, int sig)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024a0:	f005 fd72 	bl	8007f88 <__errno>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2216      	movs	r2, #22
 80024a8:	601a      	str	r2, [r3, #0]
	return -1;
 80024aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <_exit>:

void _exit (int status)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024be:	f04f 31ff 	mov.w	r1, #4294967295
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff ffe7 	bl	8002496 <_kill>
	while (1) {}		/* Make sure we hang here */
 80024c8:	e7fe      	b.n	80024c8 <_exit+0x12>

080024ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b086      	sub	sp, #24
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	60f8      	str	r0, [r7, #12]
 80024d2:	60b9      	str	r1, [r7, #8]
 80024d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	e00a      	b.n	80024f2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024dc:	f3af 8000 	nop.w
 80024e0:	4601      	mov	r1, r0
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	60ba      	str	r2, [r7, #8]
 80024e8:	b2ca      	uxtb	r2, r1
 80024ea:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	3301      	adds	r3, #1
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	dbf0      	blt.n	80024dc <_read+0x12>
	}

return len;
 80024fa:	687b      	ldr	r3, [r7, #4]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
 8002514:	e009      	b.n	800252a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	60ba      	str	r2, [r7, #8]
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	3301      	adds	r3, #1
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	429a      	cmp	r2, r3
 8002530:	dbf1      	blt.n	8002516 <_write+0x12>
	}
	return len;
 8002532:	687b      	ldr	r3, [r7, #4]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <_close>:

int _close(int file)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
	return -1;
 8002544:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr

08002552 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002562:	605a      	str	r2, [r3, #4]
	return 0;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr

08002570 <_isatty>:

int _isatty(int file)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
	return 1;
 8002578:	2301      	movs	r3, #1
}
 800257a:	4618      	mov	r0, r3
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr

08002584 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
	return 0;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr

0800259c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025a4:	4a14      	ldr	r2, [pc, #80]	; (80025f8 <_sbrk+0x5c>)
 80025a6:	4b15      	ldr	r3, [pc, #84]	; (80025fc <_sbrk+0x60>)
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025b0:	4b13      	ldr	r3, [pc, #76]	; (8002600 <_sbrk+0x64>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d102      	bne.n	80025be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025b8:	4b11      	ldr	r3, [pc, #68]	; (8002600 <_sbrk+0x64>)
 80025ba:	4a12      	ldr	r2, [pc, #72]	; (8002604 <_sbrk+0x68>)
 80025bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025be:	4b10      	ldr	r3, [pc, #64]	; (8002600 <_sbrk+0x64>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d207      	bcs.n	80025dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025cc:	f005 fcdc 	bl	8007f88 <__errno>
 80025d0:	4603      	mov	r3, r0
 80025d2:	220c      	movs	r2, #12
 80025d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025d6:	f04f 33ff 	mov.w	r3, #4294967295
 80025da:	e009      	b.n	80025f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025dc:	4b08      	ldr	r3, [pc, #32]	; (8002600 <_sbrk+0x64>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025e2:	4b07      	ldr	r3, [pc, #28]	; (8002600 <_sbrk+0x64>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	4a05      	ldr	r2, [pc, #20]	; (8002600 <_sbrk+0x64>)
 80025ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ee:	68fb      	ldr	r3, [r7, #12]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20005000 	.word	0x20005000
 80025fc:	00000400 	.word	0x00000400
 8002600:	20000254 	.word	0x20000254
 8002604:	20000a60 	.word	0x20000a60

08002608 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002614:	f7ff fff8 	bl	8002608 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002618:	480b      	ldr	r0, [pc, #44]	; (8002648 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800261a:	490c      	ldr	r1, [pc, #48]	; (800264c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800261c:	4a0c      	ldr	r2, [pc, #48]	; (8002650 <LoopFillZerobss+0x16>)
  movs r3, #0
 800261e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002620:	e002      	b.n	8002628 <LoopCopyDataInit>

08002622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002626:	3304      	adds	r3, #4

08002628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800262a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800262c:	d3f9      	bcc.n	8002622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800262e:	4a09      	ldr	r2, [pc, #36]	; (8002654 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002630:	4c09      	ldr	r4, [pc, #36]	; (8002658 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002634:	e001      	b.n	800263a <LoopFillZerobss>

08002636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002638:	3204      	adds	r2, #4

0800263a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800263a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800263c:	d3fb      	bcc.n	8002636 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800263e:	f005 fcbb 	bl	8007fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002642:	f7ff f907 	bl	8001854 <main>
  bx lr
 8002646:	4770      	bx	lr
  ldr r0, =_sdata
 8002648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800264c:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8002650:	0800cd44 	.word	0x0800cd44
  ldr r2, =_sbss
 8002654:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8002658:	20000a60 	.word	0x20000a60

0800265c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800265c:	e7fe      	b.n	800265c <ADC1_2_IRQHandler>
	...

08002660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002664:	4b08      	ldr	r3, [pc, #32]	; (8002688 <HAL_Init+0x28>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a07      	ldr	r2, [pc, #28]	; (8002688 <HAL_Init+0x28>)
 800266a:	f043 0310 	orr.w	r3, r3, #16
 800266e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002670:	2003      	movs	r0, #3
 8002672:	f000 f947 	bl	8002904 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002676:	200f      	movs	r0, #15
 8002678:	f000 f808 	bl	800268c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800267c:	f7ff fb68 	bl	8001d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40022000 	.word	0x40022000

0800268c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002694:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <HAL_InitTick+0x54>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4b12      	ldr	r3, [pc, #72]	; (80026e4 <HAL_InitTick+0x58>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	4619      	mov	r1, r3
 800269e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 f95f 	bl	800296e <HAL_SYSTICK_Config>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e00e      	b.n	80026d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b0f      	cmp	r3, #15
 80026be:	d80a      	bhi.n	80026d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026c0:	2200      	movs	r2, #0
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	f04f 30ff 	mov.w	r0, #4294967295
 80026c8:	f000 f927 	bl	800291a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026cc:	4a06      	ldr	r2, [pc, #24]	; (80026e8 <HAL_InitTick+0x5c>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	e000      	b.n	80026d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	20000048 	.word	0x20000048
 80026e4:	20000050 	.word	0x20000050
 80026e8:	2000004c 	.word	0x2000004c

080026ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <HAL_IncTick+0x1c>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	4b05      	ldr	r3, [pc, #20]	; (800270c <HAL_IncTick+0x20>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4413      	add	r3, r2
 80026fc:	4a03      	ldr	r2, [pc, #12]	; (800270c <HAL_IncTick+0x20>)
 80026fe:	6013      	str	r3, [r2, #0]
}
 8002700:	bf00      	nop
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr
 8002708:	20000050 	.word	0x20000050
 800270c:	20000a2c 	.word	0x20000a2c

08002710 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  return uwTick;
 8002714:	4b02      	ldr	r3, [pc, #8]	; (8002720 <HAL_GetTick+0x10>)
 8002716:	681b      	ldr	r3, [r3, #0]
}
 8002718:	4618      	mov	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr
 8002720:	20000a2c 	.word	0x20000a2c

08002724 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800272c:	f7ff fff0 	bl	8002710 <HAL_GetTick>
 8002730:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273c:	d005      	beq.n	800274a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800273e:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <HAL_Delay+0x44>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	461a      	mov	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4413      	add	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800274a:	bf00      	nop
 800274c:	f7ff ffe0 	bl	8002710 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	429a      	cmp	r2, r3
 800275a:	d8f7      	bhi.n	800274c <HAL_Delay+0x28>
  {
  }
}
 800275c:	bf00      	nop
 800275e:	bf00      	nop
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20000050 	.word	0x20000050

0800276c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800277c:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <__NVIC_SetPriorityGrouping+0x44>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002788:	4013      	ands	r3, r2
 800278a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002794:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800279c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800279e:	4a04      	ldr	r2, [pc, #16]	; (80027b0 <__NVIC_SetPriorityGrouping+0x44>)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	60d3      	str	r3, [r2, #12]
}
 80027a4:	bf00      	nop
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bc80      	pop	{r7}
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027b8:	4b04      	ldr	r3, [pc, #16]	; (80027cc <__NVIC_GetPriorityGrouping+0x18>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	0a1b      	lsrs	r3, r3, #8
 80027be:	f003 0307 	and.w	r3, r3, #7
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	db0b      	blt.n	80027fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	f003 021f 	and.w	r2, r3, #31
 80027e8:	4906      	ldr	r1, [pc, #24]	; (8002804 <__NVIC_EnableIRQ+0x34>)
 80027ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ee:	095b      	lsrs	r3, r3, #5
 80027f0:	2001      	movs	r0, #1
 80027f2:	fa00 f202 	lsl.w	r2, r0, r2
 80027f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr
 8002804:	e000e100 	.word	0xe000e100

08002808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	6039      	str	r1, [r7, #0]
 8002812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002818:	2b00      	cmp	r3, #0
 800281a:	db0a      	blt.n	8002832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	b2da      	uxtb	r2, r3
 8002820:	490c      	ldr	r1, [pc, #48]	; (8002854 <__NVIC_SetPriority+0x4c>)
 8002822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002826:	0112      	lsls	r2, r2, #4
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	440b      	add	r3, r1
 800282c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002830:	e00a      	b.n	8002848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	b2da      	uxtb	r2, r3
 8002836:	4908      	ldr	r1, [pc, #32]	; (8002858 <__NVIC_SetPriority+0x50>)
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	3b04      	subs	r3, #4
 8002840:	0112      	lsls	r2, r2, #4
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	440b      	add	r3, r1
 8002846:	761a      	strb	r2, [r3, #24]
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	e000e100 	.word	0xe000e100
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800285c:	b480      	push	{r7}
 800285e:	b089      	sub	sp, #36	; 0x24
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f1c3 0307 	rsb	r3, r3, #7
 8002876:	2b04      	cmp	r3, #4
 8002878:	bf28      	it	cs
 800287a:	2304      	movcs	r3, #4
 800287c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	3304      	adds	r3, #4
 8002882:	2b06      	cmp	r3, #6
 8002884:	d902      	bls.n	800288c <NVIC_EncodePriority+0x30>
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	3b03      	subs	r3, #3
 800288a:	e000      	b.n	800288e <NVIC_EncodePriority+0x32>
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002890:	f04f 32ff 	mov.w	r2, #4294967295
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43da      	mvns	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	401a      	ands	r2, r3
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028a4:	f04f 31ff 	mov.w	r1, #4294967295
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	fa01 f303 	lsl.w	r3, r1, r3
 80028ae:	43d9      	mvns	r1, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b4:	4313      	orrs	r3, r2
         );
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3724      	adds	r7, #36	; 0x24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3b01      	subs	r3, #1
 80028cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028d0:	d301      	bcc.n	80028d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028d2:	2301      	movs	r3, #1
 80028d4:	e00f      	b.n	80028f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028d6:	4a0a      	ldr	r2, [pc, #40]	; (8002900 <SysTick_Config+0x40>)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3b01      	subs	r3, #1
 80028dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028de:	210f      	movs	r1, #15
 80028e0:	f04f 30ff 	mov.w	r0, #4294967295
 80028e4:	f7ff ff90 	bl	8002808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <SysTick_Config+0x40>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ee:	4b04      	ldr	r3, [pc, #16]	; (8002900 <SysTick_Config+0x40>)
 80028f0:	2207      	movs	r2, #7
 80028f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	e000e010 	.word	0xe000e010

08002904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff ff2d 	bl	800276c <__NVIC_SetPriorityGrouping>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800291a:	b580      	push	{r7, lr}
 800291c:	b086      	sub	sp, #24
 800291e:	af00      	add	r7, sp, #0
 8002920:	4603      	mov	r3, r0
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	607a      	str	r2, [r7, #4]
 8002926:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800292c:	f7ff ff42 	bl	80027b4 <__NVIC_GetPriorityGrouping>
 8002930:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	6978      	ldr	r0, [r7, #20]
 8002938:	f7ff ff90 	bl	800285c <NVIC_EncodePriority>
 800293c:	4602      	mov	r2, r0
 800293e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002942:	4611      	mov	r1, r2
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff ff5f 	bl	8002808 <__NVIC_SetPriority>
}
 800294a:	bf00      	nop
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	4603      	mov	r3, r0
 800295a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800295c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff ff35 	bl	80027d0 <__NVIC_EnableIRQ>
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7ff ffa2 	bl	80028c0 <SysTick_Config>
 800297c:	4603      	mov	r3, r0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e043      	b.n	8002a26 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	4b22      	ldr	r3, [pc, #136]	; (8002a30 <HAL_DMA_Init+0xa8>)
 80029a6:	4413      	add	r3, r2
 80029a8:	4a22      	ldr	r2, [pc, #136]	; (8002a34 <HAL_DMA_Init+0xac>)
 80029aa:	fba2 2303 	umull	r2, r3, r2, r3
 80029ae:	091b      	lsrs	r3, r3, #4
 80029b0:	009a      	lsls	r2, r3, #2
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a1f      	ldr	r2, [pc, #124]	; (8002a38 <HAL_DMA_Init+0xb0>)
 80029ba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2202      	movs	r2, #2
 80029c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80029d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80029d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80029e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr
 8002a30:	bffdfff8 	.word	0xbffdfff8
 8002a34:	cccccccd 	.word	0xcccccccd
 8002a38:	40020000 	.word	0x40020000

08002a3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a44:	2300      	movs	r3, #0
 8002a46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d005      	beq.n	8002a5e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2204      	movs	r2, #4
 8002a56:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	73fb      	strb	r3, [r7, #15]
 8002a5c:	e051      	b.n	8002b02 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 020e 	bic.w	r2, r2, #14
 8002a6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0201 	bic.w	r2, r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a22      	ldr	r2, [pc, #136]	; (8002b0c <HAL_DMA_Abort_IT+0xd0>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d029      	beq.n	8002adc <HAL_DMA_Abort_IT+0xa0>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a20      	ldr	r2, [pc, #128]	; (8002b10 <HAL_DMA_Abort_IT+0xd4>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d022      	beq.n	8002ad8 <HAL_DMA_Abort_IT+0x9c>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a1f      	ldr	r2, [pc, #124]	; (8002b14 <HAL_DMA_Abort_IT+0xd8>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d01a      	beq.n	8002ad2 <HAL_DMA_Abort_IT+0x96>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a1d      	ldr	r2, [pc, #116]	; (8002b18 <HAL_DMA_Abort_IT+0xdc>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d012      	beq.n	8002acc <HAL_DMA_Abort_IT+0x90>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a1c      	ldr	r2, [pc, #112]	; (8002b1c <HAL_DMA_Abort_IT+0xe0>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d00a      	beq.n	8002ac6 <HAL_DMA_Abort_IT+0x8a>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a1a      	ldr	r2, [pc, #104]	; (8002b20 <HAL_DMA_Abort_IT+0xe4>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d102      	bne.n	8002ac0 <HAL_DMA_Abort_IT+0x84>
 8002aba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002abe:	e00e      	b.n	8002ade <HAL_DMA_Abort_IT+0xa2>
 8002ac0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ac4:	e00b      	b.n	8002ade <HAL_DMA_Abort_IT+0xa2>
 8002ac6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002aca:	e008      	b.n	8002ade <HAL_DMA_Abort_IT+0xa2>
 8002acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ad0:	e005      	b.n	8002ade <HAL_DMA_Abort_IT+0xa2>
 8002ad2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ad6:	e002      	b.n	8002ade <HAL_DMA_Abort_IT+0xa2>
 8002ad8:	2310      	movs	r3, #16
 8002ada:	e000      	b.n	8002ade <HAL_DMA_Abort_IT+0xa2>
 8002adc:	2301      	movs	r3, #1
 8002ade:	4a11      	ldr	r2, [pc, #68]	; (8002b24 <HAL_DMA_Abort_IT+0xe8>)
 8002ae0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	4798      	blx	r3
    } 
  }
  return status;
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40020008 	.word	0x40020008
 8002b10:	4002001c 	.word	0x4002001c
 8002b14:	40020030 	.word	0x40020030
 8002b18:	40020044 	.word	0x40020044
 8002b1c:	40020058 	.word	0x40020058
 8002b20:	4002006c 	.word	0x4002006c
 8002b24:	40020000 	.word	0x40020000

08002b28 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	2204      	movs	r2, #4
 8002b46:	409a      	lsls	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d04f      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0xc8>
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	f003 0304 	and.w	r3, r3, #4
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d04a      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0320 	and.w	r3, r3, #32
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d107      	bne.n	8002b78 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0204 	bic.w	r2, r2, #4
 8002b76:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a66      	ldr	r2, [pc, #408]	; (8002d18 <HAL_DMA_IRQHandler+0x1f0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d029      	beq.n	8002bd6 <HAL_DMA_IRQHandler+0xae>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a65      	ldr	r2, [pc, #404]	; (8002d1c <HAL_DMA_IRQHandler+0x1f4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d022      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0xaa>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a63      	ldr	r2, [pc, #396]	; (8002d20 <HAL_DMA_IRQHandler+0x1f8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d01a      	beq.n	8002bcc <HAL_DMA_IRQHandler+0xa4>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a62      	ldr	r2, [pc, #392]	; (8002d24 <HAL_DMA_IRQHandler+0x1fc>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d012      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0x9e>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a60      	ldr	r2, [pc, #384]	; (8002d28 <HAL_DMA_IRQHandler+0x200>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d00a      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x98>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a5f      	ldr	r2, [pc, #380]	; (8002d2c <HAL_DMA_IRQHandler+0x204>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d102      	bne.n	8002bba <HAL_DMA_IRQHandler+0x92>
 8002bb4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bb8:	e00e      	b.n	8002bd8 <HAL_DMA_IRQHandler+0xb0>
 8002bba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002bbe:	e00b      	b.n	8002bd8 <HAL_DMA_IRQHandler+0xb0>
 8002bc0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002bc4:	e008      	b.n	8002bd8 <HAL_DMA_IRQHandler+0xb0>
 8002bc6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bca:	e005      	b.n	8002bd8 <HAL_DMA_IRQHandler+0xb0>
 8002bcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bd0:	e002      	b.n	8002bd8 <HAL_DMA_IRQHandler+0xb0>
 8002bd2:	2340      	movs	r3, #64	; 0x40
 8002bd4:	e000      	b.n	8002bd8 <HAL_DMA_IRQHandler+0xb0>
 8002bd6:	2304      	movs	r3, #4
 8002bd8:	4a55      	ldr	r2, [pc, #340]	; (8002d30 <HAL_DMA_IRQHandler+0x208>)
 8002bda:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 8094 	beq.w	8002d0e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002bee:	e08e      	b.n	8002d0e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d056      	beq.n	8002cae <HAL_DMA_IRQHandler+0x186>
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d051      	beq.n	8002cae <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0320 	and.w	r3, r3, #32
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10b      	bne.n	8002c30 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 020a 	bic.w	r2, r2, #10
 8002c26:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a38      	ldr	r2, [pc, #224]	; (8002d18 <HAL_DMA_IRQHandler+0x1f0>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d029      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x166>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a37      	ldr	r2, [pc, #220]	; (8002d1c <HAL_DMA_IRQHandler+0x1f4>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d022      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x162>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a35      	ldr	r2, [pc, #212]	; (8002d20 <HAL_DMA_IRQHandler+0x1f8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d01a      	beq.n	8002c84 <HAL_DMA_IRQHandler+0x15c>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a34      	ldr	r2, [pc, #208]	; (8002d24 <HAL_DMA_IRQHandler+0x1fc>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d012      	beq.n	8002c7e <HAL_DMA_IRQHandler+0x156>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a32      	ldr	r2, [pc, #200]	; (8002d28 <HAL_DMA_IRQHandler+0x200>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00a      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x150>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a31      	ldr	r2, [pc, #196]	; (8002d2c <HAL_DMA_IRQHandler+0x204>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d102      	bne.n	8002c72 <HAL_DMA_IRQHandler+0x14a>
 8002c6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c70:	e00e      	b.n	8002c90 <HAL_DMA_IRQHandler+0x168>
 8002c72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c76:	e00b      	b.n	8002c90 <HAL_DMA_IRQHandler+0x168>
 8002c78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c7c:	e008      	b.n	8002c90 <HAL_DMA_IRQHandler+0x168>
 8002c7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c82:	e005      	b.n	8002c90 <HAL_DMA_IRQHandler+0x168>
 8002c84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c88:	e002      	b.n	8002c90 <HAL_DMA_IRQHandler+0x168>
 8002c8a:	2320      	movs	r3, #32
 8002c8c:	e000      	b.n	8002c90 <HAL_DMA_IRQHandler+0x168>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	4a27      	ldr	r2, [pc, #156]	; (8002d30 <HAL_DMA_IRQHandler+0x208>)
 8002c92:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d034      	beq.n	8002d0e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002cac:	e02f      	b.n	8002d0e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	2208      	movs	r2, #8
 8002cb4:	409a      	lsls	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d028      	beq.n	8002d10 <HAL_DMA_IRQHandler+0x1e8>
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d023      	beq.n	8002d10 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 020e 	bic.w	r2, r2, #14
 8002cd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d004      	beq.n	8002d10 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	4798      	blx	r3
    }
  }
  return;
 8002d0e:	bf00      	nop
 8002d10:	bf00      	nop
}
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40020008 	.word	0x40020008
 8002d1c:	4002001c 	.word	0x4002001c
 8002d20:	40020030 	.word	0x40020030
 8002d24:	40020044 	.word	0x40020044
 8002d28:	40020058 	.word	0x40020058
 8002d2c:	4002006c 	.word	0x4002006c
 8002d30:	40020000 	.word	0x40020000

08002d34 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
    (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002d3e:	4b6d      	ldr	r3, [pc, #436]	; (8002ef4 <HAL_FLASH_IRQHandler+0x1c0>)
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f003 0310 	and.w	r3, r3, #16
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d105      	bne.n	8002d56 <HAL_FLASH_IRQHandler+0x22>
 8002d4a:	4b6a      	ldr	r3, [pc, #424]	; (8002ef4 <HAL_FLASH_IRQHandler+0x1c0>)
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00e      	beq.n	8002d74 <HAL_FLASH_IRQHandler+0x40>
#endif /* FLASH_BANK2_END */
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 8002d56:	4b68      	ldr	r3, [pc, #416]	; (8002ef8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 8002d5c:	4b66      	ldr	r3, [pc, #408]	; (8002ef8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d62:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 8002d64:	f000 f8f8 	bl	8002f58 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f8d0 	bl	8002f0e <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002d6e:	4b62      	ldr	r3, [pc, #392]	; (8002ef8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002d74:	4b5f      	ldr	r3, [pc, #380]	; (8002ef4 <HAL_FLASH_IRQHandler+0x1c0>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f003 0320 	and.w	r3, r3, #32
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 80a0 	beq.w	8002ec2 <HAL_FLASH_IRQHandler+0x18e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002d82:	4b5c      	ldr	r3, [pc, #368]	; (8002ef4 <HAL_FLASH_IRQHandler+0x1c0>)
 8002d84:	2220      	movs	r2, #32
 8002d86:	60da      	str	r2, [r3, #12]
#endif /* FLASH_BANK2_END */
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8002d88:	4b5b      	ldr	r3, [pc, #364]	; (8002ef8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 8097 	beq.w	8002ec2 <HAL_FLASH_IRQHandler+0x18e>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8002d94:	4b58      	ldr	r3, [pc, #352]	; (8002ef8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d12d      	bne.n	8002dfa <HAL_FLASH_IRQHandler+0xc6>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 8002d9e:	4b56      	ldr	r3, [pc, #344]	; (8002ef8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	4a54      	ldr	r2, [pc, #336]	; (8002ef8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002da6:	6053      	str	r3, [r2, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 8002da8:	4b53      	ldr	r3, [pc, #332]	; (8002ef8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d017      	beq.n	8002de0 <HAL_FLASH_IRQHandler+0xac>
        {
          addresstmp = pFlash.Address;
 8002db0:	4b51      	ldr	r3, [pc, #324]	; (8002ef8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f8a0 	bl	8002efc <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8002dbc:	4b4e      	ldr	r3, [pc, #312]	; (8002ef8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dc4:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 8002dc6:	4a4c      	ldr	r2, [pc, #304]	; (8002ef8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6093      	str	r3, [r2, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002dcc:	4b49      	ldr	r3, [pc, #292]	; (8002ef4 <HAL_FLASH_IRQHandler+0x1c0>)
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	4a48      	ldr	r2, [pc, #288]	; (8002ef4 <HAL_FLASH_IRQHandler+0x1c0>)
 8002dd2:	f023 0302 	bic.w	r3, r3, #2
 8002dd6:	6113      	str	r3, [r2, #16]

          FLASH_PageErase(addresstmp);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f90d 	bl	8002ff8 <FLASH_PageErase>
 8002dde:	e070      	b.n	8002ec2 <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 8002de0:	f04f 33ff 	mov.w	r3, #4294967295
 8002de4:	607b      	str	r3, [r7, #4]
 8002de6:	4a44      	ldr	r2, [pc, #272]	; (8002ef8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6093      	str	r3, [r2, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002dec:	4b42      	ldr	r3, [pc, #264]	; (8002ef8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f882 	bl	8002efc <HAL_FLASH_EndOfOperationCallback>
 8002df8:	e063      	b.n	8002ec2 <HAL_FLASH_IRQHandler+0x18e>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002dfa:	4b3f      	ldr	r3, [pc, #252]	; (8002ef8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d10c      	bne.n	8002e1e <HAL_FLASH_IRQHandler+0xea>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002e04:	4b3b      	ldr	r3, [pc, #236]	; (8002ef4 <HAL_FLASH_IRQHandler+0x1c0>)
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	4a3a      	ldr	r2, [pc, #232]	; (8002ef4 <HAL_FLASH_IRQHandler+0x1c0>)
 8002e0a:	f023 0304 	bic.w	r3, r3, #4
 8002e0e:	6113      	str	r3, [r2, #16]
        if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
        {
#endif /* FLASH_BANK2_END */
          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0U);
 8002e10:	2000      	movs	r0, #0
 8002e12:	f000 f873 	bl	8002efc <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002e16:	4b38      	ldr	r3, [pc, #224]	; (8002ef8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	701a      	strb	r2, [r3, #0]
 8002e1c:	e051      	b.n	8002ec2 <HAL_FLASH_IRQHandler+0x18e>
      }
#endif /* FLASH_BANK2_END */
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 8002e1e:	4b36      	ldr	r3, [pc, #216]	; (8002ef8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	4a34      	ldr	r2, [pc, #208]	; (8002ef8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002e26:	6053      	str	r3, [r2, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 8002e28:	4b33      	ldr	r3, [pc, #204]	; (8002ef8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d024      	beq.n	8002e7a <HAL_FLASH_IRQHandler+0x146>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2U;
 8002e30:	4b31      	ldr	r3, [pc, #196]	; (8002ef8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	3302      	adds	r3, #2
 8002e36:	4a30      	ldr	r2, [pc, #192]	; (8002ef8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002e38:	6093      	str	r3, [r2, #8]
          addresstmp = pFlash.Address;
 8002e3a:	4b2f      	ldr	r3, [pc, #188]	; (8002ef8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 8002e40:	4b2d      	ldr	r3, [pc, #180]	; (8002ef8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002e42:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	0c02      	lsrs	r2, r0, #16
 8002e50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002e54:	0c0b      	lsrs	r3, r1, #16
 8002e56:	4928      	ldr	r1, [pc, #160]	; (8002ef8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002e58:	e9c1 2304 	strd	r2, r3, [r1, #16]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002e5c:	4b25      	ldr	r3, [pc, #148]	; (8002ef4 <HAL_FLASH_IRQHandler+0x1c0>)
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	4a24      	ldr	r2, [pc, #144]	; (8002ef4 <HAL_FLASH_IRQHandler+0x1c0>)
 8002e62:	f023 0301 	bic.w	r3, r3, #1
 8002e66:	6113      	str	r3, [r2, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8002e68:	4b23      	ldr	r3, [pc, #140]	; (8002ef8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002e6a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002e6e:	b293      	uxth	r3, r2
 8002e70:	4619      	mov	r1, r3
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f854 	bl	8002f20 <FLASH_Program_HalfWord>
 8002e78:	e023      	b.n	8002ec2 <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 8002e7a:	4b1f      	ldr	r3, [pc, #124]	; (8002ef8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b03      	cmp	r3, #3
 8002e82:	d105      	bne.n	8002e90 <HAL_FLASH_IRQHandler+0x15c>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8002e84:	4b1c      	ldr	r3, [pc, #112]	; (8002ef8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 f837 	bl	8002efc <HAL_FLASH_EndOfOperationCallback>
 8002e8e:	e011      	b.n	8002eb4 <HAL_FLASH_IRQHandler+0x180>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8002e90:	4b19      	ldr	r3, [pc, #100]	; (8002ef8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d106      	bne.n	8002ea8 <HAL_FLASH_IRQHandler+0x174>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8002e9a:	4b17      	ldr	r3, [pc, #92]	; (8002ef8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	3b02      	subs	r3, #2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 f82b 	bl	8002efc <HAL_FLASH_EndOfOperationCallback>
 8002ea6:	e005      	b.n	8002eb4 <HAL_FLASH_IRQHandler+0x180>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8002ea8:	4b13      	ldr	r3, [pc, #76]	; (8002ef8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	3b06      	subs	r3, #6
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 f824 	bl	8002efc <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 8002eb4:	4b10      	ldr	r3, [pc, #64]	; (8002ef8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8002eba:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002ebc:	4b0e      	ldr	r3, [pc, #56]	; (8002ef8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#endif 

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002ec2:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10e      	bne.n	8002eea <HAL_FLASH_IRQHandler+0x1b6>
  
    /* Disable End of FLASH Operation and Error source interrupts for both banks */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
#else
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8002ecc:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <HAL_FLASH_IRQHandler+0x1c0>)
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	4a08      	ldr	r2, [pc, #32]	; (8002ef4 <HAL_FLASH_IRQHandler+0x1c0>)
 8002ed2:	f023 0307 	bic.w	r3, r3, #7
 8002ed6:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8002ed8:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_FLASH_IRQHandler+0x1c0>)
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	4a05      	ldr	r2, [pc, #20]	; (8002ef4 <HAL_FLASH_IRQHandler+0x1c0>)
 8002ede:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 8002ee2:	6113      	str	r3, [r2, #16]
#endif /* FLASH_BANK2_END */

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8002ee4:	4b04      	ldr	r3, [pc, #16]	; (8002ef8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	761a      	strb	r2, [r3, #24]
  }
}
 8002eea:	bf00      	nop
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40022000 	.word	0x40022000
 8002ef8:	20000a30 	.word	0x20000a30

08002efc <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bc80      	pop	{r7}
 8002f0c:	4770      	bx	lr

08002f0e <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr

08002f20 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002f2c:	4b08      	ldr	r3, [pc, #32]	; (8002f50 <FLASH_Program_HalfWord+0x30>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002f32:	4b08      	ldr	r3, [pc, #32]	; (8002f54 <FLASH_Program_HalfWord+0x34>)
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	4a07      	ldr	r2, [pc, #28]	; (8002f54 <FLASH_Program_HalfWord+0x34>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	887a      	ldrh	r2, [r7, #2]
 8002f42:	801a      	strh	r2, [r3, #0]
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bc80      	pop	{r7}
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	20000a30 	.word	0x20000a30
 8002f54:	40022000 	.word	0x40022000

08002f58 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002f62:	4b23      	ldr	r3, [pc, #140]	; (8002ff0 <FLASH_SetErrorCode+0x98>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f003 0310 	and.w	r3, r3, #16
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d009      	beq.n	8002f82 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002f6e:	4b21      	ldr	r3, [pc, #132]	; (8002ff4 <FLASH_SetErrorCode+0x9c>)
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	f043 0302 	orr.w	r3, r3, #2
 8002f76:	4a1f      	ldr	r2, [pc, #124]	; (8002ff4 <FLASH_SetErrorCode+0x9c>)
 8002f78:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f043 0310 	orr.w	r3, r3, #16
 8002f80:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002f82:	4b1b      	ldr	r3, [pc, #108]	; (8002ff0 <FLASH_SetErrorCode+0x98>)
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f003 0304 	and.w	r3, r3, #4
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d009      	beq.n	8002fa2 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002f8e:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <FLASH_SetErrorCode+0x9c>)
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	f043 0301 	orr.w	r3, r3, #1
 8002f96:	4a17      	ldr	r2, [pc, #92]	; (8002ff4 <FLASH_SetErrorCode+0x9c>)
 8002f98:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f043 0304 	orr.w	r3, r3, #4
 8002fa0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002fa2:	4b13      	ldr	r3, [pc, #76]	; (8002ff0 <FLASH_SetErrorCode+0x98>)
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00b      	beq.n	8002fc6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002fae:	4b11      	ldr	r3, [pc, #68]	; (8002ff4 <FLASH_SetErrorCode+0x9c>)
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	f043 0304 	orr.w	r3, r3, #4
 8002fb6:	4a0f      	ldr	r2, [pc, #60]	; (8002ff4 <FLASH_SetErrorCode+0x9c>)
 8002fb8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002fba:	4b0d      	ldr	r3, [pc, #52]	; (8002ff0 <FLASH_SetErrorCode+0x98>)
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	4a0c      	ldr	r2, [pc, #48]	; (8002ff0 <FLASH_SetErrorCode+0x98>)
 8002fc0:	f023 0301 	bic.w	r3, r3, #1
 8002fc4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f240 1201 	movw	r2, #257	; 0x101
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d106      	bne.n	8002fde <FLASH_SetErrorCode+0x86>
 8002fd0:	4b07      	ldr	r3, [pc, #28]	; (8002ff0 <FLASH_SetErrorCode+0x98>)
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	4a06      	ldr	r2, [pc, #24]	; (8002ff0 <FLASH_SetErrorCode+0x98>)
 8002fd6:	f023 0301 	bic.w	r3, r3, #1
 8002fda:	61d3      	str	r3, [r2, #28]
}  
 8002fdc:	e002      	b.n	8002fe4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002fde:	4a04      	ldr	r2, [pc, #16]	; (8002ff0 <FLASH_SetErrorCode+0x98>)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	60d3      	str	r3, [r2, #12]
}  
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bc80      	pop	{r7}
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	40022000 	.word	0x40022000
 8002ff4:	20000a30 	.word	0x20000a30

08002ff8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003000:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <FLASH_PageErase+0x38>)
 8003002:	2200      	movs	r2, #0
 8003004:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003006:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <FLASH_PageErase+0x3c>)
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	4a0a      	ldr	r2, [pc, #40]	; (8003034 <FLASH_PageErase+0x3c>)
 800300c:	f043 0302 	orr.w	r3, r3, #2
 8003010:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003012:	4a08      	ldr	r2, [pc, #32]	; (8003034 <FLASH_PageErase+0x3c>)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003018:	4b06      	ldr	r3, [pc, #24]	; (8003034 <FLASH_PageErase+0x3c>)
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	4a05      	ldr	r2, [pc, #20]	; (8003034 <FLASH_PageErase+0x3c>)
 800301e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003022:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	bc80      	pop	{r7}
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	20000a30 	.word	0x20000a30
 8003034:	40022000 	.word	0x40022000

08003038 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003038:	b480      	push	{r7}
 800303a:	b08b      	sub	sp, #44	; 0x2c
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003042:	2300      	movs	r3, #0
 8003044:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003046:	2300      	movs	r3, #0
 8003048:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800304a:	e169      	b.n	8003320 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800304c:	2201      	movs	r2, #1
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	69fa      	ldr	r2, [r7, #28]
 800305c:	4013      	ands	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	429a      	cmp	r2, r3
 8003066:	f040 8158 	bne.w	800331a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	4a9a      	ldr	r2, [pc, #616]	; (80032d8 <HAL_GPIO_Init+0x2a0>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d05e      	beq.n	8003132 <HAL_GPIO_Init+0xfa>
 8003074:	4a98      	ldr	r2, [pc, #608]	; (80032d8 <HAL_GPIO_Init+0x2a0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d875      	bhi.n	8003166 <HAL_GPIO_Init+0x12e>
 800307a:	4a98      	ldr	r2, [pc, #608]	; (80032dc <HAL_GPIO_Init+0x2a4>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d058      	beq.n	8003132 <HAL_GPIO_Init+0xfa>
 8003080:	4a96      	ldr	r2, [pc, #600]	; (80032dc <HAL_GPIO_Init+0x2a4>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d86f      	bhi.n	8003166 <HAL_GPIO_Init+0x12e>
 8003086:	4a96      	ldr	r2, [pc, #600]	; (80032e0 <HAL_GPIO_Init+0x2a8>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d052      	beq.n	8003132 <HAL_GPIO_Init+0xfa>
 800308c:	4a94      	ldr	r2, [pc, #592]	; (80032e0 <HAL_GPIO_Init+0x2a8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d869      	bhi.n	8003166 <HAL_GPIO_Init+0x12e>
 8003092:	4a94      	ldr	r2, [pc, #592]	; (80032e4 <HAL_GPIO_Init+0x2ac>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d04c      	beq.n	8003132 <HAL_GPIO_Init+0xfa>
 8003098:	4a92      	ldr	r2, [pc, #584]	; (80032e4 <HAL_GPIO_Init+0x2ac>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d863      	bhi.n	8003166 <HAL_GPIO_Init+0x12e>
 800309e:	4a92      	ldr	r2, [pc, #584]	; (80032e8 <HAL_GPIO_Init+0x2b0>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d046      	beq.n	8003132 <HAL_GPIO_Init+0xfa>
 80030a4:	4a90      	ldr	r2, [pc, #576]	; (80032e8 <HAL_GPIO_Init+0x2b0>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d85d      	bhi.n	8003166 <HAL_GPIO_Init+0x12e>
 80030aa:	2b12      	cmp	r3, #18
 80030ac:	d82a      	bhi.n	8003104 <HAL_GPIO_Init+0xcc>
 80030ae:	2b12      	cmp	r3, #18
 80030b0:	d859      	bhi.n	8003166 <HAL_GPIO_Init+0x12e>
 80030b2:	a201      	add	r2, pc, #4	; (adr r2, 80030b8 <HAL_GPIO_Init+0x80>)
 80030b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b8:	08003133 	.word	0x08003133
 80030bc:	0800310d 	.word	0x0800310d
 80030c0:	0800311f 	.word	0x0800311f
 80030c4:	08003161 	.word	0x08003161
 80030c8:	08003167 	.word	0x08003167
 80030cc:	08003167 	.word	0x08003167
 80030d0:	08003167 	.word	0x08003167
 80030d4:	08003167 	.word	0x08003167
 80030d8:	08003167 	.word	0x08003167
 80030dc:	08003167 	.word	0x08003167
 80030e0:	08003167 	.word	0x08003167
 80030e4:	08003167 	.word	0x08003167
 80030e8:	08003167 	.word	0x08003167
 80030ec:	08003167 	.word	0x08003167
 80030f0:	08003167 	.word	0x08003167
 80030f4:	08003167 	.word	0x08003167
 80030f8:	08003167 	.word	0x08003167
 80030fc:	08003115 	.word	0x08003115
 8003100:	08003129 	.word	0x08003129
 8003104:	4a79      	ldr	r2, [pc, #484]	; (80032ec <HAL_GPIO_Init+0x2b4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d013      	beq.n	8003132 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800310a:	e02c      	b.n	8003166 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	623b      	str	r3, [r7, #32]
          break;
 8003112:	e029      	b.n	8003168 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	3304      	adds	r3, #4
 800311a:	623b      	str	r3, [r7, #32]
          break;
 800311c:	e024      	b.n	8003168 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	3308      	adds	r3, #8
 8003124:	623b      	str	r3, [r7, #32]
          break;
 8003126:	e01f      	b.n	8003168 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	330c      	adds	r3, #12
 800312e:	623b      	str	r3, [r7, #32]
          break;
 8003130:	e01a      	b.n	8003168 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d102      	bne.n	8003140 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800313a:	2304      	movs	r3, #4
 800313c:	623b      	str	r3, [r7, #32]
          break;
 800313e:	e013      	b.n	8003168 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d105      	bne.n	8003154 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003148:	2308      	movs	r3, #8
 800314a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69fa      	ldr	r2, [r7, #28]
 8003150:	611a      	str	r2, [r3, #16]
          break;
 8003152:	e009      	b.n	8003168 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003154:	2308      	movs	r3, #8
 8003156:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	69fa      	ldr	r2, [r7, #28]
 800315c:	615a      	str	r2, [r3, #20]
          break;
 800315e:	e003      	b.n	8003168 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003160:	2300      	movs	r3, #0
 8003162:	623b      	str	r3, [r7, #32]
          break;
 8003164:	e000      	b.n	8003168 <HAL_GPIO_Init+0x130>
          break;
 8003166:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	2bff      	cmp	r3, #255	; 0xff
 800316c:	d801      	bhi.n	8003172 <HAL_GPIO_Init+0x13a>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	e001      	b.n	8003176 <HAL_GPIO_Init+0x13e>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3304      	adds	r3, #4
 8003176:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	2bff      	cmp	r3, #255	; 0xff
 800317c:	d802      	bhi.n	8003184 <HAL_GPIO_Init+0x14c>
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	e002      	b.n	800318a <HAL_GPIO_Init+0x152>
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	3b08      	subs	r3, #8
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	210f      	movs	r1, #15
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	fa01 f303 	lsl.w	r3, r1, r3
 8003198:	43db      	mvns	r3, r3
 800319a:	401a      	ands	r2, r3
 800319c:	6a39      	ldr	r1, [r7, #32]
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	fa01 f303 	lsl.w	r3, r1, r3
 80031a4:	431a      	orrs	r2, r3
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 80b1 	beq.w	800331a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031b8:	4b4d      	ldr	r3, [pc, #308]	; (80032f0 <HAL_GPIO_Init+0x2b8>)
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	4a4c      	ldr	r2, [pc, #304]	; (80032f0 <HAL_GPIO_Init+0x2b8>)
 80031be:	f043 0301 	orr.w	r3, r3, #1
 80031c2:	6193      	str	r3, [r2, #24]
 80031c4:	4b4a      	ldr	r3, [pc, #296]	; (80032f0 <HAL_GPIO_Init+0x2b8>)
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	60bb      	str	r3, [r7, #8]
 80031ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80031d0:	4a48      	ldr	r2, [pc, #288]	; (80032f4 <HAL_GPIO_Init+0x2bc>)
 80031d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d4:	089b      	lsrs	r3, r3, #2
 80031d6:	3302      	adds	r3, #2
 80031d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	f003 0303 	and.w	r3, r3, #3
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	220f      	movs	r2, #15
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	43db      	mvns	r3, r3
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	4013      	ands	r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a40      	ldr	r2, [pc, #256]	; (80032f8 <HAL_GPIO_Init+0x2c0>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d013      	beq.n	8003224 <HAL_GPIO_Init+0x1ec>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a3f      	ldr	r2, [pc, #252]	; (80032fc <HAL_GPIO_Init+0x2c4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d00d      	beq.n	8003220 <HAL_GPIO_Init+0x1e8>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a3e      	ldr	r2, [pc, #248]	; (8003300 <HAL_GPIO_Init+0x2c8>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d007      	beq.n	800321c <HAL_GPIO_Init+0x1e4>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a3d      	ldr	r2, [pc, #244]	; (8003304 <HAL_GPIO_Init+0x2cc>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d101      	bne.n	8003218 <HAL_GPIO_Init+0x1e0>
 8003214:	2303      	movs	r3, #3
 8003216:	e006      	b.n	8003226 <HAL_GPIO_Init+0x1ee>
 8003218:	2304      	movs	r3, #4
 800321a:	e004      	b.n	8003226 <HAL_GPIO_Init+0x1ee>
 800321c:	2302      	movs	r3, #2
 800321e:	e002      	b.n	8003226 <HAL_GPIO_Init+0x1ee>
 8003220:	2301      	movs	r3, #1
 8003222:	e000      	b.n	8003226 <HAL_GPIO_Init+0x1ee>
 8003224:	2300      	movs	r3, #0
 8003226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003228:	f002 0203 	and.w	r2, r2, #3
 800322c:	0092      	lsls	r2, r2, #2
 800322e:	4093      	lsls	r3, r2
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	4313      	orrs	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003236:	492f      	ldr	r1, [pc, #188]	; (80032f4 <HAL_GPIO_Init+0x2bc>)
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	089b      	lsrs	r3, r3, #2
 800323c:	3302      	adds	r3, #2
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d006      	beq.n	800325e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003250:	4b2d      	ldr	r3, [pc, #180]	; (8003308 <HAL_GPIO_Init+0x2d0>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	492c      	ldr	r1, [pc, #176]	; (8003308 <HAL_GPIO_Init+0x2d0>)
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	4313      	orrs	r3, r2
 800325a:	600b      	str	r3, [r1, #0]
 800325c:	e006      	b.n	800326c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800325e:	4b2a      	ldr	r3, [pc, #168]	; (8003308 <HAL_GPIO_Init+0x2d0>)
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	43db      	mvns	r3, r3
 8003266:	4928      	ldr	r1, [pc, #160]	; (8003308 <HAL_GPIO_Init+0x2d0>)
 8003268:	4013      	ands	r3, r2
 800326a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d006      	beq.n	8003286 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003278:	4b23      	ldr	r3, [pc, #140]	; (8003308 <HAL_GPIO_Init+0x2d0>)
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	4922      	ldr	r1, [pc, #136]	; (8003308 <HAL_GPIO_Init+0x2d0>)
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	4313      	orrs	r3, r2
 8003282:	604b      	str	r3, [r1, #4]
 8003284:	e006      	b.n	8003294 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003286:	4b20      	ldr	r3, [pc, #128]	; (8003308 <HAL_GPIO_Init+0x2d0>)
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	43db      	mvns	r3, r3
 800328e:	491e      	ldr	r1, [pc, #120]	; (8003308 <HAL_GPIO_Init+0x2d0>)
 8003290:	4013      	ands	r3, r2
 8003292:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d006      	beq.n	80032ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032a0:	4b19      	ldr	r3, [pc, #100]	; (8003308 <HAL_GPIO_Init+0x2d0>)
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	4918      	ldr	r1, [pc, #96]	; (8003308 <HAL_GPIO_Init+0x2d0>)
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	608b      	str	r3, [r1, #8]
 80032ac:	e006      	b.n	80032bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032ae:	4b16      	ldr	r3, [pc, #88]	; (8003308 <HAL_GPIO_Init+0x2d0>)
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	43db      	mvns	r3, r3
 80032b6:	4914      	ldr	r1, [pc, #80]	; (8003308 <HAL_GPIO_Init+0x2d0>)
 80032b8:	4013      	ands	r3, r2
 80032ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d021      	beq.n	800330c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032c8:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <HAL_GPIO_Init+0x2d0>)
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	490e      	ldr	r1, [pc, #56]	; (8003308 <HAL_GPIO_Init+0x2d0>)
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	60cb      	str	r3, [r1, #12]
 80032d4:	e021      	b.n	800331a <HAL_GPIO_Init+0x2e2>
 80032d6:	bf00      	nop
 80032d8:	10320000 	.word	0x10320000
 80032dc:	10310000 	.word	0x10310000
 80032e0:	10220000 	.word	0x10220000
 80032e4:	10210000 	.word	0x10210000
 80032e8:	10120000 	.word	0x10120000
 80032ec:	10110000 	.word	0x10110000
 80032f0:	40021000 	.word	0x40021000
 80032f4:	40010000 	.word	0x40010000
 80032f8:	40010800 	.word	0x40010800
 80032fc:	40010c00 	.word	0x40010c00
 8003300:	40011000 	.word	0x40011000
 8003304:	40011400 	.word	0x40011400
 8003308:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800330c:	4b0b      	ldr	r3, [pc, #44]	; (800333c <HAL_GPIO_Init+0x304>)
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	43db      	mvns	r3, r3
 8003314:	4909      	ldr	r1, [pc, #36]	; (800333c <HAL_GPIO_Init+0x304>)
 8003316:	4013      	ands	r3, r2
 8003318:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	3301      	adds	r3, #1
 800331e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	fa22 f303 	lsr.w	r3, r2, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	f47f ae8e 	bne.w	800304c <HAL_GPIO_Init+0x14>
  }
}
 8003330:	bf00      	nop
 8003332:	bf00      	nop
 8003334:	372c      	adds	r7, #44	; 0x2c
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr
 800333c:	40010400 	.word	0x40010400

08003340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	807b      	strh	r3, [r7, #2]
 800334c:	4613      	mov	r3, r2
 800334e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003350:	787b      	ldrb	r3, [r7, #1]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003356:	887a      	ldrh	r2, [r7, #2]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800335c:	e003      	b.n	8003366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800335e:	887b      	ldrh	r3, [r7, #2]
 8003360:	041a      	lsls	r2, r3, #16
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	611a      	str	r2, [r3, #16]
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr

08003370 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003372:	b08b      	sub	sp, #44	; 0x2c
 8003374:	af06      	add	r7, sp, #24
 8003376:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e0fd      	b.n	800357e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7fe ff82 	bl	80022a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2203      	movs	r2, #3
 80033a0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f003 fba9 	bl	8006b00 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	687e      	ldr	r6, [r7, #4]
 80033b6:	466d      	mov	r5, sp
 80033b8:	f106 0410 	add.w	r4, r6, #16
 80033bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033c0:	6823      	ldr	r3, [r4, #0]
 80033c2:	602b      	str	r3, [r5, #0]
 80033c4:	1d33      	adds	r3, r6, #4
 80033c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033c8:	6838      	ldr	r0, [r7, #0]
 80033ca:	f003 fb89 	bl	8006ae0 <USB_CoreInit>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d005      	beq.n	80033e0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e0ce      	b.n	800357e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2100      	movs	r1, #0
 80033e6:	4618      	mov	r0, r3
 80033e8:	f003 fba4 	bl	8006b34 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ec:	2300      	movs	r3, #0
 80033ee:	73fb      	strb	r3, [r7, #15]
 80033f0:	e04c      	b.n	800348c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	440b      	add	r3, r1
 8003402:	3301      	adds	r3, #1
 8003404:	2201      	movs	r2, #1
 8003406:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003408:	7bfb      	ldrb	r3, [r7, #15]
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	1c5a      	adds	r2, r3, #1
 800340e:	4613      	mov	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	440b      	add	r3, r1
 8003418:	7bfa      	ldrb	r2, [r7, #15]
 800341a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800341c:	7bfa      	ldrb	r2, [r7, #15]
 800341e:	7bfb      	ldrb	r3, [r7, #15]
 8003420:	b298      	uxth	r0, r3
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	440b      	add	r3, r1
 800342e:	3336      	adds	r3, #54	; 0x36
 8003430:	4602      	mov	r2, r0
 8003432:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003434:	7bfb      	ldrb	r3, [r7, #15]
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	440b      	add	r3, r1
 8003444:	3303      	adds	r3, #3
 8003446:	2200      	movs	r2, #0
 8003448:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800344a:	7bfa      	ldrb	r2, [r7, #15]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	440b      	add	r3, r1
 8003458:	3338      	adds	r3, #56	; 0x38
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800345e:	7bfa      	ldrb	r2, [r7, #15]
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	440b      	add	r3, r1
 800346c:	333c      	adds	r3, #60	; 0x3c
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003472:	7bfa      	ldrb	r2, [r7, #15]
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	4613      	mov	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	440b      	add	r3, r1
 8003480:	3340      	adds	r3, #64	; 0x40
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003486:	7bfb      	ldrb	r3, [r7, #15]
 8003488:	3301      	adds	r3, #1
 800348a:	73fb      	strb	r3, [r7, #15]
 800348c:	7bfa      	ldrb	r2, [r7, #15]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	429a      	cmp	r2, r3
 8003494:	d3ad      	bcc.n	80033f2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003496:	2300      	movs	r3, #0
 8003498:	73fb      	strb	r3, [r7, #15]
 800349a:	e044      	b.n	8003526 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800349c:	7bfa      	ldrb	r2, [r7, #15]
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	4613      	mov	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	440b      	add	r3, r1
 80034aa:	f203 1369 	addw	r3, r3, #361	; 0x169
 80034ae:	2200      	movs	r2, #0
 80034b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034b2:	7bfa      	ldrb	r2, [r7, #15]
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	440b      	add	r3, r1
 80034c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034c4:	7bfa      	ldrb	r2, [r7, #15]
 80034c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034c8:	7bfa      	ldrb	r2, [r7, #15]
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	440b      	add	r3, r1
 80034d6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80034da:	2200      	movs	r2, #0
 80034dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034de:	7bfa      	ldrb	r2, [r7, #15]
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	4613      	mov	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	440b      	add	r3, r1
 80034ec:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034f4:	7bfa      	ldrb	r2, [r7, #15]
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	4613      	mov	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	440b      	add	r3, r1
 8003502:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003506:	2200      	movs	r2, #0
 8003508:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800350a:	7bfa      	ldrb	r2, [r7, #15]
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	440b      	add	r3, r1
 8003518:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003520:	7bfb      	ldrb	r3, [r7, #15]
 8003522:	3301      	adds	r3, #1
 8003524:	73fb      	strb	r3, [r7, #15]
 8003526:	7bfa      	ldrb	r2, [r7, #15]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	429a      	cmp	r2, r3
 800352e:	d3b5      	bcc.n	800349c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	603b      	str	r3, [r7, #0]
 8003536:	687e      	ldr	r6, [r7, #4]
 8003538:	466d      	mov	r5, sp
 800353a:	f106 0410 	add.w	r4, r6, #16
 800353e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003540:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003542:	6823      	ldr	r3, [r4, #0]
 8003544:	602b      	str	r3, [r5, #0]
 8003546:	1d33      	adds	r3, r6, #4
 8003548:	cb0e      	ldmia	r3, {r1, r2, r3}
 800354a:	6838      	ldr	r0, [r7, #0]
 800354c:	f003 fafe 	bl	8006b4c <USB_DevInit>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d005      	beq.n	8003562 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2202      	movs	r2, #2
 800355a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e00d      	b.n	800357e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f004 fc3b 	bl	8007df2 <USB_DevDisconnect>

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003586 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b088      	sub	sp, #32
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f004 fc37 	bl	8007e06 <USB_ReadInterrupts>
 8003598:	4603      	mov	r3, r0
 800359a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800359e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035a2:	d102      	bne.n	80035aa <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f9ab 	bl	8003900 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f004 fc29 	bl	8007e06 <USB_ReadInterrupts>
 80035b4:	4603      	mov	r3, r0
 80035b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035be:	d112      	bne.n	80035e6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d2:	b292      	uxth	r2, r2
 80035d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f951 	bl	8003880 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80035de:	2100      	movs	r1, #0
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f968 	bl	80038b6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f004 fc0b 	bl	8007e06 <USB_ReadInterrupts>
 80035f0:	4603      	mov	r3, r0
 80035f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035fa:	d10b      	bne.n	8003614 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003604:	b29a      	uxth	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800360e:	b292      	uxth	r2, r2
 8003610:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f004 fbf4 	bl	8007e06 <USB_ReadInterrupts>
 800361e:	4603      	mov	r3, r0
 8003620:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003628:	d10b      	bne.n	8003642 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003632:	b29a      	uxth	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800363c:	b292      	uxth	r2, r2
 800363e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f004 fbdd 	bl	8007e06 <USB_ReadInterrupts>
 800364c:	4603      	mov	r3, r0
 800364e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003656:	d126      	bne.n	80036a6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003660:	b29a      	uxth	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0204 	bic.w	r2, r2, #4
 800366a:	b292      	uxth	r2, r2
 800366c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003678:	b29a      	uxth	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0208 	bic.w	r2, r2, #8
 8003682:	b292      	uxth	r2, r2
 8003684:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f90b 	bl	80038a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003696:	b29a      	uxth	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036a0:	b292      	uxth	r2, r2
 80036a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f004 fbab 	bl	8007e06 <USB_ReadInterrupts>
 80036b0:	4603      	mov	r3, r0
 80036b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036ba:	f040 8084 	bne.w	80037c6 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80036be:	2300      	movs	r3, #0
 80036c0:	77fb      	strb	r3, [r7, #31]
 80036c2:	e011      	b.n	80036e8 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	461a      	mov	r2, r3
 80036ca:	7ffb      	ldrb	r3, [r7, #31]
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	441a      	add	r2, r3
 80036d0:	7ffb      	ldrb	r3, [r7, #31]
 80036d2:	8812      	ldrh	r2, [r2, #0]
 80036d4:	b292      	uxth	r2, r2
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	f107 0120 	add.w	r1, r7, #32
 80036dc:	440b      	add	r3, r1
 80036de:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80036e2:	7ffb      	ldrb	r3, [r7, #31]
 80036e4:	3301      	adds	r3, #1
 80036e6:	77fb      	strb	r3, [r7, #31]
 80036e8:	7ffb      	ldrb	r3, [r7, #31]
 80036ea:	2b07      	cmp	r3, #7
 80036ec:	d9ea      	bls.n	80036c4 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f042 0201 	orr.w	r2, r2, #1
 8003700:	b292      	uxth	r2, r2
 8003702:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800370e:	b29a      	uxth	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0201 	bic.w	r2, r2, #1
 8003718:	b292      	uxth	r2, r2
 800371a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800371e:	bf00      	nop
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003728:	b29b      	uxth	r3, r3
 800372a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0f6      	beq.n	8003720 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800373a:	b29a      	uxth	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003744:	b292      	uxth	r2, r2
 8003746:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800374a:	2300      	movs	r3, #0
 800374c:	77fb      	strb	r3, [r7, #31]
 800374e:	e010      	b.n	8003772 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003750:	7ffb      	ldrb	r3, [r7, #31]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6812      	ldr	r2, [r2, #0]
 8003756:	4611      	mov	r1, r2
 8003758:	7ffa      	ldrb	r2, [r7, #31]
 800375a:	0092      	lsls	r2, r2, #2
 800375c:	440a      	add	r2, r1
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	f107 0120 	add.w	r1, r7, #32
 8003764:	440b      	add	r3, r1
 8003766:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800376a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800376c:	7ffb      	ldrb	r3, [r7, #31]
 800376e:	3301      	adds	r3, #1
 8003770:	77fb      	strb	r3, [r7, #31]
 8003772:	7ffb      	ldrb	r3, [r7, #31]
 8003774:	2b07      	cmp	r3, #7
 8003776:	d9eb      	bls.n	8003750 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003780:	b29a      	uxth	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0208 	orr.w	r2, r2, #8
 800378a:	b292      	uxth	r2, r2
 800378c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003798:	b29a      	uxth	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037a2:	b292      	uxth	r2, r2
 80037a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0204 	orr.w	r2, r2, #4
 80037ba:	b292      	uxth	r2, r2
 80037bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f866 	bl	8003892 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f004 fb1b 	bl	8007e06 <USB_ReadInterrupts>
 80037d0:	4603      	mov	r3, r0
 80037d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037da:	d10e      	bne.n	80037fa <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037ee:	b292      	uxth	r2, r2
 80037f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f83a 	bl	800386e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f004 fb01 	bl	8007e06 <USB_ReadInterrupts>
 8003804:	4603      	mov	r3, r0
 8003806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800380e:	d10b      	bne.n	8003828 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003818:	b29a      	uxth	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003822:	b292      	uxth	r2, r2
 8003824:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003828:	bf00      	nop
 800382a:	3720      	adds	r7, #32
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	bc80      	pop	{r7}
 8003844:	4770      	bx	lr

08003846 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	460b      	mov	r3, r1
 8003850:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr

0800385c <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	bc80      	pop	{r7}
 800386c:	4770      	bx	lr

0800386e <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr

08003880 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	bc80      	pop	{r7}
 8003890:	4770      	bx	lr

08003892 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	bc80      	pop	{r7}
 80038a2:	4770      	bx	lr

080038a4 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr

080038b6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b082      	sub	sp, #8
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
 80038be:	460b      	mov	r3, r1
 80038c0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d101      	bne.n	80038d0 <HAL_PCD_SetAddress+0x1a>
 80038cc:	2302      	movs	r3, #2
 80038ce:	e013      	b.n	80038f8 <HAL_PCD_SetAddress+0x42>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	78fa      	ldrb	r2, [r7, #3]
 80038dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	78fa      	ldrb	r2, [r7, #3]
 80038e6:	4611      	mov	r1, r2
 80038e8:	4618      	mov	r0, r3
 80038ea:	f004 fa6f 	bl	8007dcc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08e      	sub	sp, #56	; 0x38
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003908:	e2df      	b.n	8003eca <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003912:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003914:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003916:	b2db      	uxtb	r3, r3
 8003918:	f003 030f 	and.w	r3, r3, #15
 800391c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003920:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003924:	2b00      	cmp	r3, #0
 8003926:	f040 8158 	bne.w	8003bda <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800392a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800392c:	f003 0310 	and.w	r3, r3, #16
 8003930:	2b00      	cmp	r3, #0
 8003932:	d152      	bne.n	80039da <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	b29b      	uxth	r3, r3
 800393c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003944:	81fb      	strh	r3, [r7, #14]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	89fb      	ldrh	r3, [r7, #14]
 800394c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003954:	b29b      	uxth	r3, r3
 8003956:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3328      	adds	r3, #40	; 0x28
 800395c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003966:	b29b      	uxth	r3, r3
 8003968:	461a      	mov	r2, r3
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	4413      	add	r3, r2
 8003972:	3302      	adds	r3, #2
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6812      	ldr	r2, [r2, #0]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	695a      	ldr	r2, [r3, #20]
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	441a      	add	r2, r3
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003998:	2100      	movs	r1, #0
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7ff ff53 	bl	8003846 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 828e 	beq.w	8003eca <PCD_EP_ISR_Handler+0x5ca>
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f040 8289 	bne.w	8003eca <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	b292      	uxth	r2, r2
 80039cc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80039d8:	e277      	b.n	8003eca <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80039ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80039ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d034      	beq.n	8003a5e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	461a      	mov	r2, r3
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	4413      	add	r3, r2
 8003a08:	3306      	adds	r3, #6
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6812      	ldr	r2, [r2, #0]
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6818      	ldr	r0, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	f004 fa3b 	bl	8007eae <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003a44:	4013      	ands	r3, r2
 8003a46:	823b      	strh	r3, [r7, #16]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	8a3a      	ldrh	r2, [r7, #16]
 8003a4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a52:	b292      	uxth	r2, r2
 8003a54:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff ff00 	bl	800385c <HAL_PCD_SetupStageCallback>
 8003a5c:	e235      	b.n	8003eca <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003a5e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f280 8231 	bge.w	8003eca <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003a74:	4013      	ands	r3, r2
 8003a76:	83bb      	strh	r3, [r7, #28]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	8bba      	ldrh	r2, [r7, #28]
 8003a7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a82:	b292      	uxth	r2, r2
 8003a84:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	461a      	mov	r2, r3
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	4413      	add	r3, r2
 8003a9a:	3306      	adds	r3, #6
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6812      	ldr	r2, [r2, #0]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d019      	beq.n	8003aee <PCD_EP_ISR_Handler+0x1ee>
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d015      	beq.n	8003aee <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6818      	ldr	r0, [r3, #0]
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	6959      	ldr	r1, [r3, #20]
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	f004 f9eb 	bl	8007eae <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	695a      	ldr	r2, [r3, #20]
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	441a      	add	r2, r3
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f7ff fea1 	bl	8003830 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	61bb      	str	r3, [r7, #24]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	461a      	mov	r2, r3
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	4413      	add	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b0c:	617b      	str	r3, [r7, #20]
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d112      	bne.n	8003b3c <PCD_EP_ISR_Handler+0x23c>
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	881b      	ldrh	r3, [r3, #0]
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	801a      	strh	r2, [r3, #0]
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	801a      	strh	r2, [r3, #0]
 8003b3a:	e02f      	b.n	8003b9c <PCD_EP_ISR_Handler+0x29c>
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	2b3e      	cmp	r3, #62	; 0x3e
 8003b42:	d813      	bhi.n	8003b6c <PCD_EP_ISR_Handler+0x26c>
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	085b      	lsrs	r3, r3, #1
 8003b4a:	633b      	str	r3, [r7, #48]	; 0x30
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d002      	beq.n	8003b5e <PCD_EP_ISR_Handler+0x25e>
 8003b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	029b      	lsls	r3, r3, #10
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	801a      	strh	r2, [r3, #0]
 8003b6a:	e017      	b.n	8003b9c <PCD_EP_ISR_Handler+0x29c>
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	095b      	lsrs	r3, r3, #5
 8003b72:	633b      	str	r3, [r7, #48]	; 0x30
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	f003 031f 	and.w	r3, r3, #31
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d102      	bne.n	8003b86 <PCD_EP_ISR_Handler+0x286>
 8003b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b82:	3b01      	subs	r3, #1
 8003b84:	633b      	str	r3, [r7, #48]	; 0x30
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	029b      	lsls	r3, r3, #10
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	881b      	ldrh	r3, [r3, #0]
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bac:	827b      	strh	r3, [r7, #18]
 8003bae:	8a7b      	ldrh	r3, [r7, #18]
 8003bb0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003bb4:	827b      	strh	r3, [r7, #18]
 8003bb6:	8a7b      	ldrh	r3, [r7, #18]
 8003bb8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003bbc:	827b      	strh	r3, [r7, #18]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	8a7b      	ldrh	r3, [r7, #18]
 8003bc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	8013      	strh	r3, [r2, #0]
 8003bd8:	e177      	b.n	8003eca <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	461a      	mov	r2, r3
 8003be0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003bec:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f280 80ea 	bge.w	8003dca <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4413      	add	r3, r2
 8003c04:	881b      	ldrh	r3, [r3, #0]
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	853b      	strh	r3, [r7, #40]	; 0x28
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	461a      	mov	r2, r3
 8003c16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003c20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c24:	b292      	uxth	r2, r2
 8003c26:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003c28:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	7b1b      	ldrb	r3, [r3, #12]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d122      	bne.n	8003c8c <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	461a      	mov	r2, r3
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	4413      	add	r3, r2
 8003c5a:	3306      	adds	r3, #6
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6812      	ldr	r2, [r2, #0]
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c68:	881b      	ldrh	r3, [r3, #0]
 8003c6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c6e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003c70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 8087 	beq.w	8003d86 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6818      	ldr	r0, [r3, #0]
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	6959      	ldr	r1, [r3, #20]
 8003c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c82:	88da      	ldrh	r2, [r3, #6]
 8003c84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c86:	f004 f912 	bl	8007eae <USB_ReadPMA>
 8003c8a:	e07c      	b.n	8003d86 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	78db      	ldrb	r3, [r3, #3]
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d108      	bne.n	8003ca6 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003c94:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003c96:	461a      	mov	r2, r3
 8003c98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f923 	bl	8003ee6 <HAL_PCD_EP_DB_Receive>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003ca4:	e06f      	b.n	8003d86 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	461a      	mov	r2, r3
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4413      	add	r3, r2
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc0:	847b      	strh	r3, [r7, #34]	; 0x22
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	441a      	add	r2, r3
 8003cd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003cd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cde:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	461a      	mov	r2, r3
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4413      	add	r3, r2
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d021      	beq.n	8003d44 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	4413      	add	r3, r2
 8003d14:	3302      	adds	r3, #2
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6812      	ldr	r2, [r2, #0]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d28:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003d2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d02a      	beq.n	8003d86 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6818      	ldr	r0, [r3, #0]
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	6959      	ldr	r1, [r3, #20]
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	891a      	ldrh	r2, [r3, #8]
 8003d3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d3e:	f004 f8b6 	bl	8007eae <USB_ReadPMA>
 8003d42:	e020      	b.n	8003d86 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	461a      	mov	r2, r3
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	4413      	add	r3, r2
 8003d58:	3306      	adds	r3, #6
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6812      	ldr	r2, [r2, #0]
 8003d60:	4413      	add	r3, r2
 8003d62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d6c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003d6e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d008      	beq.n	8003d86 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6818      	ldr	r0, [r3, #0]
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	6959      	ldr	r1, [r3, #20]
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	895a      	ldrh	r2, [r3, #10]
 8003d80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d82:	f004 f894 	bl	8007eae <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	69da      	ldr	r2, [r3, #28]
 8003d8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d8c:	441a      	add	r2, r3
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	695a      	ldr	r2, [r3, #20]
 8003d96:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d98:	441a      	add	r2, r3
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d004      	beq.n	8003db0 <PCD_EP_ISR_Handler+0x4b0>
 8003da6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d206      	bcs.n	8003dbe <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	4619      	mov	r1, r3
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7ff fd3a 	bl	8003830 <HAL_PCD_DataOutStageCallback>
 8003dbc:	e005      	b.n	8003dca <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f002 fee1 	bl	8006b8c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003dca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d07a      	beq.n	8003eca <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8003dd4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003dd8:	1c5a      	adds	r2, r3, #1
 8003dda:	4613      	mov	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	4413      	add	r3, r2
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	4413      	add	r3, r2
 8003de6:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	461a      	mov	r2, r3
 8003dee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e02:	843b      	strh	r3, [r7, #32]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	461a      	mov	r2, r3
 8003e0a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	441a      	add	r2, r3
 8003e12:	8c3b      	ldrh	r3, [r7, #32]
 8003e14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	78db      	ldrb	r3, [r3, #3]
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d108      	bne.n	8003e3a <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d146      	bne.n	8003ebe <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003e30:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d141      	bne.n	8003ebe <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	461a      	mov	r2, r3
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	4413      	add	r3, r2
 8003e4e:	3302      	adds	r3, #2
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6812      	ldr	r2, [r2, #0]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e62:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	699a      	ldr	r2, [r3, #24]
 8003e68:	8bfb      	ldrh	r3, [r7, #30]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d906      	bls.n	8003e7c <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	699a      	ldr	r2, [r3, #24]
 8003e72:	8bfb      	ldrh	r3, [r7, #30]
 8003e74:	1ad2      	subs	r2, r2, r3
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	619a      	str	r2, [r3, #24]
 8003e7a:	e002      	b.n	8003e82 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	2200      	movs	r2, #0
 8003e80:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d106      	bne.n	8003e98 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	4619      	mov	r1, r3
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7ff fcd8 	bl	8003846 <HAL_PCD_DataInStageCallback>
 8003e96:	e018      	b.n	8003eca <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	695a      	ldr	r2, [r3, #20]
 8003e9c:	8bfb      	ldrh	r3, [r7, #30]
 8003e9e:	441a      	add	r2, r3
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	69da      	ldr	r2, [r3, #28]
 8003ea8:	8bfb      	ldrh	r3, [r7, #30]
 8003eaa:	441a      	add	r2, r3
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f002 fe68 	bl	8006b8c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003ebc:	e005      	b.n	8003eca <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003ebe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f91b 	bl	8004100 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	b21b      	sxth	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f6ff ad17 	blt.w	800390a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3738      	adds	r7, #56	; 0x38
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b088      	sub	sp, #32
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	60f8      	str	r0, [r7, #12]
 8003eee:	60b9      	str	r1, [r7, #8]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ef4:	88fb      	ldrh	r3, [r7, #6]
 8003ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d07e      	beq.n	8003ffc <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	461a      	mov	r2, r3
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	4413      	add	r3, r2
 8003f12:	3302      	adds	r3, #2
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	6812      	ldr	r2, [r2, #0]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f26:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	699a      	ldr	r2, [r3, #24]
 8003f2c:	8b7b      	ldrh	r3, [r7, #26]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d306      	bcc.n	8003f40 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	699a      	ldr	r2, [r3, #24]
 8003f36:	8b7b      	ldrh	r3, [r7, #26]
 8003f38:	1ad2      	subs	r2, r2, r3
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	619a      	str	r2, [r3, #24]
 8003f3e:	e002      	b.n	8003f46 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2200      	movs	r2, #0
 8003f44:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d123      	bne.n	8003f96 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	461a      	mov	r2, r3
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f68:	833b      	strh	r3, [r7, #24]
 8003f6a:	8b3b      	ldrh	r3, [r7, #24]
 8003f6c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003f70:	833b      	strh	r3, [r7, #24]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	461a      	mov	r2, r3
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	441a      	add	r2, r3
 8003f80:	8b3b      	ldrh	r3, [r7, #24]
 8003f82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003f96:	88fb      	ldrh	r3, [r7, #6]
 8003f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d01f      	beq.n	8003fe0 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fba:	82fb      	strh	r3, [r7, #22]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	441a      	add	r2, r3
 8003fca:	8afb      	ldrh	r3, [r7, #22]
 8003fcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003fe0:	8b7b      	ldrh	r3, [r7, #26]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f000 8087 	beq.w	80040f6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6818      	ldr	r0, [r3, #0]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	6959      	ldr	r1, [r3, #20]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	891a      	ldrh	r2, [r3, #8]
 8003ff4:	8b7b      	ldrh	r3, [r7, #26]
 8003ff6:	f003 ff5a 	bl	8007eae <USB_ReadPMA>
 8003ffa:	e07c      	b.n	80040f6 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004004:	b29b      	uxth	r3, r3
 8004006:	461a      	mov	r2, r3
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	4413      	add	r3, r2
 8004010:	3306      	adds	r3, #6
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	6812      	ldr	r2, [r2, #0]
 8004018:	4413      	add	r3, r2
 800401a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004024:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	699a      	ldr	r2, [r3, #24]
 800402a:	8b7b      	ldrh	r3, [r7, #26]
 800402c:	429a      	cmp	r2, r3
 800402e:	d306      	bcc.n	800403e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	699a      	ldr	r2, [r3, #24]
 8004034:	8b7b      	ldrh	r3, [r7, #26]
 8004036:	1ad2      	subs	r2, r2, r3
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	619a      	str	r2, [r3, #24]
 800403c:	e002      	b.n	8004044 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2200      	movs	r2, #0
 8004042:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d123      	bne.n	8004094 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	461a      	mov	r2, r3
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	b29b      	uxth	r3, r3
 800405e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004066:	83fb      	strh	r3, [r7, #30]
 8004068:	8bfb      	ldrh	r3, [r7, #30]
 800406a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800406e:	83fb      	strh	r3, [r7, #30]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	461a      	mov	r2, r3
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	441a      	add	r2, r3
 800407e:	8bfb      	ldrh	r3, [r7, #30]
 8004080:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004084:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004088:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800408c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004090:	b29b      	uxth	r3, r3
 8004092:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004094:	88fb      	ldrh	r3, [r7, #6]
 8004096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409a:	2b00      	cmp	r3, #0
 800409c:	d11f      	bne.n	80040de <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	461a      	mov	r2, r3
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	4413      	add	r3, r2
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b8:	83bb      	strh	r3, [r7, #28]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	441a      	add	r2, r3
 80040c8:	8bbb      	ldrh	r3, [r7, #28]
 80040ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040da:	b29b      	uxth	r3, r3
 80040dc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80040de:	8b7b      	ldrh	r3, [r7, #26]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d008      	beq.n	80040f6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6818      	ldr	r0, [r3, #0]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	6959      	ldr	r1, [r3, #20]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	895a      	ldrh	r2, [r3, #10]
 80040f0:	8b7b      	ldrh	r3, [r7, #26]
 80040f2:	f003 fedc 	bl	8007eae <USB_ReadPMA>
    }
  }

  return count;
 80040f6:	8b7b      	ldrh	r3, [r7, #26]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3720      	adds	r7, #32
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b094      	sub	sp, #80	; 0x50
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	4613      	mov	r3, r2
 800410c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800410e:	88fb      	ldrh	r3, [r7, #6]
 8004110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 8138 	beq.w	800438a <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004122:	b29b      	uxth	r3, r3
 8004124:	461a      	mov	r2, r3
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	4413      	add	r3, r2
 800412e:	3302      	adds	r3, #2
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	6812      	ldr	r2, [r2, #0]
 8004136:	4413      	add	r3, r2
 8004138:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800413c:	881b      	ldrh	r3, [r3, #0]
 800413e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004142:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	699a      	ldr	r2, [r3, #24]
 800414a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800414e:	429a      	cmp	r2, r3
 8004150:	d907      	bls.n	8004162 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	699a      	ldr	r2, [r3, #24]
 8004156:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800415a:	1ad2      	subs	r2, r2, r3
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	619a      	str	r2, [r3, #24]
 8004160:	e002      	b.n	8004168 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2200      	movs	r2, #0
 8004166:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d12c      	bne.n	80041ca <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	4619      	mov	r1, r3
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f7ff fb65 	bl	8003846 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800417c:	88fb      	ldrh	r3, [r7, #6]
 800417e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 823a 	beq.w	80045fc <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4413      	add	r3, r2
 8004196:	881b      	ldrh	r3, [r3, #0]
 8004198:	b29b      	uxth	r3, r3
 800419a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800419e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a2:	82fb      	strh	r3, [r7, #22]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	461a      	mov	r2, r3
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	441a      	add	r2, r3
 80041b2:	8afb      	ldrh	r3, [r7, #22]
 80041b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	8013      	strh	r3, [r2, #0]
 80041c8:	e218      	b.n	80045fc <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80041ca:	88fb      	ldrh	r3, [r7, #6]
 80041cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d01f      	beq.n	8004214 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	461a      	mov	r2, r3
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ee:	857b      	strh	r3, [r7, #42]	; 0x2a
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	461a      	mov	r2, r3
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	441a      	add	r2, r3
 80041fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004200:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004204:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004208:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800420c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004210:	b29b      	uxth	r3, r3
 8004212:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800421a:	2b01      	cmp	r3, #1
 800421c:	f040 81ee 	bne.w	80045fc <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	695a      	ldr	r2, [r3, #20]
 8004224:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004228:	441a      	add	r2, r3
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	69da      	ldr	r2, [r3, #28]
 8004232:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004236:	441a      	add	r2, r3
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	6a1a      	ldr	r2, [r3, #32]
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	429a      	cmp	r2, r3
 8004246:	d309      	bcc.n	800425c <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	6a1a      	ldr	r2, [r3, #32]
 8004252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004254:	1ad2      	subs	r2, r2, r3
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	621a      	str	r2, [r3, #32]
 800425a:	e015      	b.n	8004288 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d107      	bne.n	8004274 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8004264:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004268:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004272:	e009      	b.n	8004288 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	2200      	movs	r2, #0
 8004286:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	785b      	ldrb	r3, [r3, #1]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d155      	bne.n	800433c <HAL_PCD_EP_DB_Transmit+0x23c>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	61fb      	str	r3, [r7, #28]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800429e:	b29b      	uxth	r3, r3
 80042a0:	461a      	mov	r2, r3
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	4413      	add	r3, r2
 80042a6:	61fb      	str	r3, [r7, #28]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	011a      	lsls	r2, r3, #4
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	4413      	add	r3, r2
 80042b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80042b6:	61bb      	str	r3, [r7, #24]
 80042b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d112      	bne.n	80042e4 <HAL_PCD_EP_DB_Transmit+0x1e4>
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	801a      	strh	r2, [r3, #0]
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	881b      	ldrh	r3, [r3, #0]
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042dc:	b29a      	uxth	r2, r3
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	801a      	strh	r2, [r3, #0]
 80042e2:	e047      	b.n	8004374 <HAL_PCD_EP_DB_Transmit+0x274>
 80042e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042e6:	2b3e      	cmp	r3, #62	; 0x3e
 80042e8:	d811      	bhi.n	800430e <HAL_PCD_EP_DB_Transmit+0x20e>
 80042ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ec:	085b      	lsrs	r3, r3, #1
 80042ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <HAL_PCD_EP_DB_Transmit+0x200>
 80042fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fc:	3301      	adds	r3, #1
 80042fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004302:	b29b      	uxth	r3, r3
 8004304:	029b      	lsls	r3, r3, #10
 8004306:	b29a      	uxth	r2, r3
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	801a      	strh	r2, [r3, #0]
 800430c:	e032      	b.n	8004374 <HAL_PCD_EP_DB_Transmit+0x274>
 800430e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004310:	095b      	lsrs	r3, r3, #5
 8004312:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004316:	f003 031f 	and.w	r3, r3, #31
 800431a:	2b00      	cmp	r3, #0
 800431c:	d102      	bne.n	8004324 <HAL_PCD_EP_DB_Transmit+0x224>
 800431e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004320:	3b01      	subs	r3, #1
 8004322:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004326:	b29b      	uxth	r3, r3
 8004328:	029b      	lsls	r3, r3, #10
 800432a:	b29b      	uxth	r3, r3
 800432c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004334:	b29a      	uxth	r2, r3
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	801a      	strh	r2, [r3, #0]
 800433a:	e01b      	b.n	8004374 <HAL_PCD_EP_DB_Transmit+0x274>
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	785b      	ldrb	r3, [r3, #1]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d117      	bne.n	8004374 <HAL_PCD_EP_DB_Transmit+0x274>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	627b      	str	r3, [r7, #36]	; 0x24
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004352:	b29b      	uxth	r3, r3
 8004354:	461a      	mov	r2, r3
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	4413      	add	r3, r2
 800435a:	627b      	str	r3, [r7, #36]	; 0x24
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	011a      	lsls	r2, r3, #4
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	4413      	add	r3, r2
 8004366:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800436a:	623b      	str	r3, [r7, #32]
 800436c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800436e:	b29a      	uxth	r2, r3
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6818      	ldr	r0, [r3, #0]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	6959      	ldr	r1, [r3, #20]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	891a      	ldrh	r2, [r3, #8]
 8004380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004382:	b29b      	uxth	r3, r3
 8004384:	f003 fd4e 	bl	8007e24 <USB_WritePMA>
 8004388:	e138      	b.n	80045fc <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004392:	b29b      	uxth	r3, r3
 8004394:	461a      	mov	r2, r3
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	4413      	add	r3, r2
 800439e:	3306      	adds	r3, #6
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	6812      	ldr	r2, [r2, #0]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043b2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	699a      	ldr	r2, [r3, #24]
 80043ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80043be:	429a      	cmp	r2, r3
 80043c0:	d307      	bcc.n	80043d2 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	699a      	ldr	r2, [r3, #24]
 80043c6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80043ca:	1ad2      	subs	r2, r2, r3
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	619a      	str	r2, [r3, #24]
 80043d0:	e002      	b.n	80043d8 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2200      	movs	r2, #0
 80043d6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d12e      	bne.n	800443e <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	4619      	mov	r1, r3
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f7ff fa2d 	bl	8003846 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80043ec:	88fb      	ldrh	r3, [r7, #6]
 80043ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f040 8102 	bne.w	80045fc <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	461a      	mov	r2, r3
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	881b      	ldrh	r3, [r3, #0]
 8004408:	b29b      	uxth	r3, r3
 800440a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800440e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004412:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	441a      	add	r2, r3
 8004424:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004428:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800442c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004430:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004438:	b29b      	uxth	r3, r3
 800443a:	8013      	strh	r3, [r2, #0]
 800443c:	e0de      	b.n	80045fc <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800443e:	88fb      	ldrh	r3, [r7, #6]
 8004440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d11f      	bne.n	8004488 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	461a      	mov	r2, r3
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	881b      	ldrh	r3, [r3, #0]
 8004458:	b29b      	uxth	r3, r3
 800445a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800445e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004462:	867b      	strh	r3, [r7, #50]	; 0x32
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	461a      	mov	r2, r3
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	441a      	add	r2, r3
 8004472:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004474:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004478:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800447c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004484:	b29b      	uxth	r3, r3
 8004486:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800448e:	2b01      	cmp	r3, #1
 8004490:	f040 80b4 	bne.w	80045fc <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	695a      	ldr	r2, [r3, #20]
 8004498:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800449c:	441a      	add	r2, r3
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	69da      	ldr	r2, [r3, #28]
 80044a6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80044aa:	441a      	add	r2, r3
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	6a1a      	ldr	r2, [r3, #32]
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d309      	bcc.n	80044d0 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	6a1a      	ldr	r2, [r3, #32]
 80044c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044c8:	1ad2      	subs	r2, r2, r3
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	621a      	str	r2, [r3, #32]
 80044ce:	e015      	b.n	80044fc <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d107      	bne.n	80044e8 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 80044d8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80044dc:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80044e6:	e009      	b.n	80044fc <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2200      	movs	r2, #0
 80044f2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	643b      	str	r3, [r7, #64]	; 0x40
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	785b      	ldrb	r3, [r3, #1]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d155      	bne.n	80045b6 <HAL_PCD_EP_DB_Transmit+0x4b6>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004518:	b29b      	uxth	r3, r3
 800451a:	461a      	mov	r2, r3
 800451c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451e:	4413      	add	r3, r2
 8004520:	63bb      	str	r3, [r7, #56]	; 0x38
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	011a      	lsls	r2, r3, #4
 8004528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452a:	4413      	add	r3, r2
 800452c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004530:	637b      	str	r3, [r7, #52]	; 0x34
 8004532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004534:	2b00      	cmp	r3, #0
 8004536:	d112      	bne.n	800455e <HAL_PCD_EP_DB_Transmit+0x45e>
 8004538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800453a:	881b      	ldrh	r3, [r3, #0]
 800453c:	b29b      	uxth	r3, r3
 800453e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004542:	b29a      	uxth	r2, r3
 8004544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004546:	801a      	strh	r2, [r3, #0]
 8004548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	b29b      	uxth	r3, r3
 800454e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004556:	b29a      	uxth	r2, r3
 8004558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800455a:	801a      	strh	r2, [r3, #0]
 800455c:	e044      	b.n	80045e8 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800455e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004560:	2b3e      	cmp	r3, #62	; 0x3e
 8004562:	d811      	bhi.n	8004588 <HAL_PCD_EP_DB_Transmit+0x488>
 8004564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004566:	085b      	lsrs	r3, r3, #1
 8004568:	64fb      	str	r3, [r7, #76]	; 0x4c
 800456a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <HAL_PCD_EP_DB_Transmit+0x47a>
 8004574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004576:	3301      	adds	r3, #1
 8004578:	64fb      	str	r3, [r7, #76]	; 0x4c
 800457a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800457c:	b29b      	uxth	r3, r3
 800457e:	029b      	lsls	r3, r3, #10
 8004580:	b29a      	uxth	r2, r3
 8004582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004584:	801a      	strh	r2, [r3, #0]
 8004586:	e02f      	b.n	80045e8 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800458a:	095b      	lsrs	r3, r3, #5
 800458c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800458e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004590:	f003 031f 	and.w	r3, r3, #31
 8004594:	2b00      	cmp	r3, #0
 8004596:	d102      	bne.n	800459e <HAL_PCD_EP_DB_Transmit+0x49e>
 8004598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800459a:	3b01      	subs	r3, #1
 800459c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800459e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	029b      	lsls	r3, r3, #10
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045b2:	801a      	strh	r2, [r3, #0]
 80045b4:	e018      	b.n	80045e8 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	785b      	ldrb	r3, [r3, #1]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d114      	bne.n	80045e8 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	461a      	mov	r2, r3
 80045ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045cc:	4413      	add	r3, r2
 80045ce:	643b      	str	r3, [r7, #64]	; 0x40
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	011a      	lsls	r2, r3, #4
 80045d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045d8:	4413      	add	r3, r2
 80045da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045e6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6818      	ldr	r0, [r3, #0]
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	6959      	ldr	r1, [r3, #20]
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	895a      	ldrh	r2, [r3, #10]
 80045f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	f003 fc14 	bl	8007e24 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	461a      	mov	r2, r3
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	881b      	ldrh	r3, [r3, #0]
 800460c:	b29b      	uxth	r3, r3
 800460e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004616:	82bb      	strh	r3, [r7, #20]
 8004618:	8abb      	ldrh	r3, [r7, #20]
 800461a:	f083 0310 	eor.w	r3, r3, #16
 800461e:	82bb      	strh	r3, [r7, #20]
 8004620:	8abb      	ldrh	r3, [r7, #20]
 8004622:	f083 0320 	eor.w	r3, r3, #32
 8004626:	82bb      	strh	r3, [r7, #20]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	461a      	mov	r2, r3
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	441a      	add	r2, r3
 8004636:	8abb      	ldrh	r3, [r7, #20]
 8004638:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800463c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004640:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004648:	b29b      	uxth	r3, r3
 800464a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3750      	adds	r7, #80	; 0x50
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
	...

08004658 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800465c:	4b03      	ldr	r3, [pc, #12]	; (800466c <HAL_PWR_EnableBkUpAccess+0x14>)
 800465e:	2201      	movs	r2, #1
 8004660:	601a      	str	r2, [r3, #0]
}
 8004662:	bf00      	nop
 8004664:	46bd      	mov	sp, r7
 8004666:	bc80      	pop	{r7}
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	420e0020 	.word	0x420e0020

08004670 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8004674:	4b06      	ldr	r3, [pc, #24]	; (8004690 <HAL_PWR_PVD_IRQHandler+0x20>)
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d005      	beq.n	800468c <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8004680:	f000 f808 	bl	8004694 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8004684:	4b02      	ldr	r3, [pc, #8]	; (8004690 <HAL_PWR_PVD_IRQHandler+0x20>)
 8004686:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800468a:	615a      	str	r2, [r3, #20]
  }
}
 800468c:	bf00      	nop
 800468e:	bd80      	pop	{r7, pc}
 8004690:	40010400 	.word	0x40010400

08004694 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8004698:	bf00      	nop
 800469a:	46bd      	mov	sp, r7
 800469c:	bc80      	pop	{r7}
 800469e:	4770      	bx	lr

080046a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e26c      	b.n	8004b8c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 8087 	beq.w	80047ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046c0:	4b92      	ldr	r3, [pc, #584]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f003 030c 	and.w	r3, r3, #12
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	d00c      	beq.n	80046e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80046cc:	4b8f      	ldr	r3, [pc, #572]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f003 030c 	and.w	r3, r3, #12
 80046d4:	2b08      	cmp	r3, #8
 80046d6:	d112      	bne.n	80046fe <HAL_RCC_OscConfig+0x5e>
 80046d8:	4b8c      	ldr	r3, [pc, #560]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046e4:	d10b      	bne.n	80046fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e6:	4b89      	ldr	r3, [pc, #548]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d06c      	beq.n	80047cc <HAL_RCC_OscConfig+0x12c>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d168      	bne.n	80047cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e246      	b.n	8004b8c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004706:	d106      	bne.n	8004716 <HAL_RCC_OscConfig+0x76>
 8004708:	4b80      	ldr	r3, [pc, #512]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a7f      	ldr	r2, [pc, #508]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 800470e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	e02e      	b.n	8004774 <HAL_RCC_OscConfig+0xd4>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10c      	bne.n	8004738 <HAL_RCC_OscConfig+0x98>
 800471e:	4b7b      	ldr	r3, [pc, #492]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a7a      	ldr	r2, [pc, #488]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 8004724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	4b78      	ldr	r3, [pc, #480]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a77      	ldr	r2, [pc, #476]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 8004730:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	e01d      	b.n	8004774 <HAL_RCC_OscConfig+0xd4>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004740:	d10c      	bne.n	800475c <HAL_RCC_OscConfig+0xbc>
 8004742:	4b72      	ldr	r3, [pc, #456]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a71      	ldr	r2, [pc, #452]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 8004748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	4b6f      	ldr	r3, [pc, #444]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a6e      	ldr	r2, [pc, #440]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 8004754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	e00b      	b.n	8004774 <HAL_RCC_OscConfig+0xd4>
 800475c:	4b6b      	ldr	r3, [pc, #428]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a6a      	ldr	r2, [pc, #424]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 8004762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004766:	6013      	str	r3, [r2, #0]
 8004768:	4b68      	ldr	r3, [pc, #416]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a67      	ldr	r2, [pc, #412]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 800476e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004772:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d013      	beq.n	80047a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477c:	f7fd ffc8 	bl	8002710 <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004784:	f7fd ffc4 	bl	8002710 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b64      	cmp	r3, #100	; 0x64
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e1fa      	b.n	8004b8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004796:	4b5d      	ldr	r3, [pc, #372]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d0f0      	beq.n	8004784 <HAL_RCC_OscConfig+0xe4>
 80047a2:	e014      	b.n	80047ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a4:	f7fd ffb4 	bl	8002710 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047ac:	f7fd ffb0 	bl	8002710 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b64      	cmp	r3, #100	; 0x64
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e1e6      	b.n	8004b8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047be:	4b53      	ldr	r3, [pc, #332]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1f0      	bne.n	80047ac <HAL_RCC_OscConfig+0x10c>
 80047ca:	e000      	b.n	80047ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d063      	beq.n	80048a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047da:	4b4c      	ldr	r3, [pc, #304]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f003 030c 	and.w	r3, r3, #12
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00b      	beq.n	80047fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80047e6:	4b49      	ldr	r3, [pc, #292]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f003 030c 	and.w	r3, r3, #12
 80047ee:	2b08      	cmp	r3, #8
 80047f0:	d11c      	bne.n	800482c <HAL_RCC_OscConfig+0x18c>
 80047f2:	4b46      	ldr	r3, [pc, #280]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d116      	bne.n	800482c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047fe:	4b43      	ldr	r3, [pc, #268]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d005      	beq.n	8004816 <HAL_RCC_OscConfig+0x176>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d001      	beq.n	8004816 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e1ba      	b.n	8004b8c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004816:	4b3d      	ldr	r3, [pc, #244]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	4939      	ldr	r1, [pc, #228]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 8004826:	4313      	orrs	r3, r2
 8004828:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800482a:	e03a      	b.n	80048a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d020      	beq.n	8004876 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004834:	4b36      	ldr	r3, [pc, #216]	; (8004910 <HAL_RCC_OscConfig+0x270>)
 8004836:	2201      	movs	r2, #1
 8004838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800483a:	f7fd ff69 	bl	8002710 <HAL_GetTick>
 800483e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004840:	e008      	b.n	8004854 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004842:	f7fd ff65 	bl	8002710 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e19b      	b.n	8004b8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004854:	4b2d      	ldr	r3, [pc, #180]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0f0      	beq.n	8004842 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004860:	4b2a      	ldr	r3, [pc, #168]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	4927      	ldr	r1, [pc, #156]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 8004870:	4313      	orrs	r3, r2
 8004872:	600b      	str	r3, [r1, #0]
 8004874:	e015      	b.n	80048a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004876:	4b26      	ldr	r3, [pc, #152]	; (8004910 <HAL_RCC_OscConfig+0x270>)
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800487c:	f7fd ff48 	bl	8002710 <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004884:	f7fd ff44 	bl	8002710 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e17a      	b.n	8004b8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004896:	4b1d      	ldr	r3, [pc, #116]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1f0      	bne.n	8004884 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0308 	and.w	r3, r3, #8
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d03a      	beq.n	8004924 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d019      	beq.n	80048ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048b6:	4b17      	ldr	r3, [pc, #92]	; (8004914 <HAL_RCC_OscConfig+0x274>)
 80048b8:	2201      	movs	r2, #1
 80048ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048bc:	f7fd ff28 	bl	8002710 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048c4:	f7fd ff24 	bl	8002710 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e15a      	b.n	8004b8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048d6:	4b0d      	ldr	r3, [pc, #52]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0f0      	beq.n	80048c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80048e2:	2001      	movs	r0, #1
 80048e4:	f000 fad8 	bl	8004e98 <RCC_Delay>
 80048e8:	e01c      	b.n	8004924 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048ea:	4b0a      	ldr	r3, [pc, #40]	; (8004914 <HAL_RCC_OscConfig+0x274>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f0:	f7fd ff0e 	bl	8002710 <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048f6:	e00f      	b.n	8004918 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048f8:	f7fd ff0a 	bl	8002710 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d908      	bls.n	8004918 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e140      	b.n	8004b8c <HAL_RCC_OscConfig+0x4ec>
 800490a:	bf00      	nop
 800490c:	40021000 	.word	0x40021000
 8004910:	42420000 	.word	0x42420000
 8004914:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004918:	4b9e      	ldr	r3, [pc, #632]	; (8004b94 <HAL_RCC_OscConfig+0x4f4>)
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1e9      	bne.n	80048f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 80a6 	beq.w	8004a7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004932:	2300      	movs	r3, #0
 8004934:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004936:	4b97      	ldr	r3, [pc, #604]	; (8004b94 <HAL_RCC_OscConfig+0x4f4>)
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10d      	bne.n	800495e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004942:	4b94      	ldr	r3, [pc, #592]	; (8004b94 <HAL_RCC_OscConfig+0x4f4>)
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	4a93      	ldr	r2, [pc, #588]	; (8004b94 <HAL_RCC_OscConfig+0x4f4>)
 8004948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800494c:	61d3      	str	r3, [r2, #28]
 800494e:	4b91      	ldr	r3, [pc, #580]	; (8004b94 <HAL_RCC_OscConfig+0x4f4>)
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004956:	60bb      	str	r3, [r7, #8]
 8004958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800495a:	2301      	movs	r3, #1
 800495c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800495e:	4b8e      	ldr	r3, [pc, #568]	; (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004966:	2b00      	cmp	r3, #0
 8004968:	d118      	bne.n	800499c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800496a:	4b8b      	ldr	r3, [pc, #556]	; (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a8a      	ldr	r2, [pc, #552]	; (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 8004970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004976:	f7fd fecb 	bl	8002710 <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800497e:	f7fd fec7 	bl	8002710 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b64      	cmp	r3, #100	; 0x64
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e0fd      	b.n	8004b8c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004990:	4b81      	ldr	r3, [pc, #516]	; (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0f0      	beq.n	800497e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d106      	bne.n	80049b2 <HAL_RCC_OscConfig+0x312>
 80049a4:	4b7b      	ldr	r3, [pc, #492]	; (8004b94 <HAL_RCC_OscConfig+0x4f4>)
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	4a7a      	ldr	r2, [pc, #488]	; (8004b94 <HAL_RCC_OscConfig+0x4f4>)
 80049aa:	f043 0301 	orr.w	r3, r3, #1
 80049ae:	6213      	str	r3, [r2, #32]
 80049b0:	e02d      	b.n	8004a0e <HAL_RCC_OscConfig+0x36e>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10c      	bne.n	80049d4 <HAL_RCC_OscConfig+0x334>
 80049ba:	4b76      	ldr	r3, [pc, #472]	; (8004b94 <HAL_RCC_OscConfig+0x4f4>)
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	4a75      	ldr	r2, [pc, #468]	; (8004b94 <HAL_RCC_OscConfig+0x4f4>)
 80049c0:	f023 0301 	bic.w	r3, r3, #1
 80049c4:	6213      	str	r3, [r2, #32]
 80049c6:	4b73      	ldr	r3, [pc, #460]	; (8004b94 <HAL_RCC_OscConfig+0x4f4>)
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	4a72      	ldr	r2, [pc, #456]	; (8004b94 <HAL_RCC_OscConfig+0x4f4>)
 80049cc:	f023 0304 	bic.w	r3, r3, #4
 80049d0:	6213      	str	r3, [r2, #32]
 80049d2:	e01c      	b.n	8004a0e <HAL_RCC_OscConfig+0x36e>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	2b05      	cmp	r3, #5
 80049da:	d10c      	bne.n	80049f6 <HAL_RCC_OscConfig+0x356>
 80049dc:	4b6d      	ldr	r3, [pc, #436]	; (8004b94 <HAL_RCC_OscConfig+0x4f4>)
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	4a6c      	ldr	r2, [pc, #432]	; (8004b94 <HAL_RCC_OscConfig+0x4f4>)
 80049e2:	f043 0304 	orr.w	r3, r3, #4
 80049e6:	6213      	str	r3, [r2, #32]
 80049e8:	4b6a      	ldr	r3, [pc, #424]	; (8004b94 <HAL_RCC_OscConfig+0x4f4>)
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	4a69      	ldr	r2, [pc, #420]	; (8004b94 <HAL_RCC_OscConfig+0x4f4>)
 80049ee:	f043 0301 	orr.w	r3, r3, #1
 80049f2:	6213      	str	r3, [r2, #32]
 80049f4:	e00b      	b.n	8004a0e <HAL_RCC_OscConfig+0x36e>
 80049f6:	4b67      	ldr	r3, [pc, #412]	; (8004b94 <HAL_RCC_OscConfig+0x4f4>)
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	4a66      	ldr	r2, [pc, #408]	; (8004b94 <HAL_RCC_OscConfig+0x4f4>)
 80049fc:	f023 0301 	bic.w	r3, r3, #1
 8004a00:	6213      	str	r3, [r2, #32]
 8004a02:	4b64      	ldr	r3, [pc, #400]	; (8004b94 <HAL_RCC_OscConfig+0x4f4>)
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	4a63      	ldr	r2, [pc, #396]	; (8004b94 <HAL_RCC_OscConfig+0x4f4>)
 8004a08:	f023 0304 	bic.w	r3, r3, #4
 8004a0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d015      	beq.n	8004a42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a16:	f7fd fe7b 	bl	8002710 <HAL_GetTick>
 8004a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a1c:	e00a      	b.n	8004a34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a1e:	f7fd fe77 	bl	8002710 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d901      	bls.n	8004a34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e0ab      	b.n	8004b8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a34:	4b57      	ldr	r3, [pc, #348]	; (8004b94 <HAL_RCC_OscConfig+0x4f4>)
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0ee      	beq.n	8004a1e <HAL_RCC_OscConfig+0x37e>
 8004a40:	e014      	b.n	8004a6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a42:	f7fd fe65 	bl	8002710 <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a48:	e00a      	b.n	8004a60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a4a:	f7fd fe61 	bl	8002710 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e095      	b.n	8004b8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a60:	4b4c      	ldr	r3, [pc, #304]	; (8004b94 <HAL_RCC_OscConfig+0x4f4>)
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1ee      	bne.n	8004a4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a6c:	7dfb      	ldrb	r3, [r7, #23]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d105      	bne.n	8004a7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a72:	4b48      	ldr	r3, [pc, #288]	; (8004b94 <HAL_RCC_OscConfig+0x4f4>)
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	4a47      	ldr	r2, [pc, #284]	; (8004b94 <HAL_RCC_OscConfig+0x4f4>)
 8004a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 8081 	beq.w	8004b8a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a88:	4b42      	ldr	r3, [pc, #264]	; (8004b94 <HAL_RCC_OscConfig+0x4f4>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f003 030c 	and.w	r3, r3, #12
 8004a90:	2b08      	cmp	r3, #8
 8004a92:	d061      	beq.n	8004b58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d146      	bne.n	8004b2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a9c:	4b3f      	ldr	r3, [pc, #252]	; (8004b9c <HAL_RCC_OscConfig+0x4fc>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa2:	f7fd fe35 	bl	8002710 <HAL_GetTick>
 8004aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aa8:	e008      	b.n	8004abc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aaa:	f7fd fe31 	bl	8002710 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d901      	bls.n	8004abc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e067      	b.n	8004b8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004abc:	4b35      	ldr	r3, [pc, #212]	; (8004b94 <HAL_RCC_OscConfig+0x4f4>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1f0      	bne.n	8004aaa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a1b      	ldr	r3, [r3, #32]
 8004acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad0:	d108      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004ad2:	4b30      	ldr	r3, [pc, #192]	; (8004b94 <HAL_RCC_OscConfig+0x4f4>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	492d      	ldr	r1, [pc, #180]	; (8004b94 <HAL_RCC_OscConfig+0x4f4>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ae4:	4b2b      	ldr	r3, [pc, #172]	; (8004b94 <HAL_RCC_OscConfig+0x4f4>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a19      	ldr	r1, [r3, #32]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	430b      	orrs	r3, r1
 8004af6:	4927      	ldr	r1, [pc, #156]	; (8004b94 <HAL_RCC_OscConfig+0x4f4>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004afc:	4b27      	ldr	r3, [pc, #156]	; (8004b9c <HAL_RCC_OscConfig+0x4fc>)
 8004afe:	2201      	movs	r2, #1
 8004b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b02:	f7fd fe05 	bl	8002710 <HAL_GetTick>
 8004b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b08:	e008      	b.n	8004b1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b0a:	f7fd fe01 	bl	8002710 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e037      	b.n	8004b8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b1c:	4b1d      	ldr	r3, [pc, #116]	; (8004b94 <HAL_RCC_OscConfig+0x4f4>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0f0      	beq.n	8004b0a <HAL_RCC_OscConfig+0x46a>
 8004b28:	e02f      	b.n	8004b8a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b2a:	4b1c      	ldr	r3, [pc, #112]	; (8004b9c <HAL_RCC_OscConfig+0x4fc>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b30:	f7fd fdee 	bl	8002710 <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b38:	f7fd fdea 	bl	8002710 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e020      	b.n	8004b8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b4a:	4b12      	ldr	r3, [pc, #72]	; (8004b94 <HAL_RCC_OscConfig+0x4f4>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1f0      	bne.n	8004b38 <HAL_RCC_OscConfig+0x498>
 8004b56:	e018      	b.n	8004b8a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d101      	bne.n	8004b64 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e013      	b.n	8004b8c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b64:	4b0b      	ldr	r3, [pc, #44]	; (8004b94 <HAL_RCC_OscConfig+0x4f4>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d106      	bne.n	8004b86 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d001      	beq.n	8004b8a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e000      	b.n	8004b8c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3718      	adds	r7, #24
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40021000 	.word	0x40021000
 8004b98:	40007000 	.word	0x40007000
 8004b9c:	42420060 	.word	0x42420060

08004ba0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e0d0      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bb4:	4b6a      	ldr	r3, [pc, #424]	; (8004d60 <HAL_RCC_ClockConfig+0x1c0>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d910      	bls.n	8004be4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bc2:	4b67      	ldr	r3, [pc, #412]	; (8004d60 <HAL_RCC_ClockConfig+0x1c0>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f023 0207 	bic.w	r2, r3, #7
 8004bca:	4965      	ldr	r1, [pc, #404]	; (8004d60 <HAL_RCC_ClockConfig+0x1c0>)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd2:	4b63      	ldr	r3, [pc, #396]	; (8004d60 <HAL_RCC_ClockConfig+0x1c0>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d001      	beq.n	8004be4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e0b8      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d020      	beq.n	8004c32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d005      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bfc:	4b59      	ldr	r3, [pc, #356]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	4a58      	ldr	r2, [pc, #352]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004c02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0308 	and.w	r3, r3, #8
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c14:	4b53      	ldr	r3, [pc, #332]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	4a52      	ldr	r2, [pc, #328]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004c1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004c1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c20:	4b50      	ldr	r3, [pc, #320]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	494d      	ldr	r1, [pc, #308]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d040      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d107      	bne.n	8004c56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c46:	4b47      	ldr	r3, [pc, #284]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d115      	bne.n	8004c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e07f      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d107      	bne.n	8004c6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c5e:	4b41      	ldr	r3, [pc, #260]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d109      	bne.n	8004c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e073      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c6e:	4b3d      	ldr	r3, [pc, #244]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e06b      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c7e:	4b39      	ldr	r3, [pc, #228]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f023 0203 	bic.w	r2, r3, #3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	4936      	ldr	r1, [pc, #216]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c90:	f7fd fd3e 	bl	8002710 <HAL_GetTick>
 8004c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c96:	e00a      	b.n	8004cae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c98:	f7fd fd3a 	bl	8002710 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e053      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cae:	4b2d      	ldr	r3, [pc, #180]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f003 020c 	and.w	r2, r3, #12
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d1eb      	bne.n	8004c98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cc0:	4b27      	ldr	r3, [pc, #156]	; (8004d60 <HAL_RCC_ClockConfig+0x1c0>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d210      	bcs.n	8004cf0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cce:	4b24      	ldr	r3, [pc, #144]	; (8004d60 <HAL_RCC_ClockConfig+0x1c0>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f023 0207 	bic.w	r2, r3, #7
 8004cd6:	4922      	ldr	r1, [pc, #136]	; (8004d60 <HAL_RCC_ClockConfig+0x1c0>)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cde:	4b20      	ldr	r3, [pc, #128]	; (8004d60 <HAL_RCC_ClockConfig+0x1c0>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d001      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e032      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d008      	beq.n	8004d0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cfc:	4b19      	ldr	r3, [pc, #100]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	4916      	ldr	r1, [pc, #88]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d009      	beq.n	8004d2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d1a:	4b12      	ldr	r3, [pc, #72]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	490e      	ldr	r1, [pc, #56]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d2e:	f000 f821 	bl	8004d74 <HAL_RCC_GetSysClockFreq>
 8004d32:	4602      	mov	r2, r0
 8004d34:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	091b      	lsrs	r3, r3, #4
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	490a      	ldr	r1, [pc, #40]	; (8004d68 <HAL_RCC_ClockConfig+0x1c8>)
 8004d40:	5ccb      	ldrb	r3, [r1, r3]
 8004d42:	fa22 f303 	lsr.w	r3, r2, r3
 8004d46:	4a09      	ldr	r2, [pc, #36]	; (8004d6c <HAL_RCC_ClockConfig+0x1cc>)
 8004d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d4a:	4b09      	ldr	r3, [pc, #36]	; (8004d70 <HAL_RCC_ClockConfig+0x1d0>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fd fc9c 	bl	800268c <HAL_InitTick>

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	40022000 	.word	0x40022000
 8004d64:	40021000 	.word	0x40021000
 8004d68:	0800c870 	.word	0x0800c870
 8004d6c:	20000048 	.word	0x20000048
 8004d70:	2000004c 	.word	0x2000004c

08004d74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d74:	b490      	push	{r4, r7}
 8004d76:	b08a      	sub	sp, #40	; 0x28
 8004d78:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004d7a:	4b2a      	ldr	r3, [pc, #168]	; (8004e24 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004d7c:	1d3c      	adds	r4, r7, #4
 8004d7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004d84:	f240 2301 	movw	r3, #513	; 0x201
 8004d88:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	61fb      	str	r3, [r7, #28]
 8004d8e:	2300      	movs	r3, #0
 8004d90:	61bb      	str	r3, [r7, #24]
 8004d92:	2300      	movs	r3, #0
 8004d94:	627b      	str	r3, [r7, #36]	; 0x24
 8004d96:	2300      	movs	r3, #0
 8004d98:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004d9e:	4b22      	ldr	r3, [pc, #136]	; (8004e28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	f003 030c 	and.w	r3, r3, #12
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d002      	beq.n	8004db4 <HAL_RCC_GetSysClockFreq+0x40>
 8004dae:	2b08      	cmp	r3, #8
 8004db0:	d003      	beq.n	8004dba <HAL_RCC_GetSysClockFreq+0x46>
 8004db2:	e02d      	b.n	8004e10 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004db4:	4b1d      	ldr	r3, [pc, #116]	; (8004e2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004db6:	623b      	str	r3, [r7, #32]
      break;
 8004db8:	e02d      	b.n	8004e16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	0c9b      	lsrs	r3, r3, #18
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004dcc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d013      	beq.n	8004e00 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004dd8:	4b13      	ldr	r3, [pc, #76]	; (8004e28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	0c5b      	lsrs	r3, r3, #17
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004de6:	4413      	add	r3, r2
 8004de8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004dec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	4a0e      	ldr	r2, [pc, #56]	; (8004e2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004df2:	fb02 f203 	mul.w	r2, r2, r3
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8004dfe:	e004      	b.n	8004e0a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	4a0b      	ldr	r2, [pc, #44]	; (8004e30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e04:	fb02 f303 	mul.w	r3, r2, r3
 8004e08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	623b      	str	r3, [r7, #32]
      break;
 8004e0e:	e002      	b.n	8004e16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e10:	4b06      	ldr	r3, [pc, #24]	; (8004e2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e12:	623b      	str	r3, [r7, #32]
      break;
 8004e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e16:	6a3b      	ldr	r3, [r7, #32]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3728      	adds	r7, #40	; 0x28
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bc90      	pop	{r4, r7}
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	0800c850 	.word	0x0800c850
 8004e28:	40021000 	.word	0x40021000
 8004e2c:	007a1200 	.word	0x007a1200
 8004e30:	003d0900 	.word	0x003d0900

08004e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e34:	b480      	push	{r7}
 8004e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e38:	4b02      	ldr	r3, [pc, #8]	; (8004e44 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bc80      	pop	{r7}
 8004e42:	4770      	bx	lr
 8004e44:	20000048 	.word	0x20000048

08004e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e4c:	f7ff fff2 	bl	8004e34 <HAL_RCC_GetHCLKFreq>
 8004e50:	4602      	mov	r2, r0
 8004e52:	4b05      	ldr	r3, [pc, #20]	; (8004e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	0a1b      	lsrs	r3, r3, #8
 8004e58:	f003 0307 	and.w	r3, r3, #7
 8004e5c:	4903      	ldr	r1, [pc, #12]	; (8004e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e5e:	5ccb      	ldrb	r3, [r1, r3]
 8004e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	40021000 	.word	0x40021000
 8004e6c:	0800c880 	.word	0x0800c880

08004e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e74:	f7ff ffde 	bl	8004e34 <HAL_RCC_GetHCLKFreq>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	0adb      	lsrs	r3, r3, #11
 8004e80:	f003 0307 	and.w	r3, r3, #7
 8004e84:	4903      	ldr	r1, [pc, #12]	; (8004e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e86:	5ccb      	ldrb	r3, [r1, r3]
 8004e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	40021000 	.word	0x40021000
 8004e94:	0800c880 	.word	0x0800c880

08004e98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ea0:	4b0a      	ldr	r3, [pc, #40]	; (8004ecc <RCC_Delay+0x34>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a0a      	ldr	r2, [pc, #40]	; (8004ed0 <RCC_Delay+0x38>)
 8004ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eaa:	0a5b      	lsrs	r3, r3, #9
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	fb02 f303 	mul.w	r3, r2, r3
 8004eb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004eb4:	bf00      	nop
  }
  while (Delay --);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	1e5a      	subs	r2, r3, #1
 8004eba:	60fa      	str	r2, [r7, #12]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1f9      	bne.n	8004eb4 <RCC_Delay+0x1c>
}
 8004ec0:	bf00      	nop
 8004ec2:	bf00      	nop
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bc80      	pop	{r7}
 8004eca:	4770      	bx	lr
 8004ecc:	20000048 	.word	0x20000048
 8004ed0:	10624dd3 	.word	0x10624dd3

08004ed4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	613b      	str	r3, [r7, #16]
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d07d      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ef4:	4b4f      	ldr	r3, [pc, #316]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ef6:	69db      	ldr	r3, [r3, #28]
 8004ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10d      	bne.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f00:	4b4c      	ldr	r3, [pc, #304]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f02:	69db      	ldr	r3, [r3, #28]
 8004f04:	4a4b      	ldr	r2, [pc, #300]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f0a:	61d3      	str	r3, [r2, #28]
 8004f0c:	4b49      	ldr	r3, [pc, #292]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f0e:	69db      	ldr	r3, [r3, #28]
 8004f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f14:	60bb      	str	r3, [r7, #8]
 8004f16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f1c:	4b46      	ldr	r3, [pc, #280]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d118      	bne.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f28:	4b43      	ldr	r3, [pc, #268]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a42      	ldr	r2, [pc, #264]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f34:	f7fd fbec 	bl	8002710 <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f3a:	e008      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f3c:	f7fd fbe8 	bl	8002710 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b64      	cmp	r3, #100	; 0x64
 8004f48:	d901      	bls.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e06d      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f4e:	4b3a      	ldr	r3, [pc, #232]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0f0      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f5a:	4b36      	ldr	r3, [pc, #216]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f62:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d02e      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d027      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f78:	4b2e      	ldr	r3, [pc, #184]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f82:	4b2e      	ldr	r3, [pc, #184]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f84:	2201      	movs	r2, #1
 8004f86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f88:	4b2c      	ldr	r3, [pc, #176]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004f8e:	4a29      	ldr	r2, [pc, #164]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d014      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f9e:	f7fd fbb7 	bl	8002710 <HAL_GetTick>
 8004fa2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fa4:	e00a      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fa6:	f7fd fbb3 	bl	8002710 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e036      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fbc:	4b1d      	ldr	r3, [pc, #116]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d0ee      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fc8:	4b1a      	ldr	r3, [pc, #104]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	4917      	ldr	r1, [pc, #92]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004fda:	7dfb      	ldrb	r3, [r7, #23]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d105      	bne.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fe0:	4b14      	ldr	r3, [pc, #80]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	4a13      	ldr	r2, [pc, #76]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fe6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d008      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ff8:	4b0e      	ldr	r3, [pc, #56]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	490b      	ldr	r1, [pc, #44]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005006:	4313      	orrs	r3, r2
 8005008:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0310 	and.w	r3, r3, #16
 8005012:	2b00      	cmp	r3, #0
 8005014:	d008      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005016:	4b07      	ldr	r3, [pc, #28]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	4904      	ldr	r1, [pc, #16]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005024:	4313      	orrs	r3, r2
 8005026:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	40021000 	.word	0x40021000
 8005038:	40007000 	.word	0x40007000
 800503c:	42420440 	.word	0x42420440

08005040 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005040:	b590      	push	{r4, r7, lr}
 8005042:	b08d      	sub	sp, #52	; 0x34
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005048:	4b5a      	ldr	r3, [pc, #360]	; (80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800504a:	f107 040c 	add.w	r4, r7, #12
 800504e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005050:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005054:	f240 2301 	movw	r3, #513	; 0x201
 8005058:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800505a:	2300      	movs	r3, #0
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
 800505e:	2300      	movs	r3, #0
 8005060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005062:	2300      	movs	r3, #0
 8005064:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	61fb      	str	r3, [r7, #28]
 800506a:	2300      	movs	r3, #0
 800506c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b10      	cmp	r3, #16
 8005072:	d00a      	beq.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b10      	cmp	r3, #16
 8005078:	f200 8091 	bhi.w	800519e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d04c      	beq.n	800511c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b02      	cmp	r3, #2
 8005086:	d07c      	beq.n	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005088:	e089      	b.n	800519e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 800508a:	4b4b      	ldr	r3, [pc, #300]	; (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005090:	4b49      	ldr	r3, [pc, #292]	; (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 8082 	beq.w	80051a2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	0c9b      	lsrs	r3, r3, #18
 80050a2:	f003 030f 	and.w	r3, r3, #15
 80050a6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80050aa:	4413      	add	r3, r2
 80050ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80050b0:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d018      	beq.n	80050ee <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80050bc:	4b3e      	ldr	r3, [pc, #248]	; (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	0c5b      	lsrs	r3, r3, #17
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80050ca:	4413      	add	r3, r2
 80050cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80050d0:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00d      	beq.n	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80050dc:	4a37      	ldr	r2, [pc, #220]	; (80051bc <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	fb02 f303 	mul.w	r3, r2, r3
 80050ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050ec:	e004      	b.n	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	4a33      	ldr	r2, [pc, #204]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80050f2:	fb02 f303 	mul.w	r3, r2, r3
 80050f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80050f8:	4b2f      	ldr	r3, [pc, #188]	; (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005100:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005104:	d102      	bne.n	800510c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8005106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005108:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800510a:	e04a      	b.n	80051a2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 800510c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510e:	005b      	lsls	r3, r3, #1
 8005110:	4a2c      	ldr	r2, [pc, #176]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8005112:	fba2 2303 	umull	r2, r3, r2, r3
 8005116:	085b      	lsrs	r3, r3, #1
 8005118:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800511a:	e042      	b.n	80051a2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 800511c:	4b26      	ldr	r3, [pc, #152]	; (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800512c:	d108      	bne.n	8005140 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d003      	beq.n	8005140 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8005138:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800513c:	62bb      	str	r3, [r7, #40]	; 0x28
 800513e:	e01f      	b.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005146:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800514a:	d109      	bne.n	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800514c:	4b1a      	ldr	r3, [pc, #104]	; (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d003      	beq.n	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8005158:	f649 4340 	movw	r3, #40000	; 0x9c40
 800515c:	62bb      	str	r3, [r7, #40]	; 0x28
 800515e:	e00f      	b.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005166:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800516a:	d11c      	bne.n	80051a6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800516c:	4b12      	ldr	r3, [pc, #72]	; (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d016      	beq.n	80051a6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8005178:	f24f 4324 	movw	r3, #62500	; 0xf424
 800517c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800517e:	e012      	b.n	80051a6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8005180:	e011      	b.n	80051a6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005182:	f7ff fe75 	bl	8004e70 <HAL_RCC_GetPCLK2Freq>
 8005186:	4602      	mov	r2, r0
 8005188:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	0b9b      	lsrs	r3, r3, #14
 800518e:	f003 0303 	and.w	r3, r3, #3
 8005192:	3301      	adds	r3, #1
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	fbb2 f3f3 	udiv	r3, r2, r3
 800519a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800519c:	e004      	b.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800519e:	bf00      	nop
 80051a0:	e002      	b.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80051a2:	bf00      	nop
 80051a4:	e000      	b.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80051a6:	bf00      	nop
    }
  }
  return (frequency);
 80051a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3734      	adds	r7, #52	; 0x34
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd90      	pop	{r4, r7, pc}
 80051b2:	bf00      	nop
 80051b4:	0800c860 	.word	0x0800c860
 80051b8:	40021000 	.word	0x40021000
 80051bc:	007a1200 	.word	0x007a1200
 80051c0:	003d0900 	.word	0x003d0900
 80051c4:	aaaaaaab 	.word	0xaaaaaaab

080051c8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e084      	b.n	80052e8 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	7c5b      	ldrb	r3, [r3, #17]
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d105      	bne.n	80051f4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7fc fdf8 	bl	8001de4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2202      	movs	r2, #2
 80051f8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f8ab 	bl	8005356 <HAL_RTC_WaitForSynchro>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d004      	beq.n	8005210 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2204      	movs	r2, #4
 800520a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e06b      	b.n	80052e8 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 f8cd 	bl	80053b0 <RTC_EnterInitMode>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d004      	beq.n	8005226 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2204      	movs	r2, #4
 8005220:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e060      	b.n	80052e8 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0207 	bic.w	r2, r2, #7
 8005234:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d005      	beq.n	800524a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800523e:	4b2c      	ldr	r3, [pc, #176]	; (80052f0 <HAL_RTC_Init+0x128>)
 8005240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005242:	4a2b      	ldr	r2, [pc, #172]	; (80052f0 <HAL_RTC_Init+0x128>)
 8005244:	f023 0301 	bic.w	r3, r3, #1
 8005248:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800524a:	4b29      	ldr	r3, [pc, #164]	; (80052f0 <HAL_RTC_Init+0x128>)
 800524c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	4926      	ldr	r1, [pc, #152]	; (80052f0 <HAL_RTC_Init+0x128>)
 8005258:	4313      	orrs	r3, r2
 800525a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005264:	d003      	beq.n	800526e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	e00e      	b.n	800528c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800526e:	2001      	movs	r0, #1
 8005270:	f7ff fee6 	bl	8005040 <HAL_RCCEx_GetPeriphCLKFreq>
 8005274:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d104      	bne.n	8005286 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2204      	movs	r2, #4
 8005280:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e030      	b.n	80052e8 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	3b01      	subs	r3, #1
 800528a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f023 010f 	bic.w	r1, r3, #15
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	0c1a      	lsrs	r2, r3, #16
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	0c1b      	lsrs	r3, r3, #16
 80052aa:	041b      	lsls	r3, r3, #16
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	b291      	uxth	r1, r2
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	6812      	ldr	r2, [r2, #0]
 80052b4:	430b      	orrs	r3, r1
 80052b6:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 f8a1 	bl	8005400 <RTC_ExitInitMode>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d004      	beq.n	80052ce <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2204      	movs	r2, #4
 80052c8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e00c      	b.n	80052e8 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80052e6:	2300      	movs	r3, #0
  }
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	40006c00 	.word	0x40006c00

080052f4 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00e      	beq.n	8005328 <HAL_RTC_AlarmIRQHandler+0x34>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f003 0302 	and.w	r3, r3, #2
 8005314:	2b00      	cmp	r3, #0
 8005316:	d007      	beq.n	8005328 <HAL_RTC_AlarmIRQHandler+0x34>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f813 	bl	8005344 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f06f 0202 	mvn.w	r2, #2
 8005326:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005328:	4b05      	ldr	r3, [pc, #20]	; (8005340 <HAL_RTC_AlarmIRQHandler+0x4c>)
 800532a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800532e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	745a      	strb	r2, [r3, #17]
}
 8005336:	bf00      	nop
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	40010400 	.word	0x40010400

08005344 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	bc80      	pop	{r7}
 8005354:	4770      	bx	lr

08005356 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b084      	sub	sp, #16
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800535e:	2300      	movs	r3, #0
 8005360:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e01d      	b.n	80053a8 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 0208 	bic.w	r2, r2, #8
 800537a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800537c:	f7fd f9c8 	bl	8002710 <HAL_GetTick>
 8005380:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005382:	e009      	b.n	8005398 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005384:	f7fd f9c4 	bl	8002710 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005392:	d901      	bls.n	8005398 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e007      	b.n	80053a8 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f003 0308 	and.w	r3, r3, #8
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0ee      	beq.n	8005384 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053b8:	2300      	movs	r3, #0
 80053ba:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80053bc:	f7fd f9a8 	bl	8002710 <HAL_GetTick>
 80053c0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80053c2:	e009      	b.n	80053d8 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80053c4:	f7fd f9a4 	bl	8002710 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053d2:	d901      	bls.n	80053d8 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e00f      	b.n	80053f8 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f003 0320 	and.w	r3, r3, #32
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d0ee      	beq.n	80053c4 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f042 0210 	orr.w	r2, r2, #16
 80053f4:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005408:	2300      	movs	r3, #0
 800540a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0210 	bic.w	r2, r2, #16
 800541a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800541c:	f7fd f978 	bl	8002710 <HAL_GetTick>
 8005420:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005422:	e009      	b.n	8005438 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005424:	f7fd f974 	bl	8002710 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005432:	d901      	bls.n	8005438 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e007      	b.n	8005448 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f003 0320 	and.w	r3, r3, #32
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0ee      	beq.n	8005424 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d024      	beq.n	80054b0 <HAL_RTCEx_RTCIRQHandler+0x60>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	2b00      	cmp	r3, #0
 8005472:	d01d      	beq.n	80054b0 <HAL_RTCEx_RTCIRQHandler+0x60>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00b      	beq.n	800549a <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f821 	bl	80054ca <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f06f 0204 	mvn.w	r2, #4
 8005490:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2204      	movs	r2, #4
 8005496:	745a      	strb	r2, [r3, #17]
 8005498:	e005      	b.n	80054a6 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f80c 	bl	80054b8 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f06f 0201 	mvn.w	r2, #1
 80054ae:	605a      	str	r2, [r3, #4]
    }
  }
}
 80054b0:	bf00      	nop
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bc80      	pop	{r7}
 80054c8:	4770      	bx	lr

080054ca <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b083      	sub	sp, #12
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 80054d2:	bf00      	nop
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bc80      	pop	{r7}
 80054da:	4770      	bx	lr

080054dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e053      	b.n	8005596 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d106      	bne.n	800550e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f7fc fc9f 	bl	8001e4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2202      	movs	r2, #2
 8005512:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005524:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	431a      	orrs	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	431a      	orrs	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	431a      	orrs	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	431a      	orrs	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800554a:	431a      	orrs	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	431a      	orrs	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	ea42 0103 	orr.w	r1, r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	0c1a      	lsrs	r2, r3, #16
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f002 0204 	and.w	r2, r2, #4
 8005574:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	69da      	ldr	r2, [r3, #28]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005584:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3708      	adds	r7, #8
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b088      	sub	sp, #32
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	60f8      	str	r0, [r7, #12]
 80055a6:	60b9      	str	r1, [r7, #8]
 80055a8:	603b      	str	r3, [r7, #0]
 80055aa:	4613      	mov	r3, r2
 80055ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055ae:	2300      	movs	r3, #0
 80055b0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d101      	bne.n	80055c0 <HAL_SPI_Transmit+0x22>
 80055bc:	2302      	movs	r3, #2
 80055be:	e11e      	b.n	80057fe <HAL_SPI_Transmit+0x260>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055c8:	f7fd f8a2 	bl	8002710 <HAL_GetTick>
 80055cc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80055ce:	88fb      	ldrh	r3, [r7, #6]
 80055d0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d002      	beq.n	80055e4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80055de:	2302      	movs	r3, #2
 80055e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055e2:	e103      	b.n	80057ec <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d002      	beq.n	80055f0 <HAL_SPI_Transmit+0x52>
 80055ea:	88fb      	ldrh	r3, [r7, #6]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d102      	bne.n	80055f6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055f4:	e0fa      	b.n	80057ec <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2203      	movs	r2, #3
 80055fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	88fa      	ldrh	r2, [r7, #6]
 800560e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	88fa      	ldrh	r2, [r7, #6]
 8005614:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800563c:	d107      	bne.n	800564e <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800564c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005658:	2b40      	cmp	r3, #64	; 0x40
 800565a:	d007      	beq.n	800566c <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800566a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005674:	d14b      	bne.n	800570e <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d002      	beq.n	8005684 <HAL_SPI_Transmit+0xe6>
 800567e:	8afb      	ldrh	r3, [r7, #22]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d13e      	bne.n	8005702 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005688:	881a      	ldrh	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005694:	1c9a      	adds	r2, r3, #2
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800569e:	b29b      	uxth	r3, r3
 80056a0:	3b01      	subs	r3, #1
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056a8:	e02b      	b.n	8005702 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f003 0302 	and.w	r3, r3, #2
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d112      	bne.n	80056de <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056bc:	881a      	ldrh	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c8:	1c9a      	adds	r2, r3, #2
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	3b01      	subs	r3, #1
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	86da      	strh	r2, [r3, #54]	; 0x36
 80056dc:	e011      	b.n	8005702 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056de:	f7fd f817 	bl	8002710 <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	683a      	ldr	r2, [r7, #0]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d803      	bhi.n	80056f6 <HAL_SPI_Transmit+0x158>
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f4:	d102      	bne.n	80056fc <HAL_SPI_Transmit+0x15e>
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d102      	bne.n	8005702 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005700:	e074      	b.n	80057ec <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005706:	b29b      	uxth	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1ce      	bne.n	80056aa <HAL_SPI_Transmit+0x10c>
 800570c:	e04c      	b.n	80057a8 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d002      	beq.n	800571c <HAL_SPI_Transmit+0x17e>
 8005716:	8afb      	ldrh	r3, [r7, #22]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d140      	bne.n	800579e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	330c      	adds	r3, #12
 8005726:	7812      	ldrb	r2, [r2, #0]
 8005728:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572e:	1c5a      	adds	r2, r3, #1
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005738:	b29b      	uxth	r3, r3
 800573a:	3b01      	subs	r3, #1
 800573c:	b29a      	uxth	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005742:	e02c      	b.n	800579e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b02      	cmp	r3, #2
 8005750:	d113      	bne.n	800577a <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	330c      	adds	r3, #12
 800575c:	7812      	ldrb	r2, [r2, #0]
 800575e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005764:	1c5a      	adds	r2, r3, #1
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800576e:	b29b      	uxth	r3, r3
 8005770:	3b01      	subs	r3, #1
 8005772:	b29a      	uxth	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	86da      	strh	r2, [r3, #54]	; 0x36
 8005778:	e011      	b.n	800579e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800577a:	f7fc ffc9 	bl	8002710 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	429a      	cmp	r2, r3
 8005788:	d803      	bhi.n	8005792 <HAL_SPI_Transmit+0x1f4>
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005790:	d102      	bne.n	8005798 <HAL_SPI_Transmit+0x1fa>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d102      	bne.n	800579e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800579c:	e026      	b.n	80057ec <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1cd      	bne.n	8005744 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	6839      	ldr	r1, [r7, #0]
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f000 fc94 	bl	80060da <SPI_EndRxTxTransaction>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d002      	beq.n	80057be <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2220      	movs	r2, #32
 80057bc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10a      	bne.n	80057dc <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057c6:	2300      	movs	r3, #0
 80057c8:	613b      	str	r3, [r7, #16]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	613b      	str	r3, [r7, #16]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	613b      	str	r3, [r7, #16]
 80057da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d002      	beq.n	80057ea <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	77fb      	strb	r3, [r7, #31]
 80057e8:	e000      	b.n	80057ec <HAL_SPI_Transmit+0x24e>
  }

error:
 80057ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3720      	adds	r7, #32
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b088      	sub	sp, #32
 800580a:	af02      	add	r7, sp, #8
 800580c:	60f8      	str	r0, [r7, #12]
 800580e:	60b9      	str	r1, [r7, #8]
 8005810:	603b      	str	r3, [r7, #0]
 8005812:	4613      	mov	r3, r2
 8005814:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005816:	2300      	movs	r3, #0
 8005818:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005822:	d112      	bne.n	800584a <HAL_SPI_Receive+0x44>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10e      	bne.n	800584a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2204      	movs	r2, #4
 8005830:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005834:	88fa      	ldrh	r2, [r7, #6]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	4613      	mov	r3, r2
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	68b9      	ldr	r1, [r7, #8]
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f000 f8e9 	bl	8005a18 <HAL_SPI_TransmitReceive>
 8005846:	4603      	mov	r3, r0
 8005848:	e0e2      	b.n	8005a10 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005850:	2b01      	cmp	r3, #1
 8005852:	d101      	bne.n	8005858 <HAL_SPI_Receive+0x52>
 8005854:	2302      	movs	r3, #2
 8005856:	e0db      	b.n	8005a10 <HAL_SPI_Receive+0x20a>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005860:	f7fc ff56 	bl	8002710 <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b01      	cmp	r3, #1
 8005870:	d002      	beq.n	8005878 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005872:	2302      	movs	r3, #2
 8005874:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005876:	e0c2      	b.n	80059fe <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d002      	beq.n	8005884 <HAL_SPI_Receive+0x7e>
 800587e:	88fb      	ldrh	r3, [r7, #6]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d102      	bne.n	800588a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005888:	e0b9      	b.n	80059fe <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2204      	movs	r2, #4
 800588e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	88fa      	ldrh	r2, [r7, #6]
 80058a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	88fa      	ldrh	r2, [r7, #6]
 80058a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058d0:	d107      	bne.n	80058e2 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80058e0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ec:	2b40      	cmp	r3, #64	; 0x40
 80058ee:	d007      	beq.n	8005900 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058fe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d162      	bne.n	80059ce <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005908:	e02e      	b.n	8005968 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b01      	cmp	r3, #1
 8005916:	d115      	bne.n	8005944 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f103 020c 	add.w	r2, r3, #12
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005924:	7812      	ldrb	r2, [r2, #0]
 8005926:	b2d2      	uxtb	r2, r2
 8005928:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592e:	1c5a      	adds	r2, r3, #1
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005938:	b29b      	uxth	r3, r3
 800593a:	3b01      	subs	r3, #1
 800593c:	b29a      	uxth	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005942:	e011      	b.n	8005968 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005944:	f7fc fee4 	bl	8002710 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	429a      	cmp	r2, r3
 8005952:	d803      	bhi.n	800595c <HAL_SPI_Receive+0x156>
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595a:	d102      	bne.n	8005962 <HAL_SPI_Receive+0x15c>
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d102      	bne.n	8005968 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005966:	e04a      	b.n	80059fe <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800596c:	b29b      	uxth	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1cb      	bne.n	800590a <HAL_SPI_Receive+0x104>
 8005972:	e031      	b.n	80059d8 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	2b01      	cmp	r3, #1
 8005980:	d113      	bne.n	80059aa <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68da      	ldr	r2, [r3, #12]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598c:	b292      	uxth	r2, r2
 800598e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005994:	1c9a      	adds	r2, r3, #2
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800599e:	b29b      	uxth	r3, r3
 80059a0:	3b01      	subs	r3, #1
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059a8:	e011      	b.n	80059ce <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059aa:	f7fc feb1 	bl	8002710 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d803      	bhi.n	80059c2 <HAL_SPI_Receive+0x1bc>
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c0:	d102      	bne.n	80059c8 <HAL_SPI_Receive+0x1c2>
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d102      	bne.n	80059ce <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	75fb      	strb	r3, [r7, #23]
          goto error;
 80059cc:	e017      	b.n	80059fe <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1cd      	bne.n	8005974 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	6839      	ldr	r1, [r7, #0]
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f000 fb2a 	bl	8006036 <SPI_EndRxTransaction>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2220      	movs	r2, #32
 80059ec:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d002      	beq.n	80059fc <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	75fb      	strb	r3, [r7, #23]
 80059fa:	e000      	b.n	80059fe <HAL_SPI_Receive+0x1f8>
  }

error :
 80059fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3718      	adds	r7, #24
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08c      	sub	sp, #48	; 0x30
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
 8005a24:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a26:	2301      	movs	r3, #1
 8005a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d101      	bne.n	8005a3e <HAL_SPI_TransmitReceive+0x26>
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	e18a      	b.n	8005d54 <HAL_SPI_TransmitReceive+0x33c>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a46:	f7fc fe63 	bl	8002710 <HAL_GetTick>
 8005a4a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005a5c:	887b      	ldrh	r3, [r7, #2]
 8005a5e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d00f      	beq.n	8005a88 <HAL_SPI_TransmitReceive+0x70>
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a6e:	d107      	bne.n	8005a80 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d103      	bne.n	8005a80 <HAL_SPI_TransmitReceive+0x68>
 8005a78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a7c:	2b04      	cmp	r3, #4
 8005a7e:	d003      	beq.n	8005a88 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005a80:	2302      	movs	r3, #2
 8005a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005a86:	e15b      	b.n	8005d40 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d005      	beq.n	8005a9a <HAL_SPI_TransmitReceive+0x82>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <HAL_SPI_TransmitReceive+0x82>
 8005a94:	887b      	ldrh	r3, [r7, #2]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d103      	bne.n	8005aa2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005aa0:	e14e      	b.n	8005d40 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	d003      	beq.n	8005ab6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2205      	movs	r2, #5
 8005ab2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	887a      	ldrh	r2, [r7, #2]
 8005ac6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	887a      	ldrh	r2, [r7, #2]
 8005acc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	68ba      	ldr	r2, [r7, #8]
 8005ad2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	887a      	ldrh	r2, [r7, #2]
 8005ad8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	887a      	ldrh	r2, [r7, #2]
 8005ade:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af6:	2b40      	cmp	r3, #64	; 0x40
 8005af8:	d007      	beq.n	8005b0a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b08:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b12:	d178      	bne.n	8005c06 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <HAL_SPI_TransmitReceive+0x10a>
 8005b1c:	8b7b      	ldrh	r3, [r7, #26]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d166      	bne.n	8005bf0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b26:	881a      	ldrh	r2, [r3, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b32:	1c9a      	adds	r2, r3, #2
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b46:	e053      	b.n	8005bf0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d11b      	bne.n	8005b8e <HAL_SPI_TransmitReceive+0x176>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d016      	beq.n	8005b8e <HAL_SPI_TransmitReceive+0x176>
 8005b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d113      	bne.n	8005b8e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6a:	881a      	ldrh	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b76:	1c9a      	adds	r2, r3, #2
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	3b01      	subs	r3, #1
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d119      	bne.n	8005bd0 <HAL_SPI_TransmitReceive+0x1b8>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d014      	beq.n	8005bd0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68da      	ldr	r2, [r3, #12]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb0:	b292      	uxth	r2, r2
 8005bb2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb8:	1c9a      	adds	r2, r3, #2
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005bd0:	f7fc fd9e 	bl	8002710 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d807      	bhi.n	8005bf0 <HAL_SPI_TransmitReceive+0x1d8>
 8005be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be6:	d003      	beq.n	8005bf0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005bee:	e0a7      	b.n	8005d40 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1a6      	bne.n	8005b48 <HAL_SPI_TransmitReceive+0x130>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1a1      	bne.n	8005b48 <HAL_SPI_TransmitReceive+0x130>
 8005c04:	e07c      	b.n	8005d00 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d002      	beq.n	8005c14 <HAL_SPI_TransmitReceive+0x1fc>
 8005c0e:	8b7b      	ldrh	r3, [r7, #26]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d16b      	bne.n	8005cec <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	330c      	adds	r3, #12
 8005c1e:	7812      	ldrb	r2, [r2, #0]
 8005c20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c26:	1c5a      	adds	r2, r3, #1
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c3a:	e057      	b.n	8005cec <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f003 0302 	and.w	r3, r3, #2
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d11c      	bne.n	8005c84 <HAL_SPI_TransmitReceive+0x26c>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d017      	beq.n	8005c84 <HAL_SPI_TransmitReceive+0x26c>
 8005c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d114      	bne.n	8005c84 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	330c      	adds	r3, #12
 8005c64:	7812      	ldrb	r2, [r2, #0]
 8005c66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6c:	1c5a      	adds	r2, r3, #1
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c80:	2300      	movs	r3, #0
 8005c82:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d119      	bne.n	8005cc6 <HAL_SPI_TransmitReceive+0x2ae>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d014      	beq.n	8005cc6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68da      	ldr	r2, [r3, #12]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca6:	b2d2      	uxtb	r2, r2
 8005ca8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cae:	1c5a      	adds	r2, r3, #1
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005cc6:	f7fc fd23 	bl	8002710 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d803      	bhi.n	8005cde <HAL_SPI_TransmitReceive+0x2c6>
 8005cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cdc:	d102      	bne.n	8005ce4 <HAL_SPI_TransmitReceive+0x2cc>
 8005cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d103      	bne.n	8005cec <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005cea:	e029      	b.n	8005d40 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1a2      	bne.n	8005c3c <HAL_SPI_TransmitReceive+0x224>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d19d      	bne.n	8005c3c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f000 f9e8 	bl	80060da <SPI_EndRxTxTransaction>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d006      	beq.n	8005d1e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005d1c:	e010      	b.n	8005d40 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d10b      	bne.n	8005d3e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d26:	2300      	movs	r3, #0
 8005d28:	617b      	str	r3, [r7, #20]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	617b      	str	r3, [r7, #20]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	617b      	str	r3, [r7, #20]
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	e000      	b.n	8005d40 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005d3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3730      	adds	r7, #48	; 0x30
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b088      	sub	sp, #32
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	099b      	lsrs	r3, r3, #6
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10f      	bne.n	8005da0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00a      	beq.n	8005da0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	099b      	lsrs	r3, r3, #6
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d004      	beq.n	8005da0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	4798      	blx	r3
    return;
 8005d9e:	e0be      	b.n	8005f1e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	085b      	lsrs	r3, r3, #1
 8005da4:	f003 0301 	and.w	r3, r3, #1
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00a      	beq.n	8005dc2 <HAL_SPI_IRQHandler+0x66>
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	09db      	lsrs	r3, r3, #7
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d004      	beq.n	8005dc2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	4798      	blx	r3
    return;
 8005dc0:	e0ad      	b.n	8005f1e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	095b      	lsrs	r3, r3, #5
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d106      	bne.n	8005ddc <HAL_SPI_IRQHandler+0x80>
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	099b      	lsrs	r3, r3, #6
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f000 80a1 	beq.w	8005f1e <HAL_SPI_IRQHandler+0x1c2>
       && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	095b      	lsrs	r3, r3, #5
 8005de0:	f003 0301 	and.w	r3, r3, #1
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f000 809a 	beq.w	8005f1e <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	099b      	lsrs	r3, r3, #6
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d023      	beq.n	8005e3e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b03      	cmp	r3, #3
 8005e00:	d011      	beq.n	8005e26 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e06:	f043 0204 	orr.w	r2, r3, #4
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e0e:	2300      	movs	r3, #0
 8005e10:	617b      	str	r3, [r7, #20]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	617b      	str	r3, [r7, #20]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	617b      	str	r3, [r7, #20]
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	e00b      	b.n	8005e3e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e26:	2300      	movs	r3, #0
 8005e28:	613b      	str	r3, [r7, #16]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	613b      	str	r3, [r7, #16]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	613b      	str	r3, [r7, #16]
 8005e3a:	693b      	ldr	r3, [r7, #16]
        return;
 8005e3c:	e06f      	b.n	8005f1e <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	095b      	lsrs	r3, r3, #5
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d014      	beq.n	8005e74 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4e:	f043 0201 	orr.w	r2, r3, #1
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005e56:	2300      	movs	r3, #0
 8005e58:	60fb      	str	r3, [r7, #12]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	60fb      	str	r3, [r7, #12]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d04f      	beq.n	8005f1c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685a      	ldr	r2, [r3, #4]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e8a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d104      	bne.n	8005ea8 <HAL_SPI_IRQHandler+0x14c>
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d034      	beq.n	8005f12 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0203 	bic.w	r2, r2, #3
 8005eb6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d011      	beq.n	8005ee4 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ec4:	4a17      	ldr	r2, [pc, #92]	; (8005f24 <HAL_SPI_IRQHandler+0x1c8>)
 8005ec6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7fc fdb5 	bl	8002a3c <HAL_DMA_Abort_IT>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d005      	beq.n	8005ee4 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005edc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d016      	beq.n	8005f1a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ef0:	4a0c      	ldr	r2, [pc, #48]	; (8005f24 <HAL_SPI_IRQHandler+0x1c8>)
 8005ef2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7fc fd9f 	bl	8002a3c <HAL_DMA_Abort_IT>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00a      	beq.n	8005f1a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005f10:	e003      	b.n	8005f1a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f808 	bl	8005f28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005f18:	e000      	b.n	8005f1c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8005f1a:	bf00      	nop
    return;
 8005f1c:	bf00      	nop
  }
}
 8005f1e:	3720      	adds	r7, #32
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	08005f3b 	.word	0x08005f3b

08005f28 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bc80      	pop	{r7}
 8005f38:	4770      	bx	lr

08005f3a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b084      	sub	sp, #16
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f46:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f7ff ffe7 	bl	8005f28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f5a:	bf00      	nop
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b084      	sub	sp, #16
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	60f8      	str	r0, [r7, #12]
 8005f6a:	60b9      	str	r1, [r7, #8]
 8005f6c:	603b      	str	r3, [r7, #0]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f72:	e04c      	b.n	800600e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7a:	d048      	beq.n	800600e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005f7c:	f7fc fbc8 	bl	8002710 <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d902      	bls.n	8005f92 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d13d      	bne.n	800600e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005fa0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005faa:	d111      	bne.n	8005fd0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fb4:	d004      	beq.n	8005fc0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fbe:	d107      	bne.n	8005fd0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fd8:	d10f      	bne.n	8005ffa <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fe8:	601a      	str	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ff8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e00f      	b.n	800602e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	689a      	ldr	r2, [r3, #8]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	4013      	ands	r3, r2
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	429a      	cmp	r2, r3
 800601c:	bf0c      	ite	eq
 800601e:	2301      	moveq	r3, #1
 8006020:	2300      	movne	r3, #0
 8006022:	b2db      	uxtb	r3, r3
 8006024:	461a      	mov	r2, r3
 8006026:	79fb      	ldrb	r3, [r7, #7]
 8006028:	429a      	cmp	r2, r3
 800602a:	d1a3      	bne.n	8005f74 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b086      	sub	sp, #24
 800603a:	af02      	add	r7, sp, #8
 800603c:	60f8      	str	r0, [r7, #12]
 800603e:	60b9      	str	r1, [r7, #8]
 8006040:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800604a:	d111      	bne.n	8006070 <SPI_EndRxTransaction+0x3a>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006054:	d004      	beq.n	8006060 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800605e:	d107      	bne.n	8006070 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800606e:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006078:	d117      	bne.n	80060aa <SPI_EndRxTransaction+0x74>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006082:	d112      	bne.n	80060aa <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	2200      	movs	r2, #0
 800608c:	2101      	movs	r1, #1
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f7ff ff67 	bl	8005f62 <SPI_WaitFlagStateUntilTimeout>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d01a      	beq.n	80060d0 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609e:	f043 0220 	orr.w	r2, r3, #32
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e013      	b.n	80060d2 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	2200      	movs	r2, #0
 80060b2:	2180      	movs	r1, #128	; 0x80
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f7ff ff54 	bl	8005f62 <SPI_WaitFlagStateUntilTimeout>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d007      	beq.n	80060d0 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c4:	f043 0220 	orr.w	r2, r3, #32
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e000      	b.n	80060d2 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b086      	sub	sp, #24
 80060de:	af02      	add	r7, sp, #8
 80060e0:	60f8      	str	r0, [r7, #12]
 80060e2:	60b9      	str	r1, [r7, #8]
 80060e4:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	2200      	movs	r2, #0
 80060ee:	2180      	movs	r1, #128	; 0x80
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f7ff ff36 	bl	8005f62 <SPI_WaitFlagStateUntilTimeout>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d007      	beq.n	800610c <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006100:	f043 0220 	orr.w	r2, r3, #32
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e000      	b.n	800610e <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b082      	sub	sp, #8
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e03f      	b.n	80061a8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800612e:	b2db      	uxtb	r3, r3
 8006130:	2b00      	cmp	r3, #0
 8006132:	d106      	bne.n	8006142 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f7fb ff71 	bl	8002024 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2224      	movs	r2, #36	; 0x24
 8006146:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68da      	ldr	r2, [r3, #12]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006158:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fbe6 	bl	800692c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	691a      	ldr	r2, [r3, #16]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800616e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	695a      	ldr	r2, [r3, #20]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800617e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68da      	ldr	r2, [r3, #12]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800618e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2220      	movs	r2, #32
 800619a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2220      	movs	r2, #32
 80061a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3708      	adds	r7, #8
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b088      	sub	sp, #32
 80061b4:	af02      	add	r7, sp, #8
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	603b      	str	r3, [r7, #0]
 80061bc:	4613      	mov	r3, r2
 80061be:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80061c0:	2300      	movs	r3, #0
 80061c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b20      	cmp	r3, #32
 80061ce:	f040 8083 	bne.w	80062d8 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d002      	beq.n	80061de <HAL_UART_Transmit+0x2e>
 80061d8:	88fb      	ldrh	r3, [r7, #6]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e07b      	b.n	80062da <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d101      	bne.n	80061f0 <HAL_UART_Transmit+0x40>
 80061ec:	2302      	movs	r3, #2
 80061ee:	e074      	b.n	80062da <HAL_UART_Transmit+0x12a>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2221      	movs	r2, #33	; 0x21
 8006202:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006206:	f7fc fa83 	bl	8002710 <HAL_GetTick>
 800620a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	88fa      	ldrh	r2, [r7, #6]
 8006210:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	88fa      	ldrh	r2, [r7, #6]
 8006216:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006218:	e042      	b.n	80062a0 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800621e:	b29b      	uxth	r3, r3
 8006220:	3b01      	subs	r3, #1
 8006222:	b29a      	uxth	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006230:	d122      	bne.n	8006278 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	2200      	movs	r2, #0
 800623a:	2180      	movs	r1, #128	; 0x80
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 fa0c 	bl	800665a <UART_WaitOnFlagUntilTimeout>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e046      	b.n	80062da <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	881b      	ldrh	r3, [r3, #0]
 8006254:	461a      	mov	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800625e:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d103      	bne.n	8006270 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	3302      	adds	r3, #2
 800626c:	60bb      	str	r3, [r7, #8]
 800626e:	e017      	b.n	80062a0 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	3301      	adds	r3, #1
 8006274:	60bb      	str	r3, [r7, #8]
 8006276:	e013      	b.n	80062a0 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	9300      	str	r3, [sp, #0]
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	2200      	movs	r2, #0
 8006280:	2180      	movs	r1, #128	; 0x80
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f000 f9e9 	bl	800665a <UART_WaitOnFlagUntilTimeout>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e023      	b.n	80062da <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	1c5a      	adds	r2, r3, #1
 8006296:	60ba      	str	r2, [r7, #8]
 8006298:	781a      	ldrb	r2, [r3, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1b7      	bne.n	800621a <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	2200      	movs	r2, #0
 80062b2:	2140      	movs	r1, #64	; 0x40
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f000 f9d0 	bl	800665a <UART_WaitOnFlagUntilTimeout>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d001      	beq.n	80062c4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e00a      	b.n	80062da <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2220      	movs	r2, #32
 80062c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80062d4:	2300      	movs	r3, #0
 80062d6:	e000      	b.n	80062da <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80062d8:	2302      	movs	r3, #2
  }
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3718      	adds	r7, #24
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b088      	sub	sp, #32
 80062e6:	af02      	add	r7, sp, #8
 80062e8:	60f8      	str	r0, [r7, #12]
 80062ea:	60b9      	str	r1, [r7, #8]
 80062ec:	603b      	str	r3, [r7, #0]
 80062ee:	4613      	mov	r3, r2
 80062f0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b20      	cmp	r3, #32
 8006300:	f040 8090 	bne.w	8006424 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d002      	beq.n	8006310 <HAL_UART_Receive+0x2e>
 800630a:	88fb      	ldrh	r3, [r7, #6]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d101      	bne.n	8006314 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e088      	b.n	8006426 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800631a:	2b01      	cmp	r3, #1
 800631c:	d101      	bne.n	8006322 <HAL_UART_Receive+0x40>
 800631e:	2302      	movs	r3, #2
 8006320:	e081      	b.n	8006426 <HAL_UART_Receive+0x144>
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2222      	movs	r2, #34	; 0x22
 8006334:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006338:	f7fc f9ea 	bl	8002710 <HAL_GetTick>
 800633c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	88fa      	ldrh	r2, [r7, #6]
 8006342:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	88fa      	ldrh	r2, [r7, #6]
 8006348:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800634a:	e05c      	b.n	8006406 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006350:	b29b      	uxth	r3, r3
 8006352:	3b01      	subs	r3, #1
 8006354:	b29a      	uxth	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006362:	d12b      	bne.n	80063bc <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	2200      	movs	r2, #0
 800636c:	2120      	movs	r1, #32
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f000 f973 	bl	800665a <UART_WaitOnFlagUntilTimeout>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e053      	b.n	8006426 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10c      	bne.n	80063a4 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	b29b      	uxth	r3, r3
 8006392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006396:	b29a      	uxth	r2, r3
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	3302      	adds	r3, #2
 80063a0:	60bb      	str	r3, [r7, #8]
 80063a2:	e030      	b.n	8006406 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	3301      	adds	r3, #1
 80063b8:	60bb      	str	r3, [r7, #8]
 80063ba:	e024      	b.n	8006406 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	2200      	movs	r2, #0
 80063c4:	2120      	movs	r1, #32
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f000 f947 	bl	800665a <UART_WaitOnFlagUntilTimeout>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d001      	beq.n	80063d6 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e027      	b.n	8006426 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d108      	bne.n	80063f0 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6859      	ldr	r1, [r3, #4]
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	1c5a      	adds	r2, r3, #1
 80063e8:	60ba      	str	r2, [r7, #8]
 80063ea:	b2ca      	uxtb	r2, r1
 80063ec:	701a      	strb	r2, [r3, #0]
 80063ee:	e00a      	b.n	8006406 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	1c59      	adds	r1, r3, #1
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006402:	b2d2      	uxtb	r2, r2
 8006404:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800640a:	b29b      	uxth	r3, r3
 800640c:	2b00      	cmp	r3, #0
 800640e:	d19d      	bne.n	800634c <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2220      	movs	r2, #32
 8006414:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8006420:	2300      	movs	r3, #0
 8006422:	e000      	b.n	8006426 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006424:	2302      	movs	r3, #2
  }
}
 8006426:	4618      	mov	r0, r3
 8006428:	3718      	adds	r7, #24
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
	...

08006430 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b088      	sub	sp, #32
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006450:	2300      	movs	r3, #0
 8006452:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006454:	2300      	movs	r3, #0
 8006456:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	f003 030f 	and.w	r3, r3, #15
 800645e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10d      	bne.n	8006482 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	f003 0320 	and.w	r3, r3, #32
 800646c:	2b00      	cmp	r3, #0
 800646e:	d008      	beq.n	8006482 <HAL_UART_IRQHandler+0x52>
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	f003 0320 	and.w	r3, r3, #32
 8006476:	2b00      	cmp	r3, #0
 8006478:	d003      	beq.n	8006482 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f9d5 	bl	800682a <UART_Receive_IT>
      return;
 8006480:	e0cb      	b.n	800661a <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	2b00      	cmp	r3, #0
 8006486:	f000 80ab 	beq.w	80065e0 <HAL_UART_IRQHandler+0x1b0>
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	f003 0301 	and.w	r3, r3, #1
 8006490:	2b00      	cmp	r3, #0
 8006492:	d105      	bne.n	80064a0 <HAL_UART_IRQHandler+0x70>
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800649a:	2b00      	cmp	r3, #0
 800649c:	f000 80a0 	beq.w	80065e0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00a      	beq.n	80064c0 <HAL_UART_IRQHandler+0x90>
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d005      	beq.n	80064c0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b8:	f043 0201 	orr.w	r2, r3, #1
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	f003 0304 	and.w	r3, r3, #4
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00a      	beq.n	80064e0 <HAL_UART_IRQHandler+0xb0>
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d005      	beq.n	80064e0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064d8:	f043 0202 	orr.w	r2, r3, #2
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	f003 0302 	and.w	r3, r3, #2
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00a      	beq.n	8006500 <HAL_UART_IRQHandler+0xd0>
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	f003 0301 	and.w	r3, r3, #1
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d005      	beq.n	8006500 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f8:	f043 0204 	orr.w	r2, r3, #4
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	f003 0308 	and.w	r3, r3, #8
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00a      	beq.n	8006520 <HAL_UART_IRQHandler+0xf0>
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	2b00      	cmp	r3, #0
 8006512:	d005      	beq.n	8006520 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006518:	f043 0208 	orr.w	r2, r3, #8
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006524:	2b00      	cmp	r3, #0
 8006526:	d077      	beq.n	8006618 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	f003 0320 	and.w	r3, r3, #32
 800652e:	2b00      	cmp	r3, #0
 8006530:	d007      	beq.n	8006542 <HAL_UART_IRQHandler+0x112>
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	f003 0320 	and.w	r3, r3, #32
 8006538:	2b00      	cmp	r3, #0
 800653a:	d002      	beq.n	8006542 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 f974 	bl	800682a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654c:	2b00      	cmp	r3, #0
 800654e:	bf14      	ite	ne
 8006550:	2301      	movne	r3, #1
 8006552:	2300      	moveq	r3, #0
 8006554:	b2db      	uxtb	r3, r3
 8006556:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800655c:	f003 0308 	and.w	r3, r3, #8
 8006560:	2b00      	cmp	r3, #0
 8006562:	d102      	bne.n	800656a <HAL_UART_IRQHandler+0x13a>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d031      	beq.n	80065ce <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f8bf 	bl	80066ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657a:	2b00      	cmp	r3, #0
 800657c:	d023      	beq.n	80065c6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	695a      	ldr	r2, [r3, #20]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800658c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006592:	2b00      	cmp	r3, #0
 8006594:	d013      	beq.n	80065be <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800659a:	4a21      	ldr	r2, [pc, #132]	; (8006620 <HAL_UART_IRQHandler+0x1f0>)
 800659c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fc fa4a 	bl	8002a3c <HAL_DMA_Abort_IT>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d016      	beq.n	80065dc <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80065b8:	4610      	mov	r0, r2
 80065ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065bc:	e00e      	b.n	80065dc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f842 	bl	8006648 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065c4:	e00a      	b.n	80065dc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f83e 	bl	8006648 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065cc:	e006      	b.n	80065dc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f83a 	bl	8006648 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80065da:	e01d      	b.n	8006618 <HAL_UART_IRQHandler+0x1e8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065dc:	bf00      	nop
    return;
 80065de:	e01b      	b.n	8006618 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d008      	beq.n	80065fc <HAL_UART_IRQHandler+0x1cc>
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d003      	beq.n	80065fc <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 f8ab 	bl	8006750 <UART_Transmit_IT>
    return;
 80065fa:	e00e      	b.n	800661a <HAL_UART_IRQHandler+0x1ea>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006602:	2b00      	cmp	r3, #0
 8006604:	d009      	beq.n	800661a <HAL_UART_IRQHandler+0x1ea>
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660c:	2b00      	cmp	r3, #0
 800660e:	d004      	beq.n	800661a <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 f8f2 	bl	80067fa <UART_EndTransmit_IT>
    return;
 8006616:	e000      	b.n	800661a <HAL_UART_IRQHandler+0x1ea>
    return;
 8006618:	bf00      	nop
  }
}
 800661a:	3720      	adds	r7, #32
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	08006729 	.word	0x08006729

08006624 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	bc80      	pop	{r7}
 8006634:	4770      	bx	lr

08006636 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006636:	b480      	push	{r7}
 8006638:	b083      	sub	sp, #12
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800663e:	bf00      	nop
 8006640:	370c      	adds	r7, #12
 8006642:	46bd      	mov	sp, r7
 8006644:	bc80      	pop	{r7}
 8006646:	4770      	bx	lr

08006648 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	bc80      	pop	{r7}
 8006658:	4770      	bx	lr

0800665a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b084      	sub	sp, #16
 800665e:	af00      	add	r7, sp, #0
 8006660:	60f8      	str	r0, [r7, #12]
 8006662:	60b9      	str	r1, [r7, #8]
 8006664:	603b      	str	r3, [r7, #0]
 8006666:	4613      	mov	r3, r2
 8006668:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800666a:	e02c      	b.n	80066c6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006672:	d028      	beq.n	80066c6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d007      	beq.n	800668a <UART_WaitOnFlagUntilTimeout+0x30>
 800667a:	f7fc f849 	bl	8002710 <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	69ba      	ldr	r2, [r7, #24]
 8006686:	429a      	cmp	r2, r3
 8006688:	d21d      	bcs.n	80066c6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68da      	ldr	r2, [r3, #12]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006698:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	695a      	ldr	r2, [r3, #20]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f022 0201 	bic.w	r2, r2, #1
 80066a8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2220      	movs	r2, #32
 80066ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2220      	movs	r2, #32
 80066b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e00f      	b.n	80066e6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	4013      	ands	r3, r2
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	bf0c      	ite	eq
 80066d6:	2301      	moveq	r3, #1
 80066d8:	2300      	movne	r3, #0
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	461a      	mov	r2, r3
 80066de:	79fb      	ldrb	r3, [r7, #7]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d0c3      	beq.n	800666c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066ee:	b480      	push	{r7}
 80066f0:	b083      	sub	sp, #12
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68da      	ldr	r2, [r3, #12]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006704:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	695a      	ldr	r2, [r3, #20]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f022 0201 	bic.w	r2, r2, #1
 8006714:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2220      	movs	r2, #32
 800671a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800671e:	bf00      	nop
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	bc80      	pop	{r7}
 8006726:	4770      	bx	lr

08006728 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006734:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f7ff ff80 	bl	8006648 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006748:	bf00      	nop
 800674a:	3710      	adds	r7, #16
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800675e:	b2db      	uxtb	r3, r3
 8006760:	2b21      	cmp	r3, #33	; 0x21
 8006762:	d144      	bne.n	80067ee <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800676c:	d11a      	bne.n	80067a4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	881b      	ldrh	r3, [r3, #0]
 8006778:	461a      	mov	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006782:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d105      	bne.n	8006798 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a1b      	ldr	r3, [r3, #32]
 8006790:	1c9a      	adds	r2, r3, #2
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	621a      	str	r2, [r3, #32]
 8006796:	e00e      	b.n	80067b6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	621a      	str	r2, [r3, #32]
 80067a2:	e008      	b.n	80067b6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	1c59      	adds	r1, r3, #1
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	6211      	str	r1, [r2, #32]
 80067ae:	781a      	ldrb	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	3b01      	subs	r3, #1
 80067be:	b29b      	uxth	r3, r3
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	4619      	mov	r1, r3
 80067c4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10f      	bne.n	80067ea <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68da      	ldr	r2, [r3, #12]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68da      	ldr	r2, [r3, #12]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	e000      	b.n	80067f0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80067ee:	2302      	movs	r3, #2
  }
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3714      	adds	r7, #20
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bc80      	pop	{r7}
 80067f8:	4770      	bx	lr

080067fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b082      	sub	sp, #8
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68da      	ldr	r2, [r3, #12]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006810:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2220      	movs	r2, #32
 8006816:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f7ff ff02 	bl	8006624 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b084      	sub	sp, #16
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b22      	cmp	r3, #34	; 0x22
 800683c:	d171      	bne.n	8006922 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006846:	d123      	bne.n	8006890 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10e      	bne.n	8006874 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	b29b      	uxth	r3, r3
 800685e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006862:	b29a      	uxth	r2, r3
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686c:	1c9a      	adds	r2, r3, #2
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	629a      	str	r2, [r3, #40]	; 0x28
 8006872:	e029      	b.n	80068c8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	b29b      	uxth	r3, r3
 800687c:	b2db      	uxtb	r3, r3
 800687e:	b29a      	uxth	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006888:	1c5a      	adds	r2, r3, #1
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	629a      	str	r2, [r3, #40]	; 0x28
 800688e:	e01b      	b.n	80068c8 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d10a      	bne.n	80068ae <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6858      	ldr	r0, [r3, #4]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a2:	1c59      	adds	r1, r3, #1
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	6291      	str	r1, [r2, #40]	; 0x28
 80068a8:	b2c2      	uxtb	r2, r0
 80068aa:	701a      	strb	r2, [r3, #0]
 80068ac:	e00c      	b.n	80068c8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	b2da      	uxtb	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ba:	1c58      	adds	r0, r3, #1
 80068bc:	6879      	ldr	r1, [r7, #4]
 80068be:	6288      	str	r0, [r1, #40]	; 0x28
 80068c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80068c4:	b2d2      	uxtb	r2, r2
 80068c6:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	3b01      	subs	r3, #1
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	4619      	mov	r1, r3
 80068d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d120      	bne.n	800691e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68da      	ldr	r2, [r3, #12]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f022 0220 	bic.w	r2, r2, #32
 80068ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68da      	ldr	r2, [r3, #12]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	695a      	ldr	r2, [r3, #20]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f022 0201 	bic.w	r2, r2, #1
 800690a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2220      	movs	r2, #32
 8006910:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f7ff fe8e 	bl	8006636 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800691a:	2300      	movs	r3, #0
 800691c:	e002      	b.n	8006924 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800691e:	2300      	movs	r3, #0
 8006920:	e000      	b.n	8006924 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006922:	2302      	movs	r3, #2
  }
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	68da      	ldr	r2, [r3, #12]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	430a      	orrs	r2, r1
 8006948:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	689a      	ldr	r2, [r3, #8]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	431a      	orrs	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	695b      	ldr	r3, [r3, #20]
 8006958:	4313      	orrs	r3, r2
 800695a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006966:	f023 030c 	bic.w	r3, r3, #12
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	6812      	ldr	r2, [r2, #0]
 800696e:	68f9      	ldr	r1, [r7, #12]
 8006970:	430b      	orrs	r3, r1
 8006972:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	699a      	ldr	r2, [r3, #24]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	430a      	orrs	r2, r1
 8006988:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a52      	ldr	r2, [pc, #328]	; (8006ad8 <UART_SetConfig+0x1ac>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d14e      	bne.n	8006a32 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006994:	f7fe fa6c 	bl	8004e70 <HAL_RCC_GetPCLK2Freq>
 8006998:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	4613      	mov	r3, r2
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4413      	add	r3, r2
 80069a2:	009a      	lsls	r2, r3, #2
 80069a4:	441a      	add	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b0:	4a4a      	ldr	r2, [pc, #296]	; (8006adc <UART_SetConfig+0x1b0>)
 80069b2:	fba2 2303 	umull	r2, r3, r2, r3
 80069b6:	095b      	lsrs	r3, r3, #5
 80069b8:	0119      	lsls	r1, r3, #4
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	4613      	mov	r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	009a      	lsls	r2, r3, #2
 80069c4:	441a      	add	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80069d0:	4b42      	ldr	r3, [pc, #264]	; (8006adc <UART_SetConfig+0x1b0>)
 80069d2:	fba3 0302 	umull	r0, r3, r3, r2
 80069d6:	095b      	lsrs	r3, r3, #5
 80069d8:	2064      	movs	r0, #100	; 0x64
 80069da:	fb00 f303 	mul.w	r3, r0, r3
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	011b      	lsls	r3, r3, #4
 80069e2:	3332      	adds	r3, #50	; 0x32
 80069e4:	4a3d      	ldr	r2, [pc, #244]	; (8006adc <UART_SetConfig+0x1b0>)
 80069e6:	fba2 2303 	umull	r2, r3, r2, r3
 80069ea:	095b      	lsrs	r3, r3, #5
 80069ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069f0:	4419      	add	r1, r3
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	4613      	mov	r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4413      	add	r3, r2
 80069fa:	009a      	lsls	r2, r3, #2
 80069fc:	441a      	add	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a08:	4b34      	ldr	r3, [pc, #208]	; (8006adc <UART_SetConfig+0x1b0>)
 8006a0a:	fba3 0302 	umull	r0, r3, r3, r2
 8006a0e:	095b      	lsrs	r3, r3, #5
 8006a10:	2064      	movs	r0, #100	; 0x64
 8006a12:	fb00 f303 	mul.w	r3, r0, r3
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	011b      	lsls	r3, r3, #4
 8006a1a:	3332      	adds	r3, #50	; 0x32
 8006a1c:	4a2f      	ldr	r2, [pc, #188]	; (8006adc <UART_SetConfig+0x1b0>)
 8006a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a22:	095b      	lsrs	r3, r3, #5
 8006a24:	f003 020f 	and.w	r2, r3, #15
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	440a      	add	r2, r1
 8006a2e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8006a30:	e04d      	b.n	8006ace <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8006a32:	f7fe fa09 	bl	8004e48 <HAL_RCC_GetPCLK1Freq>
 8006a36:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4413      	add	r3, r2
 8006a40:	009a      	lsls	r2, r3, #2
 8006a42:	441a      	add	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a4e:	4a23      	ldr	r2, [pc, #140]	; (8006adc <UART_SetConfig+0x1b0>)
 8006a50:	fba2 2303 	umull	r2, r3, r2, r3
 8006a54:	095b      	lsrs	r3, r3, #5
 8006a56:	0119      	lsls	r1, r3, #4
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	009a      	lsls	r2, r3, #2
 8006a62:	441a      	add	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a6e:	4b1b      	ldr	r3, [pc, #108]	; (8006adc <UART_SetConfig+0x1b0>)
 8006a70:	fba3 0302 	umull	r0, r3, r3, r2
 8006a74:	095b      	lsrs	r3, r3, #5
 8006a76:	2064      	movs	r0, #100	; 0x64
 8006a78:	fb00 f303 	mul.w	r3, r0, r3
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	011b      	lsls	r3, r3, #4
 8006a80:	3332      	adds	r3, #50	; 0x32
 8006a82:	4a16      	ldr	r2, [pc, #88]	; (8006adc <UART_SetConfig+0x1b0>)
 8006a84:	fba2 2303 	umull	r2, r3, r2, r3
 8006a88:	095b      	lsrs	r3, r3, #5
 8006a8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a8e:	4419      	add	r1, r3
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	4613      	mov	r3, r2
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4413      	add	r3, r2
 8006a98:	009a      	lsls	r2, r3, #2
 8006a9a:	441a      	add	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	fbb2 f2f3 	udiv	r2, r2, r3
 8006aa6:	4b0d      	ldr	r3, [pc, #52]	; (8006adc <UART_SetConfig+0x1b0>)
 8006aa8:	fba3 0302 	umull	r0, r3, r3, r2
 8006aac:	095b      	lsrs	r3, r3, #5
 8006aae:	2064      	movs	r0, #100	; 0x64
 8006ab0:	fb00 f303 	mul.w	r3, r0, r3
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	011b      	lsls	r3, r3, #4
 8006ab8:	3332      	adds	r3, #50	; 0x32
 8006aba:	4a08      	ldr	r2, [pc, #32]	; (8006adc <UART_SetConfig+0x1b0>)
 8006abc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ac0:	095b      	lsrs	r3, r3, #5
 8006ac2:	f003 020f 	and.w	r2, r3, #15
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	440a      	add	r2, r1
 8006acc:	609a      	str	r2, [r3, #8]
}
 8006ace:	bf00      	nop
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	40013800 	.word	0x40013800
 8006adc:	51eb851f 	.word	0x51eb851f

08006ae0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006ae0:	b084      	sub	sp, #16
 8006ae2:	b480      	push	{r7}
 8006ae4:	b083      	sub	sp, #12
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
 8006aea:	f107 0014 	add.w	r0, r7, #20
 8006aee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bc80      	pop	{r7}
 8006afc:	b004      	add	sp, #16
 8006afe:	4770      	bx	lr

08006b00 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006b08:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006b0c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	43db      	mvns	r3, r3
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	4013      	ands	r3, r2
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3714      	adds	r7, #20
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bc80      	pop	{r7}
 8006b32:	4770      	bx	lr

08006b34 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bc80      	pop	{r7}
 8006b4a:	4770      	bx	lr

08006b4c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006b4c:	b084      	sub	sp, #16
 8006b4e:	b480      	push	{r7}
 8006b50:	b083      	sub	sp, #12
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
 8006b56:	f107 0014 	add.w	r0, r7, #20
 8006b5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bc80      	pop	{r7}
 8006b88:	b004      	add	sp, #16
 8006b8a:	4770      	bx	lr

08006b8c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b0c4      	sub	sp, #272	; 0x110
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	1d3b      	adds	r3, r7, #4
 8006b94:	6018      	str	r0, [r3, #0]
 8006b96:	463b      	mov	r3, r7
 8006b98:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b9a:	463b      	mov	r3, r7
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	785b      	ldrb	r3, [r3, #1]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	f040 8557 	bne.w	8007654 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006ba6:	463b      	mov	r3, r7
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	699a      	ldr	r2, [r3, #24]
 8006bac:	463b      	mov	r3, r7
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d905      	bls.n	8006bc2 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006bb6:	463b      	mov	r3, r7
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006bc0:	e004      	b.n	8006bcc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006bc2:	463b      	mov	r3, r7
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006bcc:	463b      	mov	r3, r7
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	7b1b      	ldrb	r3, [r3, #12]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d12c      	bne.n	8006c30 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006bd6:	463b      	mov	r3, r7
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6959      	ldr	r1, [r3, #20]
 8006bdc:	463b      	mov	r3, r7
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	88da      	ldrh	r2, [r3, #6]
 8006be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	1d38      	adds	r0, r7, #4
 8006bea:	6800      	ldr	r0, [r0, #0]
 8006bec:	f001 f91a 	bl	8007e24 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006bf0:	1d3b      	adds	r3, r7, #4
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	617b      	str	r3, [r7, #20]
 8006bf6:	1d3b      	adds	r3, r7, #4
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	461a      	mov	r2, r3
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	4413      	add	r3, r2
 8006c06:	617b      	str	r3, [r7, #20]
 8006c08:	463b      	mov	r3, r7
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	011a      	lsls	r2, r3, #4
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	4413      	add	r3, r2
 8006c14:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006c18:	f107 0310 	add.w	r3, r7, #16
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	f107 0310 	add.w	r3, r7, #16
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	801a      	strh	r2, [r3, #0]
 8006c2c:	f000 bcdd 	b.w	80075ea <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006c30:	463b      	mov	r3, r7
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	78db      	ldrb	r3, [r3, #3]
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	f040 8347 	bne.w	80072ca <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006c3c:	463b      	mov	r3, r7
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6a1a      	ldr	r2, [r3, #32]
 8006c42:	463b      	mov	r3, r7
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	f240 82eb 	bls.w	8007224 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006c4e:	1d3b      	adds	r3, r7, #4
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	463b      	mov	r3, r7
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4413      	add	r3, r2
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c68:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8006c6c:	1d3b      	adds	r3, r7, #4
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	463b      	mov	r3, r7
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	441a      	add	r2, r3
 8006c7a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006c7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c86:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006c92:	463b      	mov	r3, r7
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	6a1a      	ldr	r2, [r3, #32]
 8006c98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c9c:	1ad2      	subs	r2, r2, r3
 8006c9e:	463b      	mov	r3, r7
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ca4:	1d3b      	adds	r3, r7, #4
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	463b      	mov	r3, r7
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	4413      	add	r3, r2
 8006cb2:	881b      	ldrh	r3, [r3, #0]
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f000 8159 	beq.w	8006f72 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006cc0:	1d3b      	adds	r3, r7, #4
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8006cc6:	463b      	mov	r3, r7
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	785b      	ldrb	r3, [r3, #1]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d164      	bne.n	8006d9a <USB_EPStartXfer+0x20e>
 8006cd0:	1d3b      	adds	r3, r7, #4
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cd6:	1d3b      	adds	r3, r7, #4
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce4:	4413      	add	r3, r2
 8006ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ce8:	463b      	mov	r3, r7
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	011a      	lsls	r2, r3, #4
 8006cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d112      	bne.n	8006d28 <USB_EPStartXfer+0x19c>
 8006d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d04:	881b      	ldrh	r3, [r3, #0]
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d10:	801a      	strh	r2, [r3, #0]
 8006d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d14:	881b      	ldrh	r3, [r3, #0]
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d24:	801a      	strh	r2, [r3, #0]
 8006d26:	e054      	b.n	8006dd2 <USB_EPStartXfer+0x246>
 8006d28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d2c:	2b3e      	cmp	r3, #62	; 0x3e
 8006d2e:	d817      	bhi.n	8006d60 <USB_EPStartXfer+0x1d4>
 8006d30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d34:	085b      	lsrs	r3, r3, #1
 8006d36:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006d3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d004      	beq.n	8006d50 <USB_EPStartXfer+0x1c4>
 8006d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	029b      	lsls	r3, r3, #10
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5c:	801a      	strh	r2, [r3, #0]
 8006d5e:	e038      	b.n	8006dd2 <USB_EPStartXfer+0x246>
 8006d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d64:	095b      	lsrs	r3, r3, #5
 8006d66:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d6e:	f003 031f 	and.w	r3, r3, #31
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d104      	bne.n	8006d80 <USB_EPStartXfer+0x1f4>
 8006d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	029b      	lsls	r3, r3, #10
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d96:	801a      	strh	r2, [r3, #0]
 8006d98:	e01b      	b.n	8006dd2 <USB_EPStartXfer+0x246>
 8006d9a:	463b      	mov	r3, r7
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	785b      	ldrb	r3, [r3, #1]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d116      	bne.n	8006dd2 <USB_EPStartXfer+0x246>
 8006da4:	1d3b      	adds	r3, r7, #4
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	461a      	mov	r2, r3
 8006db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db2:	4413      	add	r3, r2
 8006db4:	637b      	str	r3, [r7, #52]	; 0x34
 8006db6:	463b      	mov	r3, r7
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	011a      	lsls	r2, r3, #4
 8006dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006dc6:	633b      	str	r3, [r7, #48]	; 0x30
 8006dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006dd2:	463b      	mov	r3, r7
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	895b      	ldrh	r3, [r3, #10]
 8006dd8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ddc:	463b      	mov	r3, r7
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	6959      	ldr	r1, [r3, #20]
 8006de2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006dec:	1d38      	adds	r0, r7, #4
 8006dee:	6800      	ldr	r0, [r0, #0]
 8006df0:	f001 f818 	bl	8007e24 <USB_WritePMA>
            ep->xfer_buff += len;
 8006df4:	463b      	mov	r3, r7
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	695a      	ldr	r2, [r3, #20]
 8006dfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dfe:	441a      	add	r2, r3
 8006e00:	463b      	mov	r3, r7
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006e06:	463b      	mov	r3, r7
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	6a1a      	ldr	r2, [r3, #32]
 8006e0c:	463b      	mov	r3, r7
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d909      	bls.n	8006e2a <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8006e16:	463b      	mov	r3, r7
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	6a1a      	ldr	r2, [r3, #32]
 8006e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e20:	1ad2      	subs	r2, r2, r3
 8006e22:	463b      	mov	r3, r7
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	621a      	str	r2, [r3, #32]
 8006e28:	e008      	b.n	8006e3c <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006e2a:	463b      	mov	r3, r7
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	6a1b      	ldr	r3, [r3, #32]
 8006e30:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8006e34:	463b      	mov	r3, r7
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e3c:	463b      	mov	r3, r7
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	785b      	ldrb	r3, [r3, #1]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d164      	bne.n	8006f10 <USB_EPStartXfer+0x384>
 8006e46:	1d3b      	adds	r3, r7, #4
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	61fb      	str	r3, [r7, #28]
 8006e4c:	1d3b      	adds	r3, r7, #4
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	461a      	mov	r2, r3
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	61fb      	str	r3, [r7, #28]
 8006e5e:	463b      	mov	r3, r7
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	011a      	lsls	r2, r3, #4
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	4413      	add	r3, r2
 8006e6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e6e:	61bb      	str	r3, [r7, #24]
 8006e70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d112      	bne.n	8006e9e <USB_EPStartXfer+0x312>
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	881b      	ldrh	r3, [r3, #0]
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	801a      	strh	r2, [r3, #0]
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	881b      	ldrh	r3, [r3, #0]
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	801a      	strh	r2, [r3, #0]
 8006e9c:	e057      	b.n	8006f4e <USB_EPStartXfer+0x3c2>
 8006e9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ea2:	2b3e      	cmp	r3, #62	; 0x3e
 8006ea4:	d817      	bhi.n	8006ed6 <USB_EPStartXfer+0x34a>
 8006ea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006eaa:	085b      	lsrs	r3, r3, #1
 8006eac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d004      	beq.n	8006ec6 <USB_EPStartXfer+0x33a>
 8006ebc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ec6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	029b      	lsls	r3, r3, #10
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	801a      	strh	r2, [r3, #0]
 8006ed4:	e03b      	b.n	8006f4e <USB_EPStartXfer+0x3c2>
 8006ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006eda:	095b      	lsrs	r3, r3, #5
 8006edc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ee0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ee4:	f003 031f 	and.w	r3, r3, #31
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d104      	bne.n	8006ef6 <USB_EPStartXfer+0x36a>
 8006eec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ef6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	029b      	lsls	r3, r3, #10
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	801a      	strh	r2, [r3, #0]
 8006f0e:	e01e      	b.n	8006f4e <USB_EPStartXfer+0x3c2>
 8006f10:	463b      	mov	r3, r7
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	785b      	ldrb	r3, [r3, #1]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d119      	bne.n	8006f4e <USB_EPStartXfer+0x3c2>
 8006f1a:	1d3b      	adds	r3, r7, #4
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8006f20:	1d3b      	adds	r3, r7, #4
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2e:	4413      	add	r3, r2
 8006f30:	627b      	str	r3, [r7, #36]	; 0x24
 8006f32:	463b      	mov	r3, r7
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	011a      	lsls	r2, r3, #4
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f42:	623b      	str	r3, [r7, #32]
 8006f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	6a3b      	ldr	r3, [r7, #32]
 8006f4c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006f4e:	463b      	mov	r3, r7
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	891b      	ldrh	r3, [r3, #8]
 8006f54:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f58:	463b      	mov	r3, r7
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	6959      	ldr	r1, [r3, #20]
 8006f5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006f68:	1d38      	adds	r0, r7, #4
 8006f6a:	6800      	ldr	r0, [r0, #0]
 8006f6c:	f000 ff5a 	bl	8007e24 <USB_WritePMA>
 8006f70:	e33b      	b.n	80075ea <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f72:	463b      	mov	r3, r7
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	785b      	ldrb	r3, [r3, #1]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d164      	bne.n	8007046 <USB_EPStartXfer+0x4ba>
 8006f7c:	1d3b      	adds	r3, r7, #4
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f82:	1d3b      	adds	r3, r7, #4
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f90:	4413      	add	r3, r2
 8006f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f94:	463b      	mov	r3, r7
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	011a      	lsls	r2, r3, #4
 8006f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f9e:	4413      	add	r3, r2
 8006fa0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006fa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d112      	bne.n	8006fd4 <USB_EPStartXfer+0x448>
 8006fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fb0:	881b      	ldrh	r3, [r3, #0]
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fbc:	801a      	strh	r2, [r3, #0]
 8006fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fc0:	881b      	ldrh	r3, [r3, #0]
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fd0:	801a      	strh	r2, [r3, #0]
 8006fd2:	e057      	b.n	8007084 <USB_EPStartXfer+0x4f8>
 8006fd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fd8:	2b3e      	cmp	r3, #62	; 0x3e
 8006fda:	d817      	bhi.n	800700c <USB_EPStartXfer+0x480>
 8006fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fe0:	085b      	lsrs	r3, r3, #1
 8006fe2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006fe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d004      	beq.n	8006ffc <USB_EPStartXfer+0x470>
 8006ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007000:	b29b      	uxth	r3, r3
 8007002:	029b      	lsls	r3, r3, #10
 8007004:	b29a      	uxth	r2, r3
 8007006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007008:	801a      	strh	r2, [r3, #0]
 800700a:	e03b      	b.n	8007084 <USB_EPStartXfer+0x4f8>
 800700c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007010:	095b      	lsrs	r3, r3, #5
 8007012:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007016:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800701a:	f003 031f 	and.w	r3, r3, #31
 800701e:	2b00      	cmp	r3, #0
 8007020:	d104      	bne.n	800702c <USB_EPStartXfer+0x4a0>
 8007022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007026:	3b01      	subs	r3, #1
 8007028:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800702c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007030:	b29b      	uxth	r3, r3
 8007032:	029b      	lsls	r3, r3, #10
 8007034:	b29b      	uxth	r3, r3
 8007036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800703a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800703e:	b29a      	uxth	r2, r3
 8007040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007042:	801a      	strh	r2, [r3, #0]
 8007044:	e01e      	b.n	8007084 <USB_EPStartXfer+0x4f8>
 8007046:	463b      	mov	r3, r7
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	785b      	ldrb	r3, [r3, #1]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d119      	bne.n	8007084 <USB_EPStartXfer+0x4f8>
 8007050:	1d3b      	adds	r3, r7, #4
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	657b      	str	r3, [r7, #84]	; 0x54
 8007056:	1d3b      	adds	r3, r7, #4
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800705e:	b29b      	uxth	r3, r3
 8007060:	461a      	mov	r2, r3
 8007062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007064:	4413      	add	r3, r2
 8007066:	657b      	str	r3, [r7, #84]	; 0x54
 8007068:	463b      	mov	r3, r7
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	011a      	lsls	r2, r3, #4
 8007070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007072:	4413      	add	r3, r2
 8007074:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007078:	653b      	str	r3, [r7, #80]	; 0x50
 800707a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800707e:	b29a      	uxth	r2, r3
 8007080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007082:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007084:	463b      	mov	r3, r7
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	891b      	ldrh	r3, [r3, #8]
 800708a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800708e:	463b      	mov	r3, r7
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	6959      	ldr	r1, [r3, #20]
 8007094:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007098:	b29b      	uxth	r3, r3
 800709a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800709e:	1d38      	adds	r0, r7, #4
 80070a0:	6800      	ldr	r0, [r0, #0]
 80070a2:	f000 febf 	bl	8007e24 <USB_WritePMA>
            ep->xfer_buff += len;
 80070a6:	463b      	mov	r3, r7
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	695a      	ldr	r2, [r3, #20]
 80070ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070b0:	441a      	add	r2, r3
 80070b2:	463b      	mov	r3, r7
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80070b8:	463b      	mov	r3, r7
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6a1a      	ldr	r2, [r3, #32]
 80070be:	463b      	mov	r3, r7
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d909      	bls.n	80070dc <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80070c8:	463b      	mov	r3, r7
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	6a1a      	ldr	r2, [r3, #32]
 80070ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070d2:	1ad2      	subs	r2, r2, r3
 80070d4:	463b      	mov	r3, r7
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	621a      	str	r2, [r3, #32]
 80070da:	e008      	b.n	80070ee <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 80070dc:	463b      	mov	r3, r7
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80070e6:	463b      	mov	r3, r7
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2200      	movs	r2, #0
 80070ec:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80070ee:	1d3b      	adds	r3, r7, #4
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	647b      	str	r3, [r7, #68]	; 0x44
 80070f4:	463b      	mov	r3, r7
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	785b      	ldrb	r3, [r3, #1]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d164      	bne.n	80071c8 <USB_EPStartXfer+0x63c>
 80070fe:	1d3b      	adds	r3, r7, #4
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007104:	1d3b      	adds	r3, r7, #4
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800710c:	b29b      	uxth	r3, r3
 800710e:	461a      	mov	r2, r3
 8007110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007112:	4413      	add	r3, r2
 8007114:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007116:	463b      	mov	r3, r7
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	011a      	lsls	r2, r3, #4
 800711e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007120:	4413      	add	r3, r2
 8007122:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007126:	63bb      	str	r3, [r7, #56]	; 0x38
 8007128:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800712c:	2b00      	cmp	r3, #0
 800712e:	d112      	bne.n	8007156 <USB_EPStartXfer+0x5ca>
 8007130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007132:	881b      	ldrh	r3, [r3, #0]
 8007134:	b29b      	uxth	r3, r3
 8007136:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800713a:	b29a      	uxth	r2, r3
 800713c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713e:	801a      	strh	r2, [r3, #0]
 8007140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007142:	881b      	ldrh	r3, [r3, #0]
 8007144:	b29b      	uxth	r3, r3
 8007146:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800714a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800714e:	b29a      	uxth	r2, r3
 8007150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007152:	801a      	strh	r2, [r3, #0]
 8007154:	e054      	b.n	8007200 <USB_EPStartXfer+0x674>
 8007156:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800715a:	2b3e      	cmp	r3, #62	; 0x3e
 800715c:	d817      	bhi.n	800718e <USB_EPStartXfer+0x602>
 800715e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007162:	085b      	lsrs	r3, r3, #1
 8007164:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007168:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800716c:	f003 0301 	and.w	r3, r3, #1
 8007170:	2b00      	cmp	r3, #0
 8007172:	d004      	beq.n	800717e <USB_EPStartXfer+0x5f2>
 8007174:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007178:	3301      	adds	r3, #1
 800717a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800717e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007182:	b29b      	uxth	r3, r3
 8007184:	029b      	lsls	r3, r3, #10
 8007186:	b29a      	uxth	r2, r3
 8007188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718a:	801a      	strh	r2, [r3, #0]
 800718c:	e038      	b.n	8007200 <USB_EPStartXfer+0x674>
 800718e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007192:	095b      	lsrs	r3, r3, #5
 8007194:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007198:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800719c:	f003 031f 	and.w	r3, r3, #31
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d104      	bne.n	80071ae <USB_EPStartXfer+0x622>
 80071a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071a8:	3b01      	subs	r3, #1
 80071aa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80071ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	029b      	lsls	r3, r3, #10
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c4:	801a      	strh	r2, [r3, #0]
 80071c6:	e01b      	b.n	8007200 <USB_EPStartXfer+0x674>
 80071c8:	463b      	mov	r3, r7
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	785b      	ldrb	r3, [r3, #1]
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d116      	bne.n	8007200 <USB_EPStartXfer+0x674>
 80071d2:	1d3b      	adds	r3, r7, #4
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071da:	b29b      	uxth	r3, r3
 80071dc:	461a      	mov	r2, r3
 80071de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071e0:	4413      	add	r3, r2
 80071e2:	647b      	str	r3, [r7, #68]	; 0x44
 80071e4:	463b      	mov	r3, r7
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	011a      	lsls	r2, r3, #4
 80071ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071ee:	4413      	add	r3, r2
 80071f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80071f4:	643b      	str	r3, [r7, #64]	; 0x40
 80071f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071fe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007200:	463b      	mov	r3, r7
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	895b      	ldrh	r3, [r3, #10]
 8007206:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800720a:	463b      	mov	r3, r7
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	6959      	ldr	r1, [r3, #20]
 8007210:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007214:	b29b      	uxth	r3, r3
 8007216:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800721a:	1d38      	adds	r0, r7, #4
 800721c:	6800      	ldr	r0, [r0, #0]
 800721e:	f000 fe01 	bl	8007e24 <USB_WritePMA>
 8007222:	e1e2      	b.n	80075ea <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007224:	463b      	mov	r3, r7
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6a1b      	ldr	r3, [r3, #32]
 800722a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800722e:	1d3b      	adds	r3, r7, #4
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	463b      	mov	r3, r7
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	4413      	add	r3, r2
 800723c:	881b      	ldrh	r3, [r3, #0]
 800723e:	b29b      	uxth	r3, r3
 8007240:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007248:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800724c:	1d3b      	adds	r3, r7, #4
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	463b      	mov	r3, r7
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	441a      	add	r2, r3
 800725a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800725e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007262:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800726a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800726e:	b29b      	uxth	r3, r3
 8007270:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007272:	1d3b      	adds	r3, r7, #4
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	663b      	str	r3, [r7, #96]	; 0x60
 8007278:	1d3b      	adds	r3, r7, #4
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007280:	b29b      	uxth	r3, r3
 8007282:	461a      	mov	r2, r3
 8007284:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007286:	4413      	add	r3, r2
 8007288:	663b      	str	r3, [r7, #96]	; 0x60
 800728a:	463b      	mov	r3, r7
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	011a      	lsls	r2, r3, #4
 8007292:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007294:	4413      	add	r3, r2
 8007296:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800729a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800729c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072a4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80072a6:	463b      	mov	r3, r7
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	891b      	ldrh	r3, [r3, #8]
 80072ac:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072b0:	463b      	mov	r3, r7
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6959      	ldr	r1, [r3, #20]
 80072b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80072c0:	1d38      	adds	r0, r7, #4
 80072c2:	6800      	ldr	r0, [r0, #0]
 80072c4:	f000 fdae 	bl	8007e24 <USB_WritePMA>
 80072c8:	e18f      	b.n	80075ea <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80072ca:	1d3b      	adds	r3, r7, #4
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	463b      	mov	r3, r7
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	4413      	add	r3, r2
 80072d8:	881b      	ldrh	r3, [r3, #0]
 80072da:	b29b      	uxth	r3, r3
 80072dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f000 808f 	beq.w	8007404 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80072e6:	1d3b      	adds	r3, r7, #4
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80072ec:	463b      	mov	r3, r7
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	785b      	ldrb	r3, [r3, #1]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d164      	bne.n	80073c0 <USB_EPStartXfer+0x834>
 80072f6:	1d3b      	adds	r3, r7, #4
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	673b      	str	r3, [r7, #112]	; 0x70
 80072fc:	1d3b      	adds	r3, r7, #4
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007304:	b29b      	uxth	r3, r3
 8007306:	461a      	mov	r2, r3
 8007308:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800730a:	4413      	add	r3, r2
 800730c:	673b      	str	r3, [r7, #112]	; 0x70
 800730e:	463b      	mov	r3, r7
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	011a      	lsls	r2, r3, #4
 8007316:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007318:	4413      	add	r3, r2
 800731a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800731e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007320:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007324:	2b00      	cmp	r3, #0
 8007326:	d112      	bne.n	800734e <USB_EPStartXfer+0x7c2>
 8007328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800732a:	881b      	ldrh	r3, [r3, #0]
 800732c:	b29b      	uxth	r3, r3
 800732e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007332:	b29a      	uxth	r2, r3
 8007334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007336:	801a      	strh	r2, [r3, #0]
 8007338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800733a:	881b      	ldrh	r3, [r3, #0]
 800733c:	b29b      	uxth	r3, r3
 800733e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007346:	b29a      	uxth	r2, r3
 8007348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800734a:	801a      	strh	r2, [r3, #0]
 800734c:	e054      	b.n	80073f8 <USB_EPStartXfer+0x86c>
 800734e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007352:	2b3e      	cmp	r3, #62	; 0x3e
 8007354:	d817      	bhi.n	8007386 <USB_EPStartXfer+0x7fa>
 8007356:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800735a:	085b      	lsrs	r3, r3, #1
 800735c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007360:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007364:	f003 0301 	and.w	r3, r3, #1
 8007368:	2b00      	cmp	r3, #0
 800736a:	d004      	beq.n	8007376 <USB_EPStartXfer+0x7ea>
 800736c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007370:	3301      	adds	r3, #1
 8007372:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800737a:	b29b      	uxth	r3, r3
 800737c:	029b      	lsls	r3, r3, #10
 800737e:	b29a      	uxth	r2, r3
 8007380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007382:	801a      	strh	r2, [r3, #0]
 8007384:	e038      	b.n	80073f8 <USB_EPStartXfer+0x86c>
 8007386:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800738a:	095b      	lsrs	r3, r3, #5
 800738c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007390:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007394:	f003 031f 	and.w	r3, r3, #31
 8007398:	2b00      	cmp	r3, #0
 800739a:	d104      	bne.n	80073a6 <USB_EPStartXfer+0x81a>
 800739c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073a0:	3b01      	subs	r3, #1
 80073a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80073a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	029b      	lsls	r3, r3, #10
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073bc:	801a      	strh	r2, [r3, #0]
 80073be:	e01b      	b.n	80073f8 <USB_EPStartXfer+0x86c>
 80073c0:	463b      	mov	r3, r7
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	785b      	ldrb	r3, [r3, #1]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d116      	bne.n	80073f8 <USB_EPStartXfer+0x86c>
 80073ca:	1d3b      	adds	r3, r7, #4
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	461a      	mov	r2, r3
 80073d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073d8:	4413      	add	r3, r2
 80073da:	67bb      	str	r3, [r7, #120]	; 0x78
 80073dc:	463b      	mov	r3, r7
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	011a      	lsls	r2, r3, #4
 80073e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073e6:	4413      	add	r3, r2
 80073e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80073ec:	677b      	str	r3, [r7, #116]	; 0x74
 80073ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073f6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80073f8:	463b      	mov	r3, r7
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	895b      	ldrh	r3, [r3, #10]
 80073fe:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8007402:	e097      	b.n	8007534 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007404:	463b      	mov	r3, r7
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	785b      	ldrb	r3, [r3, #1]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d168      	bne.n	80074e0 <USB_EPStartXfer+0x954>
 800740e:	1d3b      	adds	r3, r7, #4
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007416:	1d3b      	adds	r3, r7, #4
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800741e:	b29b      	uxth	r3, r3
 8007420:	461a      	mov	r2, r3
 8007422:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007426:	4413      	add	r3, r2
 8007428:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800742c:	463b      	mov	r3, r7
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	011a      	lsls	r2, r3, #4
 8007434:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007438:	4413      	add	r3, r2
 800743a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800743e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007440:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007444:	2b00      	cmp	r3, #0
 8007446:	d112      	bne.n	800746e <USB_EPStartXfer+0x8e2>
 8007448:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800744a:	881b      	ldrh	r3, [r3, #0]
 800744c:	b29b      	uxth	r3, r3
 800744e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007452:	b29a      	uxth	r2, r3
 8007454:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007456:	801a      	strh	r2, [r3, #0]
 8007458:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800745a:	881b      	ldrh	r3, [r3, #0]
 800745c:	b29b      	uxth	r3, r3
 800745e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007462:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007466:	b29a      	uxth	r2, r3
 8007468:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800746a:	801a      	strh	r2, [r3, #0]
 800746c:	e05d      	b.n	800752a <USB_EPStartXfer+0x99e>
 800746e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007472:	2b3e      	cmp	r3, #62	; 0x3e
 8007474:	d817      	bhi.n	80074a6 <USB_EPStartXfer+0x91a>
 8007476:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800747a:	085b      	lsrs	r3, r3, #1
 800747c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007480:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007484:	f003 0301 	and.w	r3, r3, #1
 8007488:	2b00      	cmp	r3, #0
 800748a:	d004      	beq.n	8007496 <USB_EPStartXfer+0x90a>
 800748c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007490:	3301      	adds	r3, #1
 8007492:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007496:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800749a:	b29b      	uxth	r3, r3
 800749c:	029b      	lsls	r3, r3, #10
 800749e:	b29a      	uxth	r2, r3
 80074a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80074a2:	801a      	strh	r2, [r3, #0]
 80074a4:	e041      	b.n	800752a <USB_EPStartXfer+0x99e>
 80074a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074aa:	095b      	lsrs	r3, r3, #5
 80074ac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80074b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074b4:	f003 031f 	and.w	r3, r3, #31
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d104      	bne.n	80074c6 <USB_EPStartXfer+0x93a>
 80074bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80074c0:	3b01      	subs	r3, #1
 80074c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80074c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	029b      	lsls	r3, r3, #10
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074d8:	b29a      	uxth	r2, r3
 80074da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80074dc:	801a      	strh	r2, [r3, #0]
 80074de:	e024      	b.n	800752a <USB_EPStartXfer+0x99e>
 80074e0:	463b      	mov	r3, r7
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	785b      	ldrb	r3, [r3, #1]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d11f      	bne.n	800752a <USB_EPStartXfer+0x99e>
 80074ea:	1d3b      	adds	r3, r7, #4
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80074f2:	1d3b      	adds	r3, r7, #4
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	461a      	mov	r2, r3
 80074fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007502:	4413      	add	r3, r2
 8007504:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007508:	463b      	mov	r3, r7
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	011a      	lsls	r2, r3, #4
 8007510:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007514:	4413      	add	r3, r2
 8007516:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800751a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800751e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007522:	b29a      	uxth	r2, r3
 8007524:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007528:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800752a:	463b      	mov	r3, r7
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	891b      	ldrh	r3, [r3, #8]
 8007530:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007534:	463b      	mov	r3, r7
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	6959      	ldr	r1, [r3, #20]
 800753a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800753e:	b29b      	uxth	r3, r3
 8007540:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007544:	1d38      	adds	r0, r7, #4
 8007546:	6800      	ldr	r0, [r0, #0]
 8007548:	f000 fc6c 	bl	8007e24 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800754c:	463b      	mov	r3, r7
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	785b      	ldrb	r3, [r3, #1]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d122      	bne.n	800759c <USB_EPStartXfer+0xa10>
 8007556:	1d3b      	adds	r3, r7, #4
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	463b      	mov	r3, r7
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	4413      	add	r3, r2
 8007564:	881b      	ldrh	r3, [r3, #0]
 8007566:	b29b      	uxth	r3, r3
 8007568:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800756c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007570:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8007574:	1d3b      	adds	r3, r7, #4
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	463b      	mov	r3, r7
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	441a      	add	r2, r3
 8007582:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8007586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800758a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800758e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007592:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007596:	b29b      	uxth	r3, r3
 8007598:	8013      	strh	r3, [r2, #0]
 800759a:	e026      	b.n	80075ea <USB_EPStartXfer+0xa5e>
 800759c:	463b      	mov	r3, r7
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	785b      	ldrb	r3, [r3, #1]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d121      	bne.n	80075ea <USB_EPStartXfer+0xa5e>
 80075a6:	1d3b      	adds	r3, r7, #4
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	463b      	mov	r3, r7
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	4413      	add	r3, r2
 80075b4:	881b      	ldrh	r3, [r3, #0]
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075c0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80075c4:	1d3b      	adds	r3, r7, #4
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	463b      	mov	r3, r7
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	441a      	add	r2, r3
 80075d2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80075d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80075ea:	1d3b      	adds	r3, r7, #4
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	463b      	mov	r3, r7
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	4413      	add	r3, r2
 80075f8:	881b      	ldrh	r3, [r3, #0]
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	f107 020e 	add.w	r2, r7, #14
 8007600:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007608:	8013      	strh	r3, [r2, #0]
 800760a:	f107 030e 	add.w	r3, r7, #14
 800760e:	f107 020e 	add.w	r2, r7, #14
 8007612:	8812      	ldrh	r2, [r2, #0]
 8007614:	f082 0210 	eor.w	r2, r2, #16
 8007618:	801a      	strh	r2, [r3, #0]
 800761a:	f107 030e 	add.w	r3, r7, #14
 800761e:	f107 020e 	add.w	r2, r7, #14
 8007622:	8812      	ldrh	r2, [r2, #0]
 8007624:	f082 0220 	eor.w	r2, r2, #32
 8007628:	801a      	strh	r2, [r3, #0]
 800762a:	1d3b      	adds	r3, r7, #4
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	463b      	mov	r3, r7
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	441a      	add	r2, r3
 8007638:	f107 030e 	add.w	r3, r7, #14
 800763c:	881b      	ldrh	r3, [r3, #0]
 800763e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007642:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800764a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800764e:	b29b      	uxth	r3, r3
 8007650:	8013      	strh	r3, [r2, #0]
 8007652:	e3b5      	b.n	8007dc0 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007654:	463b      	mov	r3, r7
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	7b1b      	ldrb	r3, [r3, #12]
 800765a:	2b00      	cmp	r3, #0
 800765c:	f040 8090 	bne.w	8007780 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007660:	463b      	mov	r3, r7
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	699a      	ldr	r2, [r3, #24]
 8007666:	463b      	mov	r3, r7
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	429a      	cmp	r2, r3
 800766e:	d90e      	bls.n	800768e <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8007670:	463b      	mov	r3, r7
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800767a:	463b      	mov	r3, r7
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	699a      	ldr	r2, [r3, #24]
 8007680:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007684:	1ad2      	subs	r2, r2, r3
 8007686:	463b      	mov	r3, r7
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	619a      	str	r2, [r3, #24]
 800768c:	e008      	b.n	80076a0 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 800768e:	463b      	mov	r3, r7
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	699b      	ldr	r3, [r3, #24]
 8007694:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8007698:	463b      	mov	r3, r7
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2200      	movs	r2, #0
 800769e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80076a0:	1d3b      	adds	r3, r7, #4
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80076a8:	1d3b      	adds	r3, r7, #4
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	461a      	mov	r2, r3
 80076b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80076b8:	4413      	add	r3, r2
 80076ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80076be:	463b      	mov	r3, r7
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	011a      	lsls	r2, r3, #4
 80076c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80076ca:	4413      	add	r3, r2
 80076cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80076d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80076d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d116      	bne.n	800770a <USB_EPStartXfer+0xb7e>
 80076dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80076e0:	881b      	ldrh	r3, [r3, #0]
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80076ee:	801a      	strh	r2, [r3, #0]
 80076f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80076f4:	881b      	ldrh	r3, [r3, #0]
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007700:	b29a      	uxth	r2, r3
 8007702:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007706:	801a      	strh	r2, [r3, #0]
 8007708:	e32c      	b.n	8007d64 <USB_EPStartXfer+0x11d8>
 800770a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800770e:	2b3e      	cmp	r3, #62	; 0x3e
 8007710:	d818      	bhi.n	8007744 <USB_EPStartXfer+0xbb8>
 8007712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007716:	085b      	lsrs	r3, r3, #1
 8007718:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800771c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007720:	f003 0301 	and.w	r3, r3, #1
 8007724:	2b00      	cmp	r3, #0
 8007726:	d004      	beq.n	8007732 <USB_EPStartXfer+0xba6>
 8007728:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800772c:	3301      	adds	r3, #1
 800772e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007732:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007736:	b29b      	uxth	r3, r3
 8007738:	029b      	lsls	r3, r3, #10
 800773a:	b29a      	uxth	r2, r3
 800773c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007740:	801a      	strh	r2, [r3, #0]
 8007742:	e30f      	b.n	8007d64 <USB_EPStartXfer+0x11d8>
 8007744:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007748:	095b      	lsrs	r3, r3, #5
 800774a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800774e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007752:	f003 031f 	and.w	r3, r3, #31
 8007756:	2b00      	cmp	r3, #0
 8007758:	d104      	bne.n	8007764 <USB_EPStartXfer+0xbd8>
 800775a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800775e:	3b01      	subs	r3, #1
 8007760:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007764:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007768:	b29b      	uxth	r3, r3
 800776a:	029b      	lsls	r3, r3, #10
 800776c:	b29b      	uxth	r3, r3
 800776e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007776:	b29a      	uxth	r2, r3
 8007778:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800777c:	801a      	strh	r2, [r3, #0]
 800777e:	e2f1      	b.n	8007d64 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007780:	463b      	mov	r3, r7
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	78db      	ldrb	r3, [r3, #3]
 8007786:	2b02      	cmp	r3, #2
 8007788:	f040 818f 	bne.w	8007aaa <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800778c:	463b      	mov	r3, r7
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	785b      	ldrb	r3, [r3, #1]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d175      	bne.n	8007882 <USB_EPStartXfer+0xcf6>
 8007796:	1d3b      	adds	r3, r7, #4
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800779e:	1d3b      	adds	r3, r7, #4
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	461a      	mov	r2, r3
 80077aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80077ae:	4413      	add	r3, r2
 80077b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077b4:	463b      	mov	r3, r7
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	011a      	lsls	r2, r3, #4
 80077bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80077c0:	4413      	add	r3, r2
 80077c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80077c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80077ca:	463b      	mov	r3, r7
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d116      	bne.n	8007802 <USB_EPStartXfer+0xc76>
 80077d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077d8:	881b      	ldrh	r3, [r3, #0]
 80077da:	b29b      	uxth	r3, r3
 80077dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077e6:	801a      	strh	r2, [r3, #0]
 80077e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077ec:	881b      	ldrh	r3, [r3, #0]
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077fe:	801a      	strh	r2, [r3, #0]
 8007800:	e065      	b.n	80078ce <USB_EPStartXfer+0xd42>
 8007802:	463b      	mov	r3, r7
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	2b3e      	cmp	r3, #62	; 0x3e
 800780a:	d81a      	bhi.n	8007842 <USB_EPStartXfer+0xcb6>
 800780c:	463b      	mov	r3, r7
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	085b      	lsrs	r3, r3, #1
 8007814:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007818:	463b      	mov	r3, r7
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	f003 0301 	and.w	r3, r3, #1
 8007822:	2b00      	cmp	r3, #0
 8007824:	d004      	beq.n	8007830 <USB_EPStartXfer+0xca4>
 8007826:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800782a:	3301      	adds	r3, #1
 800782c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007830:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007834:	b29b      	uxth	r3, r3
 8007836:	029b      	lsls	r3, r3, #10
 8007838:	b29a      	uxth	r2, r3
 800783a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800783e:	801a      	strh	r2, [r3, #0]
 8007840:	e045      	b.n	80078ce <USB_EPStartXfer+0xd42>
 8007842:	463b      	mov	r3, r7
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	095b      	lsrs	r3, r3, #5
 800784a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800784e:	463b      	mov	r3, r7
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	f003 031f 	and.w	r3, r3, #31
 8007858:	2b00      	cmp	r3, #0
 800785a:	d104      	bne.n	8007866 <USB_EPStartXfer+0xcda>
 800785c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007860:	3b01      	subs	r3, #1
 8007862:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007866:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800786a:	b29b      	uxth	r3, r3
 800786c:	029b      	lsls	r3, r3, #10
 800786e:	b29b      	uxth	r3, r3
 8007870:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007874:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007878:	b29a      	uxth	r2, r3
 800787a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800787e:	801a      	strh	r2, [r3, #0]
 8007880:	e025      	b.n	80078ce <USB_EPStartXfer+0xd42>
 8007882:	463b      	mov	r3, r7
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	785b      	ldrb	r3, [r3, #1]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d120      	bne.n	80078ce <USB_EPStartXfer+0xd42>
 800788c:	1d3b      	adds	r3, r7, #4
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007894:	1d3b      	adds	r3, r7, #4
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800789c:	b29b      	uxth	r3, r3
 800789e:	461a      	mov	r2, r3
 80078a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80078a4:	4413      	add	r3, r2
 80078a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078aa:	463b      	mov	r3, r7
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	011a      	lsls	r2, r3, #4
 80078b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80078b6:	4413      	add	r3, r2
 80078b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078c0:	463b      	mov	r3, r7
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80078cc:	801a      	strh	r2, [r3, #0]
 80078ce:	1d3b      	adds	r3, r7, #4
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80078d6:	463b      	mov	r3, r7
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	785b      	ldrb	r3, [r3, #1]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d175      	bne.n	80079cc <USB_EPStartXfer+0xe40>
 80078e0:	1d3b      	adds	r3, r7, #4
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80078e8:	1d3b      	adds	r3, r7, #4
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	461a      	mov	r2, r3
 80078f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078f8:	4413      	add	r3, r2
 80078fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80078fe:	463b      	mov	r3, r7
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	011a      	lsls	r2, r3, #4
 8007906:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800790a:	4413      	add	r3, r2
 800790c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007910:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007914:	463b      	mov	r3, r7
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d116      	bne.n	800794c <USB_EPStartXfer+0xdc0>
 800791e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007922:	881b      	ldrh	r3, [r3, #0]
 8007924:	b29b      	uxth	r3, r3
 8007926:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800792a:	b29a      	uxth	r2, r3
 800792c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007930:	801a      	strh	r2, [r3, #0]
 8007932:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007936:	881b      	ldrh	r3, [r3, #0]
 8007938:	b29b      	uxth	r3, r3
 800793a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800793e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007942:	b29a      	uxth	r2, r3
 8007944:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007948:	801a      	strh	r2, [r3, #0]
 800794a:	e061      	b.n	8007a10 <USB_EPStartXfer+0xe84>
 800794c:	463b      	mov	r3, r7
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	2b3e      	cmp	r3, #62	; 0x3e
 8007954:	d81a      	bhi.n	800798c <USB_EPStartXfer+0xe00>
 8007956:	463b      	mov	r3, r7
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	085b      	lsrs	r3, r3, #1
 800795e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007962:	463b      	mov	r3, r7
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	f003 0301 	and.w	r3, r3, #1
 800796c:	2b00      	cmp	r3, #0
 800796e:	d004      	beq.n	800797a <USB_EPStartXfer+0xdee>
 8007970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007974:	3301      	adds	r3, #1
 8007976:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800797a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800797e:	b29b      	uxth	r3, r3
 8007980:	029b      	lsls	r3, r3, #10
 8007982:	b29a      	uxth	r2, r3
 8007984:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007988:	801a      	strh	r2, [r3, #0]
 800798a:	e041      	b.n	8007a10 <USB_EPStartXfer+0xe84>
 800798c:	463b      	mov	r3, r7
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	095b      	lsrs	r3, r3, #5
 8007994:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007998:	463b      	mov	r3, r7
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	f003 031f 	and.w	r3, r3, #31
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d104      	bne.n	80079b0 <USB_EPStartXfer+0xe24>
 80079a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079aa:	3b01      	subs	r3, #1
 80079ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80079b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	029b      	lsls	r3, r3, #10
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079c8:	801a      	strh	r2, [r3, #0]
 80079ca:	e021      	b.n	8007a10 <USB_EPStartXfer+0xe84>
 80079cc:	463b      	mov	r3, r7
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	785b      	ldrb	r3, [r3, #1]
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d11c      	bne.n	8007a10 <USB_EPStartXfer+0xe84>
 80079d6:	1d3b      	adds	r3, r7, #4
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079de:	b29b      	uxth	r3, r3
 80079e0:	461a      	mov	r2, r3
 80079e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80079e6:	4413      	add	r3, r2
 80079e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80079ec:	463b      	mov	r3, r7
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	011a      	lsls	r2, r3, #4
 80079f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80079f8:	4413      	add	r3, r2
 80079fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80079fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007a02:	463b      	mov	r3, r7
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a0e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007a10:	463b      	mov	r3, r7
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	69db      	ldr	r3, [r3, #28]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f000 81a4 	beq.w	8007d64 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007a1c:	1d3b      	adds	r3, r7, #4
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	463b      	mov	r3, r7
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4413      	add	r3, r2
 8007a2a:	881b      	ldrh	r3, [r3, #0]
 8007a2c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007a30:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007a34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d005      	beq.n	8007a48 <USB_EPStartXfer+0xebc>
 8007a3c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10d      	bne.n	8007a64 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007a48:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f040 8187 	bne.w	8007d64 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007a56:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	f040 8180 	bne.w	8007d64 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007a64:	1d3b      	adds	r3, r7, #4
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	463b      	mov	r3, r7
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	4413      	add	r3, r2
 8007a72:	881b      	ldrh	r3, [r3, #0]
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a7e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8007a82:	1d3b      	adds	r3, r7, #4
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	463b      	mov	r3, r7
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	441a      	add	r2, r3
 8007a90:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8007a94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aa0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	8013      	strh	r3, [r2, #0]
 8007aa8:	e15c      	b.n	8007d64 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007aaa:	463b      	mov	r3, r7
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	78db      	ldrb	r3, [r3, #3]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	f040 8155 	bne.w	8007d60 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007ab6:	463b      	mov	r3, r7
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	699a      	ldr	r2, [r3, #24]
 8007abc:	463b      	mov	r3, r7
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d90e      	bls.n	8007ae4 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8007ac6:	463b      	mov	r3, r7
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8007ad0:	463b      	mov	r3, r7
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	699a      	ldr	r2, [r3, #24]
 8007ad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ada:	1ad2      	subs	r2, r2, r3
 8007adc:	463b      	mov	r3, r7
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	619a      	str	r2, [r3, #24]
 8007ae2:	e008      	b.n	8007af6 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8007ae4:	463b      	mov	r3, r7
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8007aee:	463b      	mov	r3, r7
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2200      	movs	r2, #0
 8007af4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007af6:	463b      	mov	r3, r7
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	785b      	ldrb	r3, [r3, #1]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d16f      	bne.n	8007be0 <USB_EPStartXfer+0x1054>
 8007b00:	1d3b      	adds	r3, r7, #4
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b08:	1d3b      	adds	r3, r7, #4
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	461a      	mov	r2, r3
 8007b14:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007b18:	4413      	add	r3, r2
 8007b1a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b1e:	463b      	mov	r3, r7
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	011a      	lsls	r2, r3, #4
 8007b26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007b2a:	4413      	add	r3, r2
 8007b2c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007b34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d116      	bne.n	8007b6a <USB_EPStartXfer+0xfde>
 8007b3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007b40:	881b      	ldrh	r3, [r3, #0]
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007b4e:	801a      	strh	r2, [r3, #0]
 8007b50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007b54:	881b      	ldrh	r3, [r3, #0]
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007b66:	801a      	strh	r2, [r3, #0]
 8007b68:	e05f      	b.n	8007c2a <USB_EPStartXfer+0x109e>
 8007b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b6e:	2b3e      	cmp	r3, #62	; 0x3e
 8007b70:	d818      	bhi.n	8007ba4 <USB_EPStartXfer+0x1018>
 8007b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b76:	085b      	lsrs	r3, r3, #1
 8007b78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b80:	f003 0301 	and.w	r3, r3, #1
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d004      	beq.n	8007b92 <USB_EPStartXfer+0x1006>
 8007b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	029b      	lsls	r3, r3, #10
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007ba0:	801a      	strh	r2, [r3, #0]
 8007ba2:	e042      	b.n	8007c2a <USB_EPStartXfer+0x109e>
 8007ba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ba8:	095b      	lsrs	r3, r3, #5
 8007baa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007bae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bb2:	f003 031f 	and.w	r3, r3, #31
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d104      	bne.n	8007bc4 <USB_EPStartXfer+0x1038>
 8007bba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	029b      	lsls	r3, r3, #10
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007bdc:	801a      	strh	r2, [r3, #0]
 8007bde:	e024      	b.n	8007c2a <USB_EPStartXfer+0x109e>
 8007be0:	463b      	mov	r3, r7
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	785b      	ldrb	r3, [r3, #1]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d11f      	bne.n	8007c2a <USB_EPStartXfer+0x109e>
 8007bea:	1d3b      	adds	r3, r7, #4
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007bf2:	1d3b      	adds	r3, r7, #4
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c02:	4413      	add	r3, r2
 8007c04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c08:	463b      	mov	r3, r7
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	011a      	lsls	r2, r3, #4
 8007c10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c14:	4413      	add	r3, r2
 8007c16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007c1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c22:	b29a      	uxth	r2, r3
 8007c24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c28:	801a      	strh	r2, [r3, #0]
 8007c2a:	1d3b      	adds	r3, r7, #4
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c32:	463b      	mov	r3, r7
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	785b      	ldrb	r3, [r3, #1]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d16f      	bne.n	8007d1c <USB_EPStartXfer+0x1190>
 8007c3c:	1d3b      	adds	r3, r7, #4
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c44:	1d3b      	adds	r3, r7, #4
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	461a      	mov	r2, r3
 8007c50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007c54:	4413      	add	r3, r2
 8007c56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c5a:	463b      	mov	r3, r7
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	011a      	lsls	r2, r3, #4
 8007c62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007c66:	4413      	add	r3, r2
 8007c68:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007c70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d116      	bne.n	8007ca6 <USB_EPStartXfer+0x111a>
 8007c78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007c7c:	881b      	ldrh	r3, [r3, #0]
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007c8a:	801a      	strh	r2, [r3, #0]
 8007c8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007c90:	881b      	ldrh	r3, [r3, #0]
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007ca2:	801a      	strh	r2, [r3, #0]
 8007ca4:	e05e      	b.n	8007d64 <USB_EPStartXfer+0x11d8>
 8007ca6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007caa:	2b3e      	cmp	r3, #62	; 0x3e
 8007cac:	d818      	bhi.n	8007ce0 <USB_EPStartXfer+0x1154>
 8007cae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cb2:	085b      	lsrs	r3, r3, #1
 8007cb4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cbc:	f003 0301 	and.w	r3, r3, #1
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d004      	beq.n	8007cce <USB_EPStartXfer+0x1142>
 8007cc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cc8:	3301      	adds	r3, #1
 8007cca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007cce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	029b      	lsls	r3, r3, #10
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007cdc:	801a      	strh	r2, [r3, #0]
 8007cde:	e041      	b.n	8007d64 <USB_EPStartXfer+0x11d8>
 8007ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ce4:	095b      	lsrs	r3, r3, #5
 8007ce6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007cea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cee:	f003 031f 	and.w	r3, r3, #31
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d104      	bne.n	8007d00 <USB_EPStartXfer+0x1174>
 8007cf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007d00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	029b      	lsls	r3, r3, #10
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d12:	b29a      	uxth	r2, r3
 8007d14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007d18:	801a      	strh	r2, [r3, #0]
 8007d1a:	e023      	b.n	8007d64 <USB_EPStartXfer+0x11d8>
 8007d1c:	463b      	mov	r3, r7
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	785b      	ldrb	r3, [r3, #1]
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d11e      	bne.n	8007d64 <USB_EPStartXfer+0x11d8>
 8007d26:	1d3b      	adds	r3, r7, #4
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	461a      	mov	r2, r3
 8007d32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d36:	4413      	add	r3, r2
 8007d38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d3c:	463b      	mov	r3, r7
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	011a      	lsls	r2, r3, #4
 8007d44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d48:	4413      	add	r3, r2
 8007d4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007d5c:	801a      	strh	r2, [r3, #0]
 8007d5e:	e001      	b.n	8007d64 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	e02e      	b.n	8007dc2 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d64:	1d3b      	adds	r3, r7, #4
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	463b      	mov	r3, r7
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	4413      	add	r3, r2
 8007d72:	881b      	ldrh	r3, [r3, #0]
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d7e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007d82:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007d86:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007d8a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007d8e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007d92:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007d96:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007d9a:	1d3b      	adds	r3, r7, #4
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	463b      	mov	r3, r7
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	441a      	add	r2, r3
 8007da8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007dac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007db0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007db4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007dd8:	78fb      	ldrb	r3, [r7, #3]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d103      	bne.n	8007de6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2280      	movs	r2, #128	; 0x80
 8007de2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bc80      	pop	{r7}
 8007df0:	4770      	bx	lr

08007df2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b083      	sub	sp, #12
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bc80      	pop	{r7}
 8007e04:	4770      	bx	lr

08007e06 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007e06:	b480      	push	{r7}
 8007e08:	b085      	sub	sp, #20
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007e18:	68fb      	ldr	r3, [r7, #12]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3714      	adds	r7, #20
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bc80      	pop	{r7}
 8007e22:	4770      	bx	lr

08007e24 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b08d      	sub	sp, #52	; 0x34
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	4611      	mov	r1, r2
 8007e30:	461a      	mov	r2, r3
 8007e32:	460b      	mov	r3, r1
 8007e34:	80fb      	strh	r3, [r7, #6]
 8007e36:	4613      	mov	r3, r2
 8007e38:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007e3a:	88bb      	ldrh	r3, [r7, #4]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	085b      	lsrs	r3, r3, #1
 8007e40:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e4a:	88fb      	ldrh	r3, [r7, #6]
 8007e4c:	005a      	lsls	r2, r3, #1
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	4413      	add	r3, r2
 8007e52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e56:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007e58:	6a3b      	ldr	r3, [r7, #32]
 8007e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e5c:	e01e      	b.n	8007e9c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e66:	3301      	adds	r3, #1
 8007e68:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	021b      	lsls	r3, r3, #8
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	461a      	mov	r2, r3
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e82:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e86:	3302      	adds	r3, #2
 8007e88:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8c:	3302      	adds	r3, #2
 8007e8e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e92:	3301      	adds	r3, #1
 8007e94:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1dd      	bne.n	8007e5e <USB_WritePMA+0x3a>
  }
}
 8007ea2:	bf00      	nop
 8007ea4:	bf00      	nop
 8007ea6:	3734      	adds	r7, #52	; 0x34
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bc80      	pop	{r7}
 8007eac:	4770      	bx	lr

08007eae <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007eae:	b480      	push	{r7}
 8007eb0:	b08b      	sub	sp, #44	; 0x2c
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	60f8      	str	r0, [r7, #12]
 8007eb6:	60b9      	str	r1, [r7, #8]
 8007eb8:	4611      	mov	r1, r2
 8007eba:	461a      	mov	r2, r3
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	80fb      	strh	r3, [r7, #6]
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007ec4:	88bb      	ldrh	r3, [r7, #4]
 8007ec6:	085b      	lsrs	r3, r3, #1
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007ed4:	88fb      	ldrh	r3, [r7, #6]
 8007ed6:	005a      	lsls	r2, r3, #1
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	4413      	add	r3, r2
 8007edc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ee0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007ee2:	69bb      	ldr	r3, [r7, #24]
 8007ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ee6:	e01b      	b.n	8007f20 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007ee8:	6a3b      	ldr	r3, [r7, #32]
 8007eea:	881b      	ldrh	r3, [r3, #0]
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007ef0:	6a3b      	ldr	r3, [r7, #32]
 8007ef2:	3302      	adds	r3, #2
 8007ef4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	b2da      	uxtb	r2, r3
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	3301      	adds	r3, #1
 8007f02:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	0a1b      	lsrs	r3, r3, #8
 8007f08:	b2da      	uxtb	r2, r3
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	3301      	adds	r3, #1
 8007f12:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007f14:	6a3b      	ldr	r3, [r7, #32]
 8007f16:	3302      	adds	r3, #2
 8007f18:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1e0      	bne.n	8007ee8 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007f26:	88bb      	ldrh	r3, [r7, #4]
 8007f28:	f003 0301 	and.w	r3, r3, #1
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d007      	beq.n	8007f42 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007f32:	6a3b      	ldr	r3, [r7, #32]
 8007f34:	881b      	ldrh	r3, [r3, #0]
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	b2da      	uxtb	r2, r3
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	701a      	strb	r2, [r3, #0]
  }
}
 8007f42:	bf00      	nop
 8007f44:	372c      	adds	r7, #44	; 0x2c
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bc80      	pop	{r7}
 8007f4a:	4770      	bx	lr

08007f4c <__assert_func>:
 8007f4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f4e:	4614      	mov	r4, r2
 8007f50:	461a      	mov	r2, r3
 8007f52:	4b09      	ldr	r3, [pc, #36]	; (8007f78 <__assert_func+0x2c>)
 8007f54:	4605      	mov	r5, r0
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68d8      	ldr	r0, [r3, #12]
 8007f5a:	b14c      	cbz	r4, 8007f70 <__assert_func+0x24>
 8007f5c:	4b07      	ldr	r3, [pc, #28]	; (8007f7c <__assert_func+0x30>)
 8007f5e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f62:	9100      	str	r1, [sp, #0]
 8007f64:	462b      	mov	r3, r5
 8007f66:	4906      	ldr	r1, [pc, #24]	; (8007f80 <__assert_func+0x34>)
 8007f68:	f000 f814 	bl	8007f94 <fiprintf>
 8007f6c:	f002 f86e 	bl	800a04c <abort>
 8007f70:	4b04      	ldr	r3, [pc, #16]	; (8007f84 <__assert_func+0x38>)
 8007f72:	461c      	mov	r4, r3
 8007f74:	e7f3      	b.n	8007f5e <__assert_func+0x12>
 8007f76:	bf00      	nop
 8007f78:	20000054 	.word	0x20000054
 8007f7c:	0800c888 	.word	0x0800c888
 8007f80:	0800c895 	.word	0x0800c895
 8007f84:	0800c8c3 	.word	0x0800c8c3

08007f88 <__errno>:
 8007f88:	4b01      	ldr	r3, [pc, #4]	; (8007f90 <__errno+0x8>)
 8007f8a:	6818      	ldr	r0, [r3, #0]
 8007f8c:	4770      	bx	lr
 8007f8e:	bf00      	nop
 8007f90:	20000054 	.word	0x20000054

08007f94 <fiprintf>:
 8007f94:	b40e      	push	{r1, r2, r3}
 8007f96:	b503      	push	{r0, r1, lr}
 8007f98:	4601      	mov	r1, r0
 8007f9a:	ab03      	add	r3, sp, #12
 8007f9c:	4805      	ldr	r0, [pc, #20]	; (8007fb4 <fiprintf+0x20>)
 8007f9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fa2:	6800      	ldr	r0, [r0, #0]
 8007fa4:	9301      	str	r3, [sp, #4]
 8007fa6:	f000 f917 	bl	80081d8 <_vfiprintf_r>
 8007faa:	b002      	add	sp, #8
 8007fac:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fb0:	b003      	add	sp, #12
 8007fb2:	4770      	bx	lr
 8007fb4:	20000054 	.word	0x20000054

08007fb8 <__libc_init_array>:
 8007fb8:	b570      	push	{r4, r5, r6, lr}
 8007fba:	2600      	movs	r6, #0
 8007fbc:	4d0c      	ldr	r5, [pc, #48]	; (8007ff0 <__libc_init_array+0x38>)
 8007fbe:	4c0d      	ldr	r4, [pc, #52]	; (8007ff4 <__libc_init_array+0x3c>)
 8007fc0:	1b64      	subs	r4, r4, r5
 8007fc2:	10a4      	asrs	r4, r4, #2
 8007fc4:	42a6      	cmp	r6, r4
 8007fc6:	d109      	bne.n	8007fdc <__libc_init_array+0x24>
 8007fc8:	f004 fbf8 	bl	800c7bc <_init>
 8007fcc:	2600      	movs	r6, #0
 8007fce:	4d0a      	ldr	r5, [pc, #40]	; (8007ff8 <__libc_init_array+0x40>)
 8007fd0:	4c0a      	ldr	r4, [pc, #40]	; (8007ffc <__libc_init_array+0x44>)
 8007fd2:	1b64      	subs	r4, r4, r5
 8007fd4:	10a4      	asrs	r4, r4, #2
 8007fd6:	42a6      	cmp	r6, r4
 8007fd8:	d105      	bne.n	8007fe6 <__libc_init_array+0x2e>
 8007fda:	bd70      	pop	{r4, r5, r6, pc}
 8007fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fe0:	4798      	blx	r3
 8007fe2:	3601      	adds	r6, #1
 8007fe4:	e7ee      	b.n	8007fc4 <__libc_init_array+0xc>
 8007fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fea:	4798      	blx	r3
 8007fec:	3601      	adds	r6, #1
 8007fee:	e7f2      	b.n	8007fd6 <__libc_init_array+0x1e>
 8007ff0:	0800cd3c 	.word	0x0800cd3c
 8007ff4:	0800cd3c 	.word	0x0800cd3c
 8007ff8:	0800cd3c 	.word	0x0800cd3c
 8007ffc:	0800cd40 	.word	0x0800cd40

08008000 <malloc>:
 8008000:	4b02      	ldr	r3, [pc, #8]	; (800800c <malloc+0xc>)
 8008002:	4601      	mov	r1, r0
 8008004:	6818      	ldr	r0, [r3, #0]
 8008006:	f000 b865 	b.w	80080d4 <_malloc_r>
 800800a:	bf00      	nop
 800800c:	20000054 	.word	0x20000054

08008010 <memcpy>:
 8008010:	440a      	add	r2, r1
 8008012:	4291      	cmp	r1, r2
 8008014:	f100 33ff 	add.w	r3, r0, #4294967295
 8008018:	d100      	bne.n	800801c <memcpy+0xc>
 800801a:	4770      	bx	lr
 800801c:	b510      	push	{r4, lr}
 800801e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008022:	4291      	cmp	r1, r2
 8008024:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008028:	d1f9      	bne.n	800801e <memcpy+0xe>
 800802a:	bd10      	pop	{r4, pc}

0800802c <memset>:
 800802c:	4603      	mov	r3, r0
 800802e:	4402      	add	r2, r0
 8008030:	4293      	cmp	r3, r2
 8008032:	d100      	bne.n	8008036 <memset+0xa>
 8008034:	4770      	bx	lr
 8008036:	f803 1b01 	strb.w	r1, [r3], #1
 800803a:	e7f9      	b.n	8008030 <memset+0x4>

0800803c <_free_r>:
 800803c:	b538      	push	{r3, r4, r5, lr}
 800803e:	4605      	mov	r5, r0
 8008040:	2900      	cmp	r1, #0
 8008042:	d043      	beq.n	80080cc <_free_r+0x90>
 8008044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008048:	1f0c      	subs	r4, r1, #4
 800804a:	2b00      	cmp	r3, #0
 800804c:	bfb8      	it	lt
 800804e:	18e4      	addlt	r4, r4, r3
 8008050:	f003 fc44 	bl	800b8dc <__malloc_lock>
 8008054:	4a1e      	ldr	r2, [pc, #120]	; (80080d0 <_free_r+0x94>)
 8008056:	6813      	ldr	r3, [r2, #0]
 8008058:	4610      	mov	r0, r2
 800805a:	b933      	cbnz	r3, 800806a <_free_r+0x2e>
 800805c:	6063      	str	r3, [r4, #4]
 800805e:	6014      	str	r4, [r2, #0]
 8008060:	4628      	mov	r0, r5
 8008062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008066:	f003 bc3f 	b.w	800b8e8 <__malloc_unlock>
 800806a:	42a3      	cmp	r3, r4
 800806c:	d90a      	bls.n	8008084 <_free_r+0x48>
 800806e:	6821      	ldr	r1, [r4, #0]
 8008070:	1862      	adds	r2, r4, r1
 8008072:	4293      	cmp	r3, r2
 8008074:	bf01      	itttt	eq
 8008076:	681a      	ldreq	r2, [r3, #0]
 8008078:	685b      	ldreq	r3, [r3, #4]
 800807a:	1852      	addeq	r2, r2, r1
 800807c:	6022      	streq	r2, [r4, #0]
 800807e:	6063      	str	r3, [r4, #4]
 8008080:	6004      	str	r4, [r0, #0]
 8008082:	e7ed      	b.n	8008060 <_free_r+0x24>
 8008084:	461a      	mov	r2, r3
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	b10b      	cbz	r3, 800808e <_free_r+0x52>
 800808a:	42a3      	cmp	r3, r4
 800808c:	d9fa      	bls.n	8008084 <_free_r+0x48>
 800808e:	6811      	ldr	r1, [r2, #0]
 8008090:	1850      	adds	r0, r2, r1
 8008092:	42a0      	cmp	r0, r4
 8008094:	d10b      	bne.n	80080ae <_free_r+0x72>
 8008096:	6820      	ldr	r0, [r4, #0]
 8008098:	4401      	add	r1, r0
 800809a:	1850      	adds	r0, r2, r1
 800809c:	4283      	cmp	r3, r0
 800809e:	6011      	str	r1, [r2, #0]
 80080a0:	d1de      	bne.n	8008060 <_free_r+0x24>
 80080a2:	6818      	ldr	r0, [r3, #0]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	4401      	add	r1, r0
 80080a8:	6011      	str	r1, [r2, #0]
 80080aa:	6053      	str	r3, [r2, #4]
 80080ac:	e7d8      	b.n	8008060 <_free_r+0x24>
 80080ae:	d902      	bls.n	80080b6 <_free_r+0x7a>
 80080b0:	230c      	movs	r3, #12
 80080b2:	602b      	str	r3, [r5, #0]
 80080b4:	e7d4      	b.n	8008060 <_free_r+0x24>
 80080b6:	6820      	ldr	r0, [r4, #0]
 80080b8:	1821      	adds	r1, r4, r0
 80080ba:	428b      	cmp	r3, r1
 80080bc:	bf01      	itttt	eq
 80080be:	6819      	ldreq	r1, [r3, #0]
 80080c0:	685b      	ldreq	r3, [r3, #4]
 80080c2:	1809      	addeq	r1, r1, r0
 80080c4:	6021      	streq	r1, [r4, #0]
 80080c6:	6063      	str	r3, [r4, #4]
 80080c8:	6054      	str	r4, [r2, #4]
 80080ca:	e7c9      	b.n	8008060 <_free_r+0x24>
 80080cc:	bd38      	pop	{r3, r4, r5, pc}
 80080ce:	bf00      	nop
 80080d0:	20000258 	.word	0x20000258

080080d4 <_malloc_r>:
 80080d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d6:	1ccd      	adds	r5, r1, #3
 80080d8:	f025 0503 	bic.w	r5, r5, #3
 80080dc:	3508      	adds	r5, #8
 80080de:	2d0c      	cmp	r5, #12
 80080e0:	bf38      	it	cc
 80080e2:	250c      	movcc	r5, #12
 80080e4:	2d00      	cmp	r5, #0
 80080e6:	4606      	mov	r6, r0
 80080e8:	db01      	blt.n	80080ee <_malloc_r+0x1a>
 80080ea:	42a9      	cmp	r1, r5
 80080ec:	d903      	bls.n	80080f6 <_malloc_r+0x22>
 80080ee:	230c      	movs	r3, #12
 80080f0:	6033      	str	r3, [r6, #0]
 80080f2:	2000      	movs	r0, #0
 80080f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080f6:	f003 fbf1 	bl	800b8dc <__malloc_lock>
 80080fa:	4921      	ldr	r1, [pc, #132]	; (8008180 <_malloc_r+0xac>)
 80080fc:	680a      	ldr	r2, [r1, #0]
 80080fe:	4614      	mov	r4, r2
 8008100:	b99c      	cbnz	r4, 800812a <_malloc_r+0x56>
 8008102:	4f20      	ldr	r7, [pc, #128]	; (8008184 <_malloc_r+0xb0>)
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	b923      	cbnz	r3, 8008112 <_malloc_r+0x3e>
 8008108:	4621      	mov	r1, r4
 800810a:	4630      	mov	r0, r6
 800810c:	f001 f806 	bl	800911c <_sbrk_r>
 8008110:	6038      	str	r0, [r7, #0]
 8008112:	4629      	mov	r1, r5
 8008114:	4630      	mov	r0, r6
 8008116:	f001 f801 	bl	800911c <_sbrk_r>
 800811a:	1c43      	adds	r3, r0, #1
 800811c:	d123      	bne.n	8008166 <_malloc_r+0x92>
 800811e:	230c      	movs	r3, #12
 8008120:	4630      	mov	r0, r6
 8008122:	6033      	str	r3, [r6, #0]
 8008124:	f003 fbe0 	bl	800b8e8 <__malloc_unlock>
 8008128:	e7e3      	b.n	80080f2 <_malloc_r+0x1e>
 800812a:	6823      	ldr	r3, [r4, #0]
 800812c:	1b5b      	subs	r3, r3, r5
 800812e:	d417      	bmi.n	8008160 <_malloc_r+0x8c>
 8008130:	2b0b      	cmp	r3, #11
 8008132:	d903      	bls.n	800813c <_malloc_r+0x68>
 8008134:	6023      	str	r3, [r4, #0]
 8008136:	441c      	add	r4, r3
 8008138:	6025      	str	r5, [r4, #0]
 800813a:	e004      	b.n	8008146 <_malloc_r+0x72>
 800813c:	6863      	ldr	r3, [r4, #4]
 800813e:	42a2      	cmp	r2, r4
 8008140:	bf0c      	ite	eq
 8008142:	600b      	streq	r3, [r1, #0]
 8008144:	6053      	strne	r3, [r2, #4]
 8008146:	4630      	mov	r0, r6
 8008148:	f003 fbce 	bl	800b8e8 <__malloc_unlock>
 800814c:	f104 000b 	add.w	r0, r4, #11
 8008150:	1d23      	adds	r3, r4, #4
 8008152:	f020 0007 	bic.w	r0, r0, #7
 8008156:	1ac2      	subs	r2, r0, r3
 8008158:	d0cc      	beq.n	80080f4 <_malloc_r+0x20>
 800815a:	1a1b      	subs	r3, r3, r0
 800815c:	50a3      	str	r3, [r4, r2]
 800815e:	e7c9      	b.n	80080f4 <_malloc_r+0x20>
 8008160:	4622      	mov	r2, r4
 8008162:	6864      	ldr	r4, [r4, #4]
 8008164:	e7cc      	b.n	8008100 <_malloc_r+0x2c>
 8008166:	1cc4      	adds	r4, r0, #3
 8008168:	f024 0403 	bic.w	r4, r4, #3
 800816c:	42a0      	cmp	r0, r4
 800816e:	d0e3      	beq.n	8008138 <_malloc_r+0x64>
 8008170:	1a21      	subs	r1, r4, r0
 8008172:	4630      	mov	r0, r6
 8008174:	f000 ffd2 	bl	800911c <_sbrk_r>
 8008178:	3001      	adds	r0, #1
 800817a:	d1dd      	bne.n	8008138 <_malloc_r+0x64>
 800817c:	e7cf      	b.n	800811e <_malloc_r+0x4a>
 800817e:	bf00      	nop
 8008180:	20000258 	.word	0x20000258
 8008184:	2000025c 	.word	0x2000025c

08008188 <__sfputc_r>:
 8008188:	6893      	ldr	r3, [r2, #8]
 800818a:	b410      	push	{r4}
 800818c:	3b01      	subs	r3, #1
 800818e:	2b00      	cmp	r3, #0
 8008190:	6093      	str	r3, [r2, #8]
 8008192:	da07      	bge.n	80081a4 <__sfputc_r+0x1c>
 8008194:	6994      	ldr	r4, [r2, #24]
 8008196:	42a3      	cmp	r3, r4
 8008198:	db01      	blt.n	800819e <__sfputc_r+0x16>
 800819a:	290a      	cmp	r1, #10
 800819c:	d102      	bne.n	80081a4 <__sfputc_r+0x1c>
 800819e:	bc10      	pop	{r4}
 80081a0:	f001 be94 	b.w	8009ecc <__swbuf_r>
 80081a4:	6813      	ldr	r3, [r2, #0]
 80081a6:	1c58      	adds	r0, r3, #1
 80081a8:	6010      	str	r0, [r2, #0]
 80081aa:	7019      	strb	r1, [r3, #0]
 80081ac:	4608      	mov	r0, r1
 80081ae:	bc10      	pop	{r4}
 80081b0:	4770      	bx	lr

080081b2 <__sfputs_r>:
 80081b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081b4:	4606      	mov	r6, r0
 80081b6:	460f      	mov	r7, r1
 80081b8:	4614      	mov	r4, r2
 80081ba:	18d5      	adds	r5, r2, r3
 80081bc:	42ac      	cmp	r4, r5
 80081be:	d101      	bne.n	80081c4 <__sfputs_r+0x12>
 80081c0:	2000      	movs	r0, #0
 80081c2:	e007      	b.n	80081d4 <__sfputs_r+0x22>
 80081c4:	463a      	mov	r2, r7
 80081c6:	4630      	mov	r0, r6
 80081c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081cc:	f7ff ffdc 	bl	8008188 <__sfputc_r>
 80081d0:	1c43      	adds	r3, r0, #1
 80081d2:	d1f3      	bne.n	80081bc <__sfputs_r+0xa>
 80081d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080081d8 <_vfiprintf_r>:
 80081d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081dc:	460d      	mov	r5, r1
 80081de:	4614      	mov	r4, r2
 80081e0:	4698      	mov	r8, r3
 80081e2:	4606      	mov	r6, r0
 80081e4:	b09d      	sub	sp, #116	; 0x74
 80081e6:	b118      	cbz	r0, 80081f0 <_vfiprintf_r+0x18>
 80081e8:	6983      	ldr	r3, [r0, #24]
 80081ea:	b90b      	cbnz	r3, 80081f0 <_vfiprintf_r+0x18>
 80081ec:	f002 fecc 	bl	800af88 <__sinit>
 80081f0:	4b89      	ldr	r3, [pc, #548]	; (8008418 <_vfiprintf_r+0x240>)
 80081f2:	429d      	cmp	r5, r3
 80081f4:	d11b      	bne.n	800822e <_vfiprintf_r+0x56>
 80081f6:	6875      	ldr	r5, [r6, #4]
 80081f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081fa:	07d9      	lsls	r1, r3, #31
 80081fc:	d405      	bmi.n	800820a <_vfiprintf_r+0x32>
 80081fe:	89ab      	ldrh	r3, [r5, #12]
 8008200:	059a      	lsls	r2, r3, #22
 8008202:	d402      	bmi.n	800820a <_vfiprintf_r+0x32>
 8008204:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008206:	f003 fac8 	bl	800b79a <__retarget_lock_acquire_recursive>
 800820a:	89ab      	ldrh	r3, [r5, #12]
 800820c:	071b      	lsls	r3, r3, #28
 800820e:	d501      	bpl.n	8008214 <_vfiprintf_r+0x3c>
 8008210:	692b      	ldr	r3, [r5, #16]
 8008212:	b9eb      	cbnz	r3, 8008250 <_vfiprintf_r+0x78>
 8008214:	4629      	mov	r1, r5
 8008216:	4630      	mov	r0, r6
 8008218:	f001 feaa 	bl	8009f70 <__swsetup_r>
 800821c:	b1c0      	cbz	r0, 8008250 <_vfiprintf_r+0x78>
 800821e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008220:	07dc      	lsls	r4, r3, #31
 8008222:	d50e      	bpl.n	8008242 <_vfiprintf_r+0x6a>
 8008224:	f04f 30ff 	mov.w	r0, #4294967295
 8008228:	b01d      	add	sp, #116	; 0x74
 800822a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800822e:	4b7b      	ldr	r3, [pc, #492]	; (800841c <_vfiprintf_r+0x244>)
 8008230:	429d      	cmp	r5, r3
 8008232:	d101      	bne.n	8008238 <_vfiprintf_r+0x60>
 8008234:	68b5      	ldr	r5, [r6, #8]
 8008236:	e7df      	b.n	80081f8 <_vfiprintf_r+0x20>
 8008238:	4b79      	ldr	r3, [pc, #484]	; (8008420 <_vfiprintf_r+0x248>)
 800823a:	429d      	cmp	r5, r3
 800823c:	bf08      	it	eq
 800823e:	68f5      	ldreq	r5, [r6, #12]
 8008240:	e7da      	b.n	80081f8 <_vfiprintf_r+0x20>
 8008242:	89ab      	ldrh	r3, [r5, #12]
 8008244:	0598      	lsls	r0, r3, #22
 8008246:	d4ed      	bmi.n	8008224 <_vfiprintf_r+0x4c>
 8008248:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800824a:	f003 faa7 	bl	800b79c <__retarget_lock_release_recursive>
 800824e:	e7e9      	b.n	8008224 <_vfiprintf_r+0x4c>
 8008250:	2300      	movs	r3, #0
 8008252:	9309      	str	r3, [sp, #36]	; 0x24
 8008254:	2320      	movs	r3, #32
 8008256:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800825a:	2330      	movs	r3, #48	; 0x30
 800825c:	f04f 0901 	mov.w	r9, #1
 8008260:	f8cd 800c 	str.w	r8, [sp, #12]
 8008264:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008424 <_vfiprintf_r+0x24c>
 8008268:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800826c:	4623      	mov	r3, r4
 800826e:	469a      	mov	sl, r3
 8008270:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008274:	b10a      	cbz	r2, 800827a <_vfiprintf_r+0xa2>
 8008276:	2a25      	cmp	r2, #37	; 0x25
 8008278:	d1f9      	bne.n	800826e <_vfiprintf_r+0x96>
 800827a:	ebba 0b04 	subs.w	fp, sl, r4
 800827e:	d00b      	beq.n	8008298 <_vfiprintf_r+0xc0>
 8008280:	465b      	mov	r3, fp
 8008282:	4622      	mov	r2, r4
 8008284:	4629      	mov	r1, r5
 8008286:	4630      	mov	r0, r6
 8008288:	f7ff ff93 	bl	80081b2 <__sfputs_r>
 800828c:	3001      	adds	r0, #1
 800828e:	f000 80aa 	beq.w	80083e6 <_vfiprintf_r+0x20e>
 8008292:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008294:	445a      	add	r2, fp
 8008296:	9209      	str	r2, [sp, #36]	; 0x24
 8008298:	f89a 3000 	ldrb.w	r3, [sl]
 800829c:	2b00      	cmp	r3, #0
 800829e:	f000 80a2 	beq.w	80083e6 <_vfiprintf_r+0x20e>
 80082a2:	2300      	movs	r3, #0
 80082a4:	f04f 32ff 	mov.w	r2, #4294967295
 80082a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082ac:	f10a 0a01 	add.w	sl, sl, #1
 80082b0:	9304      	str	r3, [sp, #16]
 80082b2:	9307      	str	r3, [sp, #28]
 80082b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082b8:	931a      	str	r3, [sp, #104]	; 0x68
 80082ba:	4654      	mov	r4, sl
 80082bc:	2205      	movs	r2, #5
 80082be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082c2:	4858      	ldr	r0, [pc, #352]	; (8008424 <_vfiprintf_r+0x24c>)
 80082c4:	f003 fae2 	bl	800b88c <memchr>
 80082c8:	9a04      	ldr	r2, [sp, #16]
 80082ca:	b9d8      	cbnz	r0, 8008304 <_vfiprintf_r+0x12c>
 80082cc:	06d1      	lsls	r1, r2, #27
 80082ce:	bf44      	itt	mi
 80082d0:	2320      	movmi	r3, #32
 80082d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082d6:	0713      	lsls	r3, r2, #28
 80082d8:	bf44      	itt	mi
 80082da:	232b      	movmi	r3, #43	; 0x2b
 80082dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082e0:	f89a 3000 	ldrb.w	r3, [sl]
 80082e4:	2b2a      	cmp	r3, #42	; 0x2a
 80082e6:	d015      	beq.n	8008314 <_vfiprintf_r+0x13c>
 80082e8:	4654      	mov	r4, sl
 80082ea:	2000      	movs	r0, #0
 80082ec:	f04f 0c0a 	mov.w	ip, #10
 80082f0:	9a07      	ldr	r2, [sp, #28]
 80082f2:	4621      	mov	r1, r4
 80082f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082f8:	3b30      	subs	r3, #48	; 0x30
 80082fa:	2b09      	cmp	r3, #9
 80082fc:	d94e      	bls.n	800839c <_vfiprintf_r+0x1c4>
 80082fe:	b1b0      	cbz	r0, 800832e <_vfiprintf_r+0x156>
 8008300:	9207      	str	r2, [sp, #28]
 8008302:	e014      	b.n	800832e <_vfiprintf_r+0x156>
 8008304:	eba0 0308 	sub.w	r3, r0, r8
 8008308:	fa09 f303 	lsl.w	r3, r9, r3
 800830c:	4313      	orrs	r3, r2
 800830e:	46a2      	mov	sl, r4
 8008310:	9304      	str	r3, [sp, #16]
 8008312:	e7d2      	b.n	80082ba <_vfiprintf_r+0xe2>
 8008314:	9b03      	ldr	r3, [sp, #12]
 8008316:	1d19      	adds	r1, r3, #4
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	9103      	str	r1, [sp, #12]
 800831c:	2b00      	cmp	r3, #0
 800831e:	bfbb      	ittet	lt
 8008320:	425b      	neglt	r3, r3
 8008322:	f042 0202 	orrlt.w	r2, r2, #2
 8008326:	9307      	strge	r3, [sp, #28]
 8008328:	9307      	strlt	r3, [sp, #28]
 800832a:	bfb8      	it	lt
 800832c:	9204      	strlt	r2, [sp, #16]
 800832e:	7823      	ldrb	r3, [r4, #0]
 8008330:	2b2e      	cmp	r3, #46	; 0x2e
 8008332:	d10c      	bne.n	800834e <_vfiprintf_r+0x176>
 8008334:	7863      	ldrb	r3, [r4, #1]
 8008336:	2b2a      	cmp	r3, #42	; 0x2a
 8008338:	d135      	bne.n	80083a6 <_vfiprintf_r+0x1ce>
 800833a:	9b03      	ldr	r3, [sp, #12]
 800833c:	3402      	adds	r4, #2
 800833e:	1d1a      	adds	r2, r3, #4
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	9203      	str	r2, [sp, #12]
 8008344:	2b00      	cmp	r3, #0
 8008346:	bfb8      	it	lt
 8008348:	f04f 33ff 	movlt.w	r3, #4294967295
 800834c:	9305      	str	r3, [sp, #20]
 800834e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008434 <_vfiprintf_r+0x25c>
 8008352:	2203      	movs	r2, #3
 8008354:	4650      	mov	r0, sl
 8008356:	7821      	ldrb	r1, [r4, #0]
 8008358:	f003 fa98 	bl	800b88c <memchr>
 800835c:	b140      	cbz	r0, 8008370 <_vfiprintf_r+0x198>
 800835e:	2340      	movs	r3, #64	; 0x40
 8008360:	eba0 000a 	sub.w	r0, r0, sl
 8008364:	fa03 f000 	lsl.w	r0, r3, r0
 8008368:	9b04      	ldr	r3, [sp, #16]
 800836a:	3401      	adds	r4, #1
 800836c:	4303      	orrs	r3, r0
 800836e:	9304      	str	r3, [sp, #16]
 8008370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008374:	2206      	movs	r2, #6
 8008376:	482c      	ldr	r0, [pc, #176]	; (8008428 <_vfiprintf_r+0x250>)
 8008378:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800837c:	f003 fa86 	bl	800b88c <memchr>
 8008380:	2800      	cmp	r0, #0
 8008382:	d03f      	beq.n	8008404 <_vfiprintf_r+0x22c>
 8008384:	4b29      	ldr	r3, [pc, #164]	; (800842c <_vfiprintf_r+0x254>)
 8008386:	bb1b      	cbnz	r3, 80083d0 <_vfiprintf_r+0x1f8>
 8008388:	9b03      	ldr	r3, [sp, #12]
 800838a:	3307      	adds	r3, #7
 800838c:	f023 0307 	bic.w	r3, r3, #7
 8008390:	3308      	adds	r3, #8
 8008392:	9303      	str	r3, [sp, #12]
 8008394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008396:	443b      	add	r3, r7
 8008398:	9309      	str	r3, [sp, #36]	; 0x24
 800839a:	e767      	b.n	800826c <_vfiprintf_r+0x94>
 800839c:	460c      	mov	r4, r1
 800839e:	2001      	movs	r0, #1
 80083a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80083a4:	e7a5      	b.n	80082f2 <_vfiprintf_r+0x11a>
 80083a6:	2300      	movs	r3, #0
 80083a8:	f04f 0c0a 	mov.w	ip, #10
 80083ac:	4619      	mov	r1, r3
 80083ae:	3401      	adds	r4, #1
 80083b0:	9305      	str	r3, [sp, #20]
 80083b2:	4620      	mov	r0, r4
 80083b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083b8:	3a30      	subs	r2, #48	; 0x30
 80083ba:	2a09      	cmp	r2, #9
 80083bc:	d903      	bls.n	80083c6 <_vfiprintf_r+0x1ee>
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d0c5      	beq.n	800834e <_vfiprintf_r+0x176>
 80083c2:	9105      	str	r1, [sp, #20]
 80083c4:	e7c3      	b.n	800834e <_vfiprintf_r+0x176>
 80083c6:	4604      	mov	r4, r0
 80083c8:	2301      	movs	r3, #1
 80083ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80083ce:	e7f0      	b.n	80083b2 <_vfiprintf_r+0x1da>
 80083d0:	ab03      	add	r3, sp, #12
 80083d2:	9300      	str	r3, [sp, #0]
 80083d4:	462a      	mov	r2, r5
 80083d6:	4630      	mov	r0, r6
 80083d8:	4b15      	ldr	r3, [pc, #84]	; (8008430 <_vfiprintf_r+0x258>)
 80083da:	a904      	add	r1, sp, #16
 80083dc:	f000 f8ca 	bl	8008574 <_printf_float>
 80083e0:	4607      	mov	r7, r0
 80083e2:	1c78      	adds	r0, r7, #1
 80083e4:	d1d6      	bne.n	8008394 <_vfiprintf_r+0x1bc>
 80083e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083e8:	07d9      	lsls	r1, r3, #31
 80083ea:	d405      	bmi.n	80083f8 <_vfiprintf_r+0x220>
 80083ec:	89ab      	ldrh	r3, [r5, #12]
 80083ee:	059a      	lsls	r2, r3, #22
 80083f0:	d402      	bmi.n	80083f8 <_vfiprintf_r+0x220>
 80083f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083f4:	f003 f9d2 	bl	800b79c <__retarget_lock_release_recursive>
 80083f8:	89ab      	ldrh	r3, [r5, #12]
 80083fa:	065b      	lsls	r3, r3, #25
 80083fc:	f53f af12 	bmi.w	8008224 <_vfiprintf_r+0x4c>
 8008400:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008402:	e711      	b.n	8008228 <_vfiprintf_r+0x50>
 8008404:	ab03      	add	r3, sp, #12
 8008406:	9300      	str	r3, [sp, #0]
 8008408:	462a      	mov	r2, r5
 800840a:	4630      	mov	r0, r6
 800840c:	4b08      	ldr	r3, [pc, #32]	; (8008430 <_vfiprintf_r+0x258>)
 800840e:	a904      	add	r1, sp, #16
 8008410:	f000 fb4c 	bl	8008aac <_printf_i>
 8008414:	e7e4      	b.n	80083e0 <_vfiprintf_r+0x208>
 8008416:	bf00      	nop
 8008418:	0800cb20 	.word	0x0800cb20
 800841c:	0800cb40 	.word	0x0800cb40
 8008420:	0800cb00 	.word	0x0800cb00
 8008424:	0800c8c8 	.word	0x0800c8c8
 8008428:	0800c8d2 	.word	0x0800c8d2
 800842c:	08008575 	.word	0x08008575
 8008430:	080081b3 	.word	0x080081b3
 8008434:	0800c8ce 	.word	0x0800c8ce

08008438 <__cvt>:
 8008438:	2b00      	cmp	r3, #0
 800843a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800843e:	461f      	mov	r7, r3
 8008440:	bfbb      	ittet	lt
 8008442:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008446:	461f      	movlt	r7, r3
 8008448:	2300      	movge	r3, #0
 800844a:	232d      	movlt	r3, #45	; 0x2d
 800844c:	b088      	sub	sp, #32
 800844e:	4614      	mov	r4, r2
 8008450:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008452:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008454:	7013      	strb	r3, [r2, #0]
 8008456:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008458:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800845c:	f023 0820 	bic.w	r8, r3, #32
 8008460:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008464:	d005      	beq.n	8008472 <__cvt+0x3a>
 8008466:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800846a:	d100      	bne.n	800846e <__cvt+0x36>
 800846c:	3501      	adds	r5, #1
 800846e:	2302      	movs	r3, #2
 8008470:	e000      	b.n	8008474 <__cvt+0x3c>
 8008472:	2303      	movs	r3, #3
 8008474:	aa07      	add	r2, sp, #28
 8008476:	9204      	str	r2, [sp, #16]
 8008478:	aa06      	add	r2, sp, #24
 800847a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800847e:	e9cd 3500 	strd	r3, r5, [sp]
 8008482:	4622      	mov	r2, r4
 8008484:	463b      	mov	r3, r7
 8008486:	f001 fe77 	bl	800a178 <_dtoa_r>
 800848a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800848e:	4606      	mov	r6, r0
 8008490:	d102      	bne.n	8008498 <__cvt+0x60>
 8008492:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008494:	07db      	lsls	r3, r3, #31
 8008496:	d522      	bpl.n	80084de <__cvt+0xa6>
 8008498:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800849c:	eb06 0905 	add.w	r9, r6, r5
 80084a0:	d110      	bne.n	80084c4 <__cvt+0x8c>
 80084a2:	7833      	ldrb	r3, [r6, #0]
 80084a4:	2b30      	cmp	r3, #48	; 0x30
 80084a6:	d10a      	bne.n	80084be <__cvt+0x86>
 80084a8:	2200      	movs	r2, #0
 80084aa:	2300      	movs	r3, #0
 80084ac:	4620      	mov	r0, r4
 80084ae:	4639      	mov	r1, r7
 80084b0:	f7f8 fa7a 	bl	80009a8 <__aeabi_dcmpeq>
 80084b4:	b918      	cbnz	r0, 80084be <__cvt+0x86>
 80084b6:	f1c5 0501 	rsb	r5, r5, #1
 80084ba:	f8ca 5000 	str.w	r5, [sl]
 80084be:	f8da 3000 	ldr.w	r3, [sl]
 80084c2:	4499      	add	r9, r3
 80084c4:	2200      	movs	r2, #0
 80084c6:	2300      	movs	r3, #0
 80084c8:	4620      	mov	r0, r4
 80084ca:	4639      	mov	r1, r7
 80084cc:	f7f8 fa6c 	bl	80009a8 <__aeabi_dcmpeq>
 80084d0:	b108      	cbz	r0, 80084d6 <__cvt+0x9e>
 80084d2:	f8cd 901c 	str.w	r9, [sp, #28]
 80084d6:	2230      	movs	r2, #48	; 0x30
 80084d8:	9b07      	ldr	r3, [sp, #28]
 80084da:	454b      	cmp	r3, r9
 80084dc:	d307      	bcc.n	80084ee <__cvt+0xb6>
 80084de:	4630      	mov	r0, r6
 80084e0:	9b07      	ldr	r3, [sp, #28]
 80084e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80084e4:	1b9b      	subs	r3, r3, r6
 80084e6:	6013      	str	r3, [r2, #0]
 80084e8:	b008      	add	sp, #32
 80084ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ee:	1c59      	adds	r1, r3, #1
 80084f0:	9107      	str	r1, [sp, #28]
 80084f2:	701a      	strb	r2, [r3, #0]
 80084f4:	e7f0      	b.n	80084d8 <__cvt+0xa0>

080084f6 <__exponent>:
 80084f6:	4603      	mov	r3, r0
 80084f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084fa:	2900      	cmp	r1, #0
 80084fc:	f803 2b02 	strb.w	r2, [r3], #2
 8008500:	bfb6      	itet	lt
 8008502:	222d      	movlt	r2, #45	; 0x2d
 8008504:	222b      	movge	r2, #43	; 0x2b
 8008506:	4249      	neglt	r1, r1
 8008508:	2909      	cmp	r1, #9
 800850a:	7042      	strb	r2, [r0, #1]
 800850c:	dd2b      	ble.n	8008566 <__exponent+0x70>
 800850e:	f10d 0407 	add.w	r4, sp, #7
 8008512:	46a4      	mov	ip, r4
 8008514:	270a      	movs	r7, #10
 8008516:	fb91 f6f7 	sdiv	r6, r1, r7
 800851a:	460a      	mov	r2, r1
 800851c:	46a6      	mov	lr, r4
 800851e:	fb07 1516 	mls	r5, r7, r6, r1
 8008522:	2a63      	cmp	r2, #99	; 0x63
 8008524:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008528:	4631      	mov	r1, r6
 800852a:	f104 34ff 	add.w	r4, r4, #4294967295
 800852e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008532:	dcf0      	bgt.n	8008516 <__exponent+0x20>
 8008534:	3130      	adds	r1, #48	; 0x30
 8008536:	f1ae 0502 	sub.w	r5, lr, #2
 800853a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800853e:	4629      	mov	r1, r5
 8008540:	1c44      	adds	r4, r0, #1
 8008542:	4561      	cmp	r1, ip
 8008544:	d30a      	bcc.n	800855c <__exponent+0x66>
 8008546:	f10d 0209 	add.w	r2, sp, #9
 800854a:	eba2 020e 	sub.w	r2, r2, lr
 800854e:	4565      	cmp	r5, ip
 8008550:	bf88      	it	hi
 8008552:	2200      	movhi	r2, #0
 8008554:	4413      	add	r3, r2
 8008556:	1a18      	subs	r0, r3, r0
 8008558:	b003      	add	sp, #12
 800855a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800855c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008560:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008564:	e7ed      	b.n	8008542 <__exponent+0x4c>
 8008566:	2330      	movs	r3, #48	; 0x30
 8008568:	3130      	adds	r1, #48	; 0x30
 800856a:	7083      	strb	r3, [r0, #2]
 800856c:	70c1      	strb	r1, [r0, #3]
 800856e:	1d03      	adds	r3, r0, #4
 8008570:	e7f1      	b.n	8008556 <__exponent+0x60>
	...

08008574 <_printf_float>:
 8008574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008578:	b091      	sub	sp, #68	; 0x44
 800857a:	460c      	mov	r4, r1
 800857c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008580:	4616      	mov	r6, r2
 8008582:	461f      	mov	r7, r3
 8008584:	4605      	mov	r5, r0
 8008586:	f003 f903 	bl	800b790 <_localeconv_r>
 800858a:	6803      	ldr	r3, [r0, #0]
 800858c:	4618      	mov	r0, r3
 800858e:	9309      	str	r3, [sp, #36]	; 0x24
 8008590:	f7f7 fdde 	bl	8000150 <strlen>
 8008594:	2300      	movs	r3, #0
 8008596:	930e      	str	r3, [sp, #56]	; 0x38
 8008598:	f8d8 3000 	ldr.w	r3, [r8]
 800859c:	900a      	str	r0, [sp, #40]	; 0x28
 800859e:	3307      	adds	r3, #7
 80085a0:	f023 0307 	bic.w	r3, r3, #7
 80085a4:	f103 0208 	add.w	r2, r3, #8
 80085a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80085ac:	f8d4 b000 	ldr.w	fp, [r4]
 80085b0:	f8c8 2000 	str.w	r2, [r8]
 80085b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80085bc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80085c0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80085c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80085c6:	f04f 32ff 	mov.w	r2, #4294967295
 80085ca:	4640      	mov	r0, r8
 80085cc:	4b9c      	ldr	r3, [pc, #624]	; (8008840 <_printf_float+0x2cc>)
 80085ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80085d0:	f7f8 fa1c 	bl	8000a0c <__aeabi_dcmpun>
 80085d4:	bb70      	cbnz	r0, 8008634 <_printf_float+0xc0>
 80085d6:	f04f 32ff 	mov.w	r2, #4294967295
 80085da:	4640      	mov	r0, r8
 80085dc:	4b98      	ldr	r3, [pc, #608]	; (8008840 <_printf_float+0x2cc>)
 80085de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80085e0:	f7f8 f9f6 	bl	80009d0 <__aeabi_dcmple>
 80085e4:	bb30      	cbnz	r0, 8008634 <_printf_float+0xc0>
 80085e6:	2200      	movs	r2, #0
 80085e8:	2300      	movs	r3, #0
 80085ea:	4640      	mov	r0, r8
 80085ec:	4651      	mov	r1, sl
 80085ee:	f7f8 f9e5 	bl	80009bc <__aeabi_dcmplt>
 80085f2:	b110      	cbz	r0, 80085fa <_printf_float+0x86>
 80085f4:	232d      	movs	r3, #45	; 0x2d
 80085f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085fa:	4b92      	ldr	r3, [pc, #584]	; (8008844 <_printf_float+0x2d0>)
 80085fc:	4892      	ldr	r0, [pc, #584]	; (8008848 <_printf_float+0x2d4>)
 80085fe:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008602:	bf94      	ite	ls
 8008604:	4698      	movls	r8, r3
 8008606:	4680      	movhi	r8, r0
 8008608:	2303      	movs	r3, #3
 800860a:	f04f 0a00 	mov.w	sl, #0
 800860e:	6123      	str	r3, [r4, #16]
 8008610:	f02b 0304 	bic.w	r3, fp, #4
 8008614:	6023      	str	r3, [r4, #0]
 8008616:	4633      	mov	r3, r6
 8008618:	4621      	mov	r1, r4
 800861a:	4628      	mov	r0, r5
 800861c:	9700      	str	r7, [sp, #0]
 800861e:	aa0f      	add	r2, sp, #60	; 0x3c
 8008620:	f000 f9d4 	bl	80089cc <_printf_common>
 8008624:	3001      	adds	r0, #1
 8008626:	f040 8090 	bne.w	800874a <_printf_float+0x1d6>
 800862a:	f04f 30ff 	mov.w	r0, #4294967295
 800862e:	b011      	add	sp, #68	; 0x44
 8008630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008634:	4642      	mov	r2, r8
 8008636:	4653      	mov	r3, sl
 8008638:	4640      	mov	r0, r8
 800863a:	4651      	mov	r1, sl
 800863c:	f7f8 f9e6 	bl	8000a0c <__aeabi_dcmpun>
 8008640:	b148      	cbz	r0, 8008656 <_printf_float+0xe2>
 8008642:	f1ba 0f00 	cmp.w	sl, #0
 8008646:	bfb8      	it	lt
 8008648:	232d      	movlt	r3, #45	; 0x2d
 800864a:	4880      	ldr	r0, [pc, #512]	; (800884c <_printf_float+0x2d8>)
 800864c:	bfb8      	it	lt
 800864e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008652:	4b7f      	ldr	r3, [pc, #508]	; (8008850 <_printf_float+0x2dc>)
 8008654:	e7d3      	b.n	80085fe <_printf_float+0x8a>
 8008656:	6863      	ldr	r3, [r4, #4]
 8008658:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800865c:	1c5a      	adds	r2, r3, #1
 800865e:	d142      	bne.n	80086e6 <_printf_float+0x172>
 8008660:	2306      	movs	r3, #6
 8008662:	6063      	str	r3, [r4, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	9206      	str	r2, [sp, #24]
 8008668:	aa0e      	add	r2, sp, #56	; 0x38
 800866a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800866e:	aa0d      	add	r2, sp, #52	; 0x34
 8008670:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008674:	9203      	str	r2, [sp, #12]
 8008676:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800867a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800867e:	6023      	str	r3, [r4, #0]
 8008680:	6863      	ldr	r3, [r4, #4]
 8008682:	4642      	mov	r2, r8
 8008684:	9300      	str	r3, [sp, #0]
 8008686:	4628      	mov	r0, r5
 8008688:	4653      	mov	r3, sl
 800868a:	910b      	str	r1, [sp, #44]	; 0x2c
 800868c:	f7ff fed4 	bl	8008438 <__cvt>
 8008690:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008692:	4680      	mov	r8, r0
 8008694:	2947      	cmp	r1, #71	; 0x47
 8008696:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008698:	d108      	bne.n	80086ac <_printf_float+0x138>
 800869a:	1cc8      	adds	r0, r1, #3
 800869c:	db02      	blt.n	80086a4 <_printf_float+0x130>
 800869e:	6863      	ldr	r3, [r4, #4]
 80086a0:	4299      	cmp	r1, r3
 80086a2:	dd40      	ble.n	8008726 <_printf_float+0x1b2>
 80086a4:	f1a9 0902 	sub.w	r9, r9, #2
 80086a8:	fa5f f989 	uxtb.w	r9, r9
 80086ac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80086b0:	d81f      	bhi.n	80086f2 <_printf_float+0x17e>
 80086b2:	464a      	mov	r2, r9
 80086b4:	3901      	subs	r1, #1
 80086b6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80086ba:	910d      	str	r1, [sp, #52]	; 0x34
 80086bc:	f7ff ff1b 	bl	80084f6 <__exponent>
 80086c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086c2:	4682      	mov	sl, r0
 80086c4:	1813      	adds	r3, r2, r0
 80086c6:	2a01      	cmp	r2, #1
 80086c8:	6123      	str	r3, [r4, #16]
 80086ca:	dc02      	bgt.n	80086d2 <_printf_float+0x15e>
 80086cc:	6822      	ldr	r2, [r4, #0]
 80086ce:	07d2      	lsls	r2, r2, #31
 80086d0:	d501      	bpl.n	80086d6 <_printf_float+0x162>
 80086d2:	3301      	adds	r3, #1
 80086d4:	6123      	str	r3, [r4, #16]
 80086d6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d09b      	beq.n	8008616 <_printf_float+0xa2>
 80086de:	232d      	movs	r3, #45	; 0x2d
 80086e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086e4:	e797      	b.n	8008616 <_printf_float+0xa2>
 80086e6:	2947      	cmp	r1, #71	; 0x47
 80086e8:	d1bc      	bne.n	8008664 <_printf_float+0xf0>
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d1ba      	bne.n	8008664 <_printf_float+0xf0>
 80086ee:	2301      	movs	r3, #1
 80086f0:	e7b7      	b.n	8008662 <_printf_float+0xee>
 80086f2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80086f6:	d118      	bne.n	800872a <_printf_float+0x1b6>
 80086f8:	2900      	cmp	r1, #0
 80086fa:	6863      	ldr	r3, [r4, #4]
 80086fc:	dd0b      	ble.n	8008716 <_printf_float+0x1a2>
 80086fe:	6121      	str	r1, [r4, #16]
 8008700:	b913      	cbnz	r3, 8008708 <_printf_float+0x194>
 8008702:	6822      	ldr	r2, [r4, #0]
 8008704:	07d0      	lsls	r0, r2, #31
 8008706:	d502      	bpl.n	800870e <_printf_float+0x19a>
 8008708:	3301      	adds	r3, #1
 800870a:	440b      	add	r3, r1
 800870c:	6123      	str	r3, [r4, #16]
 800870e:	f04f 0a00 	mov.w	sl, #0
 8008712:	65a1      	str	r1, [r4, #88]	; 0x58
 8008714:	e7df      	b.n	80086d6 <_printf_float+0x162>
 8008716:	b913      	cbnz	r3, 800871e <_printf_float+0x1aa>
 8008718:	6822      	ldr	r2, [r4, #0]
 800871a:	07d2      	lsls	r2, r2, #31
 800871c:	d501      	bpl.n	8008722 <_printf_float+0x1ae>
 800871e:	3302      	adds	r3, #2
 8008720:	e7f4      	b.n	800870c <_printf_float+0x198>
 8008722:	2301      	movs	r3, #1
 8008724:	e7f2      	b.n	800870c <_printf_float+0x198>
 8008726:	f04f 0967 	mov.w	r9, #103	; 0x67
 800872a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800872c:	4299      	cmp	r1, r3
 800872e:	db05      	blt.n	800873c <_printf_float+0x1c8>
 8008730:	6823      	ldr	r3, [r4, #0]
 8008732:	6121      	str	r1, [r4, #16]
 8008734:	07d8      	lsls	r0, r3, #31
 8008736:	d5ea      	bpl.n	800870e <_printf_float+0x19a>
 8008738:	1c4b      	adds	r3, r1, #1
 800873a:	e7e7      	b.n	800870c <_printf_float+0x198>
 800873c:	2900      	cmp	r1, #0
 800873e:	bfcc      	ite	gt
 8008740:	2201      	movgt	r2, #1
 8008742:	f1c1 0202 	rsble	r2, r1, #2
 8008746:	4413      	add	r3, r2
 8008748:	e7e0      	b.n	800870c <_printf_float+0x198>
 800874a:	6823      	ldr	r3, [r4, #0]
 800874c:	055a      	lsls	r2, r3, #21
 800874e:	d407      	bmi.n	8008760 <_printf_float+0x1ec>
 8008750:	6923      	ldr	r3, [r4, #16]
 8008752:	4642      	mov	r2, r8
 8008754:	4631      	mov	r1, r6
 8008756:	4628      	mov	r0, r5
 8008758:	47b8      	blx	r7
 800875a:	3001      	adds	r0, #1
 800875c:	d12b      	bne.n	80087b6 <_printf_float+0x242>
 800875e:	e764      	b.n	800862a <_printf_float+0xb6>
 8008760:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008764:	f240 80dd 	bls.w	8008922 <_printf_float+0x3ae>
 8008768:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800876c:	2200      	movs	r2, #0
 800876e:	2300      	movs	r3, #0
 8008770:	f7f8 f91a 	bl	80009a8 <__aeabi_dcmpeq>
 8008774:	2800      	cmp	r0, #0
 8008776:	d033      	beq.n	80087e0 <_printf_float+0x26c>
 8008778:	2301      	movs	r3, #1
 800877a:	4631      	mov	r1, r6
 800877c:	4628      	mov	r0, r5
 800877e:	4a35      	ldr	r2, [pc, #212]	; (8008854 <_printf_float+0x2e0>)
 8008780:	47b8      	blx	r7
 8008782:	3001      	adds	r0, #1
 8008784:	f43f af51 	beq.w	800862a <_printf_float+0xb6>
 8008788:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800878c:	429a      	cmp	r2, r3
 800878e:	db02      	blt.n	8008796 <_printf_float+0x222>
 8008790:	6823      	ldr	r3, [r4, #0]
 8008792:	07d8      	lsls	r0, r3, #31
 8008794:	d50f      	bpl.n	80087b6 <_printf_float+0x242>
 8008796:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800879a:	4631      	mov	r1, r6
 800879c:	4628      	mov	r0, r5
 800879e:	47b8      	blx	r7
 80087a0:	3001      	adds	r0, #1
 80087a2:	f43f af42 	beq.w	800862a <_printf_float+0xb6>
 80087a6:	f04f 0800 	mov.w	r8, #0
 80087aa:	f104 091a 	add.w	r9, r4, #26
 80087ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087b0:	3b01      	subs	r3, #1
 80087b2:	4543      	cmp	r3, r8
 80087b4:	dc09      	bgt.n	80087ca <_printf_float+0x256>
 80087b6:	6823      	ldr	r3, [r4, #0]
 80087b8:	079b      	lsls	r3, r3, #30
 80087ba:	f100 8102 	bmi.w	80089c2 <_printf_float+0x44e>
 80087be:	68e0      	ldr	r0, [r4, #12]
 80087c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087c2:	4298      	cmp	r0, r3
 80087c4:	bfb8      	it	lt
 80087c6:	4618      	movlt	r0, r3
 80087c8:	e731      	b.n	800862e <_printf_float+0xba>
 80087ca:	2301      	movs	r3, #1
 80087cc:	464a      	mov	r2, r9
 80087ce:	4631      	mov	r1, r6
 80087d0:	4628      	mov	r0, r5
 80087d2:	47b8      	blx	r7
 80087d4:	3001      	adds	r0, #1
 80087d6:	f43f af28 	beq.w	800862a <_printf_float+0xb6>
 80087da:	f108 0801 	add.w	r8, r8, #1
 80087de:	e7e6      	b.n	80087ae <_printf_float+0x23a>
 80087e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	dc38      	bgt.n	8008858 <_printf_float+0x2e4>
 80087e6:	2301      	movs	r3, #1
 80087e8:	4631      	mov	r1, r6
 80087ea:	4628      	mov	r0, r5
 80087ec:	4a19      	ldr	r2, [pc, #100]	; (8008854 <_printf_float+0x2e0>)
 80087ee:	47b8      	blx	r7
 80087f0:	3001      	adds	r0, #1
 80087f2:	f43f af1a 	beq.w	800862a <_printf_float+0xb6>
 80087f6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80087fa:	4313      	orrs	r3, r2
 80087fc:	d102      	bne.n	8008804 <_printf_float+0x290>
 80087fe:	6823      	ldr	r3, [r4, #0]
 8008800:	07d9      	lsls	r1, r3, #31
 8008802:	d5d8      	bpl.n	80087b6 <_printf_float+0x242>
 8008804:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008808:	4631      	mov	r1, r6
 800880a:	4628      	mov	r0, r5
 800880c:	47b8      	blx	r7
 800880e:	3001      	adds	r0, #1
 8008810:	f43f af0b 	beq.w	800862a <_printf_float+0xb6>
 8008814:	f04f 0900 	mov.w	r9, #0
 8008818:	f104 0a1a 	add.w	sl, r4, #26
 800881c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800881e:	425b      	negs	r3, r3
 8008820:	454b      	cmp	r3, r9
 8008822:	dc01      	bgt.n	8008828 <_printf_float+0x2b4>
 8008824:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008826:	e794      	b.n	8008752 <_printf_float+0x1de>
 8008828:	2301      	movs	r3, #1
 800882a:	4652      	mov	r2, sl
 800882c:	4631      	mov	r1, r6
 800882e:	4628      	mov	r0, r5
 8008830:	47b8      	blx	r7
 8008832:	3001      	adds	r0, #1
 8008834:	f43f aef9 	beq.w	800862a <_printf_float+0xb6>
 8008838:	f109 0901 	add.w	r9, r9, #1
 800883c:	e7ee      	b.n	800881c <_printf_float+0x2a8>
 800883e:	bf00      	nop
 8008840:	7fefffff 	.word	0x7fefffff
 8008844:	0800c8d9 	.word	0x0800c8d9
 8008848:	0800c8dd 	.word	0x0800c8dd
 800884c:	0800c8e5 	.word	0x0800c8e5
 8008850:	0800c8e1 	.word	0x0800c8e1
 8008854:	0800c8e9 	.word	0x0800c8e9
 8008858:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800885a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800885c:	429a      	cmp	r2, r3
 800885e:	bfa8      	it	ge
 8008860:	461a      	movge	r2, r3
 8008862:	2a00      	cmp	r2, #0
 8008864:	4691      	mov	r9, r2
 8008866:	dc37      	bgt.n	80088d8 <_printf_float+0x364>
 8008868:	f04f 0b00 	mov.w	fp, #0
 800886c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008870:	f104 021a 	add.w	r2, r4, #26
 8008874:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008878:	ebaa 0309 	sub.w	r3, sl, r9
 800887c:	455b      	cmp	r3, fp
 800887e:	dc33      	bgt.n	80088e8 <_printf_float+0x374>
 8008880:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008884:	429a      	cmp	r2, r3
 8008886:	db3b      	blt.n	8008900 <_printf_float+0x38c>
 8008888:	6823      	ldr	r3, [r4, #0]
 800888a:	07da      	lsls	r2, r3, #31
 800888c:	d438      	bmi.n	8008900 <_printf_float+0x38c>
 800888e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008890:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008892:	eba2 030a 	sub.w	r3, r2, sl
 8008896:	eba2 0901 	sub.w	r9, r2, r1
 800889a:	4599      	cmp	r9, r3
 800889c:	bfa8      	it	ge
 800889e:	4699      	movge	r9, r3
 80088a0:	f1b9 0f00 	cmp.w	r9, #0
 80088a4:	dc34      	bgt.n	8008910 <_printf_float+0x39c>
 80088a6:	f04f 0800 	mov.w	r8, #0
 80088aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088ae:	f104 0a1a 	add.w	sl, r4, #26
 80088b2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80088b6:	1a9b      	subs	r3, r3, r2
 80088b8:	eba3 0309 	sub.w	r3, r3, r9
 80088bc:	4543      	cmp	r3, r8
 80088be:	f77f af7a 	ble.w	80087b6 <_printf_float+0x242>
 80088c2:	2301      	movs	r3, #1
 80088c4:	4652      	mov	r2, sl
 80088c6:	4631      	mov	r1, r6
 80088c8:	4628      	mov	r0, r5
 80088ca:	47b8      	blx	r7
 80088cc:	3001      	adds	r0, #1
 80088ce:	f43f aeac 	beq.w	800862a <_printf_float+0xb6>
 80088d2:	f108 0801 	add.w	r8, r8, #1
 80088d6:	e7ec      	b.n	80088b2 <_printf_float+0x33e>
 80088d8:	4613      	mov	r3, r2
 80088da:	4631      	mov	r1, r6
 80088dc:	4642      	mov	r2, r8
 80088de:	4628      	mov	r0, r5
 80088e0:	47b8      	blx	r7
 80088e2:	3001      	adds	r0, #1
 80088e4:	d1c0      	bne.n	8008868 <_printf_float+0x2f4>
 80088e6:	e6a0      	b.n	800862a <_printf_float+0xb6>
 80088e8:	2301      	movs	r3, #1
 80088ea:	4631      	mov	r1, r6
 80088ec:	4628      	mov	r0, r5
 80088ee:	920b      	str	r2, [sp, #44]	; 0x2c
 80088f0:	47b8      	blx	r7
 80088f2:	3001      	adds	r0, #1
 80088f4:	f43f ae99 	beq.w	800862a <_printf_float+0xb6>
 80088f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80088fa:	f10b 0b01 	add.w	fp, fp, #1
 80088fe:	e7b9      	b.n	8008874 <_printf_float+0x300>
 8008900:	4631      	mov	r1, r6
 8008902:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008906:	4628      	mov	r0, r5
 8008908:	47b8      	blx	r7
 800890a:	3001      	adds	r0, #1
 800890c:	d1bf      	bne.n	800888e <_printf_float+0x31a>
 800890e:	e68c      	b.n	800862a <_printf_float+0xb6>
 8008910:	464b      	mov	r3, r9
 8008912:	4631      	mov	r1, r6
 8008914:	4628      	mov	r0, r5
 8008916:	eb08 020a 	add.w	r2, r8, sl
 800891a:	47b8      	blx	r7
 800891c:	3001      	adds	r0, #1
 800891e:	d1c2      	bne.n	80088a6 <_printf_float+0x332>
 8008920:	e683      	b.n	800862a <_printf_float+0xb6>
 8008922:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008924:	2a01      	cmp	r2, #1
 8008926:	dc01      	bgt.n	800892c <_printf_float+0x3b8>
 8008928:	07db      	lsls	r3, r3, #31
 800892a:	d537      	bpl.n	800899c <_printf_float+0x428>
 800892c:	2301      	movs	r3, #1
 800892e:	4642      	mov	r2, r8
 8008930:	4631      	mov	r1, r6
 8008932:	4628      	mov	r0, r5
 8008934:	47b8      	blx	r7
 8008936:	3001      	adds	r0, #1
 8008938:	f43f ae77 	beq.w	800862a <_printf_float+0xb6>
 800893c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008940:	4631      	mov	r1, r6
 8008942:	4628      	mov	r0, r5
 8008944:	47b8      	blx	r7
 8008946:	3001      	adds	r0, #1
 8008948:	f43f ae6f 	beq.w	800862a <_printf_float+0xb6>
 800894c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008950:	2200      	movs	r2, #0
 8008952:	2300      	movs	r3, #0
 8008954:	f7f8 f828 	bl	80009a8 <__aeabi_dcmpeq>
 8008958:	b9d8      	cbnz	r0, 8008992 <_printf_float+0x41e>
 800895a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800895c:	f108 0201 	add.w	r2, r8, #1
 8008960:	3b01      	subs	r3, #1
 8008962:	4631      	mov	r1, r6
 8008964:	4628      	mov	r0, r5
 8008966:	47b8      	blx	r7
 8008968:	3001      	adds	r0, #1
 800896a:	d10e      	bne.n	800898a <_printf_float+0x416>
 800896c:	e65d      	b.n	800862a <_printf_float+0xb6>
 800896e:	2301      	movs	r3, #1
 8008970:	464a      	mov	r2, r9
 8008972:	4631      	mov	r1, r6
 8008974:	4628      	mov	r0, r5
 8008976:	47b8      	blx	r7
 8008978:	3001      	adds	r0, #1
 800897a:	f43f ae56 	beq.w	800862a <_printf_float+0xb6>
 800897e:	f108 0801 	add.w	r8, r8, #1
 8008982:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008984:	3b01      	subs	r3, #1
 8008986:	4543      	cmp	r3, r8
 8008988:	dcf1      	bgt.n	800896e <_printf_float+0x3fa>
 800898a:	4653      	mov	r3, sl
 800898c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008990:	e6e0      	b.n	8008754 <_printf_float+0x1e0>
 8008992:	f04f 0800 	mov.w	r8, #0
 8008996:	f104 091a 	add.w	r9, r4, #26
 800899a:	e7f2      	b.n	8008982 <_printf_float+0x40e>
 800899c:	2301      	movs	r3, #1
 800899e:	4642      	mov	r2, r8
 80089a0:	e7df      	b.n	8008962 <_printf_float+0x3ee>
 80089a2:	2301      	movs	r3, #1
 80089a4:	464a      	mov	r2, r9
 80089a6:	4631      	mov	r1, r6
 80089a8:	4628      	mov	r0, r5
 80089aa:	47b8      	blx	r7
 80089ac:	3001      	adds	r0, #1
 80089ae:	f43f ae3c 	beq.w	800862a <_printf_float+0xb6>
 80089b2:	f108 0801 	add.w	r8, r8, #1
 80089b6:	68e3      	ldr	r3, [r4, #12]
 80089b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80089ba:	1a5b      	subs	r3, r3, r1
 80089bc:	4543      	cmp	r3, r8
 80089be:	dcf0      	bgt.n	80089a2 <_printf_float+0x42e>
 80089c0:	e6fd      	b.n	80087be <_printf_float+0x24a>
 80089c2:	f04f 0800 	mov.w	r8, #0
 80089c6:	f104 0919 	add.w	r9, r4, #25
 80089ca:	e7f4      	b.n	80089b6 <_printf_float+0x442>

080089cc <_printf_common>:
 80089cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089d0:	4616      	mov	r6, r2
 80089d2:	4699      	mov	r9, r3
 80089d4:	688a      	ldr	r2, [r1, #8]
 80089d6:	690b      	ldr	r3, [r1, #16]
 80089d8:	4607      	mov	r7, r0
 80089da:	4293      	cmp	r3, r2
 80089dc:	bfb8      	it	lt
 80089de:	4613      	movlt	r3, r2
 80089e0:	6033      	str	r3, [r6, #0]
 80089e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089e6:	460c      	mov	r4, r1
 80089e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089ec:	b10a      	cbz	r2, 80089f2 <_printf_common+0x26>
 80089ee:	3301      	adds	r3, #1
 80089f0:	6033      	str	r3, [r6, #0]
 80089f2:	6823      	ldr	r3, [r4, #0]
 80089f4:	0699      	lsls	r1, r3, #26
 80089f6:	bf42      	ittt	mi
 80089f8:	6833      	ldrmi	r3, [r6, #0]
 80089fa:	3302      	addmi	r3, #2
 80089fc:	6033      	strmi	r3, [r6, #0]
 80089fe:	6825      	ldr	r5, [r4, #0]
 8008a00:	f015 0506 	ands.w	r5, r5, #6
 8008a04:	d106      	bne.n	8008a14 <_printf_common+0x48>
 8008a06:	f104 0a19 	add.w	sl, r4, #25
 8008a0a:	68e3      	ldr	r3, [r4, #12]
 8008a0c:	6832      	ldr	r2, [r6, #0]
 8008a0e:	1a9b      	subs	r3, r3, r2
 8008a10:	42ab      	cmp	r3, r5
 8008a12:	dc28      	bgt.n	8008a66 <_printf_common+0x9a>
 8008a14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a18:	1e13      	subs	r3, r2, #0
 8008a1a:	6822      	ldr	r2, [r4, #0]
 8008a1c:	bf18      	it	ne
 8008a1e:	2301      	movne	r3, #1
 8008a20:	0692      	lsls	r2, r2, #26
 8008a22:	d42d      	bmi.n	8008a80 <_printf_common+0xb4>
 8008a24:	4649      	mov	r1, r9
 8008a26:	4638      	mov	r0, r7
 8008a28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a2c:	47c0      	blx	r8
 8008a2e:	3001      	adds	r0, #1
 8008a30:	d020      	beq.n	8008a74 <_printf_common+0xa8>
 8008a32:	6823      	ldr	r3, [r4, #0]
 8008a34:	68e5      	ldr	r5, [r4, #12]
 8008a36:	f003 0306 	and.w	r3, r3, #6
 8008a3a:	2b04      	cmp	r3, #4
 8008a3c:	bf18      	it	ne
 8008a3e:	2500      	movne	r5, #0
 8008a40:	6832      	ldr	r2, [r6, #0]
 8008a42:	f04f 0600 	mov.w	r6, #0
 8008a46:	68a3      	ldr	r3, [r4, #8]
 8008a48:	bf08      	it	eq
 8008a4a:	1aad      	subeq	r5, r5, r2
 8008a4c:	6922      	ldr	r2, [r4, #16]
 8008a4e:	bf08      	it	eq
 8008a50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a54:	4293      	cmp	r3, r2
 8008a56:	bfc4      	itt	gt
 8008a58:	1a9b      	subgt	r3, r3, r2
 8008a5a:	18ed      	addgt	r5, r5, r3
 8008a5c:	341a      	adds	r4, #26
 8008a5e:	42b5      	cmp	r5, r6
 8008a60:	d11a      	bne.n	8008a98 <_printf_common+0xcc>
 8008a62:	2000      	movs	r0, #0
 8008a64:	e008      	b.n	8008a78 <_printf_common+0xac>
 8008a66:	2301      	movs	r3, #1
 8008a68:	4652      	mov	r2, sl
 8008a6a:	4649      	mov	r1, r9
 8008a6c:	4638      	mov	r0, r7
 8008a6e:	47c0      	blx	r8
 8008a70:	3001      	adds	r0, #1
 8008a72:	d103      	bne.n	8008a7c <_printf_common+0xb0>
 8008a74:	f04f 30ff 	mov.w	r0, #4294967295
 8008a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a7c:	3501      	adds	r5, #1
 8008a7e:	e7c4      	b.n	8008a0a <_printf_common+0x3e>
 8008a80:	2030      	movs	r0, #48	; 0x30
 8008a82:	18e1      	adds	r1, r4, r3
 8008a84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a88:	1c5a      	adds	r2, r3, #1
 8008a8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a8e:	4422      	add	r2, r4
 8008a90:	3302      	adds	r3, #2
 8008a92:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a96:	e7c5      	b.n	8008a24 <_printf_common+0x58>
 8008a98:	2301      	movs	r3, #1
 8008a9a:	4622      	mov	r2, r4
 8008a9c:	4649      	mov	r1, r9
 8008a9e:	4638      	mov	r0, r7
 8008aa0:	47c0      	blx	r8
 8008aa2:	3001      	adds	r0, #1
 8008aa4:	d0e6      	beq.n	8008a74 <_printf_common+0xa8>
 8008aa6:	3601      	adds	r6, #1
 8008aa8:	e7d9      	b.n	8008a5e <_printf_common+0x92>
	...

08008aac <_printf_i>:
 8008aac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ab0:	460c      	mov	r4, r1
 8008ab2:	7e27      	ldrb	r7, [r4, #24]
 8008ab4:	4691      	mov	r9, r2
 8008ab6:	2f78      	cmp	r7, #120	; 0x78
 8008ab8:	4680      	mov	r8, r0
 8008aba:	469a      	mov	sl, r3
 8008abc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008abe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ac2:	d807      	bhi.n	8008ad4 <_printf_i+0x28>
 8008ac4:	2f62      	cmp	r7, #98	; 0x62
 8008ac6:	d80a      	bhi.n	8008ade <_printf_i+0x32>
 8008ac8:	2f00      	cmp	r7, #0
 8008aca:	f000 80d9 	beq.w	8008c80 <_printf_i+0x1d4>
 8008ace:	2f58      	cmp	r7, #88	; 0x58
 8008ad0:	f000 80a4 	beq.w	8008c1c <_printf_i+0x170>
 8008ad4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008ad8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008adc:	e03a      	b.n	8008b54 <_printf_i+0xa8>
 8008ade:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ae2:	2b15      	cmp	r3, #21
 8008ae4:	d8f6      	bhi.n	8008ad4 <_printf_i+0x28>
 8008ae6:	a001      	add	r0, pc, #4	; (adr r0, 8008aec <_printf_i+0x40>)
 8008ae8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008aec:	08008b45 	.word	0x08008b45
 8008af0:	08008b59 	.word	0x08008b59
 8008af4:	08008ad5 	.word	0x08008ad5
 8008af8:	08008ad5 	.word	0x08008ad5
 8008afc:	08008ad5 	.word	0x08008ad5
 8008b00:	08008ad5 	.word	0x08008ad5
 8008b04:	08008b59 	.word	0x08008b59
 8008b08:	08008ad5 	.word	0x08008ad5
 8008b0c:	08008ad5 	.word	0x08008ad5
 8008b10:	08008ad5 	.word	0x08008ad5
 8008b14:	08008ad5 	.word	0x08008ad5
 8008b18:	08008c67 	.word	0x08008c67
 8008b1c:	08008b89 	.word	0x08008b89
 8008b20:	08008c49 	.word	0x08008c49
 8008b24:	08008ad5 	.word	0x08008ad5
 8008b28:	08008ad5 	.word	0x08008ad5
 8008b2c:	08008c89 	.word	0x08008c89
 8008b30:	08008ad5 	.word	0x08008ad5
 8008b34:	08008b89 	.word	0x08008b89
 8008b38:	08008ad5 	.word	0x08008ad5
 8008b3c:	08008ad5 	.word	0x08008ad5
 8008b40:	08008c51 	.word	0x08008c51
 8008b44:	680b      	ldr	r3, [r1, #0]
 8008b46:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008b4a:	1d1a      	adds	r2, r3, #4
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	600a      	str	r2, [r1, #0]
 8008b50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b54:	2301      	movs	r3, #1
 8008b56:	e0a4      	b.n	8008ca2 <_printf_i+0x1f6>
 8008b58:	6825      	ldr	r5, [r4, #0]
 8008b5a:	6808      	ldr	r0, [r1, #0]
 8008b5c:	062e      	lsls	r6, r5, #24
 8008b5e:	f100 0304 	add.w	r3, r0, #4
 8008b62:	d50a      	bpl.n	8008b7a <_printf_i+0xce>
 8008b64:	6805      	ldr	r5, [r0, #0]
 8008b66:	600b      	str	r3, [r1, #0]
 8008b68:	2d00      	cmp	r5, #0
 8008b6a:	da03      	bge.n	8008b74 <_printf_i+0xc8>
 8008b6c:	232d      	movs	r3, #45	; 0x2d
 8008b6e:	426d      	negs	r5, r5
 8008b70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b74:	230a      	movs	r3, #10
 8008b76:	485e      	ldr	r0, [pc, #376]	; (8008cf0 <_printf_i+0x244>)
 8008b78:	e019      	b.n	8008bae <_printf_i+0x102>
 8008b7a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008b7e:	6805      	ldr	r5, [r0, #0]
 8008b80:	600b      	str	r3, [r1, #0]
 8008b82:	bf18      	it	ne
 8008b84:	b22d      	sxthne	r5, r5
 8008b86:	e7ef      	b.n	8008b68 <_printf_i+0xbc>
 8008b88:	680b      	ldr	r3, [r1, #0]
 8008b8a:	6825      	ldr	r5, [r4, #0]
 8008b8c:	1d18      	adds	r0, r3, #4
 8008b8e:	6008      	str	r0, [r1, #0]
 8008b90:	0628      	lsls	r0, r5, #24
 8008b92:	d501      	bpl.n	8008b98 <_printf_i+0xec>
 8008b94:	681d      	ldr	r5, [r3, #0]
 8008b96:	e002      	b.n	8008b9e <_printf_i+0xf2>
 8008b98:	0669      	lsls	r1, r5, #25
 8008b9a:	d5fb      	bpl.n	8008b94 <_printf_i+0xe8>
 8008b9c:	881d      	ldrh	r5, [r3, #0]
 8008b9e:	2f6f      	cmp	r7, #111	; 0x6f
 8008ba0:	bf0c      	ite	eq
 8008ba2:	2308      	moveq	r3, #8
 8008ba4:	230a      	movne	r3, #10
 8008ba6:	4852      	ldr	r0, [pc, #328]	; (8008cf0 <_printf_i+0x244>)
 8008ba8:	2100      	movs	r1, #0
 8008baa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008bae:	6866      	ldr	r6, [r4, #4]
 8008bb0:	2e00      	cmp	r6, #0
 8008bb2:	bfa8      	it	ge
 8008bb4:	6821      	ldrge	r1, [r4, #0]
 8008bb6:	60a6      	str	r6, [r4, #8]
 8008bb8:	bfa4      	itt	ge
 8008bba:	f021 0104 	bicge.w	r1, r1, #4
 8008bbe:	6021      	strge	r1, [r4, #0]
 8008bc0:	b90d      	cbnz	r5, 8008bc6 <_printf_i+0x11a>
 8008bc2:	2e00      	cmp	r6, #0
 8008bc4:	d04d      	beq.n	8008c62 <_printf_i+0x1b6>
 8008bc6:	4616      	mov	r6, r2
 8008bc8:	fbb5 f1f3 	udiv	r1, r5, r3
 8008bcc:	fb03 5711 	mls	r7, r3, r1, r5
 8008bd0:	5dc7      	ldrb	r7, [r0, r7]
 8008bd2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008bd6:	462f      	mov	r7, r5
 8008bd8:	42bb      	cmp	r3, r7
 8008bda:	460d      	mov	r5, r1
 8008bdc:	d9f4      	bls.n	8008bc8 <_printf_i+0x11c>
 8008bde:	2b08      	cmp	r3, #8
 8008be0:	d10b      	bne.n	8008bfa <_printf_i+0x14e>
 8008be2:	6823      	ldr	r3, [r4, #0]
 8008be4:	07df      	lsls	r7, r3, #31
 8008be6:	d508      	bpl.n	8008bfa <_printf_i+0x14e>
 8008be8:	6923      	ldr	r3, [r4, #16]
 8008bea:	6861      	ldr	r1, [r4, #4]
 8008bec:	4299      	cmp	r1, r3
 8008bee:	bfde      	ittt	le
 8008bf0:	2330      	movle	r3, #48	; 0x30
 8008bf2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008bf6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008bfa:	1b92      	subs	r2, r2, r6
 8008bfc:	6122      	str	r2, [r4, #16]
 8008bfe:	464b      	mov	r3, r9
 8008c00:	4621      	mov	r1, r4
 8008c02:	4640      	mov	r0, r8
 8008c04:	f8cd a000 	str.w	sl, [sp]
 8008c08:	aa03      	add	r2, sp, #12
 8008c0a:	f7ff fedf 	bl	80089cc <_printf_common>
 8008c0e:	3001      	adds	r0, #1
 8008c10:	d14c      	bne.n	8008cac <_printf_i+0x200>
 8008c12:	f04f 30ff 	mov.w	r0, #4294967295
 8008c16:	b004      	add	sp, #16
 8008c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c1c:	4834      	ldr	r0, [pc, #208]	; (8008cf0 <_printf_i+0x244>)
 8008c1e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008c22:	680e      	ldr	r6, [r1, #0]
 8008c24:	6823      	ldr	r3, [r4, #0]
 8008c26:	f856 5b04 	ldr.w	r5, [r6], #4
 8008c2a:	061f      	lsls	r7, r3, #24
 8008c2c:	600e      	str	r6, [r1, #0]
 8008c2e:	d514      	bpl.n	8008c5a <_printf_i+0x1ae>
 8008c30:	07d9      	lsls	r1, r3, #31
 8008c32:	bf44      	itt	mi
 8008c34:	f043 0320 	orrmi.w	r3, r3, #32
 8008c38:	6023      	strmi	r3, [r4, #0]
 8008c3a:	b91d      	cbnz	r5, 8008c44 <_printf_i+0x198>
 8008c3c:	6823      	ldr	r3, [r4, #0]
 8008c3e:	f023 0320 	bic.w	r3, r3, #32
 8008c42:	6023      	str	r3, [r4, #0]
 8008c44:	2310      	movs	r3, #16
 8008c46:	e7af      	b.n	8008ba8 <_printf_i+0xfc>
 8008c48:	6823      	ldr	r3, [r4, #0]
 8008c4a:	f043 0320 	orr.w	r3, r3, #32
 8008c4e:	6023      	str	r3, [r4, #0]
 8008c50:	2378      	movs	r3, #120	; 0x78
 8008c52:	4828      	ldr	r0, [pc, #160]	; (8008cf4 <_printf_i+0x248>)
 8008c54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c58:	e7e3      	b.n	8008c22 <_printf_i+0x176>
 8008c5a:	065e      	lsls	r6, r3, #25
 8008c5c:	bf48      	it	mi
 8008c5e:	b2ad      	uxthmi	r5, r5
 8008c60:	e7e6      	b.n	8008c30 <_printf_i+0x184>
 8008c62:	4616      	mov	r6, r2
 8008c64:	e7bb      	b.n	8008bde <_printf_i+0x132>
 8008c66:	680b      	ldr	r3, [r1, #0]
 8008c68:	6826      	ldr	r6, [r4, #0]
 8008c6a:	1d1d      	adds	r5, r3, #4
 8008c6c:	6960      	ldr	r0, [r4, #20]
 8008c6e:	600d      	str	r5, [r1, #0]
 8008c70:	0635      	lsls	r5, r6, #24
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	d501      	bpl.n	8008c7a <_printf_i+0x1ce>
 8008c76:	6018      	str	r0, [r3, #0]
 8008c78:	e002      	b.n	8008c80 <_printf_i+0x1d4>
 8008c7a:	0671      	lsls	r1, r6, #25
 8008c7c:	d5fb      	bpl.n	8008c76 <_printf_i+0x1ca>
 8008c7e:	8018      	strh	r0, [r3, #0]
 8008c80:	2300      	movs	r3, #0
 8008c82:	4616      	mov	r6, r2
 8008c84:	6123      	str	r3, [r4, #16]
 8008c86:	e7ba      	b.n	8008bfe <_printf_i+0x152>
 8008c88:	680b      	ldr	r3, [r1, #0]
 8008c8a:	1d1a      	adds	r2, r3, #4
 8008c8c:	600a      	str	r2, [r1, #0]
 8008c8e:	681e      	ldr	r6, [r3, #0]
 8008c90:	2100      	movs	r1, #0
 8008c92:	4630      	mov	r0, r6
 8008c94:	6862      	ldr	r2, [r4, #4]
 8008c96:	f002 fdf9 	bl	800b88c <memchr>
 8008c9a:	b108      	cbz	r0, 8008ca0 <_printf_i+0x1f4>
 8008c9c:	1b80      	subs	r0, r0, r6
 8008c9e:	6060      	str	r0, [r4, #4]
 8008ca0:	6863      	ldr	r3, [r4, #4]
 8008ca2:	6123      	str	r3, [r4, #16]
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008caa:	e7a8      	b.n	8008bfe <_printf_i+0x152>
 8008cac:	4632      	mov	r2, r6
 8008cae:	4649      	mov	r1, r9
 8008cb0:	4640      	mov	r0, r8
 8008cb2:	6923      	ldr	r3, [r4, #16]
 8008cb4:	47d0      	blx	sl
 8008cb6:	3001      	adds	r0, #1
 8008cb8:	d0ab      	beq.n	8008c12 <_printf_i+0x166>
 8008cba:	6823      	ldr	r3, [r4, #0]
 8008cbc:	079b      	lsls	r3, r3, #30
 8008cbe:	d413      	bmi.n	8008ce8 <_printf_i+0x23c>
 8008cc0:	68e0      	ldr	r0, [r4, #12]
 8008cc2:	9b03      	ldr	r3, [sp, #12]
 8008cc4:	4298      	cmp	r0, r3
 8008cc6:	bfb8      	it	lt
 8008cc8:	4618      	movlt	r0, r3
 8008cca:	e7a4      	b.n	8008c16 <_printf_i+0x16a>
 8008ccc:	2301      	movs	r3, #1
 8008cce:	4632      	mov	r2, r6
 8008cd0:	4649      	mov	r1, r9
 8008cd2:	4640      	mov	r0, r8
 8008cd4:	47d0      	blx	sl
 8008cd6:	3001      	adds	r0, #1
 8008cd8:	d09b      	beq.n	8008c12 <_printf_i+0x166>
 8008cda:	3501      	adds	r5, #1
 8008cdc:	68e3      	ldr	r3, [r4, #12]
 8008cde:	9903      	ldr	r1, [sp, #12]
 8008ce0:	1a5b      	subs	r3, r3, r1
 8008ce2:	42ab      	cmp	r3, r5
 8008ce4:	dcf2      	bgt.n	8008ccc <_printf_i+0x220>
 8008ce6:	e7eb      	b.n	8008cc0 <_printf_i+0x214>
 8008ce8:	2500      	movs	r5, #0
 8008cea:	f104 0619 	add.w	r6, r4, #25
 8008cee:	e7f5      	b.n	8008cdc <_printf_i+0x230>
 8008cf0:	0800c8eb 	.word	0x0800c8eb
 8008cf4:	0800c8fc 	.word	0x0800c8fc

08008cf8 <_scanf_float>:
 8008cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cfc:	b087      	sub	sp, #28
 8008cfe:	9303      	str	r3, [sp, #12]
 8008d00:	688b      	ldr	r3, [r1, #8]
 8008d02:	4617      	mov	r7, r2
 8008d04:	1e5a      	subs	r2, r3, #1
 8008d06:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008d0a:	bf85      	ittet	hi
 8008d0c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008d10:	195b      	addhi	r3, r3, r5
 8008d12:	2300      	movls	r3, #0
 8008d14:	9302      	strhi	r3, [sp, #8]
 8008d16:	bf88      	it	hi
 8008d18:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008d1c:	468b      	mov	fp, r1
 8008d1e:	f04f 0500 	mov.w	r5, #0
 8008d22:	bf8c      	ite	hi
 8008d24:	608b      	strhi	r3, [r1, #8]
 8008d26:	9302      	strls	r3, [sp, #8]
 8008d28:	680b      	ldr	r3, [r1, #0]
 8008d2a:	4680      	mov	r8, r0
 8008d2c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008d30:	f84b 3b1c 	str.w	r3, [fp], #28
 8008d34:	460c      	mov	r4, r1
 8008d36:	465e      	mov	r6, fp
 8008d38:	46aa      	mov	sl, r5
 8008d3a:	46a9      	mov	r9, r5
 8008d3c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008d40:	9501      	str	r5, [sp, #4]
 8008d42:	68a2      	ldr	r2, [r4, #8]
 8008d44:	b152      	cbz	r2, 8008d5c <_scanf_float+0x64>
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	2b4e      	cmp	r3, #78	; 0x4e
 8008d4c:	d864      	bhi.n	8008e18 <_scanf_float+0x120>
 8008d4e:	2b40      	cmp	r3, #64	; 0x40
 8008d50:	d83c      	bhi.n	8008dcc <_scanf_float+0xd4>
 8008d52:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008d56:	b2c8      	uxtb	r0, r1
 8008d58:	280e      	cmp	r0, #14
 8008d5a:	d93a      	bls.n	8008dd2 <_scanf_float+0xda>
 8008d5c:	f1b9 0f00 	cmp.w	r9, #0
 8008d60:	d003      	beq.n	8008d6a <_scanf_float+0x72>
 8008d62:	6823      	ldr	r3, [r4, #0]
 8008d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d68:	6023      	str	r3, [r4, #0]
 8008d6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d6e:	f1ba 0f01 	cmp.w	sl, #1
 8008d72:	f200 8113 	bhi.w	8008f9c <_scanf_float+0x2a4>
 8008d76:	455e      	cmp	r6, fp
 8008d78:	f200 8105 	bhi.w	8008f86 <_scanf_float+0x28e>
 8008d7c:	2501      	movs	r5, #1
 8008d7e:	4628      	mov	r0, r5
 8008d80:	b007      	add	sp, #28
 8008d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d86:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008d8a:	2a0d      	cmp	r2, #13
 8008d8c:	d8e6      	bhi.n	8008d5c <_scanf_float+0x64>
 8008d8e:	a101      	add	r1, pc, #4	; (adr r1, 8008d94 <_scanf_float+0x9c>)
 8008d90:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008d94:	08008ed3 	.word	0x08008ed3
 8008d98:	08008d5d 	.word	0x08008d5d
 8008d9c:	08008d5d 	.word	0x08008d5d
 8008da0:	08008d5d 	.word	0x08008d5d
 8008da4:	08008f33 	.word	0x08008f33
 8008da8:	08008f0b 	.word	0x08008f0b
 8008dac:	08008d5d 	.word	0x08008d5d
 8008db0:	08008d5d 	.word	0x08008d5d
 8008db4:	08008ee1 	.word	0x08008ee1
 8008db8:	08008d5d 	.word	0x08008d5d
 8008dbc:	08008d5d 	.word	0x08008d5d
 8008dc0:	08008d5d 	.word	0x08008d5d
 8008dc4:	08008d5d 	.word	0x08008d5d
 8008dc8:	08008e99 	.word	0x08008e99
 8008dcc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008dd0:	e7db      	b.n	8008d8a <_scanf_float+0x92>
 8008dd2:	290e      	cmp	r1, #14
 8008dd4:	d8c2      	bhi.n	8008d5c <_scanf_float+0x64>
 8008dd6:	a001      	add	r0, pc, #4	; (adr r0, 8008ddc <_scanf_float+0xe4>)
 8008dd8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008ddc:	08008e8b 	.word	0x08008e8b
 8008de0:	08008d5d 	.word	0x08008d5d
 8008de4:	08008e8b 	.word	0x08008e8b
 8008de8:	08008f1f 	.word	0x08008f1f
 8008dec:	08008d5d 	.word	0x08008d5d
 8008df0:	08008e39 	.word	0x08008e39
 8008df4:	08008e75 	.word	0x08008e75
 8008df8:	08008e75 	.word	0x08008e75
 8008dfc:	08008e75 	.word	0x08008e75
 8008e00:	08008e75 	.word	0x08008e75
 8008e04:	08008e75 	.word	0x08008e75
 8008e08:	08008e75 	.word	0x08008e75
 8008e0c:	08008e75 	.word	0x08008e75
 8008e10:	08008e75 	.word	0x08008e75
 8008e14:	08008e75 	.word	0x08008e75
 8008e18:	2b6e      	cmp	r3, #110	; 0x6e
 8008e1a:	d809      	bhi.n	8008e30 <_scanf_float+0x138>
 8008e1c:	2b60      	cmp	r3, #96	; 0x60
 8008e1e:	d8b2      	bhi.n	8008d86 <_scanf_float+0x8e>
 8008e20:	2b54      	cmp	r3, #84	; 0x54
 8008e22:	d077      	beq.n	8008f14 <_scanf_float+0x21c>
 8008e24:	2b59      	cmp	r3, #89	; 0x59
 8008e26:	d199      	bne.n	8008d5c <_scanf_float+0x64>
 8008e28:	2d07      	cmp	r5, #7
 8008e2a:	d197      	bne.n	8008d5c <_scanf_float+0x64>
 8008e2c:	2508      	movs	r5, #8
 8008e2e:	e029      	b.n	8008e84 <_scanf_float+0x18c>
 8008e30:	2b74      	cmp	r3, #116	; 0x74
 8008e32:	d06f      	beq.n	8008f14 <_scanf_float+0x21c>
 8008e34:	2b79      	cmp	r3, #121	; 0x79
 8008e36:	e7f6      	b.n	8008e26 <_scanf_float+0x12e>
 8008e38:	6821      	ldr	r1, [r4, #0]
 8008e3a:	05c8      	lsls	r0, r1, #23
 8008e3c:	d51a      	bpl.n	8008e74 <_scanf_float+0x17c>
 8008e3e:	9b02      	ldr	r3, [sp, #8]
 8008e40:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008e44:	6021      	str	r1, [r4, #0]
 8008e46:	f109 0901 	add.w	r9, r9, #1
 8008e4a:	b11b      	cbz	r3, 8008e54 <_scanf_float+0x15c>
 8008e4c:	3b01      	subs	r3, #1
 8008e4e:	3201      	adds	r2, #1
 8008e50:	9302      	str	r3, [sp, #8]
 8008e52:	60a2      	str	r2, [r4, #8]
 8008e54:	68a3      	ldr	r3, [r4, #8]
 8008e56:	3b01      	subs	r3, #1
 8008e58:	60a3      	str	r3, [r4, #8]
 8008e5a:	6923      	ldr	r3, [r4, #16]
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	6123      	str	r3, [r4, #16]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	3b01      	subs	r3, #1
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	607b      	str	r3, [r7, #4]
 8008e68:	f340 8084 	ble.w	8008f74 <_scanf_float+0x27c>
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	603b      	str	r3, [r7, #0]
 8008e72:	e766      	b.n	8008d42 <_scanf_float+0x4a>
 8008e74:	eb1a 0f05 	cmn.w	sl, r5
 8008e78:	f47f af70 	bne.w	8008d5c <_scanf_float+0x64>
 8008e7c:	6822      	ldr	r2, [r4, #0]
 8008e7e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008e82:	6022      	str	r2, [r4, #0]
 8008e84:	f806 3b01 	strb.w	r3, [r6], #1
 8008e88:	e7e4      	b.n	8008e54 <_scanf_float+0x15c>
 8008e8a:	6822      	ldr	r2, [r4, #0]
 8008e8c:	0610      	lsls	r0, r2, #24
 8008e8e:	f57f af65 	bpl.w	8008d5c <_scanf_float+0x64>
 8008e92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e96:	e7f4      	b.n	8008e82 <_scanf_float+0x18a>
 8008e98:	f1ba 0f00 	cmp.w	sl, #0
 8008e9c:	d10e      	bne.n	8008ebc <_scanf_float+0x1c4>
 8008e9e:	f1b9 0f00 	cmp.w	r9, #0
 8008ea2:	d10e      	bne.n	8008ec2 <_scanf_float+0x1ca>
 8008ea4:	6822      	ldr	r2, [r4, #0]
 8008ea6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008eaa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008eae:	d108      	bne.n	8008ec2 <_scanf_float+0x1ca>
 8008eb0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008eb4:	f04f 0a01 	mov.w	sl, #1
 8008eb8:	6022      	str	r2, [r4, #0]
 8008eba:	e7e3      	b.n	8008e84 <_scanf_float+0x18c>
 8008ebc:	f1ba 0f02 	cmp.w	sl, #2
 8008ec0:	d055      	beq.n	8008f6e <_scanf_float+0x276>
 8008ec2:	2d01      	cmp	r5, #1
 8008ec4:	d002      	beq.n	8008ecc <_scanf_float+0x1d4>
 8008ec6:	2d04      	cmp	r5, #4
 8008ec8:	f47f af48 	bne.w	8008d5c <_scanf_float+0x64>
 8008ecc:	3501      	adds	r5, #1
 8008ece:	b2ed      	uxtb	r5, r5
 8008ed0:	e7d8      	b.n	8008e84 <_scanf_float+0x18c>
 8008ed2:	f1ba 0f01 	cmp.w	sl, #1
 8008ed6:	f47f af41 	bne.w	8008d5c <_scanf_float+0x64>
 8008eda:	f04f 0a02 	mov.w	sl, #2
 8008ede:	e7d1      	b.n	8008e84 <_scanf_float+0x18c>
 8008ee0:	b97d      	cbnz	r5, 8008f02 <_scanf_float+0x20a>
 8008ee2:	f1b9 0f00 	cmp.w	r9, #0
 8008ee6:	f47f af3c 	bne.w	8008d62 <_scanf_float+0x6a>
 8008eea:	6822      	ldr	r2, [r4, #0]
 8008eec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008ef0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008ef4:	f47f af39 	bne.w	8008d6a <_scanf_float+0x72>
 8008ef8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008efc:	2501      	movs	r5, #1
 8008efe:	6022      	str	r2, [r4, #0]
 8008f00:	e7c0      	b.n	8008e84 <_scanf_float+0x18c>
 8008f02:	2d03      	cmp	r5, #3
 8008f04:	d0e2      	beq.n	8008ecc <_scanf_float+0x1d4>
 8008f06:	2d05      	cmp	r5, #5
 8008f08:	e7de      	b.n	8008ec8 <_scanf_float+0x1d0>
 8008f0a:	2d02      	cmp	r5, #2
 8008f0c:	f47f af26 	bne.w	8008d5c <_scanf_float+0x64>
 8008f10:	2503      	movs	r5, #3
 8008f12:	e7b7      	b.n	8008e84 <_scanf_float+0x18c>
 8008f14:	2d06      	cmp	r5, #6
 8008f16:	f47f af21 	bne.w	8008d5c <_scanf_float+0x64>
 8008f1a:	2507      	movs	r5, #7
 8008f1c:	e7b2      	b.n	8008e84 <_scanf_float+0x18c>
 8008f1e:	6822      	ldr	r2, [r4, #0]
 8008f20:	0591      	lsls	r1, r2, #22
 8008f22:	f57f af1b 	bpl.w	8008d5c <_scanf_float+0x64>
 8008f26:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008f2a:	6022      	str	r2, [r4, #0]
 8008f2c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008f30:	e7a8      	b.n	8008e84 <_scanf_float+0x18c>
 8008f32:	6822      	ldr	r2, [r4, #0]
 8008f34:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008f38:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008f3c:	d006      	beq.n	8008f4c <_scanf_float+0x254>
 8008f3e:	0550      	lsls	r0, r2, #21
 8008f40:	f57f af0c 	bpl.w	8008d5c <_scanf_float+0x64>
 8008f44:	f1b9 0f00 	cmp.w	r9, #0
 8008f48:	f43f af0f 	beq.w	8008d6a <_scanf_float+0x72>
 8008f4c:	0591      	lsls	r1, r2, #22
 8008f4e:	bf58      	it	pl
 8008f50:	9901      	ldrpl	r1, [sp, #4]
 8008f52:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008f56:	bf58      	it	pl
 8008f58:	eba9 0101 	subpl.w	r1, r9, r1
 8008f5c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008f60:	f04f 0900 	mov.w	r9, #0
 8008f64:	bf58      	it	pl
 8008f66:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008f6a:	6022      	str	r2, [r4, #0]
 8008f6c:	e78a      	b.n	8008e84 <_scanf_float+0x18c>
 8008f6e:	f04f 0a03 	mov.w	sl, #3
 8008f72:	e787      	b.n	8008e84 <_scanf_float+0x18c>
 8008f74:	4639      	mov	r1, r7
 8008f76:	4640      	mov	r0, r8
 8008f78:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008f7c:	4798      	blx	r3
 8008f7e:	2800      	cmp	r0, #0
 8008f80:	f43f aedf 	beq.w	8008d42 <_scanf_float+0x4a>
 8008f84:	e6ea      	b.n	8008d5c <_scanf_float+0x64>
 8008f86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f8a:	463a      	mov	r2, r7
 8008f8c:	4640      	mov	r0, r8
 8008f8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f92:	4798      	blx	r3
 8008f94:	6923      	ldr	r3, [r4, #16]
 8008f96:	3b01      	subs	r3, #1
 8008f98:	6123      	str	r3, [r4, #16]
 8008f9a:	e6ec      	b.n	8008d76 <_scanf_float+0x7e>
 8008f9c:	1e6b      	subs	r3, r5, #1
 8008f9e:	2b06      	cmp	r3, #6
 8008fa0:	d825      	bhi.n	8008fee <_scanf_float+0x2f6>
 8008fa2:	2d02      	cmp	r5, #2
 8008fa4:	d836      	bhi.n	8009014 <_scanf_float+0x31c>
 8008fa6:	455e      	cmp	r6, fp
 8008fa8:	f67f aee8 	bls.w	8008d7c <_scanf_float+0x84>
 8008fac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008fb0:	463a      	mov	r2, r7
 8008fb2:	4640      	mov	r0, r8
 8008fb4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008fb8:	4798      	blx	r3
 8008fba:	6923      	ldr	r3, [r4, #16]
 8008fbc:	3b01      	subs	r3, #1
 8008fbe:	6123      	str	r3, [r4, #16]
 8008fc0:	e7f1      	b.n	8008fa6 <_scanf_float+0x2ae>
 8008fc2:	9802      	ldr	r0, [sp, #8]
 8008fc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008fc8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008fcc:	463a      	mov	r2, r7
 8008fce:	9002      	str	r0, [sp, #8]
 8008fd0:	4640      	mov	r0, r8
 8008fd2:	4798      	blx	r3
 8008fd4:	6923      	ldr	r3, [r4, #16]
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	6123      	str	r3, [r4, #16]
 8008fda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fde:	fa5f fa8a 	uxtb.w	sl, sl
 8008fe2:	f1ba 0f02 	cmp.w	sl, #2
 8008fe6:	d1ec      	bne.n	8008fc2 <_scanf_float+0x2ca>
 8008fe8:	3d03      	subs	r5, #3
 8008fea:	b2ed      	uxtb	r5, r5
 8008fec:	1b76      	subs	r6, r6, r5
 8008fee:	6823      	ldr	r3, [r4, #0]
 8008ff0:	05da      	lsls	r2, r3, #23
 8008ff2:	d52f      	bpl.n	8009054 <_scanf_float+0x35c>
 8008ff4:	055b      	lsls	r3, r3, #21
 8008ff6:	d510      	bpl.n	800901a <_scanf_float+0x322>
 8008ff8:	455e      	cmp	r6, fp
 8008ffa:	f67f aebf 	bls.w	8008d7c <_scanf_float+0x84>
 8008ffe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009002:	463a      	mov	r2, r7
 8009004:	4640      	mov	r0, r8
 8009006:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800900a:	4798      	blx	r3
 800900c:	6923      	ldr	r3, [r4, #16]
 800900e:	3b01      	subs	r3, #1
 8009010:	6123      	str	r3, [r4, #16]
 8009012:	e7f1      	b.n	8008ff8 <_scanf_float+0x300>
 8009014:	46aa      	mov	sl, r5
 8009016:	9602      	str	r6, [sp, #8]
 8009018:	e7df      	b.n	8008fda <_scanf_float+0x2e2>
 800901a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800901e:	6923      	ldr	r3, [r4, #16]
 8009020:	2965      	cmp	r1, #101	; 0x65
 8009022:	f103 33ff 	add.w	r3, r3, #4294967295
 8009026:	f106 35ff 	add.w	r5, r6, #4294967295
 800902a:	6123      	str	r3, [r4, #16]
 800902c:	d00c      	beq.n	8009048 <_scanf_float+0x350>
 800902e:	2945      	cmp	r1, #69	; 0x45
 8009030:	d00a      	beq.n	8009048 <_scanf_float+0x350>
 8009032:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009036:	463a      	mov	r2, r7
 8009038:	4640      	mov	r0, r8
 800903a:	4798      	blx	r3
 800903c:	6923      	ldr	r3, [r4, #16]
 800903e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009042:	3b01      	subs	r3, #1
 8009044:	1eb5      	subs	r5, r6, #2
 8009046:	6123      	str	r3, [r4, #16]
 8009048:	463a      	mov	r2, r7
 800904a:	4640      	mov	r0, r8
 800904c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009050:	4798      	blx	r3
 8009052:	462e      	mov	r6, r5
 8009054:	6825      	ldr	r5, [r4, #0]
 8009056:	f015 0510 	ands.w	r5, r5, #16
 800905a:	d159      	bne.n	8009110 <_scanf_float+0x418>
 800905c:	7035      	strb	r5, [r6, #0]
 800905e:	6823      	ldr	r3, [r4, #0]
 8009060:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009068:	d11c      	bne.n	80090a4 <_scanf_float+0x3ac>
 800906a:	9b01      	ldr	r3, [sp, #4]
 800906c:	454b      	cmp	r3, r9
 800906e:	eba3 0209 	sub.w	r2, r3, r9
 8009072:	d124      	bne.n	80090be <_scanf_float+0x3c6>
 8009074:	2200      	movs	r2, #0
 8009076:	4659      	mov	r1, fp
 8009078:	4640      	mov	r0, r8
 800907a:	f000 fe99 	bl	8009db0 <_strtod_r>
 800907e:	f8d4 c000 	ldr.w	ip, [r4]
 8009082:	9b03      	ldr	r3, [sp, #12]
 8009084:	f01c 0f02 	tst.w	ip, #2
 8009088:	4606      	mov	r6, r0
 800908a:	460f      	mov	r7, r1
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	d021      	beq.n	80090d4 <_scanf_float+0x3dc>
 8009090:	9903      	ldr	r1, [sp, #12]
 8009092:	1d1a      	adds	r2, r3, #4
 8009094:	600a      	str	r2, [r1, #0]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	e9c3 6700 	strd	r6, r7, [r3]
 800909c:	68e3      	ldr	r3, [r4, #12]
 800909e:	3301      	adds	r3, #1
 80090a0:	60e3      	str	r3, [r4, #12]
 80090a2:	e66c      	b.n	8008d7e <_scanf_float+0x86>
 80090a4:	9b04      	ldr	r3, [sp, #16]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d0e4      	beq.n	8009074 <_scanf_float+0x37c>
 80090aa:	9905      	ldr	r1, [sp, #20]
 80090ac:	230a      	movs	r3, #10
 80090ae:	462a      	mov	r2, r5
 80090b0:	4640      	mov	r0, r8
 80090b2:	3101      	adds	r1, #1
 80090b4:	f000 ff08 	bl	8009ec8 <_strtol_r>
 80090b8:	9b04      	ldr	r3, [sp, #16]
 80090ba:	9e05      	ldr	r6, [sp, #20]
 80090bc:	1ac2      	subs	r2, r0, r3
 80090be:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80090c2:	429e      	cmp	r6, r3
 80090c4:	bf28      	it	cs
 80090c6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80090ca:	4630      	mov	r0, r6
 80090cc:	4911      	ldr	r1, [pc, #68]	; (8009114 <_scanf_float+0x41c>)
 80090ce:	f000 f839 	bl	8009144 <siprintf>
 80090d2:	e7cf      	b.n	8009074 <_scanf_float+0x37c>
 80090d4:	f01c 0f04 	tst.w	ip, #4
 80090d8:	f103 0e04 	add.w	lr, r3, #4
 80090dc:	d003      	beq.n	80090e6 <_scanf_float+0x3ee>
 80090de:	9903      	ldr	r1, [sp, #12]
 80090e0:	f8c1 e000 	str.w	lr, [r1]
 80090e4:	e7d7      	b.n	8009096 <_scanf_float+0x39e>
 80090e6:	9a03      	ldr	r2, [sp, #12]
 80090e8:	f8c2 e000 	str.w	lr, [r2]
 80090ec:	f8d3 8000 	ldr.w	r8, [r3]
 80090f0:	4602      	mov	r2, r0
 80090f2:	460b      	mov	r3, r1
 80090f4:	f7f7 fc8a 	bl	8000a0c <__aeabi_dcmpun>
 80090f8:	b128      	cbz	r0, 8009106 <_scanf_float+0x40e>
 80090fa:	4807      	ldr	r0, [pc, #28]	; (8009118 <_scanf_float+0x420>)
 80090fc:	f000 f81e 	bl	800913c <nanf>
 8009100:	f8c8 0000 	str.w	r0, [r8]
 8009104:	e7ca      	b.n	800909c <_scanf_float+0x3a4>
 8009106:	4630      	mov	r0, r6
 8009108:	4639      	mov	r1, r7
 800910a:	f7f7 fcdd 	bl	8000ac8 <__aeabi_d2f>
 800910e:	e7f7      	b.n	8009100 <_scanf_float+0x408>
 8009110:	2500      	movs	r5, #0
 8009112:	e634      	b.n	8008d7e <_scanf_float+0x86>
 8009114:	0800c90d 	.word	0x0800c90d
 8009118:	0800c8c3 	.word	0x0800c8c3

0800911c <_sbrk_r>:
 800911c:	b538      	push	{r3, r4, r5, lr}
 800911e:	2300      	movs	r3, #0
 8009120:	4d05      	ldr	r5, [pc, #20]	; (8009138 <_sbrk_r+0x1c>)
 8009122:	4604      	mov	r4, r0
 8009124:	4608      	mov	r0, r1
 8009126:	602b      	str	r3, [r5, #0]
 8009128:	f7f9 fa38 	bl	800259c <_sbrk>
 800912c:	1c43      	adds	r3, r0, #1
 800912e:	d102      	bne.n	8009136 <_sbrk_r+0x1a>
 8009130:	682b      	ldr	r3, [r5, #0]
 8009132:	b103      	cbz	r3, 8009136 <_sbrk_r+0x1a>
 8009134:	6023      	str	r3, [r4, #0]
 8009136:	bd38      	pop	{r3, r4, r5, pc}
 8009138:	20000a5c 	.word	0x20000a5c

0800913c <nanf>:
 800913c:	4800      	ldr	r0, [pc, #0]	; (8009140 <nanf+0x4>)
 800913e:	4770      	bx	lr
 8009140:	7fc00000 	.word	0x7fc00000

08009144 <siprintf>:
 8009144:	b40e      	push	{r1, r2, r3}
 8009146:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800914a:	b500      	push	{lr}
 800914c:	b09c      	sub	sp, #112	; 0x70
 800914e:	ab1d      	add	r3, sp, #116	; 0x74
 8009150:	9002      	str	r0, [sp, #8]
 8009152:	9006      	str	r0, [sp, #24]
 8009154:	9107      	str	r1, [sp, #28]
 8009156:	9104      	str	r1, [sp, #16]
 8009158:	4808      	ldr	r0, [pc, #32]	; (800917c <siprintf+0x38>)
 800915a:	4909      	ldr	r1, [pc, #36]	; (8009180 <siprintf+0x3c>)
 800915c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009160:	9105      	str	r1, [sp, #20]
 8009162:	6800      	ldr	r0, [r0, #0]
 8009164:	a902      	add	r1, sp, #8
 8009166:	9301      	str	r3, [sp, #4]
 8009168:	f003 f90c 	bl	800c384 <_svfiprintf_r>
 800916c:	2200      	movs	r2, #0
 800916e:	9b02      	ldr	r3, [sp, #8]
 8009170:	701a      	strb	r2, [r3, #0]
 8009172:	b01c      	add	sp, #112	; 0x70
 8009174:	f85d eb04 	ldr.w	lr, [sp], #4
 8009178:	b003      	add	sp, #12
 800917a:	4770      	bx	lr
 800917c:	20000054 	.word	0x20000054
 8009180:	ffff0208 	.word	0xffff0208

08009184 <sulp>:
 8009184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009188:	460f      	mov	r7, r1
 800918a:	4690      	mov	r8, r2
 800918c:	f002 ff22 	bl	800bfd4 <__ulp>
 8009190:	4604      	mov	r4, r0
 8009192:	460d      	mov	r5, r1
 8009194:	f1b8 0f00 	cmp.w	r8, #0
 8009198:	d011      	beq.n	80091be <sulp+0x3a>
 800919a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800919e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	dd0b      	ble.n	80091be <sulp+0x3a>
 80091a6:	2400      	movs	r4, #0
 80091a8:	051b      	lsls	r3, r3, #20
 80091aa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80091ae:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80091b2:	4622      	mov	r2, r4
 80091b4:	462b      	mov	r3, r5
 80091b6:	f7f7 f98f 	bl	80004d8 <__aeabi_dmul>
 80091ba:	4604      	mov	r4, r0
 80091bc:	460d      	mov	r5, r1
 80091be:	4620      	mov	r0, r4
 80091c0:	4629      	mov	r1, r5
 80091c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080091c8 <_strtod_l>:
 80091c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091cc:	469b      	mov	fp, r3
 80091ce:	2300      	movs	r3, #0
 80091d0:	b0a1      	sub	sp, #132	; 0x84
 80091d2:	931c      	str	r3, [sp, #112]	; 0x70
 80091d4:	4ba1      	ldr	r3, [pc, #644]	; (800945c <_strtod_l+0x294>)
 80091d6:	4682      	mov	sl, r0
 80091d8:	681f      	ldr	r7, [r3, #0]
 80091da:	460e      	mov	r6, r1
 80091dc:	4638      	mov	r0, r7
 80091de:	9217      	str	r2, [sp, #92]	; 0x5c
 80091e0:	f7f6 ffb6 	bl	8000150 <strlen>
 80091e4:	f04f 0800 	mov.w	r8, #0
 80091e8:	4604      	mov	r4, r0
 80091ea:	f04f 0900 	mov.w	r9, #0
 80091ee:	961b      	str	r6, [sp, #108]	; 0x6c
 80091f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80091f2:	781a      	ldrb	r2, [r3, #0]
 80091f4:	2a2b      	cmp	r2, #43	; 0x2b
 80091f6:	d04c      	beq.n	8009292 <_strtod_l+0xca>
 80091f8:	d83a      	bhi.n	8009270 <_strtod_l+0xa8>
 80091fa:	2a0d      	cmp	r2, #13
 80091fc:	d833      	bhi.n	8009266 <_strtod_l+0x9e>
 80091fe:	2a08      	cmp	r2, #8
 8009200:	d833      	bhi.n	800926a <_strtod_l+0xa2>
 8009202:	2a00      	cmp	r2, #0
 8009204:	d03d      	beq.n	8009282 <_strtod_l+0xba>
 8009206:	2300      	movs	r3, #0
 8009208:	930c      	str	r3, [sp, #48]	; 0x30
 800920a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800920c:	782b      	ldrb	r3, [r5, #0]
 800920e:	2b30      	cmp	r3, #48	; 0x30
 8009210:	f040 80af 	bne.w	8009372 <_strtod_l+0x1aa>
 8009214:	786b      	ldrb	r3, [r5, #1]
 8009216:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800921a:	2b58      	cmp	r3, #88	; 0x58
 800921c:	d16c      	bne.n	80092f8 <_strtod_l+0x130>
 800921e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009220:	4650      	mov	r0, sl
 8009222:	9301      	str	r3, [sp, #4]
 8009224:	ab1c      	add	r3, sp, #112	; 0x70
 8009226:	9300      	str	r3, [sp, #0]
 8009228:	4a8d      	ldr	r2, [pc, #564]	; (8009460 <_strtod_l+0x298>)
 800922a:	f8cd b008 	str.w	fp, [sp, #8]
 800922e:	ab1d      	add	r3, sp, #116	; 0x74
 8009230:	a91b      	add	r1, sp, #108	; 0x6c
 8009232:	f001 ffaf 	bl	800b194 <__gethex>
 8009236:	f010 0607 	ands.w	r6, r0, #7
 800923a:	4604      	mov	r4, r0
 800923c:	d005      	beq.n	800924a <_strtod_l+0x82>
 800923e:	2e06      	cmp	r6, #6
 8009240:	d129      	bne.n	8009296 <_strtod_l+0xce>
 8009242:	2300      	movs	r3, #0
 8009244:	3501      	adds	r5, #1
 8009246:	951b      	str	r5, [sp, #108]	; 0x6c
 8009248:	930c      	str	r3, [sp, #48]	; 0x30
 800924a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800924c:	2b00      	cmp	r3, #0
 800924e:	f040 8596 	bne.w	8009d7e <_strtod_l+0xbb6>
 8009252:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009254:	b1d3      	cbz	r3, 800928c <_strtod_l+0xc4>
 8009256:	4642      	mov	r2, r8
 8009258:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800925c:	4610      	mov	r0, r2
 800925e:	4619      	mov	r1, r3
 8009260:	b021      	add	sp, #132	; 0x84
 8009262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009266:	2a20      	cmp	r2, #32
 8009268:	d1cd      	bne.n	8009206 <_strtod_l+0x3e>
 800926a:	3301      	adds	r3, #1
 800926c:	931b      	str	r3, [sp, #108]	; 0x6c
 800926e:	e7bf      	b.n	80091f0 <_strtod_l+0x28>
 8009270:	2a2d      	cmp	r2, #45	; 0x2d
 8009272:	d1c8      	bne.n	8009206 <_strtod_l+0x3e>
 8009274:	2201      	movs	r2, #1
 8009276:	920c      	str	r2, [sp, #48]	; 0x30
 8009278:	1c5a      	adds	r2, r3, #1
 800927a:	921b      	str	r2, [sp, #108]	; 0x6c
 800927c:	785b      	ldrb	r3, [r3, #1]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1c3      	bne.n	800920a <_strtod_l+0x42>
 8009282:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009284:	961b      	str	r6, [sp, #108]	; 0x6c
 8009286:	2b00      	cmp	r3, #0
 8009288:	f040 8577 	bne.w	8009d7a <_strtod_l+0xbb2>
 800928c:	4642      	mov	r2, r8
 800928e:	464b      	mov	r3, r9
 8009290:	e7e4      	b.n	800925c <_strtod_l+0x94>
 8009292:	2200      	movs	r2, #0
 8009294:	e7ef      	b.n	8009276 <_strtod_l+0xae>
 8009296:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009298:	b13a      	cbz	r2, 80092aa <_strtod_l+0xe2>
 800929a:	2135      	movs	r1, #53	; 0x35
 800929c:	a81e      	add	r0, sp, #120	; 0x78
 800929e:	f002 ff9d 	bl	800c1dc <__copybits>
 80092a2:	4650      	mov	r0, sl
 80092a4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80092a6:	f002 fb65 	bl	800b974 <_Bfree>
 80092aa:	3e01      	subs	r6, #1
 80092ac:	2e05      	cmp	r6, #5
 80092ae:	d807      	bhi.n	80092c0 <_strtod_l+0xf8>
 80092b0:	e8df f006 	tbb	[pc, r6]
 80092b4:	1d180b0e 	.word	0x1d180b0e
 80092b8:	030e      	.short	0x030e
 80092ba:	f04f 0900 	mov.w	r9, #0
 80092be:	46c8      	mov	r8, r9
 80092c0:	0721      	lsls	r1, r4, #28
 80092c2:	d5c2      	bpl.n	800924a <_strtod_l+0x82>
 80092c4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80092c8:	e7bf      	b.n	800924a <_strtod_l+0x82>
 80092ca:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 80092ce:	e7f7      	b.n	80092c0 <_strtod_l+0xf8>
 80092d0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80092d2:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 80092d6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80092da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80092de:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80092e2:	e7ed      	b.n	80092c0 <_strtod_l+0xf8>
 80092e4:	f04f 0800 	mov.w	r8, #0
 80092e8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009464 <_strtod_l+0x29c>
 80092ec:	e7e8      	b.n	80092c0 <_strtod_l+0xf8>
 80092ee:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80092f2:	f04f 38ff 	mov.w	r8, #4294967295
 80092f6:	e7e3      	b.n	80092c0 <_strtod_l+0xf8>
 80092f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80092fa:	1c5a      	adds	r2, r3, #1
 80092fc:	921b      	str	r2, [sp, #108]	; 0x6c
 80092fe:	785b      	ldrb	r3, [r3, #1]
 8009300:	2b30      	cmp	r3, #48	; 0x30
 8009302:	d0f9      	beq.n	80092f8 <_strtod_l+0x130>
 8009304:	2b00      	cmp	r3, #0
 8009306:	d0a0      	beq.n	800924a <_strtod_l+0x82>
 8009308:	2301      	movs	r3, #1
 800930a:	9307      	str	r3, [sp, #28]
 800930c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800930e:	220a      	movs	r2, #10
 8009310:	9308      	str	r3, [sp, #32]
 8009312:	2300      	movs	r3, #0
 8009314:	469b      	mov	fp, r3
 8009316:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800931a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800931c:	7805      	ldrb	r5, [r0, #0]
 800931e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009322:	b2d9      	uxtb	r1, r3
 8009324:	2909      	cmp	r1, #9
 8009326:	d926      	bls.n	8009376 <_strtod_l+0x1ae>
 8009328:	4622      	mov	r2, r4
 800932a:	4639      	mov	r1, r7
 800932c:	f003 f9b7 	bl	800c69e <strncmp>
 8009330:	2800      	cmp	r0, #0
 8009332:	d032      	beq.n	800939a <_strtod_l+0x1d2>
 8009334:	2000      	movs	r0, #0
 8009336:	462b      	mov	r3, r5
 8009338:	465c      	mov	r4, fp
 800933a:	4602      	mov	r2, r0
 800933c:	9004      	str	r0, [sp, #16]
 800933e:	2b65      	cmp	r3, #101	; 0x65
 8009340:	d001      	beq.n	8009346 <_strtod_l+0x17e>
 8009342:	2b45      	cmp	r3, #69	; 0x45
 8009344:	d113      	bne.n	800936e <_strtod_l+0x1a6>
 8009346:	b91c      	cbnz	r4, 8009350 <_strtod_l+0x188>
 8009348:	9b07      	ldr	r3, [sp, #28]
 800934a:	4303      	orrs	r3, r0
 800934c:	d099      	beq.n	8009282 <_strtod_l+0xba>
 800934e:	2400      	movs	r4, #0
 8009350:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8009352:	1c73      	adds	r3, r6, #1
 8009354:	931b      	str	r3, [sp, #108]	; 0x6c
 8009356:	7873      	ldrb	r3, [r6, #1]
 8009358:	2b2b      	cmp	r3, #43	; 0x2b
 800935a:	d078      	beq.n	800944e <_strtod_l+0x286>
 800935c:	2b2d      	cmp	r3, #45	; 0x2d
 800935e:	d07b      	beq.n	8009458 <_strtod_l+0x290>
 8009360:	2700      	movs	r7, #0
 8009362:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009366:	2909      	cmp	r1, #9
 8009368:	f240 8082 	bls.w	8009470 <_strtod_l+0x2a8>
 800936c:	961b      	str	r6, [sp, #108]	; 0x6c
 800936e:	2500      	movs	r5, #0
 8009370:	e09e      	b.n	80094b0 <_strtod_l+0x2e8>
 8009372:	2300      	movs	r3, #0
 8009374:	e7c9      	b.n	800930a <_strtod_l+0x142>
 8009376:	f1bb 0f08 	cmp.w	fp, #8
 800937a:	bfd5      	itete	le
 800937c:	9906      	ldrle	r1, [sp, #24]
 800937e:	9905      	ldrgt	r1, [sp, #20]
 8009380:	fb02 3301 	mlale	r3, r2, r1, r3
 8009384:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009388:	f100 0001 	add.w	r0, r0, #1
 800938c:	bfd4      	ite	le
 800938e:	9306      	strle	r3, [sp, #24]
 8009390:	9305      	strgt	r3, [sp, #20]
 8009392:	f10b 0b01 	add.w	fp, fp, #1
 8009396:	901b      	str	r0, [sp, #108]	; 0x6c
 8009398:	e7bf      	b.n	800931a <_strtod_l+0x152>
 800939a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800939c:	191a      	adds	r2, r3, r4
 800939e:	921b      	str	r2, [sp, #108]	; 0x6c
 80093a0:	5d1b      	ldrb	r3, [r3, r4]
 80093a2:	f1bb 0f00 	cmp.w	fp, #0
 80093a6:	d036      	beq.n	8009416 <_strtod_l+0x24e>
 80093a8:	465c      	mov	r4, fp
 80093aa:	9004      	str	r0, [sp, #16]
 80093ac:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80093b0:	2a09      	cmp	r2, #9
 80093b2:	d912      	bls.n	80093da <_strtod_l+0x212>
 80093b4:	2201      	movs	r2, #1
 80093b6:	e7c2      	b.n	800933e <_strtod_l+0x176>
 80093b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80093ba:	3001      	adds	r0, #1
 80093bc:	1c5a      	adds	r2, r3, #1
 80093be:	921b      	str	r2, [sp, #108]	; 0x6c
 80093c0:	785b      	ldrb	r3, [r3, #1]
 80093c2:	2b30      	cmp	r3, #48	; 0x30
 80093c4:	d0f8      	beq.n	80093b8 <_strtod_l+0x1f0>
 80093c6:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80093ca:	2a08      	cmp	r2, #8
 80093cc:	f200 84dc 	bhi.w	8009d88 <_strtod_l+0xbc0>
 80093d0:	9004      	str	r0, [sp, #16]
 80093d2:	2000      	movs	r0, #0
 80093d4:	4604      	mov	r4, r0
 80093d6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80093d8:	9208      	str	r2, [sp, #32]
 80093da:	3b30      	subs	r3, #48	; 0x30
 80093dc:	f100 0201 	add.w	r2, r0, #1
 80093e0:	d013      	beq.n	800940a <_strtod_l+0x242>
 80093e2:	9904      	ldr	r1, [sp, #16]
 80093e4:	1905      	adds	r5, r0, r4
 80093e6:	4411      	add	r1, r2
 80093e8:	9104      	str	r1, [sp, #16]
 80093ea:	4622      	mov	r2, r4
 80093ec:	210a      	movs	r1, #10
 80093ee:	42aa      	cmp	r2, r5
 80093f0:	d113      	bne.n	800941a <_strtod_l+0x252>
 80093f2:	1822      	adds	r2, r4, r0
 80093f4:	2a08      	cmp	r2, #8
 80093f6:	f104 0401 	add.w	r4, r4, #1
 80093fa:	4404      	add	r4, r0
 80093fc:	dc1b      	bgt.n	8009436 <_strtod_l+0x26e>
 80093fe:	220a      	movs	r2, #10
 8009400:	9906      	ldr	r1, [sp, #24]
 8009402:	fb02 3301 	mla	r3, r2, r1, r3
 8009406:	9306      	str	r3, [sp, #24]
 8009408:	2200      	movs	r2, #0
 800940a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800940c:	4610      	mov	r0, r2
 800940e:	1c59      	adds	r1, r3, #1
 8009410:	911b      	str	r1, [sp, #108]	; 0x6c
 8009412:	785b      	ldrb	r3, [r3, #1]
 8009414:	e7ca      	b.n	80093ac <_strtod_l+0x1e4>
 8009416:	4658      	mov	r0, fp
 8009418:	e7d3      	b.n	80093c2 <_strtod_l+0x1fa>
 800941a:	2a08      	cmp	r2, #8
 800941c:	dc04      	bgt.n	8009428 <_strtod_l+0x260>
 800941e:	9f06      	ldr	r7, [sp, #24]
 8009420:	434f      	muls	r7, r1
 8009422:	9706      	str	r7, [sp, #24]
 8009424:	3201      	adds	r2, #1
 8009426:	e7e2      	b.n	80093ee <_strtod_l+0x226>
 8009428:	1c57      	adds	r7, r2, #1
 800942a:	2f10      	cmp	r7, #16
 800942c:	bfde      	ittt	le
 800942e:	9f05      	ldrle	r7, [sp, #20]
 8009430:	434f      	mulle	r7, r1
 8009432:	9705      	strle	r7, [sp, #20]
 8009434:	e7f6      	b.n	8009424 <_strtod_l+0x25c>
 8009436:	2c10      	cmp	r4, #16
 8009438:	bfdf      	itttt	le
 800943a:	220a      	movle	r2, #10
 800943c:	9905      	ldrle	r1, [sp, #20]
 800943e:	fb02 3301 	mlale	r3, r2, r1, r3
 8009442:	9305      	strle	r3, [sp, #20]
 8009444:	e7e0      	b.n	8009408 <_strtod_l+0x240>
 8009446:	2300      	movs	r3, #0
 8009448:	2201      	movs	r2, #1
 800944a:	9304      	str	r3, [sp, #16]
 800944c:	e77c      	b.n	8009348 <_strtod_l+0x180>
 800944e:	2700      	movs	r7, #0
 8009450:	1cb3      	adds	r3, r6, #2
 8009452:	931b      	str	r3, [sp, #108]	; 0x6c
 8009454:	78b3      	ldrb	r3, [r6, #2]
 8009456:	e784      	b.n	8009362 <_strtod_l+0x19a>
 8009458:	2701      	movs	r7, #1
 800945a:	e7f9      	b.n	8009450 <_strtod_l+0x288>
 800945c:	0800cbcc 	.word	0x0800cbcc
 8009460:	0800c914 	.word	0x0800c914
 8009464:	7ff00000 	.word	0x7ff00000
 8009468:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800946a:	1c59      	adds	r1, r3, #1
 800946c:	911b      	str	r1, [sp, #108]	; 0x6c
 800946e:	785b      	ldrb	r3, [r3, #1]
 8009470:	2b30      	cmp	r3, #48	; 0x30
 8009472:	d0f9      	beq.n	8009468 <_strtod_l+0x2a0>
 8009474:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8009478:	2908      	cmp	r1, #8
 800947a:	f63f af78 	bhi.w	800936e <_strtod_l+0x1a6>
 800947e:	f04f 0e0a 	mov.w	lr, #10
 8009482:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8009486:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009488:	9309      	str	r3, [sp, #36]	; 0x24
 800948a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800948c:	1c59      	adds	r1, r3, #1
 800948e:	911b      	str	r1, [sp, #108]	; 0x6c
 8009490:	785b      	ldrb	r3, [r3, #1]
 8009492:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8009496:	2d09      	cmp	r5, #9
 8009498:	d935      	bls.n	8009506 <_strtod_l+0x33e>
 800949a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800949c:	1b49      	subs	r1, r1, r5
 800949e:	2908      	cmp	r1, #8
 80094a0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80094a4:	dc02      	bgt.n	80094ac <_strtod_l+0x2e4>
 80094a6:	4565      	cmp	r5, ip
 80094a8:	bfa8      	it	ge
 80094aa:	4665      	movge	r5, ip
 80094ac:	b107      	cbz	r7, 80094b0 <_strtod_l+0x2e8>
 80094ae:	426d      	negs	r5, r5
 80094b0:	2c00      	cmp	r4, #0
 80094b2:	d14c      	bne.n	800954e <_strtod_l+0x386>
 80094b4:	9907      	ldr	r1, [sp, #28]
 80094b6:	4301      	orrs	r1, r0
 80094b8:	f47f aec7 	bne.w	800924a <_strtod_l+0x82>
 80094bc:	2a00      	cmp	r2, #0
 80094be:	f47f aee0 	bne.w	8009282 <_strtod_l+0xba>
 80094c2:	2b69      	cmp	r3, #105	; 0x69
 80094c4:	d026      	beq.n	8009514 <_strtod_l+0x34c>
 80094c6:	dc23      	bgt.n	8009510 <_strtod_l+0x348>
 80094c8:	2b49      	cmp	r3, #73	; 0x49
 80094ca:	d023      	beq.n	8009514 <_strtod_l+0x34c>
 80094cc:	2b4e      	cmp	r3, #78	; 0x4e
 80094ce:	f47f aed8 	bne.w	8009282 <_strtod_l+0xba>
 80094d2:	499c      	ldr	r1, [pc, #624]	; (8009744 <_strtod_l+0x57c>)
 80094d4:	a81b      	add	r0, sp, #108	; 0x6c
 80094d6:	f002 f8ab 	bl	800b630 <__match>
 80094da:	2800      	cmp	r0, #0
 80094dc:	f43f aed1 	beq.w	8009282 <_strtod_l+0xba>
 80094e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	2b28      	cmp	r3, #40	; 0x28
 80094e6:	d12c      	bne.n	8009542 <_strtod_l+0x37a>
 80094e8:	4997      	ldr	r1, [pc, #604]	; (8009748 <_strtod_l+0x580>)
 80094ea:	aa1e      	add	r2, sp, #120	; 0x78
 80094ec:	a81b      	add	r0, sp, #108	; 0x6c
 80094ee:	f002 f8b3 	bl	800b658 <__hexnan>
 80094f2:	2805      	cmp	r0, #5
 80094f4:	d125      	bne.n	8009542 <_strtod_l+0x37a>
 80094f6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80094f8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80094fc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009500:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009504:	e6a1      	b.n	800924a <_strtod_l+0x82>
 8009506:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800950a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800950e:	e7bc      	b.n	800948a <_strtod_l+0x2c2>
 8009510:	2b6e      	cmp	r3, #110	; 0x6e
 8009512:	e7dc      	b.n	80094ce <_strtod_l+0x306>
 8009514:	498d      	ldr	r1, [pc, #564]	; (800974c <_strtod_l+0x584>)
 8009516:	a81b      	add	r0, sp, #108	; 0x6c
 8009518:	f002 f88a 	bl	800b630 <__match>
 800951c:	2800      	cmp	r0, #0
 800951e:	f43f aeb0 	beq.w	8009282 <_strtod_l+0xba>
 8009522:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009524:	498a      	ldr	r1, [pc, #552]	; (8009750 <_strtod_l+0x588>)
 8009526:	3b01      	subs	r3, #1
 8009528:	a81b      	add	r0, sp, #108	; 0x6c
 800952a:	931b      	str	r3, [sp, #108]	; 0x6c
 800952c:	f002 f880 	bl	800b630 <__match>
 8009530:	b910      	cbnz	r0, 8009538 <_strtod_l+0x370>
 8009532:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009534:	3301      	adds	r3, #1
 8009536:	931b      	str	r3, [sp, #108]	; 0x6c
 8009538:	f04f 0800 	mov.w	r8, #0
 800953c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8009760 <_strtod_l+0x598>
 8009540:	e683      	b.n	800924a <_strtod_l+0x82>
 8009542:	4884      	ldr	r0, [pc, #528]	; (8009754 <_strtod_l+0x58c>)
 8009544:	f003 f81e 	bl	800c584 <nan>
 8009548:	4680      	mov	r8, r0
 800954a:	4689      	mov	r9, r1
 800954c:	e67d      	b.n	800924a <_strtod_l+0x82>
 800954e:	9b04      	ldr	r3, [sp, #16]
 8009550:	f1bb 0f00 	cmp.w	fp, #0
 8009554:	bf08      	it	eq
 8009556:	46a3      	moveq	fp, r4
 8009558:	1aeb      	subs	r3, r5, r3
 800955a:	2c10      	cmp	r4, #16
 800955c:	9806      	ldr	r0, [sp, #24]
 800955e:	4626      	mov	r6, r4
 8009560:	9307      	str	r3, [sp, #28]
 8009562:	bfa8      	it	ge
 8009564:	2610      	movge	r6, #16
 8009566:	f7f6 ff3d 	bl	80003e4 <__aeabi_ui2d>
 800956a:	2c09      	cmp	r4, #9
 800956c:	4680      	mov	r8, r0
 800956e:	4689      	mov	r9, r1
 8009570:	dd13      	ble.n	800959a <_strtod_l+0x3d2>
 8009572:	4b79      	ldr	r3, [pc, #484]	; (8009758 <_strtod_l+0x590>)
 8009574:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009578:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800957c:	f7f6 ffac 	bl	80004d8 <__aeabi_dmul>
 8009580:	4680      	mov	r8, r0
 8009582:	9805      	ldr	r0, [sp, #20]
 8009584:	4689      	mov	r9, r1
 8009586:	f7f6 ff2d 	bl	80003e4 <__aeabi_ui2d>
 800958a:	4602      	mov	r2, r0
 800958c:	460b      	mov	r3, r1
 800958e:	4640      	mov	r0, r8
 8009590:	4649      	mov	r1, r9
 8009592:	f7f6 fdeb 	bl	800016c <__adddf3>
 8009596:	4680      	mov	r8, r0
 8009598:	4689      	mov	r9, r1
 800959a:	2c0f      	cmp	r4, #15
 800959c:	dc36      	bgt.n	800960c <_strtod_l+0x444>
 800959e:	9b07      	ldr	r3, [sp, #28]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	f43f ae52 	beq.w	800924a <_strtod_l+0x82>
 80095a6:	dd22      	ble.n	80095ee <_strtod_l+0x426>
 80095a8:	2b16      	cmp	r3, #22
 80095aa:	dc09      	bgt.n	80095c0 <_strtod_l+0x3f8>
 80095ac:	4c6a      	ldr	r4, [pc, #424]	; (8009758 <_strtod_l+0x590>)
 80095ae:	4642      	mov	r2, r8
 80095b0:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80095b4:	464b      	mov	r3, r9
 80095b6:	e9d4 0100 	ldrd	r0, r1, [r4]
 80095ba:	f7f6 ff8d 	bl	80004d8 <__aeabi_dmul>
 80095be:	e7c3      	b.n	8009548 <_strtod_l+0x380>
 80095c0:	9a07      	ldr	r2, [sp, #28]
 80095c2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80095c6:	4293      	cmp	r3, r2
 80095c8:	db20      	blt.n	800960c <_strtod_l+0x444>
 80095ca:	4d63      	ldr	r5, [pc, #396]	; (8009758 <_strtod_l+0x590>)
 80095cc:	f1c4 040f 	rsb	r4, r4, #15
 80095d0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80095d4:	4642      	mov	r2, r8
 80095d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095da:	464b      	mov	r3, r9
 80095dc:	f7f6 ff7c 	bl	80004d8 <__aeabi_dmul>
 80095e0:	9b07      	ldr	r3, [sp, #28]
 80095e2:	1b1c      	subs	r4, r3, r4
 80095e4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80095e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80095ec:	e7e5      	b.n	80095ba <_strtod_l+0x3f2>
 80095ee:	9b07      	ldr	r3, [sp, #28]
 80095f0:	3316      	adds	r3, #22
 80095f2:	db0b      	blt.n	800960c <_strtod_l+0x444>
 80095f4:	9b04      	ldr	r3, [sp, #16]
 80095f6:	4a58      	ldr	r2, [pc, #352]	; (8009758 <_strtod_l+0x590>)
 80095f8:	1b5d      	subs	r5, r3, r5
 80095fa:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80095fe:	4640      	mov	r0, r8
 8009600:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009604:	4649      	mov	r1, r9
 8009606:	f7f7 f891 	bl	800072c <__aeabi_ddiv>
 800960a:	e79d      	b.n	8009548 <_strtod_l+0x380>
 800960c:	9b07      	ldr	r3, [sp, #28]
 800960e:	1ba6      	subs	r6, r4, r6
 8009610:	441e      	add	r6, r3
 8009612:	2e00      	cmp	r6, #0
 8009614:	dd71      	ble.n	80096fa <_strtod_l+0x532>
 8009616:	f016 030f 	ands.w	r3, r6, #15
 800961a:	d00a      	beq.n	8009632 <_strtod_l+0x46a>
 800961c:	494e      	ldr	r1, [pc, #312]	; (8009758 <_strtod_l+0x590>)
 800961e:	4642      	mov	r2, r8
 8009620:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009624:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009628:	464b      	mov	r3, r9
 800962a:	f7f6 ff55 	bl	80004d8 <__aeabi_dmul>
 800962e:	4680      	mov	r8, r0
 8009630:	4689      	mov	r9, r1
 8009632:	f036 060f 	bics.w	r6, r6, #15
 8009636:	d050      	beq.n	80096da <_strtod_l+0x512>
 8009638:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800963c:	dd27      	ble.n	800968e <_strtod_l+0x4c6>
 800963e:	f04f 0b00 	mov.w	fp, #0
 8009642:	f8cd b010 	str.w	fp, [sp, #16]
 8009646:	f8cd b020 	str.w	fp, [sp, #32]
 800964a:	f8cd b018 	str.w	fp, [sp, #24]
 800964e:	2322      	movs	r3, #34	; 0x22
 8009650:	f04f 0800 	mov.w	r8, #0
 8009654:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009760 <_strtod_l+0x598>
 8009658:	f8ca 3000 	str.w	r3, [sl]
 800965c:	9b08      	ldr	r3, [sp, #32]
 800965e:	2b00      	cmp	r3, #0
 8009660:	f43f adf3 	beq.w	800924a <_strtod_l+0x82>
 8009664:	4650      	mov	r0, sl
 8009666:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009668:	f002 f984 	bl	800b974 <_Bfree>
 800966c:	4650      	mov	r0, sl
 800966e:	9906      	ldr	r1, [sp, #24]
 8009670:	f002 f980 	bl	800b974 <_Bfree>
 8009674:	4650      	mov	r0, sl
 8009676:	9904      	ldr	r1, [sp, #16]
 8009678:	f002 f97c 	bl	800b974 <_Bfree>
 800967c:	4650      	mov	r0, sl
 800967e:	9908      	ldr	r1, [sp, #32]
 8009680:	f002 f978 	bl	800b974 <_Bfree>
 8009684:	4659      	mov	r1, fp
 8009686:	4650      	mov	r0, sl
 8009688:	f002 f974 	bl	800b974 <_Bfree>
 800968c:	e5dd      	b.n	800924a <_strtod_l+0x82>
 800968e:	2300      	movs	r3, #0
 8009690:	4640      	mov	r0, r8
 8009692:	4649      	mov	r1, r9
 8009694:	461f      	mov	r7, r3
 8009696:	1136      	asrs	r6, r6, #4
 8009698:	2e01      	cmp	r6, #1
 800969a:	dc21      	bgt.n	80096e0 <_strtod_l+0x518>
 800969c:	b10b      	cbz	r3, 80096a2 <_strtod_l+0x4da>
 800969e:	4680      	mov	r8, r0
 80096a0:	4689      	mov	r9, r1
 80096a2:	4b2e      	ldr	r3, [pc, #184]	; (800975c <_strtod_l+0x594>)
 80096a4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80096a8:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80096ac:	4642      	mov	r2, r8
 80096ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096b2:	464b      	mov	r3, r9
 80096b4:	f7f6 ff10 	bl	80004d8 <__aeabi_dmul>
 80096b8:	4b29      	ldr	r3, [pc, #164]	; (8009760 <_strtod_l+0x598>)
 80096ba:	460a      	mov	r2, r1
 80096bc:	400b      	ands	r3, r1
 80096be:	4929      	ldr	r1, [pc, #164]	; (8009764 <_strtod_l+0x59c>)
 80096c0:	4680      	mov	r8, r0
 80096c2:	428b      	cmp	r3, r1
 80096c4:	d8bb      	bhi.n	800963e <_strtod_l+0x476>
 80096c6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80096ca:	428b      	cmp	r3, r1
 80096cc:	bf86      	itte	hi
 80096ce:	f04f 38ff 	movhi.w	r8, #4294967295
 80096d2:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009768 <_strtod_l+0x5a0>
 80096d6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80096da:	2300      	movs	r3, #0
 80096dc:	9305      	str	r3, [sp, #20]
 80096de:	e07e      	b.n	80097de <_strtod_l+0x616>
 80096e0:	07f2      	lsls	r2, r6, #31
 80096e2:	d507      	bpl.n	80096f4 <_strtod_l+0x52c>
 80096e4:	4b1d      	ldr	r3, [pc, #116]	; (800975c <_strtod_l+0x594>)
 80096e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80096ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ee:	f7f6 fef3 	bl	80004d8 <__aeabi_dmul>
 80096f2:	2301      	movs	r3, #1
 80096f4:	3701      	adds	r7, #1
 80096f6:	1076      	asrs	r6, r6, #1
 80096f8:	e7ce      	b.n	8009698 <_strtod_l+0x4d0>
 80096fa:	d0ee      	beq.n	80096da <_strtod_l+0x512>
 80096fc:	4276      	negs	r6, r6
 80096fe:	f016 020f 	ands.w	r2, r6, #15
 8009702:	d00a      	beq.n	800971a <_strtod_l+0x552>
 8009704:	4b14      	ldr	r3, [pc, #80]	; (8009758 <_strtod_l+0x590>)
 8009706:	4640      	mov	r0, r8
 8009708:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800970c:	4649      	mov	r1, r9
 800970e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009712:	f7f7 f80b 	bl	800072c <__aeabi_ddiv>
 8009716:	4680      	mov	r8, r0
 8009718:	4689      	mov	r9, r1
 800971a:	1136      	asrs	r6, r6, #4
 800971c:	d0dd      	beq.n	80096da <_strtod_l+0x512>
 800971e:	2e1f      	cmp	r6, #31
 8009720:	dd24      	ble.n	800976c <_strtod_l+0x5a4>
 8009722:	f04f 0b00 	mov.w	fp, #0
 8009726:	f8cd b010 	str.w	fp, [sp, #16]
 800972a:	f8cd b020 	str.w	fp, [sp, #32]
 800972e:	f8cd b018 	str.w	fp, [sp, #24]
 8009732:	2322      	movs	r3, #34	; 0x22
 8009734:	f04f 0800 	mov.w	r8, #0
 8009738:	f04f 0900 	mov.w	r9, #0
 800973c:	f8ca 3000 	str.w	r3, [sl]
 8009740:	e78c      	b.n	800965c <_strtod_l+0x494>
 8009742:	bf00      	nop
 8009744:	0800c8e6 	.word	0x0800c8e6
 8009748:	0800c928 	.word	0x0800c928
 800974c:	0800c8de 	.word	0x0800c8de
 8009750:	0800ca6c 	.word	0x0800ca6c
 8009754:	0800c8c3 	.word	0x0800c8c3
 8009758:	0800cc68 	.word	0x0800cc68
 800975c:	0800cc40 	.word	0x0800cc40
 8009760:	7ff00000 	.word	0x7ff00000
 8009764:	7ca00000 	.word	0x7ca00000
 8009768:	7fefffff 	.word	0x7fefffff
 800976c:	f016 0310 	ands.w	r3, r6, #16
 8009770:	bf18      	it	ne
 8009772:	236a      	movne	r3, #106	; 0x6a
 8009774:	4640      	mov	r0, r8
 8009776:	9305      	str	r3, [sp, #20]
 8009778:	4649      	mov	r1, r9
 800977a:	2300      	movs	r3, #0
 800977c:	4fb2      	ldr	r7, [pc, #712]	; (8009a48 <_strtod_l+0x880>)
 800977e:	07f2      	lsls	r2, r6, #31
 8009780:	d504      	bpl.n	800978c <_strtod_l+0x5c4>
 8009782:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009786:	f7f6 fea7 	bl	80004d8 <__aeabi_dmul>
 800978a:	2301      	movs	r3, #1
 800978c:	1076      	asrs	r6, r6, #1
 800978e:	f107 0708 	add.w	r7, r7, #8
 8009792:	d1f4      	bne.n	800977e <_strtod_l+0x5b6>
 8009794:	b10b      	cbz	r3, 800979a <_strtod_l+0x5d2>
 8009796:	4680      	mov	r8, r0
 8009798:	4689      	mov	r9, r1
 800979a:	9b05      	ldr	r3, [sp, #20]
 800979c:	b1bb      	cbz	r3, 80097ce <_strtod_l+0x606>
 800979e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80097a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	4649      	mov	r1, r9
 80097aa:	dd10      	ble.n	80097ce <_strtod_l+0x606>
 80097ac:	2b1f      	cmp	r3, #31
 80097ae:	f340 812b 	ble.w	8009a08 <_strtod_l+0x840>
 80097b2:	2b34      	cmp	r3, #52	; 0x34
 80097b4:	bfd8      	it	le
 80097b6:	f04f 32ff 	movle.w	r2, #4294967295
 80097ba:	f04f 0800 	mov.w	r8, #0
 80097be:	bfcf      	iteee	gt
 80097c0:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80097c4:	3b20      	suble	r3, #32
 80097c6:	fa02 f303 	lslle.w	r3, r2, r3
 80097ca:	ea03 0901 	andle.w	r9, r3, r1
 80097ce:	2200      	movs	r2, #0
 80097d0:	2300      	movs	r3, #0
 80097d2:	4640      	mov	r0, r8
 80097d4:	4649      	mov	r1, r9
 80097d6:	f7f7 f8e7 	bl	80009a8 <__aeabi_dcmpeq>
 80097da:	2800      	cmp	r0, #0
 80097dc:	d1a1      	bne.n	8009722 <_strtod_l+0x55a>
 80097de:	9b06      	ldr	r3, [sp, #24]
 80097e0:	465a      	mov	r2, fp
 80097e2:	9300      	str	r3, [sp, #0]
 80097e4:	4650      	mov	r0, sl
 80097e6:	4623      	mov	r3, r4
 80097e8:	9908      	ldr	r1, [sp, #32]
 80097ea:	f002 f92f 	bl	800ba4c <__s2b>
 80097ee:	9008      	str	r0, [sp, #32]
 80097f0:	2800      	cmp	r0, #0
 80097f2:	f43f af24 	beq.w	800963e <_strtod_l+0x476>
 80097f6:	9b04      	ldr	r3, [sp, #16]
 80097f8:	f04f 0b00 	mov.w	fp, #0
 80097fc:	1b5d      	subs	r5, r3, r5
 80097fe:	9b07      	ldr	r3, [sp, #28]
 8009800:	f8cd b010 	str.w	fp, [sp, #16]
 8009804:	2b00      	cmp	r3, #0
 8009806:	bfb4      	ite	lt
 8009808:	462b      	movlt	r3, r5
 800980a:	2300      	movge	r3, #0
 800980c:	930e      	str	r3, [sp, #56]	; 0x38
 800980e:	9b07      	ldr	r3, [sp, #28]
 8009810:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009814:	9316      	str	r3, [sp, #88]	; 0x58
 8009816:	9b08      	ldr	r3, [sp, #32]
 8009818:	4650      	mov	r0, sl
 800981a:	6859      	ldr	r1, [r3, #4]
 800981c:	f002 f86a 	bl	800b8f4 <_Balloc>
 8009820:	9006      	str	r0, [sp, #24]
 8009822:	2800      	cmp	r0, #0
 8009824:	f43f af13 	beq.w	800964e <_strtod_l+0x486>
 8009828:	9b08      	ldr	r3, [sp, #32]
 800982a:	300c      	adds	r0, #12
 800982c:	691a      	ldr	r2, [r3, #16]
 800982e:	f103 010c 	add.w	r1, r3, #12
 8009832:	3202      	adds	r2, #2
 8009834:	0092      	lsls	r2, r2, #2
 8009836:	f7fe fbeb 	bl	8008010 <memcpy>
 800983a:	ab1e      	add	r3, sp, #120	; 0x78
 800983c:	9301      	str	r3, [sp, #4]
 800983e:	ab1d      	add	r3, sp, #116	; 0x74
 8009840:	9300      	str	r3, [sp, #0]
 8009842:	4642      	mov	r2, r8
 8009844:	464b      	mov	r3, r9
 8009846:	4650      	mov	r0, sl
 8009848:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800984c:	f002 fc3c 	bl	800c0c8 <__d2b>
 8009850:	901c      	str	r0, [sp, #112]	; 0x70
 8009852:	2800      	cmp	r0, #0
 8009854:	f43f aefb 	beq.w	800964e <_strtod_l+0x486>
 8009858:	2101      	movs	r1, #1
 800985a:	4650      	mov	r0, sl
 800985c:	f002 f98e 	bl	800bb7c <__i2b>
 8009860:	4603      	mov	r3, r0
 8009862:	9004      	str	r0, [sp, #16]
 8009864:	2800      	cmp	r0, #0
 8009866:	f43f aef2 	beq.w	800964e <_strtod_l+0x486>
 800986a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800986c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800986e:	2d00      	cmp	r5, #0
 8009870:	bfab      	itete	ge
 8009872:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009874:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009876:	18ee      	addge	r6, r5, r3
 8009878:	1b5c      	sublt	r4, r3, r5
 800987a:	9b05      	ldr	r3, [sp, #20]
 800987c:	bfa8      	it	ge
 800987e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8009880:	eba5 0503 	sub.w	r5, r5, r3
 8009884:	4415      	add	r5, r2
 8009886:	4b71      	ldr	r3, [pc, #452]	; (8009a4c <_strtod_l+0x884>)
 8009888:	f105 35ff 	add.w	r5, r5, #4294967295
 800988c:	bfb8      	it	lt
 800988e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8009890:	429d      	cmp	r5, r3
 8009892:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009896:	f280 80c9 	bge.w	8009a2c <_strtod_l+0x864>
 800989a:	1b5b      	subs	r3, r3, r5
 800989c:	2b1f      	cmp	r3, #31
 800989e:	f04f 0701 	mov.w	r7, #1
 80098a2:	eba2 0203 	sub.w	r2, r2, r3
 80098a6:	f300 80b6 	bgt.w	8009a16 <_strtod_l+0x84e>
 80098aa:	2500      	movs	r5, #0
 80098ac:	fa07 f303 	lsl.w	r3, r7, r3
 80098b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80098b2:	18b7      	adds	r7, r6, r2
 80098b4:	9b05      	ldr	r3, [sp, #20]
 80098b6:	42be      	cmp	r6, r7
 80098b8:	4414      	add	r4, r2
 80098ba:	441c      	add	r4, r3
 80098bc:	4633      	mov	r3, r6
 80098be:	bfa8      	it	ge
 80098c0:	463b      	movge	r3, r7
 80098c2:	42a3      	cmp	r3, r4
 80098c4:	bfa8      	it	ge
 80098c6:	4623      	movge	r3, r4
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	bfc2      	ittt	gt
 80098cc:	1aff      	subgt	r7, r7, r3
 80098ce:	1ae4      	subgt	r4, r4, r3
 80098d0:	1af6      	subgt	r6, r6, r3
 80098d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	dd17      	ble.n	8009908 <_strtod_l+0x740>
 80098d8:	461a      	mov	r2, r3
 80098da:	4650      	mov	r0, sl
 80098dc:	9904      	ldr	r1, [sp, #16]
 80098de:	f002 fa07 	bl	800bcf0 <__pow5mult>
 80098e2:	9004      	str	r0, [sp, #16]
 80098e4:	2800      	cmp	r0, #0
 80098e6:	f43f aeb2 	beq.w	800964e <_strtod_l+0x486>
 80098ea:	4601      	mov	r1, r0
 80098ec:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80098ee:	4650      	mov	r0, sl
 80098f0:	f002 f95a 	bl	800bba8 <__multiply>
 80098f4:	9009      	str	r0, [sp, #36]	; 0x24
 80098f6:	2800      	cmp	r0, #0
 80098f8:	f43f aea9 	beq.w	800964e <_strtod_l+0x486>
 80098fc:	4650      	mov	r0, sl
 80098fe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009900:	f002 f838 	bl	800b974 <_Bfree>
 8009904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009906:	931c      	str	r3, [sp, #112]	; 0x70
 8009908:	2f00      	cmp	r7, #0
 800990a:	f300 8093 	bgt.w	8009a34 <_strtod_l+0x86c>
 800990e:	9b07      	ldr	r3, [sp, #28]
 8009910:	2b00      	cmp	r3, #0
 8009912:	dd08      	ble.n	8009926 <_strtod_l+0x75e>
 8009914:	4650      	mov	r0, sl
 8009916:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009918:	9906      	ldr	r1, [sp, #24]
 800991a:	f002 f9e9 	bl	800bcf0 <__pow5mult>
 800991e:	9006      	str	r0, [sp, #24]
 8009920:	2800      	cmp	r0, #0
 8009922:	f43f ae94 	beq.w	800964e <_strtod_l+0x486>
 8009926:	2c00      	cmp	r4, #0
 8009928:	dd08      	ble.n	800993c <_strtod_l+0x774>
 800992a:	4622      	mov	r2, r4
 800992c:	4650      	mov	r0, sl
 800992e:	9906      	ldr	r1, [sp, #24]
 8009930:	f002 fa38 	bl	800bda4 <__lshift>
 8009934:	9006      	str	r0, [sp, #24]
 8009936:	2800      	cmp	r0, #0
 8009938:	f43f ae89 	beq.w	800964e <_strtod_l+0x486>
 800993c:	2e00      	cmp	r6, #0
 800993e:	dd08      	ble.n	8009952 <_strtod_l+0x78a>
 8009940:	4632      	mov	r2, r6
 8009942:	4650      	mov	r0, sl
 8009944:	9904      	ldr	r1, [sp, #16]
 8009946:	f002 fa2d 	bl	800bda4 <__lshift>
 800994a:	9004      	str	r0, [sp, #16]
 800994c:	2800      	cmp	r0, #0
 800994e:	f43f ae7e 	beq.w	800964e <_strtod_l+0x486>
 8009952:	4650      	mov	r0, sl
 8009954:	9a06      	ldr	r2, [sp, #24]
 8009956:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009958:	f002 faac 	bl	800beb4 <__mdiff>
 800995c:	4683      	mov	fp, r0
 800995e:	2800      	cmp	r0, #0
 8009960:	f43f ae75 	beq.w	800964e <_strtod_l+0x486>
 8009964:	2400      	movs	r4, #0
 8009966:	68c3      	ldr	r3, [r0, #12]
 8009968:	9904      	ldr	r1, [sp, #16]
 800996a:	60c4      	str	r4, [r0, #12]
 800996c:	930d      	str	r3, [sp, #52]	; 0x34
 800996e:	f002 fa85 	bl	800be7c <__mcmp>
 8009972:	42a0      	cmp	r0, r4
 8009974:	da70      	bge.n	8009a58 <_strtod_l+0x890>
 8009976:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009978:	ea53 0308 	orrs.w	r3, r3, r8
 800997c:	f040 8096 	bne.w	8009aac <_strtod_l+0x8e4>
 8009980:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009984:	2b00      	cmp	r3, #0
 8009986:	f040 8091 	bne.w	8009aac <_strtod_l+0x8e4>
 800998a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800998e:	0d1b      	lsrs	r3, r3, #20
 8009990:	051b      	lsls	r3, r3, #20
 8009992:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009996:	f240 8089 	bls.w	8009aac <_strtod_l+0x8e4>
 800999a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800999e:	b923      	cbnz	r3, 80099aa <_strtod_l+0x7e2>
 80099a0:	f8db 3010 	ldr.w	r3, [fp, #16]
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	f340 8081 	ble.w	8009aac <_strtod_l+0x8e4>
 80099aa:	4659      	mov	r1, fp
 80099ac:	2201      	movs	r2, #1
 80099ae:	4650      	mov	r0, sl
 80099b0:	f002 f9f8 	bl	800bda4 <__lshift>
 80099b4:	9904      	ldr	r1, [sp, #16]
 80099b6:	4683      	mov	fp, r0
 80099b8:	f002 fa60 	bl	800be7c <__mcmp>
 80099bc:	2800      	cmp	r0, #0
 80099be:	dd75      	ble.n	8009aac <_strtod_l+0x8e4>
 80099c0:	9905      	ldr	r1, [sp, #20]
 80099c2:	464b      	mov	r3, r9
 80099c4:	4a22      	ldr	r2, [pc, #136]	; (8009a50 <_strtod_l+0x888>)
 80099c6:	2900      	cmp	r1, #0
 80099c8:	f000 8091 	beq.w	8009aee <_strtod_l+0x926>
 80099cc:	ea02 0109 	and.w	r1, r2, r9
 80099d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80099d4:	f300 808b 	bgt.w	8009aee <_strtod_l+0x926>
 80099d8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80099dc:	f77f aea9 	ble.w	8009732 <_strtod_l+0x56a>
 80099e0:	2300      	movs	r3, #0
 80099e2:	4a1c      	ldr	r2, [pc, #112]	; (8009a54 <_strtod_l+0x88c>)
 80099e4:	4640      	mov	r0, r8
 80099e6:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80099ea:	4649      	mov	r1, r9
 80099ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80099f0:	f7f6 fd72 	bl	80004d8 <__aeabi_dmul>
 80099f4:	460b      	mov	r3, r1
 80099f6:	4303      	orrs	r3, r0
 80099f8:	bf08      	it	eq
 80099fa:	2322      	moveq	r3, #34	; 0x22
 80099fc:	4680      	mov	r8, r0
 80099fe:	4689      	mov	r9, r1
 8009a00:	bf08      	it	eq
 8009a02:	f8ca 3000 	streq.w	r3, [sl]
 8009a06:	e62d      	b.n	8009664 <_strtod_l+0x49c>
 8009a08:	f04f 32ff 	mov.w	r2, #4294967295
 8009a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a10:	ea03 0808 	and.w	r8, r3, r8
 8009a14:	e6db      	b.n	80097ce <_strtod_l+0x606>
 8009a16:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8009a1a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8009a1e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8009a22:	35e2      	adds	r5, #226	; 0xe2
 8009a24:	fa07 f505 	lsl.w	r5, r7, r5
 8009a28:	970f      	str	r7, [sp, #60]	; 0x3c
 8009a2a:	e742      	b.n	80098b2 <_strtod_l+0x6ea>
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	2500      	movs	r5, #0
 8009a30:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a32:	e73e      	b.n	80098b2 <_strtod_l+0x6ea>
 8009a34:	463a      	mov	r2, r7
 8009a36:	4650      	mov	r0, sl
 8009a38:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009a3a:	f002 f9b3 	bl	800bda4 <__lshift>
 8009a3e:	901c      	str	r0, [sp, #112]	; 0x70
 8009a40:	2800      	cmp	r0, #0
 8009a42:	f47f af64 	bne.w	800990e <_strtod_l+0x746>
 8009a46:	e602      	b.n	800964e <_strtod_l+0x486>
 8009a48:	0800c940 	.word	0x0800c940
 8009a4c:	fffffc02 	.word	0xfffffc02
 8009a50:	7ff00000 	.word	0x7ff00000
 8009a54:	39500000 	.word	0x39500000
 8009a58:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009a5c:	d166      	bne.n	8009b2c <_strtod_l+0x964>
 8009a5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a64:	b35a      	cbz	r2, 8009abe <_strtod_l+0x8f6>
 8009a66:	4a9c      	ldr	r2, [pc, #624]	; (8009cd8 <_strtod_l+0xb10>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d12c      	bne.n	8009ac6 <_strtod_l+0x8fe>
 8009a6c:	9b05      	ldr	r3, [sp, #20]
 8009a6e:	4640      	mov	r0, r8
 8009a70:	b303      	cbz	r3, 8009ab4 <_strtod_l+0x8ec>
 8009a72:	464b      	mov	r3, r9
 8009a74:	4a99      	ldr	r2, [pc, #612]	; (8009cdc <_strtod_l+0xb14>)
 8009a76:	f04f 31ff 	mov.w	r1, #4294967295
 8009a7a:	401a      	ands	r2, r3
 8009a7c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009a80:	d81b      	bhi.n	8009aba <_strtod_l+0x8f2>
 8009a82:	0d12      	lsrs	r2, r2, #20
 8009a84:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009a88:	fa01 f303 	lsl.w	r3, r1, r3
 8009a8c:	4298      	cmp	r0, r3
 8009a8e:	d11a      	bne.n	8009ac6 <_strtod_l+0x8fe>
 8009a90:	4b93      	ldr	r3, [pc, #588]	; (8009ce0 <_strtod_l+0xb18>)
 8009a92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d102      	bne.n	8009a9e <_strtod_l+0x8d6>
 8009a98:	3001      	adds	r0, #1
 8009a9a:	f43f add8 	beq.w	800964e <_strtod_l+0x486>
 8009a9e:	f04f 0800 	mov.w	r8, #0
 8009aa2:	4b8e      	ldr	r3, [pc, #568]	; (8009cdc <_strtod_l+0xb14>)
 8009aa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009aa6:	401a      	ands	r2, r3
 8009aa8:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8009aac:	9b05      	ldr	r3, [sp, #20]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d196      	bne.n	80099e0 <_strtod_l+0x818>
 8009ab2:	e5d7      	b.n	8009664 <_strtod_l+0x49c>
 8009ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ab8:	e7e8      	b.n	8009a8c <_strtod_l+0x8c4>
 8009aba:	460b      	mov	r3, r1
 8009abc:	e7e6      	b.n	8009a8c <_strtod_l+0x8c4>
 8009abe:	ea53 0308 	orrs.w	r3, r3, r8
 8009ac2:	f43f af7d 	beq.w	80099c0 <_strtod_l+0x7f8>
 8009ac6:	b1e5      	cbz	r5, 8009b02 <_strtod_l+0x93a>
 8009ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aca:	421d      	tst	r5, r3
 8009acc:	d0ee      	beq.n	8009aac <_strtod_l+0x8e4>
 8009ace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ad0:	4640      	mov	r0, r8
 8009ad2:	4649      	mov	r1, r9
 8009ad4:	9a05      	ldr	r2, [sp, #20]
 8009ad6:	b1c3      	cbz	r3, 8009b0a <_strtod_l+0x942>
 8009ad8:	f7ff fb54 	bl	8009184 <sulp>
 8009adc:	4602      	mov	r2, r0
 8009ade:	460b      	mov	r3, r1
 8009ae0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009ae4:	f7f6 fb42 	bl	800016c <__adddf3>
 8009ae8:	4680      	mov	r8, r0
 8009aea:	4689      	mov	r9, r1
 8009aec:	e7de      	b.n	8009aac <_strtod_l+0x8e4>
 8009aee:	4013      	ands	r3, r2
 8009af0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009af4:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009af8:	f04f 38ff 	mov.w	r8, #4294967295
 8009afc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009b00:	e7d4      	b.n	8009aac <_strtod_l+0x8e4>
 8009b02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b04:	ea13 0f08 	tst.w	r3, r8
 8009b08:	e7e0      	b.n	8009acc <_strtod_l+0x904>
 8009b0a:	f7ff fb3b 	bl	8009184 <sulp>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	460b      	mov	r3, r1
 8009b12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009b16:	f7f6 fb27 	bl	8000168 <__aeabi_dsub>
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	4680      	mov	r8, r0
 8009b20:	4689      	mov	r9, r1
 8009b22:	f7f6 ff41 	bl	80009a8 <__aeabi_dcmpeq>
 8009b26:	2800      	cmp	r0, #0
 8009b28:	d0c0      	beq.n	8009aac <_strtod_l+0x8e4>
 8009b2a:	e602      	b.n	8009732 <_strtod_l+0x56a>
 8009b2c:	4658      	mov	r0, fp
 8009b2e:	9904      	ldr	r1, [sp, #16]
 8009b30:	f002 fb26 	bl	800c180 <__ratio>
 8009b34:	2200      	movs	r2, #0
 8009b36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009b3a:	4606      	mov	r6, r0
 8009b3c:	460f      	mov	r7, r1
 8009b3e:	f7f6 ff47 	bl	80009d0 <__aeabi_dcmple>
 8009b42:	2800      	cmp	r0, #0
 8009b44:	d075      	beq.n	8009c32 <_strtod_l+0xa6a>
 8009b46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d047      	beq.n	8009bdc <_strtod_l+0xa14>
 8009b4c:	2600      	movs	r6, #0
 8009b4e:	4f65      	ldr	r7, [pc, #404]	; (8009ce4 <_strtod_l+0xb1c>)
 8009b50:	4d64      	ldr	r5, [pc, #400]	; (8009ce4 <_strtod_l+0xb1c>)
 8009b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b58:	0d1b      	lsrs	r3, r3, #20
 8009b5a:	051b      	lsls	r3, r3, #20
 8009b5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009b60:	4b61      	ldr	r3, [pc, #388]	; (8009ce8 <_strtod_l+0xb20>)
 8009b62:	429a      	cmp	r2, r3
 8009b64:	f040 80c8 	bne.w	8009cf8 <_strtod_l+0xb30>
 8009b68:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009b6c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b72:	4640      	mov	r0, r8
 8009b74:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8009b78:	4649      	mov	r1, r9
 8009b7a:	f002 fa2b 	bl	800bfd4 <__ulp>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	460b      	mov	r3, r1
 8009b82:	4630      	mov	r0, r6
 8009b84:	4639      	mov	r1, r7
 8009b86:	f7f6 fca7 	bl	80004d8 <__aeabi_dmul>
 8009b8a:	4642      	mov	r2, r8
 8009b8c:	464b      	mov	r3, r9
 8009b8e:	f7f6 faed 	bl	800016c <__adddf3>
 8009b92:	460b      	mov	r3, r1
 8009b94:	4951      	ldr	r1, [pc, #324]	; (8009cdc <_strtod_l+0xb14>)
 8009b96:	4a55      	ldr	r2, [pc, #340]	; (8009cec <_strtod_l+0xb24>)
 8009b98:	4019      	ands	r1, r3
 8009b9a:	4291      	cmp	r1, r2
 8009b9c:	4680      	mov	r8, r0
 8009b9e:	d95e      	bls.n	8009c5e <_strtod_l+0xa96>
 8009ba0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ba2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d103      	bne.n	8009bb2 <_strtod_l+0x9ea>
 8009baa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bac:	3301      	adds	r3, #1
 8009bae:	f43f ad4e 	beq.w	800964e <_strtod_l+0x486>
 8009bb2:	f04f 38ff 	mov.w	r8, #4294967295
 8009bb6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8009ce0 <_strtod_l+0xb18>
 8009bba:	4650      	mov	r0, sl
 8009bbc:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009bbe:	f001 fed9 	bl	800b974 <_Bfree>
 8009bc2:	4650      	mov	r0, sl
 8009bc4:	9906      	ldr	r1, [sp, #24]
 8009bc6:	f001 fed5 	bl	800b974 <_Bfree>
 8009bca:	4650      	mov	r0, sl
 8009bcc:	9904      	ldr	r1, [sp, #16]
 8009bce:	f001 fed1 	bl	800b974 <_Bfree>
 8009bd2:	4659      	mov	r1, fp
 8009bd4:	4650      	mov	r0, sl
 8009bd6:	f001 fecd 	bl	800b974 <_Bfree>
 8009bda:	e61c      	b.n	8009816 <_strtod_l+0x64e>
 8009bdc:	f1b8 0f00 	cmp.w	r8, #0
 8009be0:	d119      	bne.n	8009c16 <_strtod_l+0xa4e>
 8009be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009be8:	b9e3      	cbnz	r3, 8009c24 <_strtod_l+0xa5c>
 8009bea:	2200      	movs	r2, #0
 8009bec:	4630      	mov	r0, r6
 8009bee:	4639      	mov	r1, r7
 8009bf0:	4b3c      	ldr	r3, [pc, #240]	; (8009ce4 <_strtod_l+0xb1c>)
 8009bf2:	f7f6 fee3 	bl	80009bc <__aeabi_dcmplt>
 8009bf6:	b9c8      	cbnz	r0, 8009c2c <_strtod_l+0xa64>
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	4630      	mov	r0, r6
 8009bfc:	4639      	mov	r1, r7
 8009bfe:	4b3c      	ldr	r3, [pc, #240]	; (8009cf0 <_strtod_l+0xb28>)
 8009c00:	f7f6 fc6a 	bl	80004d8 <__aeabi_dmul>
 8009c04:	4604      	mov	r4, r0
 8009c06:	460d      	mov	r5, r1
 8009c08:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009c0c:	9418      	str	r4, [sp, #96]	; 0x60
 8009c0e:	9319      	str	r3, [sp, #100]	; 0x64
 8009c10:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8009c14:	e79d      	b.n	8009b52 <_strtod_l+0x98a>
 8009c16:	f1b8 0f01 	cmp.w	r8, #1
 8009c1a:	d103      	bne.n	8009c24 <_strtod_l+0xa5c>
 8009c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	f43f ad87 	beq.w	8009732 <_strtod_l+0x56a>
 8009c24:	2600      	movs	r6, #0
 8009c26:	2400      	movs	r4, #0
 8009c28:	4f32      	ldr	r7, [pc, #200]	; (8009cf4 <_strtod_l+0xb2c>)
 8009c2a:	e791      	b.n	8009b50 <_strtod_l+0x988>
 8009c2c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8009c2e:	4d30      	ldr	r5, [pc, #192]	; (8009cf0 <_strtod_l+0xb28>)
 8009c30:	e7ea      	b.n	8009c08 <_strtod_l+0xa40>
 8009c32:	4b2f      	ldr	r3, [pc, #188]	; (8009cf0 <_strtod_l+0xb28>)
 8009c34:	2200      	movs	r2, #0
 8009c36:	4630      	mov	r0, r6
 8009c38:	4639      	mov	r1, r7
 8009c3a:	f7f6 fc4d 	bl	80004d8 <__aeabi_dmul>
 8009c3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c40:	4604      	mov	r4, r0
 8009c42:	460d      	mov	r5, r1
 8009c44:	b933      	cbnz	r3, 8009c54 <_strtod_l+0xa8c>
 8009c46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c4a:	9010      	str	r0, [sp, #64]	; 0x40
 8009c4c:	9311      	str	r3, [sp, #68]	; 0x44
 8009c4e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009c52:	e77e      	b.n	8009b52 <_strtod_l+0x98a>
 8009c54:	4602      	mov	r2, r0
 8009c56:	460b      	mov	r3, r1
 8009c58:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009c5c:	e7f7      	b.n	8009c4e <_strtod_l+0xa86>
 8009c5e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009c62:	9b05      	ldr	r3, [sp, #20]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d1a8      	bne.n	8009bba <_strtod_l+0x9f2>
 8009c68:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009c6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009c6e:	0d1b      	lsrs	r3, r3, #20
 8009c70:	051b      	lsls	r3, r3, #20
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d1a1      	bne.n	8009bba <_strtod_l+0x9f2>
 8009c76:	4620      	mov	r0, r4
 8009c78:	4629      	mov	r1, r5
 8009c7a:	f7f7 f9f9 	bl	8001070 <__aeabi_d2lz>
 8009c7e:	f7f6 fbfd 	bl	800047c <__aeabi_l2d>
 8009c82:	4602      	mov	r2, r0
 8009c84:	460b      	mov	r3, r1
 8009c86:	4620      	mov	r0, r4
 8009c88:	4629      	mov	r1, r5
 8009c8a:	f7f6 fa6d 	bl	8000168 <__aeabi_dsub>
 8009c8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c94:	ea43 0308 	orr.w	r3, r3, r8
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	4604      	mov	r4, r0
 8009c9c:	460d      	mov	r5, r1
 8009c9e:	d066      	beq.n	8009d6e <_strtod_l+0xba6>
 8009ca0:	a309      	add	r3, pc, #36	; (adr r3, 8009cc8 <_strtod_l+0xb00>)
 8009ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca6:	f7f6 fe89 	bl	80009bc <__aeabi_dcmplt>
 8009caa:	2800      	cmp	r0, #0
 8009cac:	f47f acda 	bne.w	8009664 <_strtod_l+0x49c>
 8009cb0:	a307      	add	r3, pc, #28	; (adr r3, 8009cd0 <_strtod_l+0xb08>)
 8009cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	4629      	mov	r1, r5
 8009cba:	f7f6 fe9d 	bl	80009f8 <__aeabi_dcmpgt>
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	f43f af7b 	beq.w	8009bba <_strtod_l+0x9f2>
 8009cc4:	e4ce      	b.n	8009664 <_strtod_l+0x49c>
 8009cc6:	bf00      	nop
 8009cc8:	94a03595 	.word	0x94a03595
 8009ccc:	3fdfffff 	.word	0x3fdfffff
 8009cd0:	35afe535 	.word	0x35afe535
 8009cd4:	3fe00000 	.word	0x3fe00000
 8009cd8:	000fffff 	.word	0x000fffff
 8009cdc:	7ff00000 	.word	0x7ff00000
 8009ce0:	7fefffff 	.word	0x7fefffff
 8009ce4:	3ff00000 	.word	0x3ff00000
 8009ce8:	7fe00000 	.word	0x7fe00000
 8009cec:	7c9fffff 	.word	0x7c9fffff
 8009cf0:	3fe00000 	.word	0x3fe00000
 8009cf4:	bff00000 	.word	0xbff00000
 8009cf8:	9b05      	ldr	r3, [sp, #20]
 8009cfa:	b313      	cbz	r3, 8009d42 <_strtod_l+0xb7a>
 8009cfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009cfe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009d02:	d81e      	bhi.n	8009d42 <_strtod_l+0xb7a>
 8009d04:	a326      	add	r3, pc, #152	; (adr r3, 8009da0 <_strtod_l+0xbd8>)
 8009d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	4629      	mov	r1, r5
 8009d0e:	f7f6 fe5f 	bl	80009d0 <__aeabi_dcmple>
 8009d12:	b190      	cbz	r0, 8009d3a <_strtod_l+0xb72>
 8009d14:	4629      	mov	r1, r5
 8009d16:	4620      	mov	r0, r4
 8009d18:	f7f6 feb6 	bl	8000a88 <__aeabi_d2uiz>
 8009d1c:	2801      	cmp	r0, #1
 8009d1e:	bf38      	it	cc
 8009d20:	2001      	movcc	r0, #1
 8009d22:	f7f6 fb5f 	bl	80003e4 <__aeabi_ui2d>
 8009d26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d28:	4604      	mov	r4, r0
 8009d2a:	460d      	mov	r5, r1
 8009d2c:	b9d3      	cbnz	r3, 8009d64 <_strtod_l+0xb9c>
 8009d2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d32:	9012      	str	r0, [sp, #72]	; 0x48
 8009d34:	9313      	str	r3, [sp, #76]	; 0x4c
 8009d36:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8009d3a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d3c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8009d40:	1a9f      	subs	r7, r3, r2
 8009d42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009d46:	f002 f945 	bl	800bfd4 <__ulp>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	4630      	mov	r0, r6
 8009d50:	4639      	mov	r1, r7
 8009d52:	f7f6 fbc1 	bl	80004d8 <__aeabi_dmul>
 8009d56:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009d5a:	f7f6 fa07 	bl	800016c <__adddf3>
 8009d5e:	4680      	mov	r8, r0
 8009d60:	4689      	mov	r9, r1
 8009d62:	e77e      	b.n	8009c62 <_strtod_l+0xa9a>
 8009d64:	4602      	mov	r2, r0
 8009d66:	460b      	mov	r3, r1
 8009d68:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8009d6c:	e7e3      	b.n	8009d36 <_strtod_l+0xb6e>
 8009d6e:	a30e      	add	r3, pc, #56	; (adr r3, 8009da8 <_strtod_l+0xbe0>)
 8009d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d74:	f7f6 fe22 	bl	80009bc <__aeabi_dcmplt>
 8009d78:	e7a1      	b.n	8009cbe <_strtod_l+0xaf6>
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	930c      	str	r3, [sp, #48]	; 0x30
 8009d7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d80:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009d82:	6013      	str	r3, [r2, #0]
 8009d84:	f7ff ba65 	b.w	8009252 <_strtod_l+0x8a>
 8009d88:	2b65      	cmp	r3, #101	; 0x65
 8009d8a:	f43f ab5c 	beq.w	8009446 <_strtod_l+0x27e>
 8009d8e:	2b45      	cmp	r3, #69	; 0x45
 8009d90:	f43f ab59 	beq.w	8009446 <_strtod_l+0x27e>
 8009d94:	2201      	movs	r2, #1
 8009d96:	f7ff bb8d 	b.w	80094b4 <_strtod_l+0x2ec>
 8009d9a:	bf00      	nop
 8009d9c:	f3af 8000 	nop.w
 8009da0:	ffc00000 	.word	0xffc00000
 8009da4:	41dfffff 	.word	0x41dfffff
 8009da8:	94a03595 	.word	0x94a03595
 8009dac:	3fcfffff 	.word	0x3fcfffff

08009db0 <_strtod_r>:
 8009db0:	4b01      	ldr	r3, [pc, #4]	; (8009db8 <_strtod_r+0x8>)
 8009db2:	f7ff ba09 	b.w	80091c8 <_strtod_l>
 8009db6:	bf00      	nop
 8009db8:	200000bc 	.word	0x200000bc

08009dbc <_strtol_l.isra.0>:
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dc2:	4686      	mov	lr, r0
 8009dc4:	d001      	beq.n	8009dca <_strtol_l.isra.0+0xe>
 8009dc6:	2b24      	cmp	r3, #36	; 0x24
 8009dc8:	d906      	bls.n	8009dd8 <_strtol_l.isra.0+0x1c>
 8009dca:	f7fe f8dd 	bl	8007f88 <__errno>
 8009dce:	2316      	movs	r3, #22
 8009dd0:	6003      	str	r3, [r0, #0]
 8009dd2:	2000      	movs	r0, #0
 8009dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dd8:	468c      	mov	ip, r1
 8009dda:	4e3a      	ldr	r6, [pc, #232]	; (8009ec4 <_strtol_l.isra.0+0x108>)
 8009ddc:	4660      	mov	r0, ip
 8009dde:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009de2:	5da5      	ldrb	r5, [r4, r6]
 8009de4:	f015 0508 	ands.w	r5, r5, #8
 8009de8:	d1f8      	bne.n	8009ddc <_strtol_l.isra.0+0x20>
 8009dea:	2c2d      	cmp	r4, #45	; 0x2d
 8009dec:	d133      	bne.n	8009e56 <_strtol_l.isra.0+0x9a>
 8009dee:	f04f 0801 	mov.w	r8, #1
 8009df2:	f89c 4000 	ldrb.w	r4, [ip]
 8009df6:	f100 0c02 	add.w	ip, r0, #2
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d05d      	beq.n	8009eba <_strtol_l.isra.0+0xfe>
 8009dfe:	2b10      	cmp	r3, #16
 8009e00:	d10c      	bne.n	8009e1c <_strtol_l.isra.0+0x60>
 8009e02:	2c30      	cmp	r4, #48	; 0x30
 8009e04:	d10a      	bne.n	8009e1c <_strtol_l.isra.0+0x60>
 8009e06:	f89c 0000 	ldrb.w	r0, [ip]
 8009e0a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009e0e:	2858      	cmp	r0, #88	; 0x58
 8009e10:	d14e      	bne.n	8009eb0 <_strtol_l.isra.0+0xf4>
 8009e12:	2310      	movs	r3, #16
 8009e14:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8009e18:	f10c 0c02 	add.w	ip, ip, #2
 8009e1c:	2500      	movs	r5, #0
 8009e1e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8009e22:	3f01      	subs	r7, #1
 8009e24:	fbb7 f9f3 	udiv	r9, r7, r3
 8009e28:	4628      	mov	r0, r5
 8009e2a:	fb03 7a19 	mls	sl, r3, r9, r7
 8009e2e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8009e32:	2e09      	cmp	r6, #9
 8009e34:	d818      	bhi.n	8009e68 <_strtol_l.isra.0+0xac>
 8009e36:	4634      	mov	r4, r6
 8009e38:	42a3      	cmp	r3, r4
 8009e3a:	dd24      	ble.n	8009e86 <_strtol_l.isra.0+0xca>
 8009e3c:	2d00      	cmp	r5, #0
 8009e3e:	db1f      	blt.n	8009e80 <_strtol_l.isra.0+0xc4>
 8009e40:	4581      	cmp	r9, r0
 8009e42:	d31d      	bcc.n	8009e80 <_strtol_l.isra.0+0xc4>
 8009e44:	d101      	bne.n	8009e4a <_strtol_l.isra.0+0x8e>
 8009e46:	45a2      	cmp	sl, r4
 8009e48:	db1a      	blt.n	8009e80 <_strtol_l.isra.0+0xc4>
 8009e4a:	2501      	movs	r5, #1
 8009e4c:	fb00 4003 	mla	r0, r0, r3, r4
 8009e50:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009e54:	e7eb      	b.n	8009e2e <_strtol_l.isra.0+0x72>
 8009e56:	2c2b      	cmp	r4, #43	; 0x2b
 8009e58:	bf08      	it	eq
 8009e5a:	f89c 4000 	ldrbeq.w	r4, [ip]
 8009e5e:	46a8      	mov	r8, r5
 8009e60:	bf08      	it	eq
 8009e62:	f100 0c02 	addeq.w	ip, r0, #2
 8009e66:	e7c8      	b.n	8009dfa <_strtol_l.isra.0+0x3e>
 8009e68:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8009e6c:	2e19      	cmp	r6, #25
 8009e6e:	d801      	bhi.n	8009e74 <_strtol_l.isra.0+0xb8>
 8009e70:	3c37      	subs	r4, #55	; 0x37
 8009e72:	e7e1      	b.n	8009e38 <_strtol_l.isra.0+0x7c>
 8009e74:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8009e78:	2e19      	cmp	r6, #25
 8009e7a:	d804      	bhi.n	8009e86 <_strtol_l.isra.0+0xca>
 8009e7c:	3c57      	subs	r4, #87	; 0x57
 8009e7e:	e7db      	b.n	8009e38 <_strtol_l.isra.0+0x7c>
 8009e80:	f04f 35ff 	mov.w	r5, #4294967295
 8009e84:	e7e4      	b.n	8009e50 <_strtol_l.isra.0+0x94>
 8009e86:	2d00      	cmp	r5, #0
 8009e88:	da08      	bge.n	8009e9c <_strtol_l.isra.0+0xe0>
 8009e8a:	2322      	movs	r3, #34	; 0x22
 8009e8c:	4638      	mov	r0, r7
 8009e8e:	f8ce 3000 	str.w	r3, [lr]
 8009e92:	2a00      	cmp	r2, #0
 8009e94:	d09e      	beq.n	8009dd4 <_strtol_l.isra.0+0x18>
 8009e96:	f10c 31ff 	add.w	r1, ip, #4294967295
 8009e9a:	e007      	b.n	8009eac <_strtol_l.isra.0+0xf0>
 8009e9c:	f1b8 0f00 	cmp.w	r8, #0
 8009ea0:	d000      	beq.n	8009ea4 <_strtol_l.isra.0+0xe8>
 8009ea2:	4240      	negs	r0, r0
 8009ea4:	2a00      	cmp	r2, #0
 8009ea6:	d095      	beq.n	8009dd4 <_strtol_l.isra.0+0x18>
 8009ea8:	2d00      	cmp	r5, #0
 8009eaa:	d1f4      	bne.n	8009e96 <_strtol_l.isra.0+0xda>
 8009eac:	6011      	str	r1, [r2, #0]
 8009eae:	e791      	b.n	8009dd4 <_strtol_l.isra.0+0x18>
 8009eb0:	2430      	movs	r4, #48	; 0x30
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d1b2      	bne.n	8009e1c <_strtol_l.isra.0+0x60>
 8009eb6:	2308      	movs	r3, #8
 8009eb8:	e7b0      	b.n	8009e1c <_strtol_l.isra.0+0x60>
 8009eba:	2c30      	cmp	r4, #48	; 0x30
 8009ebc:	d0a3      	beq.n	8009e06 <_strtol_l.isra.0+0x4a>
 8009ebe:	230a      	movs	r3, #10
 8009ec0:	e7ac      	b.n	8009e1c <_strtol_l.isra.0+0x60>
 8009ec2:	bf00      	nop
 8009ec4:	0800c969 	.word	0x0800c969

08009ec8 <_strtol_r>:
 8009ec8:	f7ff bf78 	b.w	8009dbc <_strtol_l.isra.0>

08009ecc <__swbuf_r>:
 8009ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ece:	460e      	mov	r6, r1
 8009ed0:	4614      	mov	r4, r2
 8009ed2:	4605      	mov	r5, r0
 8009ed4:	b118      	cbz	r0, 8009ede <__swbuf_r+0x12>
 8009ed6:	6983      	ldr	r3, [r0, #24]
 8009ed8:	b90b      	cbnz	r3, 8009ede <__swbuf_r+0x12>
 8009eda:	f001 f855 	bl	800af88 <__sinit>
 8009ede:	4b21      	ldr	r3, [pc, #132]	; (8009f64 <__swbuf_r+0x98>)
 8009ee0:	429c      	cmp	r4, r3
 8009ee2:	d12b      	bne.n	8009f3c <__swbuf_r+0x70>
 8009ee4:	686c      	ldr	r4, [r5, #4]
 8009ee6:	69a3      	ldr	r3, [r4, #24]
 8009ee8:	60a3      	str	r3, [r4, #8]
 8009eea:	89a3      	ldrh	r3, [r4, #12]
 8009eec:	071a      	lsls	r2, r3, #28
 8009eee:	d52f      	bpl.n	8009f50 <__swbuf_r+0x84>
 8009ef0:	6923      	ldr	r3, [r4, #16]
 8009ef2:	b36b      	cbz	r3, 8009f50 <__swbuf_r+0x84>
 8009ef4:	6923      	ldr	r3, [r4, #16]
 8009ef6:	6820      	ldr	r0, [r4, #0]
 8009ef8:	b2f6      	uxtb	r6, r6
 8009efa:	1ac0      	subs	r0, r0, r3
 8009efc:	6963      	ldr	r3, [r4, #20]
 8009efe:	4637      	mov	r7, r6
 8009f00:	4283      	cmp	r3, r0
 8009f02:	dc04      	bgt.n	8009f0e <__swbuf_r+0x42>
 8009f04:	4621      	mov	r1, r4
 8009f06:	4628      	mov	r0, r5
 8009f08:	f000 ffaa 	bl	800ae60 <_fflush_r>
 8009f0c:	bb30      	cbnz	r0, 8009f5c <__swbuf_r+0x90>
 8009f0e:	68a3      	ldr	r3, [r4, #8]
 8009f10:	3001      	adds	r0, #1
 8009f12:	3b01      	subs	r3, #1
 8009f14:	60a3      	str	r3, [r4, #8]
 8009f16:	6823      	ldr	r3, [r4, #0]
 8009f18:	1c5a      	adds	r2, r3, #1
 8009f1a:	6022      	str	r2, [r4, #0]
 8009f1c:	701e      	strb	r6, [r3, #0]
 8009f1e:	6963      	ldr	r3, [r4, #20]
 8009f20:	4283      	cmp	r3, r0
 8009f22:	d004      	beq.n	8009f2e <__swbuf_r+0x62>
 8009f24:	89a3      	ldrh	r3, [r4, #12]
 8009f26:	07db      	lsls	r3, r3, #31
 8009f28:	d506      	bpl.n	8009f38 <__swbuf_r+0x6c>
 8009f2a:	2e0a      	cmp	r6, #10
 8009f2c:	d104      	bne.n	8009f38 <__swbuf_r+0x6c>
 8009f2e:	4621      	mov	r1, r4
 8009f30:	4628      	mov	r0, r5
 8009f32:	f000 ff95 	bl	800ae60 <_fflush_r>
 8009f36:	b988      	cbnz	r0, 8009f5c <__swbuf_r+0x90>
 8009f38:	4638      	mov	r0, r7
 8009f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f3c:	4b0a      	ldr	r3, [pc, #40]	; (8009f68 <__swbuf_r+0x9c>)
 8009f3e:	429c      	cmp	r4, r3
 8009f40:	d101      	bne.n	8009f46 <__swbuf_r+0x7a>
 8009f42:	68ac      	ldr	r4, [r5, #8]
 8009f44:	e7cf      	b.n	8009ee6 <__swbuf_r+0x1a>
 8009f46:	4b09      	ldr	r3, [pc, #36]	; (8009f6c <__swbuf_r+0xa0>)
 8009f48:	429c      	cmp	r4, r3
 8009f4a:	bf08      	it	eq
 8009f4c:	68ec      	ldreq	r4, [r5, #12]
 8009f4e:	e7ca      	b.n	8009ee6 <__swbuf_r+0x1a>
 8009f50:	4621      	mov	r1, r4
 8009f52:	4628      	mov	r0, r5
 8009f54:	f000 f80c 	bl	8009f70 <__swsetup_r>
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	d0cb      	beq.n	8009ef4 <__swbuf_r+0x28>
 8009f5c:	f04f 37ff 	mov.w	r7, #4294967295
 8009f60:	e7ea      	b.n	8009f38 <__swbuf_r+0x6c>
 8009f62:	bf00      	nop
 8009f64:	0800cb20 	.word	0x0800cb20
 8009f68:	0800cb40 	.word	0x0800cb40
 8009f6c:	0800cb00 	.word	0x0800cb00

08009f70 <__swsetup_r>:
 8009f70:	4b32      	ldr	r3, [pc, #200]	; (800a03c <__swsetup_r+0xcc>)
 8009f72:	b570      	push	{r4, r5, r6, lr}
 8009f74:	681d      	ldr	r5, [r3, #0]
 8009f76:	4606      	mov	r6, r0
 8009f78:	460c      	mov	r4, r1
 8009f7a:	b125      	cbz	r5, 8009f86 <__swsetup_r+0x16>
 8009f7c:	69ab      	ldr	r3, [r5, #24]
 8009f7e:	b913      	cbnz	r3, 8009f86 <__swsetup_r+0x16>
 8009f80:	4628      	mov	r0, r5
 8009f82:	f001 f801 	bl	800af88 <__sinit>
 8009f86:	4b2e      	ldr	r3, [pc, #184]	; (800a040 <__swsetup_r+0xd0>)
 8009f88:	429c      	cmp	r4, r3
 8009f8a:	d10f      	bne.n	8009fac <__swsetup_r+0x3c>
 8009f8c:	686c      	ldr	r4, [r5, #4]
 8009f8e:	89a3      	ldrh	r3, [r4, #12]
 8009f90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f94:	0719      	lsls	r1, r3, #28
 8009f96:	d42c      	bmi.n	8009ff2 <__swsetup_r+0x82>
 8009f98:	06dd      	lsls	r5, r3, #27
 8009f9a:	d411      	bmi.n	8009fc0 <__swsetup_r+0x50>
 8009f9c:	2309      	movs	r3, #9
 8009f9e:	6033      	str	r3, [r6, #0]
 8009fa0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa8:	81a3      	strh	r3, [r4, #12]
 8009faa:	e03e      	b.n	800a02a <__swsetup_r+0xba>
 8009fac:	4b25      	ldr	r3, [pc, #148]	; (800a044 <__swsetup_r+0xd4>)
 8009fae:	429c      	cmp	r4, r3
 8009fb0:	d101      	bne.n	8009fb6 <__swsetup_r+0x46>
 8009fb2:	68ac      	ldr	r4, [r5, #8]
 8009fb4:	e7eb      	b.n	8009f8e <__swsetup_r+0x1e>
 8009fb6:	4b24      	ldr	r3, [pc, #144]	; (800a048 <__swsetup_r+0xd8>)
 8009fb8:	429c      	cmp	r4, r3
 8009fba:	bf08      	it	eq
 8009fbc:	68ec      	ldreq	r4, [r5, #12]
 8009fbe:	e7e6      	b.n	8009f8e <__swsetup_r+0x1e>
 8009fc0:	0758      	lsls	r0, r3, #29
 8009fc2:	d512      	bpl.n	8009fea <__swsetup_r+0x7a>
 8009fc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fc6:	b141      	cbz	r1, 8009fda <__swsetup_r+0x6a>
 8009fc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fcc:	4299      	cmp	r1, r3
 8009fce:	d002      	beq.n	8009fd6 <__swsetup_r+0x66>
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	f7fe f833 	bl	800803c <_free_r>
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	6363      	str	r3, [r4, #52]	; 0x34
 8009fda:	89a3      	ldrh	r3, [r4, #12]
 8009fdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009fe0:	81a3      	strh	r3, [r4, #12]
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	6063      	str	r3, [r4, #4]
 8009fe6:	6923      	ldr	r3, [r4, #16]
 8009fe8:	6023      	str	r3, [r4, #0]
 8009fea:	89a3      	ldrh	r3, [r4, #12]
 8009fec:	f043 0308 	orr.w	r3, r3, #8
 8009ff0:	81a3      	strh	r3, [r4, #12]
 8009ff2:	6923      	ldr	r3, [r4, #16]
 8009ff4:	b94b      	cbnz	r3, 800a00a <__swsetup_r+0x9a>
 8009ff6:	89a3      	ldrh	r3, [r4, #12]
 8009ff8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a000:	d003      	beq.n	800a00a <__swsetup_r+0x9a>
 800a002:	4621      	mov	r1, r4
 800a004:	4630      	mov	r0, r6
 800a006:	f001 fbef 	bl	800b7e8 <__smakebuf_r>
 800a00a:	89a0      	ldrh	r0, [r4, #12]
 800a00c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a010:	f010 0301 	ands.w	r3, r0, #1
 800a014:	d00a      	beq.n	800a02c <__swsetup_r+0xbc>
 800a016:	2300      	movs	r3, #0
 800a018:	60a3      	str	r3, [r4, #8]
 800a01a:	6963      	ldr	r3, [r4, #20]
 800a01c:	425b      	negs	r3, r3
 800a01e:	61a3      	str	r3, [r4, #24]
 800a020:	6923      	ldr	r3, [r4, #16]
 800a022:	b943      	cbnz	r3, 800a036 <__swsetup_r+0xc6>
 800a024:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a028:	d1ba      	bne.n	8009fa0 <__swsetup_r+0x30>
 800a02a:	bd70      	pop	{r4, r5, r6, pc}
 800a02c:	0781      	lsls	r1, r0, #30
 800a02e:	bf58      	it	pl
 800a030:	6963      	ldrpl	r3, [r4, #20]
 800a032:	60a3      	str	r3, [r4, #8]
 800a034:	e7f4      	b.n	800a020 <__swsetup_r+0xb0>
 800a036:	2000      	movs	r0, #0
 800a038:	e7f7      	b.n	800a02a <__swsetup_r+0xba>
 800a03a:	bf00      	nop
 800a03c:	20000054 	.word	0x20000054
 800a040:	0800cb20 	.word	0x0800cb20
 800a044:	0800cb40 	.word	0x0800cb40
 800a048:	0800cb00 	.word	0x0800cb00

0800a04c <abort>:
 800a04c:	2006      	movs	r0, #6
 800a04e:	b508      	push	{r3, lr}
 800a050:	f002 fac6 	bl	800c5e0 <raise>
 800a054:	2001      	movs	r0, #1
 800a056:	f7f8 fa2e 	bl	80024b6 <_exit>

0800a05a <quorem>:
 800a05a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a05e:	6903      	ldr	r3, [r0, #16]
 800a060:	690c      	ldr	r4, [r1, #16]
 800a062:	4607      	mov	r7, r0
 800a064:	42a3      	cmp	r3, r4
 800a066:	f2c0 8083 	blt.w	800a170 <quorem+0x116>
 800a06a:	3c01      	subs	r4, #1
 800a06c:	f100 0514 	add.w	r5, r0, #20
 800a070:	f101 0814 	add.w	r8, r1, #20
 800a074:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a078:	9301      	str	r3, [sp, #4]
 800a07a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a07e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a082:	3301      	adds	r3, #1
 800a084:	429a      	cmp	r2, r3
 800a086:	fbb2 f6f3 	udiv	r6, r2, r3
 800a08a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a08e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a092:	d332      	bcc.n	800a0fa <quorem+0xa0>
 800a094:	f04f 0e00 	mov.w	lr, #0
 800a098:	4640      	mov	r0, r8
 800a09a:	46ac      	mov	ip, r5
 800a09c:	46f2      	mov	sl, lr
 800a09e:	f850 2b04 	ldr.w	r2, [r0], #4
 800a0a2:	b293      	uxth	r3, r2
 800a0a4:	fb06 e303 	mla	r3, r6, r3, lr
 800a0a8:	0c12      	lsrs	r2, r2, #16
 800a0aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a0ae:	fb06 e202 	mla	r2, r6, r2, lr
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	ebaa 0303 	sub.w	r3, sl, r3
 800a0b8:	f8dc a000 	ldr.w	sl, [ip]
 800a0bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a0c0:	fa1f fa8a 	uxth.w	sl, sl
 800a0c4:	4453      	add	r3, sl
 800a0c6:	fa1f fa82 	uxth.w	sl, r2
 800a0ca:	f8dc 2000 	ldr.w	r2, [ip]
 800a0ce:	4581      	cmp	r9, r0
 800a0d0:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a0d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a0e2:	f84c 3b04 	str.w	r3, [ip], #4
 800a0e6:	d2da      	bcs.n	800a09e <quorem+0x44>
 800a0e8:	f855 300b 	ldr.w	r3, [r5, fp]
 800a0ec:	b92b      	cbnz	r3, 800a0fa <quorem+0xa0>
 800a0ee:	9b01      	ldr	r3, [sp, #4]
 800a0f0:	3b04      	subs	r3, #4
 800a0f2:	429d      	cmp	r5, r3
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	d32f      	bcc.n	800a158 <quorem+0xfe>
 800a0f8:	613c      	str	r4, [r7, #16]
 800a0fa:	4638      	mov	r0, r7
 800a0fc:	f001 febe 	bl	800be7c <__mcmp>
 800a100:	2800      	cmp	r0, #0
 800a102:	db25      	blt.n	800a150 <quorem+0xf6>
 800a104:	4628      	mov	r0, r5
 800a106:	f04f 0c00 	mov.w	ip, #0
 800a10a:	3601      	adds	r6, #1
 800a10c:	f858 1b04 	ldr.w	r1, [r8], #4
 800a110:	f8d0 e000 	ldr.w	lr, [r0]
 800a114:	b28b      	uxth	r3, r1
 800a116:	ebac 0303 	sub.w	r3, ip, r3
 800a11a:	fa1f f28e 	uxth.w	r2, lr
 800a11e:	4413      	add	r3, r2
 800a120:	0c0a      	lsrs	r2, r1, #16
 800a122:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a126:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a130:	45c1      	cmp	r9, r8
 800a132:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a136:	f840 3b04 	str.w	r3, [r0], #4
 800a13a:	d2e7      	bcs.n	800a10c <quorem+0xb2>
 800a13c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a140:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a144:	b922      	cbnz	r2, 800a150 <quorem+0xf6>
 800a146:	3b04      	subs	r3, #4
 800a148:	429d      	cmp	r5, r3
 800a14a:	461a      	mov	r2, r3
 800a14c:	d30a      	bcc.n	800a164 <quorem+0x10a>
 800a14e:	613c      	str	r4, [r7, #16]
 800a150:	4630      	mov	r0, r6
 800a152:	b003      	add	sp, #12
 800a154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a158:	6812      	ldr	r2, [r2, #0]
 800a15a:	3b04      	subs	r3, #4
 800a15c:	2a00      	cmp	r2, #0
 800a15e:	d1cb      	bne.n	800a0f8 <quorem+0x9e>
 800a160:	3c01      	subs	r4, #1
 800a162:	e7c6      	b.n	800a0f2 <quorem+0x98>
 800a164:	6812      	ldr	r2, [r2, #0]
 800a166:	3b04      	subs	r3, #4
 800a168:	2a00      	cmp	r2, #0
 800a16a:	d1f0      	bne.n	800a14e <quorem+0xf4>
 800a16c:	3c01      	subs	r4, #1
 800a16e:	e7eb      	b.n	800a148 <quorem+0xee>
 800a170:	2000      	movs	r0, #0
 800a172:	e7ee      	b.n	800a152 <quorem+0xf8>
 800a174:	0000      	movs	r0, r0
	...

0800a178 <_dtoa_r>:
 800a178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a17c:	4616      	mov	r6, r2
 800a17e:	461f      	mov	r7, r3
 800a180:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a182:	b099      	sub	sp, #100	; 0x64
 800a184:	4605      	mov	r5, r0
 800a186:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a18a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a18e:	b974      	cbnz	r4, 800a1ae <_dtoa_r+0x36>
 800a190:	2010      	movs	r0, #16
 800a192:	f7fd ff35 	bl	8008000 <malloc>
 800a196:	4602      	mov	r2, r0
 800a198:	6268      	str	r0, [r5, #36]	; 0x24
 800a19a:	b920      	cbnz	r0, 800a1a6 <_dtoa_r+0x2e>
 800a19c:	21ea      	movs	r1, #234	; 0xea
 800a19e:	4bae      	ldr	r3, [pc, #696]	; (800a458 <_dtoa_r+0x2e0>)
 800a1a0:	48ae      	ldr	r0, [pc, #696]	; (800a45c <_dtoa_r+0x2e4>)
 800a1a2:	f7fd fed3 	bl	8007f4c <__assert_func>
 800a1a6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a1aa:	6004      	str	r4, [r0, #0]
 800a1ac:	60c4      	str	r4, [r0, #12]
 800a1ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a1b0:	6819      	ldr	r1, [r3, #0]
 800a1b2:	b151      	cbz	r1, 800a1ca <_dtoa_r+0x52>
 800a1b4:	685a      	ldr	r2, [r3, #4]
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	4093      	lsls	r3, r2
 800a1ba:	604a      	str	r2, [r1, #4]
 800a1bc:	608b      	str	r3, [r1, #8]
 800a1be:	4628      	mov	r0, r5
 800a1c0:	f001 fbd8 	bl	800b974 <_Bfree>
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a1c8:	601a      	str	r2, [r3, #0]
 800a1ca:	1e3b      	subs	r3, r7, #0
 800a1cc:	bfaf      	iteee	ge
 800a1ce:	2300      	movge	r3, #0
 800a1d0:	2201      	movlt	r2, #1
 800a1d2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a1d6:	9305      	strlt	r3, [sp, #20]
 800a1d8:	bfa8      	it	ge
 800a1da:	f8c8 3000 	strge.w	r3, [r8]
 800a1de:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a1e2:	4b9f      	ldr	r3, [pc, #636]	; (800a460 <_dtoa_r+0x2e8>)
 800a1e4:	bfb8      	it	lt
 800a1e6:	f8c8 2000 	strlt.w	r2, [r8]
 800a1ea:	ea33 0309 	bics.w	r3, r3, r9
 800a1ee:	d119      	bne.n	800a224 <_dtoa_r+0xac>
 800a1f0:	f242 730f 	movw	r3, #9999	; 0x270f
 800a1f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a1f6:	6013      	str	r3, [r2, #0]
 800a1f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a1fc:	4333      	orrs	r3, r6
 800a1fe:	f000 8580 	beq.w	800ad02 <_dtoa_r+0xb8a>
 800a202:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a204:	b953      	cbnz	r3, 800a21c <_dtoa_r+0xa4>
 800a206:	4b97      	ldr	r3, [pc, #604]	; (800a464 <_dtoa_r+0x2ec>)
 800a208:	e022      	b.n	800a250 <_dtoa_r+0xd8>
 800a20a:	4b97      	ldr	r3, [pc, #604]	; (800a468 <_dtoa_r+0x2f0>)
 800a20c:	9308      	str	r3, [sp, #32]
 800a20e:	3308      	adds	r3, #8
 800a210:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a212:	6013      	str	r3, [r2, #0]
 800a214:	9808      	ldr	r0, [sp, #32]
 800a216:	b019      	add	sp, #100	; 0x64
 800a218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a21c:	4b91      	ldr	r3, [pc, #580]	; (800a464 <_dtoa_r+0x2ec>)
 800a21e:	9308      	str	r3, [sp, #32]
 800a220:	3303      	adds	r3, #3
 800a222:	e7f5      	b.n	800a210 <_dtoa_r+0x98>
 800a224:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a228:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a22c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a230:	2200      	movs	r2, #0
 800a232:	2300      	movs	r3, #0
 800a234:	f7f6 fbb8 	bl	80009a8 <__aeabi_dcmpeq>
 800a238:	4680      	mov	r8, r0
 800a23a:	b158      	cbz	r0, 800a254 <_dtoa_r+0xdc>
 800a23c:	2301      	movs	r3, #1
 800a23e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a240:	6013      	str	r3, [r2, #0]
 800a242:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a244:	2b00      	cmp	r3, #0
 800a246:	f000 8559 	beq.w	800acfc <_dtoa_r+0xb84>
 800a24a:	4888      	ldr	r0, [pc, #544]	; (800a46c <_dtoa_r+0x2f4>)
 800a24c:	6018      	str	r0, [r3, #0]
 800a24e:	1e43      	subs	r3, r0, #1
 800a250:	9308      	str	r3, [sp, #32]
 800a252:	e7df      	b.n	800a214 <_dtoa_r+0x9c>
 800a254:	ab16      	add	r3, sp, #88	; 0x58
 800a256:	9301      	str	r3, [sp, #4]
 800a258:	ab17      	add	r3, sp, #92	; 0x5c
 800a25a:	9300      	str	r3, [sp, #0]
 800a25c:	4628      	mov	r0, r5
 800a25e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a262:	f001 ff31 	bl	800c0c8 <__d2b>
 800a266:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a26a:	4682      	mov	sl, r0
 800a26c:	2c00      	cmp	r4, #0
 800a26e:	d07e      	beq.n	800a36e <_dtoa_r+0x1f6>
 800a270:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a274:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a276:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a27a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a27e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a282:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a286:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a28a:	2200      	movs	r2, #0
 800a28c:	4b78      	ldr	r3, [pc, #480]	; (800a470 <_dtoa_r+0x2f8>)
 800a28e:	f7f5 ff6b 	bl	8000168 <__aeabi_dsub>
 800a292:	a36b      	add	r3, pc, #428	; (adr r3, 800a440 <_dtoa_r+0x2c8>)
 800a294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a298:	f7f6 f91e 	bl	80004d8 <__aeabi_dmul>
 800a29c:	a36a      	add	r3, pc, #424	; (adr r3, 800a448 <_dtoa_r+0x2d0>)
 800a29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a2:	f7f5 ff63 	bl	800016c <__adddf3>
 800a2a6:	4606      	mov	r6, r0
 800a2a8:	4620      	mov	r0, r4
 800a2aa:	460f      	mov	r7, r1
 800a2ac:	f7f6 f8aa 	bl	8000404 <__aeabi_i2d>
 800a2b0:	a367      	add	r3, pc, #412	; (adr r3, 800a450 <_dtoa_r+0x2d8>)
 800a2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b6:	f7f6 f90f 	bl	80004d8 <__aeabi_dmul>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	460b      	mov	r3, r1
 800a2be:	4630      	mov	r0, r6
 800a2c0:	4639      	mov	r1, r7
 800a2c2:	f7f5 ff53 	bl	800016c <__adddf3>
 800a2c6:	4606      	mov	r6, r0
 800a2c8:	460f      	mov	r7, r1
 800a2ca:	f7f6 fbb5 	bl	8000a38 <__aeabi_d2iz>
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	4681      	mov	r9, r0
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	4630      	mov	r0, r6
 800a2d6:	4639      	mov	r1, r7
 800a2d8:	f7f6 fb70 	bl	80009bc <__aeabi_dcmplt>
 800a2dc:	b148      	cbz	r0, 800a2f2 <_dtoa_r+0x17a>
 800a2de:	4648      	mov	r0, r9
 800a2e0:	f7f6 f890 	bl	8000404 <__aeabi_i2d>
 800a2e4:	4632      	mov	r2, r6
 800a2e6:	463b      	mov	r3, r7
 800a2e8:	f7f6 fb5e 	bl	80009a8 <__aeabi_dcmpeq>
 800a2ec:	b908      	cbnz	r0, 800a2f2 <_dtoa_r+0x17a>
 800a2ee:	f109 39ff 	add.w	r9, r9, #4294967295
 800a2f2:	f1b9 0f16 	cmp.w	r9, #22
 800a2f6:	d857      	bhi.n	800a3a8 <_dtoa_r+0x230>
 800a2f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a2fc:	4b5d      	ldr	r3, [pc, #372]	; (800a474 <_dtoa_r+0x2fc>)
 800a2fe:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a306:	f7f6 fb59 	bl	80009bc <__aeabi_dcmplt>
 800a30a:	2800      	cmp	r0, #0
 800a30c:	d04e      	beq.n	800a3ac <_dtoa_r+0x234>
 800a30e:	2300      	movs	r3, #0
 800a310:	f109 39ff 	add.w	r9, r9, #4294967295
 800a314:	930f      	str	r3, [sp, #60]	; 0x3c
 800a316:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a318:	1b1c      	subs	r4, r3, r4
 800a31a:	1e63      	subs	r3, r4, #1
 800a31c:	9309      	str	r3, [sp, #36]	; 0x24
 800a31e:	bf49      	itett	mi
 800a320:	f1c4 0301 	rsbmi	r3, r4, #1
 800a324:	2300      	movpl	r3, #0
 800a326:	9306      	strmi	r3, [sp, #24]
 800a328:	2300      	movmi	r3, #0
 800a32a:	bf54      	ite	pl
 800a32c:	9306      	strpl	r3, [sp, #24]
 800a32e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a330:	f1b9 0f00 	cmp.w	r9, #0
 800a334:	db3c      	blt.n	800a3b0 <_dtoa_r+0x238>
 800a336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a338:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a33c:	444b      	add	r3, r9
 800a33e:	9309      	str	r3, [sp, #36]	; 0x24
 800a340:	2300      	movs	r3, #0
 800a342:	930a      	str	r3, [sp, #40]	; 0x28
 800a344:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a346:	2b09      	cmp	r3, #9
 800a348:	d86c      	bhi.n	800a424 <_dtoa_r+0x2ac>
 800a34a:	2b05      	cmp	r3, #5
 800a34c:	bfc4      	itt	gt
 800a34e:	3b04      	subgt	r3, #4
 800a350:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a352:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a354:	bfc8      	it	gt
 800a356:	2400      	movgt	r4, #0
 800a358:	f1a3 0302 	sub.w	r3, r3, #2
 800a35c:	bfd8      	it	le
 800a35e:	2401      	movle	r4, #1
 800a360:	2b03      	cmp	r3, #3
 800a362:	f200 808b 	bhi.w	800a47c <_dtoa_r+0x304>
 800a366:	e8df f003 	tbb	[pc, r3]
 800a36a:	4f2d      	.short	0x4f2d
 800a36c:	5b4d      	.short	0x5b4d
 800a36e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a372:	441c      	add	r4, r3
 800a374:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a378:	2b20      	cmp	r3, #32
 800a37a:	bfc3      	ittte	gt
 800a37c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a380:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a384:	fa09 f303 	lslgt.w	r3, r9, r3
 800a388:	f1c3 0320 	rsble	r3, r3, #32
 800a38c:	bfc6      	itte	gt
 800a38e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a392:	4318      	orrgt	r0, r3
 800a394:	fa06 f003 	lslle.w	r0, r6, r3
 800a398:	f7f6 f824 	bl	80003e4 <__aeabi_ui2d>
 800a39c:	2301      	movs	r3, #1
 800a39e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a3a2:	3c01      	subs	r4, #1
 800a3a4:	9313      	str	r3, [sp, #76]	; 0x4c
 800a3a6:	e770      	b.n	800a28a <_dtoa_r+0x112>
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	e7b3      	b.n	800a314 <_dtoa_r+0x19c>
 800a3ac:	900f      	str	r0, [sp, #60]	; 0x3c
 800a3ae:	e7b2      	b.n	800a316 <_dtoa_r+0x19e>
 800a3b0:	9b06      	ldr	r3, [sp, #24]
 800a3b2:	eba3 0309 	sub.w	r3, r3, r9
 800a3b6:	9306      	str	r3, [sp, #24]
 800a3b8:	f1c9 0300 	rsb	r3, r9, #0
 800a3bc:	930a      	str	r3, [sp, #40]	; 0x28
 800a3be:	2300      	movs	r3, #0
 800a3c0:	930e      	str	r3, [sp, #56]	; 0x38
 800a3c2:	e7bf      	b.n	800a344 <_dtoa_r+0x1cc>
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	dc59      	bgt.n	800a482 <_dtoa_r+0x30a>
 800a3ce:	f04f 0b01 	mov.w	fp, #1
 800a3d2:	465b      	mov	r3, fp
 800a3d4:	f8cd b008 	str.w	fp, [sp, #8]
 800a3d8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800a3dc:	2200      	movs	r2, #0
 800a3de:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a3e0:	6042      	str	r2, [r0, #4]
 800a3e2:	2204      	movs	r2, #4
 800a3e4:	f102 0614 	add.w	r6, r2, #20
 800a3e8:	429e      	cmp	r6, r3
 800a3ea:	6841      	ldr	r1, [r0, #4]
 800a3ec:	d94f      	bls.n	800a48e <_dtoa_r+0x316>
 800a3ee:	4628      	mov	r0, r5
 800a3f0:	f001 fa80 	bl	800b8f4 <_Balloc>
 800a3f4:	9008      	str	r0, [sp, #32]
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	d14d      	bne.n	800a496 <_dtoa_r+0x31e>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a400:	4b1d      	ldr	r3, [pc, #116]	; (800a478 <_dtoa_r+0x300>)
 800a402:	e6cd      	b.n	800a1a0 <_dtoa_r+0x28>
 800a404:	2301      	movs	r3, #1
 800a406:	e7de      	b.n	800a3c6 <_dtoa_r+0x24e>
 800a408:	2300      	movs	r3, #0
 800a40a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a40c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a40e:	eb09 0b03 	add.w	fp, r9, r3
 800a412:	f10b 0301 	add.w	r3, fp, #1
 800a416:	2b01      	cmp	r3, #1
 800a418:	9302      	str	r3, [sp, #8]
 800a41a:	bfb8      	it	lt
 800a41c:	2301      	movlt	r3, #1
 800a41e:	e7dd      	b.n	800a3dc <_dtoa_r+0x264>
 800a420:	2301      	movs	r3, #1
 800a422:	e7f2      	b.n	800a40a <_dtoa_r+0x292>
 800a424:	2401      	movs	r4, #1
 800a426:	2300      	movs	r3, #0
 800a428:	940b      	str	r4, [sp, #44]	; 0x2c
 800a42a:	9322      	str	r3, [sp, #136]	; 0x88
 800a42c:	f04f 3bff 	mov.w	fp, #4294967295
 800a430:	2200      	movs	r2, #0
 800a432:	2312      	movs	r3, #18
 800a434:	f8cd b008 	str.w	fp, [sp, #8]
 800a438:	9223      	str	r2, [sp, #140]	; 0x8c
 800a43a:	e7cf      	b.n	800a3dc <_dtoa_r+0x264>
 800a43c:	f3af 8000 	nop.w
 800a440:	636f4361 	.word	0x636f4361
 800a444:	3fd287a7 	.word	0x3fd287a7
 800a448:	8b60c8b3 	.word	0x8b60c8b3
 800a44c:	3fc68a28 	.word	0x3fc68a28
 800a450:	509f79fb 	.word	0x509f79fb
 800a454:	3fd34413 	.word	0x3fd34413
 800a458:	0800ca76 	.word	0x0800ca76
 800a45c:	0800ca8d 	.word	0x0800ca8d
 800a460:	7ff00000 	.word	0x7ff00000
 800a464:	0800ca72 	.word	0x0800ca72
 800a468:	0800ca69 	.word	0x0800ca69
 800a46c:	0800c8ea 	.word	0x0800c8ea
 800a470:	3ff80000 	.word	0x3ff80000
 800a474:	0800cc68 	.word	0x0800cc68
 800a478:	0800caec 	.word	0x0800caec
 800a47c:	2301      	movs	r3, #1
 800a47e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a480:	e7d4      	b.n	800a42c <_dtoa_r+0x2b4>
 800a482:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800a486:	465b      	mov	r3, fp
 800a488:	f8cd b008 	str.w	fp, [sp, #8]
 800a48c:	e7a6      	b.n	800a3dc <_dtoa_r+0x264>
 800a48e:	3101      	adds	r1, #1
 800a490:	6041      	str	r1, [r0, #4]
 800a492:	0052      	lsls	r2, r2, #1
 800a494:	e7a6      	b.n	800a3e4 <_dtoa_r+0x26c>
 800a496:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a498:	9a08      	ldr	r2, [sp, #32]
 800a49a:	601a      	str	r2, [r3, #0]
 800a49c:	9b02      	ldr	r3, [sp, #8]
 800a49e:	2b0e      	cmp	r3, #14
 800a4a0:	f200 80a8 	bhi.w	800a5f4 <_dtoa_r+0x47c>
 800a4a4:	2c00      	cmp	r4, #0
 800a4a6:	f000 80a5 	beq.w	800a5f4 <_dtoa_r+0x47c>
 800a4aa:	f1b9 0f00 	cmp.w	r9, #0
 800a4ae:	dd34      	ble.n	800a51a <_dtoa_r+0x3a2>
 800a4b0:	4a9a      	ldr	r2, [pc, #616]	; (800a71c <_dtoa_r+0x5a4>)
 800a4b2:	f009 030f 	and.w	r3, r9, #15
 800a4b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a4ba:	f419 7f80 	tst.w	r9, #256	; 0x100
 800a4be:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a4c2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a4c6:	ea4f 1429 	mov.w	r4, r9, asr #4
 800a4ca:	d016      	beq.n	800a4fa <_dtoa_r+0x382>
 800a4cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a4d0:	4b93      	ldr	r3, [pc, #588]	; (800a720 <_dtoa_r+0x5a8>)
 800a4d2:	2703      	movs	r7, #3
 800a4d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a4d8:	f7f6 f928 	bl	800072c <__aeabi_ddiv>
 800a4dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4e0:	f004 040f 	and.w	r4, r4, #15
 800a4e4:	4e8e      	ldr	r6, [pc, #568]	; (800a720 <_dtoa_r+0x5a8>)
 800a4e6:	b954      	cbnz	r4, 800a4fe <_dtoa_r+0x386>
 800a4e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a4ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4f0:	f7f6 f91c 	bl	800072c <__aeabi_ddiv>
 800a4f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4f8:	e029      	b.n	800a54e <_dtoa_r+0x3d6>
 800a4fa:	2702      	movs	r7, #2
 800a4fc:	e7f2      	b.n	800a4e4 <_dtoa_r+0x36c>
 800a4fe:	07e1      	lsls	r1, r4, #31
 800a500:	d508      	bpl.n	800a514 <_dtoa_r+0x39c>
 800a502:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a506:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a50a:	f7f5 ffe5 	bl	80004d8 <__aeabi_dmul>
 800a50e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a512:	3701      	adds	r7, #1
 800a514:	1064      	asrs	r4, r4, #1
 800a516:	3608      	adds	r6, #8
 800a518:	e7e5      	b.n	800a4e6 <_dtoa_r+0x36e>
 800a51a:	f000 80a5 	beq.w	800a668 <_dtoa_r+0x4f0>
 800a51e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a522:	f1c9 0400 	rsb	r4, r9, #0
 800a526:	4b7d      	ldr	r3, [pc, #500]	; (800a71c <_dtoa_r+0x5a4>)
 800a528:	f004 020f 	and.w	r2, r4, #15
 800a52c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a534:	f7f5 ffd0 	bl	80004d8 <__aeabi_dmul>
 800a538:	2702      	movs	r7, #2
 800a53a:	2300      	movs	r3, #0
 800a53c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a540:	4e77      	ldr	r6, [pc, #476]	; (800a720 <_dtoa_r+0x5a8>)
 800a542:	1124      	asrs	r4, r4, #4
 800a544:	2c00      	cmp	r4, #0
 800a546:	f040 8084 	bne.w	800a652 <_dtoa_r+0x4da>
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d1d2      	bne.n	800a4f4 <_dtoa_r+0x37c>
 800a54e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a550:	2b00      	cmp	r3, #0
 800a552:	f000 808b 	beq.w	800a66c <_dtoa_r+0x4f4>
 800a556:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a55a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a55e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a562:	2200      	movs	r2, #0
 800a564:	4b6f      	ldr	r3, [pc, #444]	; (800a724 <_dtoa_r+0x5ac>)
 800a566:	f7f6 fa29 	bl	80009bc <__aeabi_dcmplt>
 800a56a:	2800      	cmp	r0, #0
 800a56c:	d07e      	beq.n	800a66c <_dtoa_r+0x4f4>
 800a56e:	9b02      	ldr	r3, [sp, #8]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d07b      	beq.n	800a66c <_dtoa_r+0x4f4>
 800a574:	f1bb 0f00 	cmp.w	fp, #0
 800a578:	dd38      	ble.n	800a5ec <_dtoa_r+0x474>
 800a57a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a57e:	2200      	movs	r2, #0
 800a580:	4b69      	ldr	r3, [pc, #420]	; (800a728 <_dtoa_r+0x5b0>)
 800a582:	f7f5 ffa9 	bl	80004d8 <__aeabi_dmul>
 800a586:	465c      	mov	r4, fp
 800a588:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a58c:	f109 38ff 	add.w	r8, r9, #4294967295
 800a590:	3701      	adds	r7, #1
 800a592:	4638      	mov	r0, r7
 800a594:	f7f5 ff36 	bl	8000404 <__aeabi_i2d>
 800a598:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a59c:	f7f5 ff9c 	bl	80004d8 <__aeabi_dmul>
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	4b62      	ldr	r3, [pc, #392]	; (800a72c <_dtoa_r+0x5b4>)
 800a5a4:	f7f5 fde2 	bl	800016c <__adddf3>
 800a5a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a5ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a5b0:	9611      	str	r6, [sp, #68]	; 0x44
 800a5b2:	2c00      	cmp	r4, #0
 800a5b4:	d15d      	bne.n	800a672 <_dtoa_r+0x4fa>
 800a5b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	4b5c      	ldr	r3, [pc, #368]	; (800a730 <_dtoa_r+0x5b8>)
 800a5be:	f7f5 fdd3 	bl	8000168 <__aeabi_dsub>
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a5ca:	4633      	mov	r3, r6
 800a5cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a5ce:	f7f6 fa13 	bl	80009f8 <__aeabi_dcmpgt>
 800a5d2:	2800      	cmp	r0, #0
 800a5d4:	f040 829e 	bne.w	800ab14 <_dtoa_r+0x99c>
 800a5d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a5de:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a5e2:	f7f6 f9eb 	bl	80009bc <__aeabi_dcmplt>
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	f040 8292 	bne.w	800ab10 <_dtoa_r+0x998>
 800a5ec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a5f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a5f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	f2c0 8153 	blt.w	800a8a2 <_dtoa_r+0x72a>
 800a5fc:	f1b9 0f0e 	cmp.w	r9, #14
 800a600:	f300 814f 	bgt.w	800a8a2 <_dtoa_r+0x72a>
 800a604:	4b45      	ldr	r3, [pc, #276]	; (800a71c <_dtoa_r+0x5a4>)
 800a606:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a60a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a60e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a612:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a614:	2b00      	cmp	r3, #0
 800a616:	f280 80db 	bge.w	800a7d0 <_dtoa_r+0x658>
 800a61a:	9b02      	ldr	r3, [sp, #8]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	f300 80d7 	bgt.w	800a7d0 <_dtoa_r+0x658>
 800a622:	f040 8274 	bne.w	800ab0e <_dtoa_r+0x996>
 800a626:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a62a:	2200      	movs	r2, #0
 800a62c:	4b40      	ldr	r3, [pc, #256]	; (800a730 <_dtoa_r+0x5b8>)
 800a62e:	f7f5 ff53 	bl	80004d8 <__aeabi_dmul>
 800a632:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a636:	f7f6 f9d5 	bl	80009e4 <__aeabi_dcmpge>
 800a63a:	9c02      	ldr	r4, [sp, #8]
 800a63c:	4626      	mov	r6, r4
 800a63e:	2800      	cmp	r0, #0
 800a640:	f040 824a 	bne.w	800aad8 <_dtoa_r+0x960>
 800a644:	2331      	movs	r3, #49	; 0x31
 800a646:	9f08      	ldr	r7, [sp, #32]
 800a648:	f109 0901 	add.w	r9, r9, #1
 800a64c:	f807 3b01 	strb.w	r3, [r7], #1
 800a650:	e246      	b.n	800aae0 <_dtoa_r+0x968>
 800a652:	07e2      	lsls	r2, r4, #31
 800a654:	d505      	bpl.n	800a662 <_dtoa_r+0x4ea>
 800a656:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a65a:	f7f5 ff3d 	bl	80004d8 <__aeabi_dmul>
 800a65e:	2301      	movs	r3, #1
 800a660:	3701      	adds	r7, #1
 800a662:	1064      	asrs	r4, r4, #1
 800a664:	3608      	adds	r6, #8
 800a666:	e76d      	b.n	800a544 <_dtoa_r+0x3cc>
 800a668:	2702      	movs	r7, #2
 800a66a:	e770      	b.n	800a54e <_dtoa_r+0x3d6>
 800a66c:	46c8      	mov	r8, r9
 800a66e:	9c02      	ldr	r4, [sp, #8]
 800a670:	e78f      	b.n	800a592 <_dtoa_r+0x41a>
 800a672:	9908      	ldr	r1, [sp, #32]
 800a674:	4b29      	ldr	r3, [pc, #164]	; (800a71c <_dtoa_r+0x5a4>)
 800a676:	4421      	add	r1, r4
 800a678:	9112      	str	r1, [sp, #72]	; 0x48
 800a67a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a67c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a680:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a684:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a688:	2900      	cmp	r1, #0
 800a68a:	d055      	beq.n	800a738 <_dtoa_r+0x5c0>
 800a68c:	2000      	movs	r0, #0
 800a68e:	4929      	ldr	r1, [pc, #164]	; (800a734 <_dtoa_r+0x5bc>)
 800a690:	f7f6 f84c 	bl	800072c <__aeabi_ddiv>
 800a694:	463b      	mov	r3, r7
 800a696:	4632      	mov	r2, r6
 800a698:	f7f5 fd66 	bl	8000168 <__aeabi_dsub>
 800a69c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a6a0:	9f08      	ldr	r7, [sp, #32]
 800a6a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a6a6:	f7f6 f9c7 	bl	8000a38 <__aeabi_d2iz>
 800a6aa:	4604      	mov	r4, r0
 800a6ac:	f7f5 feaa 	bl	8000404 <__aeabi_i2d>
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	460b      	mov	r3, r1
 800a6b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a6b8:	f7f5 fd56 	bl	8000168 <__aeabi_dsub>
 800a6bc:	4602      	mov	r2, r0
 800a6be:	460b      	mov	r3, r1
 800a6c0:	3430      	adds	r4, #48	; 0x30
 800a6c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a6c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a6ca:	f807 4b01 	strb.w	r4, [r7], #1
 800a6ce:	f7f6 f975 	bl	80009bc <__aeabi_dcmplt>
 800a6d2:	2800      	cmp	r0, #0
 800a6d4:	d174      	bne.n	800a7c0 <_dtoa_r+0x648>
 800a6d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6da:	2000      	movs	r0, #0
 800a6dc:	4911      	ldr	r1, [pc, #68]	; (800a724 <_dtoa_r+0x5ac>)
 800a6de:	f7f5 fd43 	bl	8000168 <__aeabi_dsub>
 800a6e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a6e6:	f7f6 f969 	bl	80009bc <__aeabi_dcmplt>
 800a6ea:	2800      	cmp	r0, #0
 800a6ec:	f040 80b6 	bne.w	800a85c <_dtoa_r+0x6e4>
 800a6f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a6f2:	429f      	cmp	r7, r3
 800a6f4:	f43f af7a 	beq.w	800a5ec <_dtoa_r+0x474>
 800a6f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	4b0a      	ldr	r3, [pc, #40]	; (800a728 <_dtoa_r+0x5b0>)
 800a700:	f7f5 feea 	bl	80004d8 <__aeabi_dmul>
 800a704:	2200      	movs	r2, #0
 800a706:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a70a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a70e:	4b06      	ldr	r3, [pc, #24]	; (800a728 <_dtoa_r+0x5b0>)
 800a710:	f7f5 fee2 	bl	80004d8 <__aeabi_dmul>
 800a714:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a718:	e7c3      	b.n	800a6a2 <_dtoa_r+0x52a>
 800a71a:	bf00      	nop
 800a71c:	0800cc68 	.word	0x0800cc68
 800a720:	0800cc40 	.word	0x0800cc40
 800a724:	3ff00000 	.word	0x3ff00000
 800a728:	40240000 	.word	0x40240000
 800a72c:	401c0000 	.word	0x401c0000
 800a730:	40140000 	.word	0x40140000
 800a734:	3fe00000 	.word	0x3fe00000
 800a738:	4630      	mov	r0, r6
 800a73a:	4639      	mov	r1, r7
 800a73c:	f7f5 fecc 	bl	80004d8 <__aeabi_dmul>
 800a740:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a742:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a746:	9c08      	ldr	r4, [sp, #32]
 800a748:	9314      	str	r3, [sp, #80]	; 0x50
 800a74a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a74e:	f7f6 f973 	bl	8000a38 <__aeabi_d2iz>
 800a752:	9015      	str	r0, [sp, #84]	; 0x54
 800a754:	f7f5 fe56 	bl	8000404 <__aeabi_i2d>
 800a758:	4602      	mov	r2, r0
 800a75a:	460b      	mov	r3, r1
 800a75c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a760:	f7f5 fd02 	bl	8000168 <__aeabi_dsub>
 800a764:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a766:	4606      	mov	r6, r0
 800a768:	3330      	adds	r3, #48	; 0x30
 800a76a:	f804 3b01 	strb.w	r3, [r4], #1
 800a76e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a770:	460f      	mov	r7, r1
 800a772:	429c      	cmp	r4, r3
 800a774:	f04f 0200 	mov.w	r2, #0
 800a778:	d124      	bne.n	800a7c4 <_dtoa_r+0x64c>
 800a77a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a77e:	4bb3      	ldr	r3, [pc, #716]	; (800aa4c <_dtoa_r+0x8d4>)
 800a780:	f7f5 fcf4 	bl	800016c <__adddf3>
 800a784:	4602      	mov	r2, r0
 800a786:	460b      	mov	r3, r1
 800a788:	4630      	mov	r0, r6
 800a78a:	4639      	mov	r1, r7
 800a78c:	f7f6 f934 	bl	80009f8 <__aeabi_dcmpgt>
 800a790:	2800      	cmp	r0, #0
 800a792:	d162      	bne.n	800a85a <_dtoa_r+0x6e2>
 800a794:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a798:	2000      	movs	r0, #0
 800a79a:	49ac      	ldr	r1, [pc, #688]	; (800aa4c <_dtoa_r+0x8d4>)
 800a79c:	f7f5 fce4 	bl	8000168 <__aeabi_dsub>
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	460b      	mov	r3, r1
 800a7a4:	4630      	mov	r0, r6
 800a7a6:	4639      	mov	r1, r7
 800a7a8:	f7f6 f908 	bl	80009bc <__aeabi_dcmplt>
 800a7ac:	2800      	cmp	r0, #0
 800a7ae:	f43f af1d 	beq.w	800a5ec <_dtoa_r+0x474>
 800a7b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a7b4:	1e7b      	subs	r3, r7, #1
 800a7b6:	9314      	str	r3, [sp, #80]	; 0x50
 800a7b8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a7bc:	2b30      	cmp	r3, #48	; 0x30
 800a7be:	d0f8      	beq.n	800a7b2 <_dtoa_r+0x63a>
 800a7c0:	46c1      	mov	r9, r8
 800a7c2:	e03a      	b.n	800a83a <_dtoa_r+0x6c2>
 800a7c4:	4ba2      	ldr	r3, [pc, #648]	; (800aa50 <_dtoa_r+0x8d8>)
 800a7c6:	f7f5 fe87 	bl	80004d8 <__aeabi_dmul>
 800a7ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7ce:	e7bc      	b.n	800a74a <_dtoa_r+0x5d2>
 800a7d0:	9f08      	ldr	r7, [sp, #32]
 800a7d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a7d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7da:	f7f5 ffa7 	bl	800072c <__aeabi_ddiv>
 800a7de:	f7f6 f92b 	bl	8000a38 <__aeabi_d2iz>
 800a7e2:	4604      	mov	r4, r0
 800a7e4:	f7f5 fe0e 	bl	8000404 <__aeabi_i2d>
 800a7e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a7ec:	f7f5 fe74 	bl	80004d8 <__aeabi_dmul>
 800a7f0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a7f4:	460b      	mov	r3, r1
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7fc:	f7f5 fcb4 	bl	8000168 <__aeabi_dsub>
 800a800:	f807 6b01 	strb.w	r6, [r7], #1
 800a804:	9e08      	ldr	r6, [sp, #32]
 800a806:	9b02      	ldr	r3, [sp, #8]
 800a808:	1bbe      	subs	r6, r7, r6
 800a80a:	42b3      	cmp	r3, r6
 800a80c:	d13a      	bne.n	800a884 <_dtoa_r+0x70c>
 800a80e:	4602      	mov	r2, r0
 800a810:	460b      	mov	r3, r1
 800a812:	f7f5 fcab 	bl	800016c <__adddf3>
 800a816:	4602      	mov	r2, r0
 800a818:	460b      	mov	r3, r1
 800a81a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a81e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a822:	f7f6 f8e9 	bl	80009f8 <__aeabi_dcmpgt>
 800a826:	bb58      	cbnz	r0, 800a880 <_dtoa_r+0x708>
 800a828:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a82c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a830:	f7f6 f8ba 	bl	80009a8 <__aeabi_dcmpeq>
 800a834:	b108      	cbz	r0, 800a83a <_dtoa_r+0x6c2>
 800a836:	07e1      	lsls	r1, r4, #31
 800a838:	d422      	bmi.n	800a880 <_dtoa_r+0x708>
 800a83a:	4628      	mov	r0, r5
 800a83c:	4651      	mov	r1, sl
 800a83e:	f001 f899 	bl	800b974 <_Bfree>
 800a842:	2300      	movs	r3, #0
 800a844:	703b      	strb	r3, [r7, #0]
 800a846:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a848:	f109 0001 	add.w	r0, r9, #1
 800a84c:	6018      	str	r0, [r3, #0]
 800a84e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a850:	2b00      	cmp	r3, #0
 800a852:	f43f acdf 	beq.w	800a214 <_dtoa_r+0x9c>
 800a856:	601f      	str	r7, [r3, #0]
 800a858:	e4dc      	b.n	800a214 <_dtoa_r+0x9c>
 800a85a:	4627      	mov	r7, r4
 800a85c:	463b      	mov	r3, r7
 800a85e:	461f      	mov	r7, r3
 800a860:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a864:	2a39      	cmp	r2, #57	; 0x39
 800a866:	d107      	bne.n	800a878 <_dtoa_r+0x700>
 800a868:	9a08      	ldr	r2, [sp, #32]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d1f7      	bne.n	800a85e <_dtoa_r+0x6e6>
 800a86e:	2230      	movs	r2, #48	; 0x30
 800a870:	9908      	ldr	r1, [sp, #32]
 800a872:	f108 0801 	add.w	r8, r8, #1
 800a876:	700a      	strb	r2, [r1, #0]
 800a878:	781a      	ldrb	r2, [r3, #0]
 800a87a:	3201      	adds	r2, #1
 800a87c:	701a      	strb	r2, [r3, #0]
 800a87e:	e79f      	b.n	800a7c0 <_dtoa_r+0x648>
 800a880:	46c8      	mov	r8, r9
 800a882:	e7eb      	b.n	800a85c <_dtoa_r+0x6e4>
 800a884:	2200      	movs	r2, #0
 800a886:	4b72      	ldr	r3, [pc, #456]	; (800aa50 <_dtoa_r+0x8d8>)
 800a888:	f7f5 fe26 	bl	80004d8 <__aeabi_dmul>
 800a88c:	4602      	mov	r2, r0
 800a88e:	460b      	mov	r3, r1
 800a890:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a894:	2200      	movs	r2, #0
 800a896:	2300      	movs	r3, #0
 800a898:	f7f6 f886 	bl	80009a8 <__aeabi_dcmpeq>
 800a89c:	2800      	cmp	r0, #0
 800a89e:	d098      	beq.n	800a7d2 <_dtoa_r+0x65a>
 800a8a0:	e7cb      	b.n	800a83a <_dtoa_r+0x6c2>
 800a8a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a8a4:	2a00      	cmp	r2, #0
 800a8a6:	f000 80cd 	beq.w	800aa44 <_dtoa_r+0x8cc>
 800a8aa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a8ac:	2a01      	cmp	r2, #1
 800a8ae:	f300 80af 	bgt.w	800aa10 <_dtoa_r+0x898>
 800a8b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a8b4:	2a00      	cmp	r2, #0
 800a8b6:	f000 80a7 	beq.w	800aa08 <_dtoa_r+0x890>
 800a8ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a8be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a8c0:	9f06      	ldr	r7, [sp, #24]
 800a8c2:	9a06      	ldr	r2, [sp, #24]
 800a8c4:	2101      	movs	r1, #1
 800a8c6:	441a      	add	r2, r3
 800a8c8:	9206      	str	r2, [sp, #24]
 800a8ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8cc:	4628      	mov	r0, r5
 800a8ce:	441a      	add	r2, r3
 800a8d0:	9209      	str	r2, [sp, #36]	; 0x24
 800a8d2:	f001 f953 	bl	800bb7c <__i2b>
 800a8d6:	4606      	mov	r6, r0
 800a8d8:	2f00      	cmp	r7, #0
 800a8da:	dd0c      	ble.n	800a8f6 <_dtoa_r+0x77e>
 800a8dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	dd09      	ble.n	800a8f6 <_dtoa_r+0x77e>
 800a8e2:	42bb      	cmp	r3, r7
 800a8e4:	bfa8      	it	ge
 800a8e6:	463b      	movge	r3, r7
 800a8e8:	9a06      	ldr	r2, [sp, #24]
 800a8ea:	1aff      	subs	r7, r7, r3
 800a8ec:	1ad2      	subs	r2, r2, r3
 800a8ee:	9206      	str	r2, [sp, #24]
 800a8f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8f2:	1ad3      	subs	r3, r2, r3
 800a8f4:	9309      	str	r3, [sp, #36]	; 0x24
 800a8f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8f8:	b1f3      	cbz	r3, 800a938 <_dtoa_r+0x7c0>
 800a8fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	f000 80a9 	beq.w	800aa54 <_dtoa_r+0x8dc>
 800a902:	2c00      	cmp	r4, #0
 800a904:	dd10      	ble.n	800a928 <_dtoa_r+0x7b0>
 800a906:	4631      	mov	r1, r6
 800a908:	4622      	mov	r2, r4
 800a90a:	4628      	mov	r0, r5
 800a90c:	f001 f9f0 	bl	800bcf0 <__pow5mult>
 800a910:	4652      	mov	r2, sl
 800a912:	4601      	mov	r1, r0
 800a914:	4606      	mov	r6, r0
 800a916:	4628      	mov	r0, r5
 800a918:	f001 f946 	bl	800bba8 <__multiply>
 800a91c:	4680      	mov	r8, r0
 800a91e:	4651      	mov	r1, sl
 800a920:	4628      	mov	r0, r5
 800a922:	f001 f827 	bl	800b974 <_Bfree>
 800a926:	46c2      	mov	sl, r8
 800a928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a92a:	1b1a      	subs	r2, r3, r4
 800a92c:	d004      	beq.n	800a938 <_dtoa_r+0x7c0>
 800a92e:	4651      	mov	r1, sl
 800a930:	4628      	mov	r0, r5
 800a932:	f001 f9dd 	bl	800bcf0 <__pow5mult>
 800a936:	4682      	mov	sl, r0
 800a938:	2101      	movs	r1, #1
 800a93a:	4628      	mov	r0, r5
 800a93c:	f001 f91e 	bl	800bb7c <__i2b>
 800a940:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a942:	4604      	mov	r4, r0
 800a944:	2b00      	cmp	r3, #0
 800a946:	f340 8087 	ble.w	800aa58 <_dtoa_r+0x8e0>
 800a94a:	461a      	mov	r2, r3
 800a94c:	4601      	mov	r1, r0
 800a94e:	4628      	mov	r0, r5
 800a950:	f001 f9ce 	bl	800bcf0 <__pow5mult>
 800a954:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a956:	4604      	mov	r4, r0
 800a958:	2b01      	cmp	r3, #1
 800a95a:	f340 8080 	ble.w	800aa5e <_dtoa_r+0x8e6>
 800a95e:	f04f 0800 	mov.w	r8, #0
 800a962:	6923      	ldr	r3, [r4, #16]
 800a964:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a968:	6918      	ldr	r0, [r3, #16]
 800a96a:	f001 f8b9 	bl	800bae0 <__hi0bits>
 800a96e:	f1c0 0020 	rsb	r0, r0, #32
 800a972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a974:	4418      	add	r0, r3
 800a976:	f010 001f 	ands.w	r0, r0, #31
 800a97a:	f000 8092 	beq.w	800aaa2 <_dtoa_r+0x92a>
 800a97e:	f1c0 0320 	rsb	r3, r0, #32
 800a982:	2b04      	cmp	r3, #4
 800a984:	f340 808a 	ble.w	800aa9c <_dtoa_r+0x924>
 800a988:	f1c0 001c 	rsb	r0, r0, #28
 800a98c:	9b06      	ldr	r3, [sp, #24]
 800a98e:	4407      	add	r7, r0
 800a990:	4403      	add	r3, r0
 800a992:	9306      	str	r3, [sp, #24]
 800a994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a996:	4403      	add	r3, r0
 800a998:	9309      	str	r3, [sp, #36]	; 0x24
 800a99a:	9b06      	ldr	r3, [sp, #24]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	dd05      	ble.n	800a9ac <_dtoa_r+0x834>
 800a9a0:	4651      	mov	r1, sl
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	4628      	mov	r0, r5
 800a9a6:	f001 f9fd 	bl	800bda4 <__lshift>
 800a9aa:	4682      	mov	sl, r0
 800a9ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	dd05      	ble.n	800a9be <_dtoa_r+0x846>
 800a9b2:	4621      	mov	r1, r4
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	f001 f9f4 	bl	800bda4 <__lshift>
 800a9bc:	4604      	mov	r4, r0
 800a9be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d070      	beq.n	800aaa6 <_dtoa_r+0x92e>
 800a9c4:	4621      	mov	r1, r4
 800a9c6:	4650      	mov	r0, sl
 800a9c8:	f001 fa58 	bl	800be7c <__mcmp>
 800a9cc:	2800      	cmp	r0, #0
 800a9ce:	da6a      	bge.n	800aaa6 <_dtoa_r+0x92e>
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	4651      	mov	r1, sl
 800a9d4:	220a      	movs	r2, #10
 800a9d6:	4628      	mov	r0, r5
 800a9d8:	f000 ffee 	bl	800b9b8 <__multadd>
 800a9dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9de:	4682      	mov	sl, r0
 800a9e0:	f109 39ff 	add.w	r9, r9, #4294967295
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	f000 8193 	beq.w	800ad10 <_dtoa_r+0xb98>
 800a9ea:	4631      	mov	r1, r6
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	220a      	movs	r2, #10
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	f000 ffe1 	bl	800b9b8 <__multadd>
 800a9f6:	f1bb 0f00 	cmp.w	fp, #0
 800a9fa:	4606      	mov	r6, r0
 800a9fc:	f300 8093 	bgt.w	800ab26 <_dtoa_r+0x9ae>
 800aa00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa02:	2b02      	cmp	r3, #2
 800aa04:	dc57      	bgt.n	800aab6 <_dtoa_r+0x93e>
 800aa06:	e08e      	b.n	800ab26 <_dtoa_r+0x9ae>
 800aa08:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aa0a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aa0e:	e756      	b.n	800a8be <_dtoa_r+0x746>
 800aa10:	9b02      	ldr	r3, [sp, #8]
 800aa12:	1e5c      	subs	r4, r3, #1
 800aa14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa16:	42a3      	cmp	r3, r4
 800aa18:	bfb7      	itett	lt
 800aa1a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aa1c:	1b1c      	subge	r4, r3, r4
 800aa1e:	1ae2      	sublt	r2, r4, r3
 800aa20:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800aa22:	bfbe      	ittt	lt
 800aa24:	940a      	strlt	r4, [sp, #40]	; 0x28
 800aa26:	189b      	addlt	r3, r3, r2
 800aa28:	930e      	strlt	r3, [sp, #56]	; 0x38
 800aa2a:	9b02      	ldr	r3, [sp, #8]
 800aa2c:	bfb8      	it	lt
 800aa2e:	2400      	movlt	r4, #0
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	bfbb      	ittet	lt
 800aa34:	9b06      	ldrlt	r3, [sp, #24]
 800aa36:	9a02      	ldrlt	r2, [sp, #8]
 800aa38:	9f06      	ldrge	r7, [sp, #24]
 800aa3a:	1a9f      	sublt	r7, r3, r2
 800aa3c:	bfac      	ite	ge
 800aa3e:	9b02      	ldrge	r3, [sp, #8]
 800aa40:	2300      	movlt	r3, #0
 800aa42:	e73e      	b.n	800a8c2 <_dtoa_r+0x74a>
 800aa44:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800aa46:	9f06      	ldr	r7, [sp, #24]
 800aa48:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800aa4a:	e745      	b.n	800a8d8 <_dtoa_r+0x760>
 800aa4c:	3fe00000 	.word	0x3fe00000
 800aa50:	40240000 	.word	0x40240000
 800aa54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa56:	e76a      	b.n	800a92e <_dtoa_r+0x7b6>
 800aa58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	dc19      	bgt.n	800aa92 <_dtoa_r+0x91a>
 800aa5e:	9b04      	ldr	r3, [sp, #16]
 800aa60:	b9bb      	cbnz	r3, 800aa92 <_dtoa_r+0x91a>
 800aa62:	9b05      	ldr	r3, [sp, #20]
 800aa64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa68:	b99b      	cbnz	r3, 800aa92 <_dtoa_r+0x91a>
 800aa6a:	9b05      	ldr	r3, [sp, #20]
 800aa6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa70:	0d1b      	lsrs	r3, r3, #20
 800aa72:	051b      	lsls	r3, r3, #20
 800aa74:	b183      	cbz	r3, 800aa98 <_dtoa_r+0x920>
 800aa76:	f04f 0801 	mov.w	r8, #1
 800aa7a:	9b06      	ldr	r3, [sp, #24]
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	9306      	str	r3, [sp, #24]
 800aa80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa82:	3301      	adds	r3, #1
 800aa84:	9309      	str	r3, [sp, #36]	; 0x24
 800aa86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	f47f af6a 	bne.w	800a962 <_dtoa_r+0x7ea>
 800aa8e:	2001      	movs	r0, #1
 800aa90:	e76f      	b.n	800a972 <_dtoa_r+0x7fa>
 800aa92:	f04f 0800 	mov.w	r8, #0
 800aa96:	e7f6      	b.n	800aa86 <_dtoa_r+0x90e>
 800aa98:	4698      	mov	r8, r3
 800aa9a:	e7f4      	b.n	800aa86 <_dtoa_r+0x90e>
 800aa9c:	f43f af7d 	beq.w	800a99a <_dtoa_r+0x822>
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	301c      	adds	r0, #28
 800aaa4:	e772      	b.n	800a98c <_dtoa_r+0x814>
 800aaa6:	9b02      	ldr	r3, [sp, #8]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	dc36      	bgt.n	800ab1a <_dtoa_r+0x9a2>
 800aaac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aaae:	2b02      	cmp	r3, #2
 800aab0:	dd33      	ble.n	800ab1a <_dtoa_r+0x9a2>
 800aab2:	f8dd b008 	ldr.w	fp, [sp, #8]
 800aab6:	f1bb 0f00 	cmp.w	fp, #0
 800aaba:	d10d      	bne.n	800aad8 <_dtoa_r+0x960>
 800aabc:	4621      	mov	r1, r4
 800aabe:	465b      	mov	r3, fp
 800aac0:	2205      	movs	r2, #5
 800aac2:	4628      	mov	r0, r5
 800aac4:	f000 ff78 	bl	800b9b8 <__multadd>
 800aac8:	4601      	mov	r1, r0
 800aaca:	4604      	mov	r4, r0
 800aacc:	4650      	mov	r0, sl
 800aace:	f001 f9d5 	bl	800be7c <__mcmp>
 800aad2:	2800      	cmp	r0, #0
 800aad4:	f73f adb6 	bgt.w	800a644 <_dtoa_r+0x4cc>
 800aad8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aada:	9f08      	ldr	r7, [sp, #32]
 800aadc:	ea6f 0903 	mvn.w	r9, r3
 800aae0:	f04f 0800 	mov.w	r8, #0
 800aae4:	4621      	mov	r1, r4
 800aae6:	4628      	mov	r0, r5
 800aae8:	f000 ff44 	bl	800b974 <_Bfree>
 800aaec:	2e00      	cmp	r6, #0
 800aaee:	f43f aea4 	beq.w	800a83a <_dtoa_r+0x6c2>
 800aaf2:	f1b8 0f00 	cmp.w	r8, #0
 800aaf6:	d005      	beq.n	800ab04 <_dtoa_r+0x98c>
 800aaf8:	45b0      	cmp	r8, r6
 800aafa:	d003      	beq.n	800ab04 <_dtoa_r+0x98c>
 800aafc:	4641      	mov	r1, r8
 800aafe:	4628      	mov	r0, r5
 800ab00:	f000 ff38 	bl	800b974 <_Bfree>
 800ab04:	4631      	mov	r1, r6
 800ab06:	4628      	mov	r0, r5
 800ab08:	f000 ff34 	bl	800b974 <_Bfree>
 800ab0c:	e695      	b.n	800a83a <_dtoa_r+0x6c2>
 800ab0e:	2400      	movs	r4, #0
 800ab10:	4626      	mov	r6, r4
 800ab12:	e7e1      	b.n	800aad8 <_dtoa_r+0x960>
 800ab14:	46c1      	mov	r9, r8
 800ab16:	4626      	mov	r6, r4
 800ab18:	e594      	b.n	800a644 <_dtoa_r+0x4cc>
 800ab1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab1c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f000 80fc 	beq.w	800ad1e <_dtoa_r+0xba6>
 800ab26:	2f00      	cmp	r7, #0
 800ab28:	dd05      	ble.n	800ab36 <_dtoa_r+0x9be>
 800ab2a:	4631      	mov	r1, r6
 800ab2c:	463a      	mov	r2, r7
 800ab2e:	4628      	mov	r0, r5
 800ab30:	f001 f938 	bl	800bda4 <__lshift>
 800ab34:	4606      	mov	r6, r0
 800ab36:	f1b8 0f00 	cmp.w	r8, #0
 800ab3a:	d05c      	beq.n	800abf6 <_dtoa_r+0xa7e>
 800ab3c:	4628      	mov	r0, r5
 800ab3e:	6871      	ldr	r1, [r6, #4]
 800ab40:	f000 fed8 	bl	800b8f4 <_Balloc>
 800ab44:	4607      	mov	r7, r0
 800ab46:	b928      	cbnz	r0, 800ab54 <_dtoa_r+0x9dc>
 800ab48:	4602      	mov	r2, r0
 800ab4a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ab4e:	4b7e      	ldr	r3, [pc, #504]	; (800ad48 <_dtoa_r+0xbd0>)
 800ab50:	f7ff bb26 	b.w	800a1a0 <_dtoa_r+0x28>
 800ab54:	6932      	ldr	r2, [r6, #16]
 800ab56:	f106 010c 	add.w	r1, r6, #12
 800ab5a:	3202      	adds	r2, #2
 800ab5c:	0092      	lsls	r2, r2, #2
 800ab5e:	300c      	adds	r0, #12
 800ab60:	f7fd fa56 	bl	8008010 <memcpy>
 800ab64:	2201      	movs	r2, #1
 800ab66:	4639      	mov	r1, r7
 800ab68:	4628      	mov	r0, r5
 800ab6a:	f001 f91b 	bl	800bda4 <__lshift>
 800ab6e:	46b0      	mov	r8, r6
 800ab70:	4606      	mov	r6, r0
 800ab72:	9b08      	ldr	r3, [sp, #32]
 800ab74:	3301      	adds	r3, #1
 800ab76:	9302      	str	r3, [sp, #8]
 800ab78:	9b08      	ldr	r3, [sp, #32]
 800ab7a:	445b      	add	r3, fp
 800ab7c:	930a      	str	r3, [sp, #40]	; 0x28
 800ab7e:	9b04      	ldr	r3, [sp, #16]
 800ab80:	f003 0301 	and.w	r3, r3, #1
 800ab84:	9309      	str	r3, [sp, #36]	; 0x24
 800ab86:	9b02      	ldr	r3, [sp, #8]
 800ab88:	4621      	mov	r1, r4
 800ab8a:	4650      	mov	r0, sl
 800ab8c:	f103 3bff 	add.w	fp, r3, #4294967295
 800ab90:	f7ff fa63 	bl	800a05a <quorem>
 800ab94:	4603      	mov	r3, r0
 800ab96:	4641      	mov	r1, r8
 800ab98:	3330      	adds	r3, #48	; 0x30
 800ab9a:	9004      	str	r0, [sp, #16]
 800ab9c:	4650      	mov	r0, sl
 800ab9e:	930b      	str	r3, [sp, #44]	; 0x2c
 800aba0:	f001 f96c 	bl	800be7c <__mcmp>
 800aba4:	4632      	mov	r2, r6
 800aba6:	9006      	str	r0, [sp, #24]
 800aba8:	4621      	mov	r1, r4
 800abaa:	4628      	mov	r0, r5
 800abac:	f001 f982 	bl	800beb4 <__mdiff>
 800abb0:	68c2      	ldr	r2, [r0, #12]
 800abb2:	4607      	mov	r7, r0
 800abb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abb6:	bb02      	cbnz	r2, 800abfa <_dtoa_r+0xa82>
 800abb8:	4601      	mov	r1, r0
 800abba:	4650      	mov	r0, sl
 800abbc:	f001 f95e 	bl	800be7c <__mcmp>
 800abc0:	4602      	mov	r2, r0
 800abc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abc4:	4639      	mov	r1, r7
 800abc6:	4628      	mov	r0, r5
 800abc8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800abcc:	f000 fed2 	bl	800b974 <_Bfree>
 800abd0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800abd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800abd4:	9f02      	ldr	r7, [sp, #8]
 800abd6:	ea43 0102 	orr.w	r1, r3, r2
 800abda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abdc:	430b      	orrs	r3, r1
 800abde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abe0:	d10d      	bne.n	800abfe <_dtoa_r+0xa86>
 800abe2:	2b39      	cmp	r3, #57	; 0x39
 800abe4:	d027      	beq.n	800ac36 <_dtoa_r+0xabe>
 800abe6:	9a06      	ldr	r2, [sp, #24]
 800abe8:	2a00      	cmp	r2, #0
 800abea:	dd01      	ble.n	800abf0 <_dtoa_r+0xa78>
 800abec:	9b04      	ldr	r3, [sp, #16]
 800abee:	3331      	adds	r3, #49	; 0x31
 800abf0:	f88b 3000 	strb.w	r3, [fp]
 800abf4:	e776      	b.n	800aae4 <_dtoa_r+0x96c>
 800abf6:	4630      	mov	r0, r6
 800abf8:	e7b9      	b.n	800ab6e <_dtoa_r+0x9f6>
 800abfa:	2201      	movs	r2, #1
 800abfc:	e7e2      	b.n	800abc4 <_dtoa_r+0xa4c>
 800abfe:	9906      	ldr	r1, [sp, #24]
 800ac00:	2900      	cmp	r1, #0
 800ac02:	db04      	blt.n	800ac0e <_dtoa_r+0xa96>
 800ac04:	9822      	ldr	r0, [sp, #136]	; 0x88
 800ac06:	4301      	orrs	r1, r0
 800ac08:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac0a:	4301      	orrs	r1, r0
 800ac0c:	d120      	bne.n	800ac50 <_dtoa_r+0xad8>
 800ac0e:	2a00      	cmp	r2, #0
 800ac10:	ddee      	ble.n	800abf0 <_dtoa_r+0xa78>
 800ac12:	4651      	mov	r1, sl
 800ac14:	2201      	movs	r2, #1
 800ac16:	4628      	mov	r0, r5
 800ac18:	9302      	str	r3, [sp, #8]
 800ac1a:	f001 f8c3 	bl	800bda4 <__lshift>
 800ac1e:	4621      	mov	r1, r4
 800ac20:	4682      	mov	sl, r0
 800ac22:	f001 f92b 	bl	800be7c <__mcmp>
 800ac26:	2800      	cmp	r0, #0
 800ac28:	9b02      	ldr	r3, [sp, #8]
 800ac2a:	dc02      	bgt.n	800ac32 <_dtoa_r+0xaba>
 800ac2c:	d1e0      	bne.n	800abf0 <_dtoa_r+0xa78>
 800ac2e:	07da      	lsls	r2, r3, #31
 800ac30:	d5de      	bpl.n	800abf0 <_dtoa_r+0xa78>
 800ac32:	2b39      	cmp	r3, #57	; 0x39
 800ac34:	d1da      	bne.n	800abec <_dtoa_r+0xa74>
 800ac36:	2339      	movs	r3, #57	; 0x39
 800ac38:	f88b 3000 	strb.w	r3, [fp]
 800ac3c:	463b      	mov	r3, r7
 800ac3e:	461f      	mov	r7, r3
 800ac40:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800ac44:	3b01      	subs	r3, #1
 800ac46:	2a39      	cmp	r2, #57	; 0x39
 800ac48:	d050      	beq.n	800acec <_dtoa_r+0xb74>
 800ac4a:	3201      	adds	r2, #1
 800ac4c:	701a      	strb	r2, [r3, #0]
 800ac4e:	e749      	b.n	800aae4 <_dtoa_r+0x96c>
 800ac50:	2a00      	cmp	r2, #0
 800ac52:	dd03      	ble.n	800ac5c <_dtoa_r+0xae4>
 800ac54:	2b39      	cmp	r3, #57	; 0x39
 800ac56:	d0ee      	beq.n	800ac36 <_dtoa_r+0xabe>
 800ac58:	3301      	adds	r3, #1
 800ac5a:	e7c9      	b.n	800abf0 <_dtoa_r+0xa78>
 800ac5c:	9a02      	ldr	r2, [sp, #8]
 800ac5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ac60:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ac64:	428a      	cmp	r2, r1
 800ac66:	d02a      	beq.n	800acbe <_dtoa_r+0xb46>
 800ac68:	4651      	mov	r1, sl
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	220a      	movs	r2, #10
 800ac6e:	4628      	mov	r0, r5
 800ac70:	f000 fea2 	bl	800b9b8 <__multadd>
 800ac74:	45b0      	cmp	r8, r6
 800ac76:	4682      	mov	sl, r0
 800ac78:	f04f 0300 	mov.w	r3, #0
 800ac7c:	f04f 020a 	mov.w	r2, #10
 800ac80:	4641      	mov	r1, r8
 800ac82:	4628      	mov	r0, r5
 800ac84:	d107      	bne.n	800ac96 <_dtoa_r+0xb1e>
 800ac86:	f000 fe97 	bl	800b9b8 <__multadd>
 800ac8a:	4680      	mov	r8, r0
 800ac8c:	4606      	mov	r6, r0
 800ac8e:	9b02      	ldr	r3, [sp, #8]
 800ac90:	3301      	adds	r3, #1
 800ac92:	9302      	str	r3, [sp, #8]
 800ac94:	e777      	b.n	800ab86 <_dtoa_r+0xa0e>
 800ac96:	f000 fe8f 	bl	800b9b8 <__multadd>
 800ac9a:	4631      	mov	r1, r6
 800ac9c:	4680      	mov	r8, r0
 800ac9e:	2300      	movs	r3, #0
 800aca0:	220a      	movs	r2, #10
 800aca2:	4628      	mov	r0, r5
 800aca4:	f000 fe88 	bl	800b9b8 <__multadd>
 800aca8:	4606      	mov	r6, r0
 800acaa:	e7f0      	b.n	800ac8e <_dtoa_r+0xb16>
 800acac:	f1bb 0f00 	cmp.w	fp, #0
 800acb0:	bfcc      	ite	gt
 800acb2:	465f      	movgt	r7, fp
 800acb4:	2701      	movle	r7, #1
 800acb6:	f04f 0800 	mov.w	r8, #0
 800acba:	9a08      	ldr	r2, [sp, #32]
 800acbc:	4417      	add	r7, r2
 800acbe:	4651      	mov	r1, sl
 800acc0:	2201      	movs	r2, #1
 800acc2:	4628      	mov	r0, r5
 800acc4:	9302      	str	r3, [sp, #8]
 800acc6:	f001 f86d 	bl	800bda4 <__lshift>
 800acca:	4621      	mov	r1, r4
 800accc:	4682      	mov	sl, r0
 800acce:	f001 f8d5 	bl	800be7c <__mcmp>
 800acd2:	2800      	cmp	r0, #0
 800acd4:	dcb2      	bgt.n	800ac3c <_dtoa_r+0xac4>
 800acd6:	d102      	bne.n	800acde <_dtoa_r+0xb66>
 800acd8:	9b02      	ldr	r3, [sp, #8]
 800acda:	07db      	lsls	r3, r3, #31
 800acdc:	d4ae      	bmi.n	800ac3c <_dtoa_r+0xac4>
 800acde:	463b      	mov	r3, r7
 800ace0:	461f      	mov	r7, r3
 800ace2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ace6:	2a30      	cmp	r2, #48	; 0x30
 800ace8:	d0fa      	beq.n	800ace0 <_dtoa_r+0xb68>
 800acea:	e6fb      	b.n	800aae4 <_dtoa_r+0x96c>
 800acec:	9a08      	ldr	r2, [sp, #32]
 800acee:	429a      	cmp	r2, r3
 800acf0:	d1a5      	bne.n	800ac3e <_dtoa_r+0xac6>
 800acf2:	2331      	movs	r3, #49	; 0x31
 800acf4:	f109 0901 	add.w	r9, r9, #1
 800acf8:	7013      	strb	r3, [r2, #0]
 800acfa:	e6f3      	b.n	800aae4 <_dtoa_r+0x96c>
 800acfc:	4b13      	ldr	r3, [pc, #76]	; (800ad4c <_dtoa_r+0xbd4>)
 800acfe:	f7ff baa7 	b.w	800a250 <_dtoa_r+0xd8>
 800ad02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f47f aa80 	bne.w	800a20a <_dtoa_r+0x92>
 800ad0a:	4b11      	ldr	r3, [pc, #68]	; (800ad50 <_dtoa_r+0xbd8>)
 800ad0c:	f7ff baa0 	b.w	800a250 <_dtoa_r+0xd8>
 800ad10:	f1bb 0f00 	cmp.w	fp, #0
 800ad14:	dc03      	bgt.n	800ad1e <_dtoa_r+0xba6>
 800ad16:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad18:	2b02      	cmp	r3, #2
 800ad1a:	f73f aecc 	bgt.w	800aab6 <_dtoa_r+0x93e>
 800ad1e:	9f08      	ldr	r7, [sp, #32]
 800ad20:	4621      	mov	r1, r4
 800ad22:	4650      	mov	r0, sl
 800ad24:	f7ff f999 	bl	800a05a <quorem>
 800ad28:	9a08      	ldr	r2, [sp, #32]
 800ad2a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ad2e:	f807 3b01 	strb.w	r3, [r7], #1
 800ad32:	1aba      	subs	r2, r7, r2
 800ad34:	4593      	cmp	fp, r2
 800ad36:	ddb9      	ble.n	800acac <_dtoa_r+0xb34>
 800ad38:	4651      	mov	r1, sl
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	220a      	movs	r2, #10
 800ad3e:	4628      	mov	r0, r5
 800ad40:	f000 fe3a 	bl	800b9b8 <__multadd>
 800ad44:	4682      	mov	sl, r0
 800ad46:	e7eb      	b.n	800ad20 <_dtoa_r+0xba8>
 800ad48:	0800caec 	.word	0x0800caec
 800ad4c:	0800c8e9 	.word	0x0800c8e9
 800ad50:	0800ca69 	.word	0x0800ca69

0800ad54 <__sflush_r>:
 800ad54:	898a      	ldrh	r2, [r1, #12]
 800ad56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad5a:	4605      	mov	r5, r0
 800ad5c:	0710      	lsls	r0, r2, #28
 800ad5e:	460c      	mov	r4, r1
 800ad60:	d458      	bmi.n	800ae14 <__sflush_r+0xc0>
 800ad62:	684b      	ldr	r3, [r1, #4]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	dc05      	bgt.n	800ad74 <__sflush_r+0x20>
 800ad68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	dc02      	bgt.n	800ad74 <__sflush_r+0x20>
 800ad6e:	2000      	movs	r0, #0
 800ad70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad76:	2e00      	cmp	r6, #0
 800ad78:	d0f9      	beq.n	800ad6e <__sflush_r+0x1a>
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad80:	682f      	ldr	r7, [r5, #0]
 800ad82:	602b      	str	r3, [r5, #0]
 800ad84:	d032      	beq.n	800adec <__sflush_r+0x98>
 800ad86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad88:	89a3      	ldrh	r3, [r4, #12]
 800ad8a:	075a      	lsls	r2, r3, #29
 800ad8c:	d505      	bpl.n	800ad9a <__sflush_r+0x46>
 800ad8e:	6863      	ldr	r3, [r4, #4]
 800ad90:	1ac0      	subs	r0, r0, r3
 800ad92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad94:	b10b      	cbz	r3, 800ad9a <__sflush_r+0x46>
 800ad96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad98:	1ac0      	subs	r0, r0, r3
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ada0:	4628      	mov	r0, r5
 800ada2:	6a21      	ldr	r1, [r4, #32]
 800ada4:	47b0      	blx	r6
 800ada6:	1c43      	adds	r3, r0, #1
 800ada8:	89a3      	ldrh	r3, [r4, #12]
 800adaa:	d106      	bne.n	800adba <__sflush_r+0x66>
 800adac:	6829      	ldr	r1, [r5, #0]
 800adae:	291d      	cmp	r1, #29
 800adb0:	d82c      	bhi.n	800ae0c <__sflush_r+0xb8>
 800adb2:	4a2a      	ldr	r2, [pc, #168]	; (800ae5c <__sflush_r+0x108>)
 800adb4:	40ca      	lsrs	r2, r1
 800adb6:	07d6      	lsls	r6, r2, #31
 800adb8:	d528      	bpl.n	800ae0c <__sflush_r+0xb8>
 800adba:	2200      	movs	r2, #0
 800adbc:	6062      	str	r2, [r4, #4]
 800adbe:	6922      	ldr	r2, [r4, #16]
 800adc0:	04d9      	lsls	r1, r3, #19
 800adc2:	6022      	str	r2, [r4, #0]
 800adc4:	d504      	bpl.n	800add0 <__sflush_r+0x7c>
 800adc6:	1c42      	adds	r2, r0, #1
 800adc8:	d101      	bne.n	800adce <__sflush_r+0x7a>
 800adca:	682b      	ldr	r3, [r5, #0]
 800adcc:	b903      	cbnz	r3, 800add0 <__sflush_r+0x7c>
 800adce:	6560      	str	r0, [r4, #84]	; 0x54
 800add0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800add2:	602f      	str	r7, [r5, #0]
 800add4:	2900      	cmp	r1, #0
 800add6:	d0ca      	beq.n	800ad6e <__sflush_r+0x1a>
 800add8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800addc:	4299      	cmp	r1, r3
 800adde:	d002      	beq.n	800ade6 <__sflush_r+0x92>
 800ade0:	4628      	mov	r0, r5
 800ade2:	f7fd f92b 	bl	800803c <_free_r>
 800ade6:	2000      	movs	r0, #0
 800ade8:	6360      	str	r0, [r4, #52]	; 0x34
 800adea:	e7c1      	b.n	800ad70 <__sflush_r+0x1c>
 800adec:	6a21      	ldr	r1, [r4, #32]
 800adee:	2301      	movs	r3, #1
 800adf0:	4628      	mov	r0, r5
 800adf2:	47b0      	blx	r6
 800adf4:	1c41      	adds	r1, r0, #1
 800adf6:	d1c7      	bne.n	800ad88 <__sflush_r+0x34>
 800adf8:	682b      	ldr	r3, [r5, #0]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d0c4      	beq.n	800ad88 <__sflush_r+0x34>
 800adfe:	2b1d      	cmp	r3, #29
 800ae00:	d001      	beq.n	800ae06 <__sflush_r+0xb2>
 800ae02:	2b16      	cmp	r3, #22
 800ae04:	d101      	bne.n	800ae0a <__sflush_r+0xb6>
 800ae06:	602f      	str	r7, [r5, #0]
 800ae08:	e7b1      	b.n	800ad6e <__sflush_r+0x1a>
 800ae0a:	89a3      	ldrh	r3, [r4, #12]
 800ae0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae10:	81a3      	strh	r3, [r4, #12]
 800ae12:	e7ad      	b.n	800ad70 <__sflush_r+0x1c>
 800ae14:	690f      	ldr	r7, [r1, #16]
 800ae16:	2f00      	cmp	r7, #0
 800ae18:	d0a9      	beq.n	800ad6e <__sflush_r+0x1a>
 800ae1a:	0793      	lsls	r3, r2, #30
 800ae1c:	bf18      	it	ne
 800ae1e:	2300      	movne	r3, #0
 800ae20:	680e      	ldr	r6, [r1, #0]
 800ae22:	bf08      	it	eq
 800ae24:	694b      	ldreq	r3, [r1, #20]
 800ae26:	eba6 0807 	sub.w	r8, r6, r7
 800ae2a:	600f      	str	r7, [r1, #0]
 800ae2c:	608b      	str	r3, [r1, #8]
 800ae2e:	f1b8 0f00 	cmp.w	r8, #0
 800ae32:	dd9c      	ble.n	800ad6e <__sflush_r+0x1a>
 800ae34:	4643      	mov	r3, r8
 800ae36:	463a      	mov	r2, r7
 800ae38:	4628      	mov	r0, r5
 800ae3a:	6a21      	ldr	r1, [r4, #32]
 800ae3c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae3e:	47b0      	blx	r6
 800ae40:	2800      	cmp	r0, #0
 800ae42:	dc06      	bgt.n	800ae52 <__sflush_r+0xfe>
 800ae44:	89a3      	ldrh	r3, [r4, #12]
 800ae46:	f04f 30ff 	mov.w	r0, #4294967295
 800ae4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae4e:	81a3      	strh	r3, [r4, #12]
 800ae50:	e78e      	b.n	800ad70 <__sflush_r+0x1c>
 800ae52:	4407      	add	r7, r0
 800ae54:	eba8 0800 	sub.w	r8, r8, r0
 800ae58:	e7e9      	b.n	800ae2e <__sflush_r+0xda>
 800ae5a:	bf00      	nop
 800ae5c:	20400001 	.word	0x20400001

0800ae60 <_fflush_r>:
 800ae60:	b538      	push	{r3, r4, r5, lr}
 800ae62:	690b      	ldr	r3, [r1, #16]
 800ae64:	4605      	mov	r5, r0
 800ae66:	460c      	mov	r4, r1
 800ae68:	b913      	cbnz	r3, 800ae70 <_fflush_r+0x10>
 800ae6a:	2500      	movs	r5, #0
 800ae6c:	4628      	mov	r0, r5
 800ae6e:	bd38      	pop	{r3, r4, r5, pc}
 800ae70:	b118      	cbz	r0, 800ae7a <_fflush_r+0x1a>
 800ae72:	6983      	ldr	r3, [r0, #24]
 800ae74:	b90b      	cbnz	r3, 800ae7a <_fflush_r+0x1a>
 800ae76:	f000 f887 	bl	800af88 <__sinit>
 800ae7a:	4b14      	ldr	r3, [pc, #80]	; (800aecc <_fflush_r+0x6c>)
 800ae7c:	429c      	cmp	r4, r3
 800ae7e:	d11b      	bne.n	800aeb8 <_fflush_r+0x58>
 800ae80:	686c      	ldr	r4, [r5, #4]
 800ae82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d0ef      	beq.n	800ae6a <_fflush_r+0xa>
 800ae8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae8c:	07d0      	lsls	r0, r2, #31
 800ae8e:	d404      	bmi.n	800ae9a <_fflush_r+0x3a>
 800ae90:	0599      	lsls	r1, r3, #22
 800ae92:	d402      	bmi.n	800ae9a <_fflush_r+0x3a>
 800ae94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae96:	f000 fc80 	bl	800b79a <__retarget_lock_acquire_recursive>
 800ae9a:	4628      	mov	r0, r5
 800ae9c:	4621      	mov	r1, r4
 800ae9e:	f7ff ff59 	bl	800ad54 <__sflush_r>
 800aea2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aea4:	4605      	mov	r5, r0
 800aea6:	07da      	lsls	r2, r3, #31
 800aea8:	d4e0      	bmi.n	800ae6c <_fflush_r+0xc>
 800aeaa:	89a3      	ldrh	r3, [r4, #12]
 800aeac:	059b      	lsls	r3, r3, #22
 800aeae:	d4dd      	bmi.n	800ae6c <_fflush_r+0xc>
 800aeb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aeb2:	f000 fc73 	bl	800b79c <__retarget_lock_release_recursive>
 800aeb6:	e7d9      	b.n	800ae6c <_fflush_r+0xc>
 800aeb8:	4b05      	ldr	r3, [pc, #20]	; (800aed0 <_fflush_r+0x70>)
 800aeba:	429c      	cmp	r4, r3
 800aebc:	d101      	bne.n	800aec2 <_fflush_r+0x62>
 800aebe:	68ac      	ldr	r4, [r5, #8]
 800aec0:	e7df      	b.n	800ae82 <_fflush_r+0x22>
 800aec2:	4b04      	ldr	r3, [pc, #16]	; (800aed4 <_fflush_r+0x74>)
 800aec4:	429c      	cmp	r4, r3
 800aec6:	bf08      	it	eq
 800aec8:	68ec      	ldreq	r4, [r5, #12]
 800aeca:	e7da      	b.n	800ae82 <_fflush_r+0x22>
 800aecc:	0800cb20 	.word	0x0800cb20
 800aed0:	0800cb40 	.word	0x0800cb40
 800aed4:	0800cb00 	.word	0x0800cb00

0800aed8 <std>:
 800aed8:	2300      	movs	r3, #0
 800aeda:	b510      	push	{r4, lr}
 800aedc:	4604      	mov	r4, r0
 800aede:	e9c0 3300 	strd	r3, r3, [r0]
 800aee2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aee6:	6083      	str	r3, [r0, #8]
 800aee8:	8181      	strh	r1, [r0, #12]
 800aeea:	6643      	str	r3, [r0, #100]	; 0x64
 800aeec:	81c2      	strh	r2, [r0, #14]
 800aeee:	6183      	str	r3, [r0, #24]
 800aef0:	4619      	mov	r1, r3
 800aef2:	2208      	movs	r2, #8
 800aef4:	305c      	adds	r0, #92	; 0x5c
 800aef6:	f7fd f899 	bl	800802c <memset>
 800aefa:	4b05      	ldr	r3, [pc, #20]	; (800af10 <std+0x38>)
 800aefc:	6224      	str	r4, [r4, #32]
 800aefe:	6263      	str	r3, [r4, #36]	; 0x24
 800af00:	4b04      	ldr	r3, [pc, #16]	; (800af14 <std+0x3c>)
 800af02:	62a3      	str	r3, [r4, #40]	; 0x28
 800af04:	4b04      	ldr	r3, [pc, #16]	; (800af18 <std+0x40>)
 800af06:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af08:	4b04      	ldr	r3, [pc, #16]	; (800af1c <std+0x44>)
 800af0a:	6323      	str	r3, [r4, #48]	; 0x30
 800af0c:	bd10      	pop	{r4, pc}
 800af0e:	bf00      	nop
 800af10:	0800c619 	.word	0x0800c619
 800af14:	0800c63b 	.word	0x0800c63b
 800af18:	0800c673 	.word	0x0800c673
 800af1c:	0800c697 	.word	0x0800c697

0800af20 <_cleanup_r>:
 800af20:	4901      	ldr	r1, [pc, #4]	; (800af28 <_cleanup_r+0x8>)
 800af22:	f000 b8af 	b.w	800b084 <_fwalk_reent>
 800af26:	bf00      	nop
 800af28:	0800ae61 	.word	0x0800ae61

0800af2c <__sfmoreglue>:
 800af2c:	b570      	push	{r4, r5, r6, lr}
 800af2e:	2568      	movs	r5, #104	; 0x68
 800af30:	1e4a      	subs	r2, r1, #1
 800af32:	4355      	muls	r5, r2
 800af34:	460e      	mov	r6, r1
 800af36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af3a:	f7fd f8cb 	bl	80080d4 <_malloc_r>
 800af3e:	4604      	mov	r4, r0
 800af40:	b140      	cbz	r0, 800af54 <__sfmoreglue+0x28>
 800af42:	2100      	movs	r1, #0
 800af44:	e9c0 1600 	strd	r1, r6, [r0]
 800af48:	300c      	adds	r0, #12
 800af4a:	60a0      	str	r0, [r4, #8]
 800af4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af50:	f7fd f86c 	bl	800802c <memset>
 800af54:	4620      	mov	r0, r4
 800af56:	bd70      	pop	{r4, r5, r6, pc}

0800af58 <__sfp_lock_acquire>:
 800af58:	4801      	ldr	r0, [pc, #4]	; (800af60 <__sfp_lock_acquire+0x8>)
 800af5a:	f000 bc1e 	b.w	800b79a <__retarget_lock_acquire_recursive>
 800af5e:	bf00      	nop
 800af60:	20000a58 	.word	0x20000a58

0800af64 <__sfp_lock_release>:
 800af64:	4801      	ldr	r0, [pc, #4]	; (800af6c <__sfp_lock_release+0x8>)
 800af66:	f000 bc19 	b.w	800b79c <__retarget_lock_release_recursive>
 800af6a:	bf00      	nop
 800af6c:	20000a58 	.word	0x20000a58

0800af70 <__sinit_lock_acquire>:
 800af70:	4801      	ldr	r0, [pc, #4]	; (800af78 <__sinit_lock_acquire+0x8>)
 800af72:	f000 bc12 	b.w	800b79a <__retarget_lock_acquire_recursive>
 800af76:	bf00      	nop
 800af78:	20000a53 	.word	0x20000a53

0800af7c <__sinit_lock_release>:
 800af7c:	4801      	ldr	r0, [pc, #4]	; (800af84 <__sinit_lock_release+0x8>)
 800af7e:	f000 bc0d 	b.w	800b79c <__retarget_lock_release_recursive>
 800af82:	bf00      	nop
 800af84:	20000a53 	.word	0x20000a53

0800af88 <__sinit>:
 800af88:	b510      	push	{r4, lr}
 800af8a:	4604      	mov	r4, r0
 800af8c:	f7ff fff0 	bl	800af70 <__sinit_lock_acquire>
 800af90:	69a3      	ldr	r3, [r4, #24]
 800af92:	b11b      	cbz	r3, 800af9c <__sinit+0x14>
 800af94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af98:	f7ff bff0 	b.w	800af7c <__sinit_lock_release>
 800af9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800afa0:	6523      	str	r3, [r4, #80]	; 0x50
 800afa2:	4b13      	ldr	r3, [pc, #76]	; (800aff0 <__sinit+0x68>)
 800afa4:	4a13      	ldr	r2, [pc, #76]	; (800aff4 <__sinit+0x6c>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	62a2      	str	r2, [r4, #40]	; 0x28
 800afaa:	42a3      	cmp	r3, r4
 800afac:	bf08      	it	eq
 800afae:	2301      	moveq	r3, #1
 800afb0:	4620      	mov	r0, r4
 800afb2:	bf08      	it	eq
 800afb4:	61a3      	streq	r3, [r4, #24]
 800afb6:	f000 f81f 	bl	800aff8 <__sfp>
 800afba:	6060      	str	r0, [r4, #4]
 800afbc:	4620      	mov	r0, r4
 800afbe:	f000 f81b 	bl	800aff8 <__sfp>
 800afc2:	60a0      	str	r0, [r4, #8]
 800afc4:	4620      	mov	r0, r4
 800afc6:	f000 f817 	bl	800aff8 <__sfp>
 800afca:	2200      	movs	r2, #0
 800afcc:	2104      	movs	r1, #4
 800afce:	60e0      	str	r0, [r4, #12]
 800afd0:	6860      	ldr	r0, [r4, #4]
 800afd2:	f7ff ff81 	bl	800aed8 <std>
 800afd6:	2201      	movs	r2, #1
 800afd8:	2109      	movs	r1, #9
 800afda:	68a0      	ldr	r0, [r4, #8]
 800afdc:	f7ff ff7c 	bl	800aed8 <std>
 800afe0:	2202      	movs	r2, #2
 800afe2:	2112      	movs	r1, #18
 800afe4:	68e0      	ldr	r0, [r4, #12]
 800afe6:	f7ff ff77 	bl	800aed8 <std>
 800afea:	2301      	movs	r3, #1
 800afec:	61a3      	str	r3, [r4, #24]
 800afee:	e7d1      	b.n	800af94 <__sinit+0xc>
 800aff0:	0800c8c4 	.word	0x0800c8c4
 800aff4:	0800af21 	.word	0x0800af21

0800aff8 <__sfp>:
 800aff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800affa:	4607      	mov	r7, r0
 800affc:	f7ff ffac 	bl	800af58 <__sfp_lock_acquire>
 800b000:	4b1e      	ldr	r3, [pc, #120]	; (800b07c <__sfp+0x84>)
 800b002:	681e      	ldr	r6, [r3, #0]
 800b004:	69b3      	ldr	r3, [r6, #24]
 800b006:	b913      	cbnz	r3, 800b00e <__sfp+0x16>
 800b008:	4630      	mov	r0, r6
 800b00a:	f7ff ffbd 	bl	800af88 <__sinit>
 800b00e:	3648      	adds	r6, #72	; 0x48
 800b010:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b014:	3b01      	subs	r3, #1
 800b016:	d503      	bpl.n	800b020 <__sfp+0x28>
 800b018:	6833      	ldr	r3, [r6, #0]
 800b01a:	b30b      	cbz	r3, 800b060 <__sfp+0x68>
 800b01c:	6836      	ldr	r6, [r6, #0]
 800b01e:	e7f7      	b.n	800b010 <__sfp+0x18>
 800b020:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b024:	b9d5      	cbnz	r5, 800b05c <__sfp+0x64>
 800b026:	4b16      	ldr	r3, [pc, #88]	; (800b080 <__sfp+0x88>)
 800b028:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b02c:	60e3      	str	r3, [r4, #12]
 800b02e:	6665      	str	r5, [r4, #100]	; 0x64
 800b030:	f000 fbb2 	bl	800b798 <__retarget_lock_init_recursive>
 800b034:	f7ff ff96 	bl	800af64 <__sfp_lock_release>
 800b038:	2208      	movs	r2, #8
 800b03a:	4629      	mov	r1, r5
 800b03c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b040:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b044:	6025      	str	r5, [r4, #0]
 800b046:	61a5      	str	r5, [r4, #24]
 800b048:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b04c:	f7fc ffee 	bl	800802c <memset>
 800b050:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b054:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b058:	4620      	mov	r0, r4
 800b05a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b05c:	3468      	adds	r4, #104	; 0x68
 800b05e:	e7d9      	b.n	800b014 <__sfp+0x1c>
 800b060:	2104      	movs	r1, #4
 800b062:	4638      	mov	r0, r7
 800b064:	f7ff ff62 	bl	800af2c <__sfmoreglue>
 800b068:	4604      	mov	r4, r0
 800b06a:	6030      	str	r0, [r6, #0]
 800b06c:	2800      	cmp	r0, #0
 800b06e:	d1d5      	bne.n	800b01c <__sfp+0x24>
 800b070:	f7ff ff78 	bl	800af64 <__sfp_lock_release>
 800b074:	230c      	movs	r3, #12
 800b076:	603b      	str	r3, [r7, #0]
 800b078:	e7ee      	b.n	800b058 <__sfp+0x60>
 800b07a:	bf00      	nop
 800b07c:	0800c8c4 	.word	0x0800c8c4
 800b080:	ffff0001 	.word	0xffff0001

0800b084 <_fwalk_reent>:
 800b084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b088:	4606      	mov	r6, r0
 800b08a:	4688      	mov	r8, r1
 800b08c:	2700      	movs	r7, #0
 800b08e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b092:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b096:	f1b9 0901 	subs.w	r9, r9, #1
 800b09a:	d505      	bpl.n	800b0a8 <_fwalk_reent+0x24>
 800b09c:	6824      	ldr	r4, [r4, #0]
 800b09e:	2c00      	cmp	r4, #0
 800b0a0:	d1f7      	bne.n	800b092 <_fwalk_reent+0xe>
 800b0a2:	4638      	mov	r0, r7
 800b0a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0a8:	89ab      	ldrh	r3, [r5, #12]
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d907      	bls.n	800b0be <_fwalk_reent+0x3a>
 800b0ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	d003      	beq.n	800b0be <_fwalk_reent+0x3a>
 800b0b6:	4629      	mov	r1, r5
 800b0b8:	4630      	mov	r0, r6
 800b0ba:	47c0      	blx	r8
 800b0bc:	4307      	orrs	r7, r0
 800b0be:	3568      	adds	r5, #104	; 0x68
 800b0c0:	e7e9      	b.n	800b096 <_fwalk_reent+0x12>

0800b0c2 <rshift>:
 800b0c2:	6903      	ldr	r3, [r0, #16]
 800b0c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b0c8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b0cc:	f100 0414 	add.w	r4, r0, #20
 800b0d0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b0d4:	dd46      	ble.n	800b164 <rshift+0xa2>
 800b0d6:	f011 011f 	ands.w	r1, r1, #31
 800b0da:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b0de:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b0e2:	d10c      	bne.n	800b0fe <rshift+0x3c>
 800b0e4:	4629      	mov	r1, r5
 800b0e6:	f100 0710 	add.w	r7, r0, #16
 800b0ea:	42b1      	cmp	r1, r6
 800b0ec:	d335      	bcc.n	800b15a <rshift+0x98>
 800b0ee:	1a9b      	subs	r3, r3, r2
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	1eea      	subs	r2, r5, #3
 800b0f4:	4296      	cmp	r6, r2
 800b0f6:	bf38      	it	cc
 800b0f8:	2300      	movcc	r3, #0
 800b0fa:	4423      	add	r3, r4
 800b0fc:	e015      	b.n	800b12a <rshift+0x68>
 800b0fe:	46a1      	mov	r9, r4
 800b100:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b104:	f1c1 0820 	rsb	r8, r1, #32
 800b108:	40cf      	lsrs	r7, r1
 800b10a:	f105 0e04 	add.w	lr, r5, #4
 800b10e:	4576      	cmp	r6, lr
 800b110:	46f4      	mov	ip, lr
 800b112:	d816      	bhi.n	800b142 <rshift+0x80>
 800b114:	1a9b      	subs	r3, r3, r2
 800b116:	009a      	lsls	r2, r3, #2
 800b118:	3a04      	subs	r2, #4
 800b11a:	3501      	adds	r5, #1
 800b11c:	42ae      	cmp	r6, r5
 800b11e:	bf38      	it	cc
 800b120:	2200      	movcc	r2, #0
 800b122:	18a3      	adds	r3, r4, r2
 800b124:	50a7      	str	r7, [r4, r2]
 800b126:	b107      	cbz	r7, 800b12a <rshift+0x68>
 800b128:	3304      	adds	r3, #4
 800b12a:	42a3      	cmp	r3, r4
 800b12c:	eba3 0204 	sub.w	r2, r3, r4
 800b130:	bf08      	it	eq
 800b132:	2300      	moveq	r3, #0
 800b134:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b138:	6102      	str	r2, [r0, #16]
 800b13a:	bf08      	it	eq
 800b13c:	6143      	streq	r3, [r0, #20]
 800b13e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b142:	f8dc c000 	ldr.w	ip, [ip]
 800b146:	fa0c fc08 	lsl.w	ip, ip, r8
 800b14a:	ea4c 0707 	orr.w	r7, ip, r7
 800b14e:	f849 7b04 	str.w	r7, [r9], #4
 800b152:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b156:	40cf      	lsrs	r7, r1
 800b158:	e7d9      	b.n	800b10e <rshift+0x4c>
 800b15a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b15e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b162:	e7c2      	b.n	800b0ea <rshift+0x28>
 800b164:	4623      	mov	r3, r4
 800b166:	e7e0      	b.n	800b12a <rshift+0x68>

0800b168 <__hexdig_fun>:
 800b168:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b16c:	2b09      	cmp	r3, #9
 800b16e:	d802      	bhi.n	800b176 <__hexdig_fun+0xe>
 800b170:	3820      	subs	r0, #32
 800b172:	b2c0      	uxtb	r0, r0
 800b174:	4770      	bx	lr
 800b176:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b17a:	2b05      	cmp	r3, #5
 800b17c:	d801      	bhi.n	800b182 <__hexdig_fun+0x1a>
 800b17e:	3847      	subs	r0, #71	; 0x47
 800b180:	e7f7      	b.n	800b172 <__hexdig_fun+0xa>
 800b182:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b186:	2b05      	cmp	r3, #5
 800b188:	d801      	bhi.n	800b18e <__hexdig_fun+0x26>
 800b18a:	3827      	subs	r0, #39	; 0x27
 800b18c:	e7f1      	b.n	800b172 <__hexdig_fun+0xa>
 800b18e:	2000      	movs	r0, #0
 800b190:	4770      	bx	lr
	...

0800b194 <__gethex>:
 800b194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b198:	b08b      	sub	sp, #44	; 0x2c
 800b19a:	9306      	str	r3, [sp, #24]
 800b19c:	4bb9      	ldr	r3, [pc, #740]	; (800b484 <__gethex+0x2f0>)
 800b19e:	9002      	str	r0, [sp, #8]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	468b      	mov	fp, r1
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	4690      	mov	r8, r2
 800b1a8:	9303      	str	r3, [sp, #12]
 800b1aa:	f7f4 ffd1 	bl	8000150 <strlen>
 800b1ae:	4682      	mov	sl, r0
 800b1b0:	9b03      	ldr	r3, [sp, #12]
 800b1b2:	f8db 2000 	ldr.w	r2, [fp]
 800b1b6:	4403      	add	r3, r0
 800b1b8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b1bc:	9307      	str	r3, [sp, #28]
 800b1be:	1c93      	adds	r3, r2, #2
 800b1c0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b1c4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b1c8:	32fe      	adds	r2, #254	; 0xfe
 800b1ca:	18d1      	adds	r1, r2, r3
 800b1cc:	461f      	mov	r7, r3
 800b1ce:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b1d2:	9101      	str	r1, [sp, #4]
 800b1d4:	2830      	cmp	r0, #48	; 0x30
 800b1d6:	d0f8      	beq.n	800b1ca <__gethex+0x36>
 800b1d8:	f7ff ffc6 	bl	800b168 <__hexdig_fun>
 800b1dc:	4604      	mov	r4, r0
 800b1de:	2800      	cmp	r0, #0
 800b1e0:	d13a      	bne.n	800b258 <__gethex+0xc4>
 800b1e2:	4652      	mov	r2, sl
 800b1e4:	4638      	mov	r0, r7
 800b1e6:	9903      	ldr	r1, [sp, #12]
 800b1e8:	f001 fa59 	bl	800c69e <strncmp>
 800b1ec:	4605      	mov	r5, r0
 800b1ee:	2800      	cmp	r0, #0
 800b1f0:	d166      	bne.n	800b2c0 <__gethex+0x12c>
 800b1f2:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b1f6:	eb07 060a 	add.w	r6, r7, sl
 800b1fa:	f7ff ffb5 	bl	800b168 <__hexdig_fun>
 800b1fe:	2800      	cmp	r0, #0
 800b200:	d060      	beq.n	800b2c4 <__gethex+0x130>
 800b202:	4633      	mov	r3, r6
 800b204:	7818      	ldrb	r0, [r3, #0]
 800b206:	461f      	mov	r7, r3
 800b208:	2830      	cmp	r0, #48	; 0x30
 800b20a:	f103 0301 	add.w	r3, r3, #1
 800b20e:	d0f9      	beq.n	800b204 <__gethex+0x70>
 800b210:	f7ff ffaa 	bl	800b168 <__hexdig_fun>
 800b214:	2301      	movs	r3, #1
 800b216:	fab0 f480 	clz	r4, r0
 800b21a:	4635      	mov	r5, r6
 800b21c:	0964      	lsrs	r4, r4, #5
 800b21e:	9301      	str	r3, [sp, #4]
 800b220:	463a      	mov	r2, r7
 800b222:	4616      	mov	r6, r2
 800b224:	7830      	ldrb	r0, [r6, #0]
 800b226:	3201      	adds	r2, #1
 800b228:	f7ff ff9e 	bl	800b168 <__hexdig_fun>
 800b22c:	2800      	cmp	r0, #0
 800b22e:	d1f8      	bne.n	800b222 <__gethex+0x8e>
 800b230:	4652      	mov	r2, sl
 800b232:	4630      	mov	r0, r6
 800b234:	9903      	ldr	r1, [sp, #12]
 800b236:	f001 fa32 	bl	800c69e <strncmp>
 800b23a:	b980      	cbnz	r0, 800b25e <__gethex+0xca>
 800b23c:	b94d      	cbnz	r5, 800b252 <__gethex+0xbe>
 800b23e:	eb06 050a 	add.w	r5, r6, sl
 800b242:	462a      	mov	r2, r5
 800b244:	4616      	mov	r6, r2
 800b246:	7830      	ldrb	r0, [r6, #0]
 800b248:	3201      	adds	r2, #1
 800b24a:	f7ff ff8d 	bl	800b168 <__hexdig_fun>
 800b24e:	2800      	cmp	r0, #0
 800b250:	d1f8      	bne.n	800b244 <__gethex+0xb0>
 800b252:	1bad      	subs	r5, r5, r6
 800b254:	00ad      	lsls	r5, r5, #2
 800b256:	e004      	b.n	800b262 <__gethex+0xce>
 800b258:	2400      	movs	r4, #0
 800b25a:	4625      	mov	r5, r4
 800b25c:	e7e0      	b.n	800b220 <__gethex+0x8c>
 800b25e:	2d00      	cmp	r5, #0
 800b260:	d1f7      	bne.n	800b252 <__gethex+0xbe>
 800b262:	7833      	ldrb	r3, [r6, #0]
 800b264:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b268:	2b50      	cmp	r3, #80	; 0x50
 800b26a:	d139      	bne.n	800b2e0 <__gethex+0x14c>
 800b26c:	7873      	ldrb	r3, [r6, #1]
 800b26e:	2b2b      	cmp	r3, #43	; 0x2b
 800b270:	d02a      	beq.n	800b2c8 <__gethex+0x134>
 800b272:	2b2d      	cmp	r3, #45	; 0x2d
 800b274:	d02c      	beq.n	800b2d0 <__gethex+0x13c>
 800b276:	f04f 0900 	mov.w	r9, #0
 800b27a:	1c71      	adds	r1, r6, #1
 800b27c:	7808      	ldrb	r0, [r1, #0]
 800b27e:	f7ff ff73 	bl	800b168 <__hexdig_fun>
 800b282:	1e43      	subs	r3, r0, #1
 800b284:	b2db      	uxtb	r3, r3
 800b286:	2b18      	cmp	r3, #24
 800b288:	d82a      	bhi.n	800b2e0 <__gethex+0x14c>
 800b28a:	f1a0 0210 	sub.w	r2, r0, #16
 800b28e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b292:	f7ff ff69 	bl	800b168 <__hexdig_fun>
 800b296:	1e43      	subs	r3, r0, #1
 800b298:	b2db      	uxtb	r3, r3
 800b29a:	2b18      	cmp	r3, #24
 800b29c:	d91b      	bls.n	800b2d6 <__gethex+0x142>
 800b29e:	f1b9 0f00 	cmp.w	r9, #0
 800b2a2:	d000      	beq.n	800b2a6 <__gethex+0x112>
 800b2a4:	4252      	negs	r2, r2
 800b2a6:	4415      	add	r5, r2
 800b2a8:	f8cb 1000 	str.w	r1, [fp]
 800b2ac:	b1d4      	cbz	r4, 800b2e4 <__gethex+0x150>
 800b2ae:	9b01      	ldr	r3, [sp, #4]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	bf14      	ite	ne
 800b2b4:	2700      	movne	r7, #0
 800b2b6:	2706      	moveq	r7, #6
 800b2b8:	4638      	mov	r0, r7
 800b2ba:	b00b      	add	sp, #44	; 0x2c
 800b2bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2c0:	463e      	mov	r6, r7
 800b2c2:	4625      	mov	r5, r4
 800b2c4:	2401      	movs	r4, #1
 800b2c6:	e7cc      	b.n	800b262 <__gethex+0xce>
 800b2c8:	f04f 0900 	mov.w	r9, #0
 800b2cc:	1cb1      	adds	r1, r6, #2
 800b2ce:	e7d5      	b.n	800b27c <__gethex+0xe8>
 800b2d0:	f04f 0901 	mov.w	r9, #1
 800b2d4:	e7fa      	b.n	800b2cc <__gethex+0x138>
 800b2d6:	230a      	movs	r3, #10
 800b2d8:	fb03 0202 	mla	r2, r3, r2, r0
 800b2dc:	3a10      	subs	r2, #16
 800b2de:	e7d6      	b.n	800b28e <__gethex+0xfa>
 800b2e0:	4631      	mov	r1, r6
 800b2e2:	e7e1      	b.n	800b2a8 <__gethex+0x114>
 800b2e4:	4621      	mov	r1, r4
 800b2e6:	1bf3      	subs	r3, r6, r7
 800b2e8:	3b01      	subs	r3, #1
 800b2ea:	2b07      	cmp	r3, #7
 800b2ec:	dc0a      	bgt.n	800b304 <__gethex+0x170>
 800b2ee:	9802      	ldr	r0, [sp, #8]
 800b2f0:	f000 fb00 	bl	800b8f4 <_Balloc>
 800b2f4:	4604      	mov	r4, r0
 800b2f6:	b940      	cbnz	r0, 800b30a <__gethex+0x176>
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	21de      	movs	r1, #222	; 0xde
 800b2fc:	4b62      	ldr	r3, [pc, #392]	; (800b488 <__gethex+0x2f4>)
 800b2fe:	4863      	ldr	r0, [pc, #396]	; (800b48c <__gethex+0x2f8>)
 800b300:	f7fc fe24 	bl	8007f4c <__assert_func>
 800b304:	3101      	adds	r1, #1
 800b306:	105b      	asrs	r3, r3, #1
 800b308:	e7ef      	b.n	800b2ea <__gethex+0x156>
 800b30a:	f04f 0b00 	mov.w	fp, #0
 800b30e:	f100 0914 	add.w	r9, r0, #20
 800b312:	f1ca 0301 	rsb	r3, sl, #1
 800b316:	f8cd 9010 	str.w	r9, [sp, #16]
 800b31a:	f8cd b004 	str.w	fp, [sp, #4]
 800b31e:	9308      	str	r3, [sp, #32]
 800b320:	42b7      	cmp	r7, r6
 800b322:	d33f      	bcc.n	800b3a4 <__gethex+0x210>
 800b324:	9f04      	ldr	r7, [sp, #16]
 800b326:	9b01      	ldr	r3, [sp, #4]
 800b328:	f847 3b04 	str.w	r3, [r7], #4
 800b32c:	eba7 0709 	sub.w	r7, r7, r9
 800b330:	10bf      	asrs	r7, r7, #2
 800b332:	6127      	str	r7, [r4, #16]
 800b334:	4618      	mov	r0, r3
 800b336:	f000 fbd3 	bl	800bae0 <__hi0bits>
 800b33a:	017f      	lsls	r7, r7, #5
 800b33c:	f8d8 6000 	ldr.w	r6, [r8]
 800b340:	1a3f      	subs	r7, r7, r0
 800b342:	42b7      	cmp	r7, r6
 800b344:	dd62      	ble.n	800b40c <__gethex+0x278>
 800b346:	1bbf      	subs	r7, r7, r6
 800b348:	4639      	mov	r1, r7
 800b34a:	4620      	mov	r0, r4
 800b34c:	f000 ff69 	bl	800c222 <__any_on>
 800b350:	4682      	mov	sl, r0
 800b352:	b1a8      	cbz	r0, 800b380 <__gethex+0x1ec>
 800b354:	f04f 0a01 	mov.w	sl, #1
 800b358:	1e7b      	subs	r3, r7, #1
 800b35a:	1159      	asrs	r1, r3, #5
 800b35c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b360:	f003 021f 	and.w	r2, r3, #31
 800b364:	fa0a f202 	lsl.w	r2, sl, r2
 800b368:	420a      	tst	r2, r1
 800b36a:	d009      	beq.n	800b380 <__gethex+0x1ec>
 800b36c:	4553      	cmp	r3, sl
 800b36e:	dd05      	ble.n	800b37c <__gethex+0x1e8>
 800b370:	4620      	mov	r0, r4
 800b372:	1eb9      	subs	r1, r7, #2
 800b374:	f000 ff55 	bl	800c222 <__any_on>
 800b378:	2800      	cmp	r0, #0
 800b37a:	d144      	bne.n	800b406 <__gethex+0x272>
 800b37c:	f04f 0a02 	mov.w	sl, #2
 800b380:	4639      	mov	r1, r7
 800b382:	4620      	mov	r0, r4
 800b384:	f7ff fe9d 	bl	800b0c2 <rshift>
 800b388:	443d      	add	r5, r7
 800b38a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b38e:	42ab      	cmp	r3, r5
 800b390:	da4a      	bge.n	800b428 <__gethex+0x294>
 800b392:	4621      	mov	r1, r4
 800b394:	9802      	ldr	r0, [sp, #8]
 800b396:	f000 faed 	bl	800b974 <_Bfree>
 800b39a:	2300      	movs	r3, #0
 800b39c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b39e:	27a3      	movs	r7, #163	; 0xa3
 800b3a0:	6013      	str	r3, [r2, #0]
 800b3a2:	e789      	b.n	800b2b8 <__gethex+0x124>
 800b3a4:	1e73      	subs	r3, r6, #1
 800b3a6:	9a07      	ldr	r2, [sp, #28]
 800b3a8:	9305      	str	r3, [sp, #20]
 800b3aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d019      	beq.n	800b3e6 <__gethex+0x252>
 800b3b2:	f1bb 0f20 	cmp.w	fp, #32
 800b3b6:	d107      	bne.n	800b3c8 <__gethex+0x234>
 800b3b8:	9b04      	ldr	r3, [sp, #16]
 800b3ba:	9a01      	ldr	r2, [sp, #4]
 800b3bc:	f843 2b04 	str.w	r2, [r3], #4
 800b3c0:	9304      	str	r3, [sp, #16]
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	469b      	mov	fp, r3
 800b3c6:	9301      	str	r3, [sp, #4]
 800b3c8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b3cc:	f7ff fecc 	bl	800b168 <__hexdig_fun>
 800b3d0:	9b01      	ldr	r3, [sp, #4]
 800b3d2:	f000 000f 	and.w	r0, r0, #15
 800b3d6:	fa00 f00b 	lsl.w	r0, r0, fp
 800b3da:	4303      	orrs	r3, r0
 800b3dc:	9301      	str	r3, [sp, #4]
 800b3de:	f10b 0b04 	add.w	fp, fp, #4
 800b3e2:	9b05      	ldr	r3, [sp, #20]
 800b3e4:	e00d      	b.n	800b402 <__gethex+0x26e>
 800b3e6:	9b05      	ldr	r3, [sp, #20]
 800b3e8:	9a08      	ldr	r2, [sp, #32]
 800b3ea:	4413      	add	r3, r2
 800b3ec:	42bb      	cmp	r3, r7
 800b3ee:	d3e0      	bcc.n	800b3b2 <__gethex+0x21e>
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	4652      	mov	r2, sl
 800b3f4:	9903      	ldr	r1, [sp, #12]
 800b3f6:	9309      	str	r3, [sp, #36]	; 0x24
 800b3f8:	f001 f951 	bl	800c69e <strncmp>
 800b3fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3fe:	2800      	cmp	r0, #0
 800b400:	d1d7      	bne.n	800b3b2 <__gethex+0x21e>
 800b402:	461e      	mov	r6, r3
 800b404:	e78c      	b.n	800b320 <__gethex+0x18c>
 800b406:	f04f 0a03 	mov.w	sl, #3
 800b40a:	e7b9      	b.n	800b380 <__gethex+0x1ec>
 800b40c:	da09      	bge.n	800b422 <__gethex+0x28e>
 800b40e:	1bf7      	subs	r7, r6, r7
 800b410:	4621      	mov	r1, r4
 800b412:	463a      	mov	r2, r7
 800b414:	9802      	ldr	r0, [sp, #8]
 800b416:	f000 fcc5 	bl	800bda4 <__lshift>
 800b41a:	4604      	mov	r4, r0
 800b41c:	1bed      	subs	r5, r5, r7
 800b41e:	f100 0914 	add.w	r9, r0, #20
 800b422:	f04f 0a00 	mov.w	sl, #0
 800b426:	e7b0      	b.n	800b38a <__gethex+0x1f6>
 800b428:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b42c:	42a8      	cmp	r0, r5
 800b42e:	dd71      	ble.n	800b514 <__gethex+0x380>
 800b430:	1b45      	subs	r5, r0, r5
 800b432:	42ae      	cmp	r6, r5
 800b434:	dc34      	bgt.n	800b4a0 <__gethex+0x30c>
 800b436:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b43a:	2b02      	cmp	r3, #2
 800b43c:	d028      	beq.n	800b490 <__gethex+0x2fc>
 800b43e:	2b03      	cmp	r3, #3
 800b440:	d02a      	beq.n	800b498 <__gethex+0x304>
 800b442:	2b01      	cmp	r3, #1
 800b444:	d115      	bne.n	800b472 <__gethex+0x2de>
 800b446:	42ae      	cmp	r6, r5
 800b448:	d113      	bne.n	800b472 <__gethex+0x2de>
 800b44a:	2e01      	cmp	r6, #1
 800b44c:	d10b      	bne.n	800b466 <__gethex+0x2d2>
 800b44e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b452:	9a06      	ldr	r2, [sp, #24]
 800b454:	2762      	movs	r7, #98	; 0x62
 800b456:	6013      	str	r3, [r2, #0]
 800b458:	2301      	movs	r3, #1
 800b45a:	6123      	str	r3, [r4, #16]
 800b45c:	f8c9 3000 	str.w	r3, [r9]
 800b460:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b462:	601c      	str	r4, [r3, #0]
 800b464:	e728      	b.n	800b2b8 <__gethex+0x124>
 800b466:	4620      	mov	r0, r4
 800b468:	1e71      	subs	r1, r6, #1
 800b46a:	f000 feda 	bl	800c222 <__any_on>
 800b46e:	2800      	cmp	r0, #0
 800b470:	d1ed      	bne.n	800b44e <__gethex+0x2ba>
 800b472:	4621      	mov	r1, r4
 800b474:	9802      	ldr	r0, [sp, #8]
 800b476:	f000 fa7d 	bl	800b974 <_Bfree>
 800b47a:	2300      	movs	r3, #0
 800b47c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b47e:	2750      	movs	r7, #80	; 0x50
 800b480:	6013      	str	r3, [r2, #0]
 800b482:	e719      	b.n	800b2b8 <__gethex+0x124>
 800b484:	0800cbcc 	.word	0x0800cbcc
 800b488:	0800caec 	.word	0x0800caec
 800b48c:	0800cb60 	.word	0x0800cb60
 800b490:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b492:	2b00      	cmp	r3, #0
 800b494:	d1ed      	bne.n	800b472 <__gethex+0x2de>
 800b496:	e7da      	b.n	800b44e <__gethex+0x2ba>
 800b498:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d1d7      	bne.n	800b44e <__gethex+0x2ba>
 800b49e:	e7e8      	b.n	800b472 <__gethex+0x2de>
 800b4a0:	1e6f      	subs	r7, r5, #1
 800b4a2:	f1ba 0f00 	cmp.w	sl, #0
 800b4a6:	d132      	bne.n	800b50e <__gethex+0x37a>
 800b4a8:	b127      	cbz	r7, 800b4b4 <__gethex+0x320>
 800b4aa:	4639      	mov	r1, r7
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	f000 feb8 	bl	800c222 <__any_on>
 800b4b2:	4682      	mov	sl, r0
 800b4b4:	2101      	movs	r1, #1
 800b4b6:	117b      	asrs	r3, r7, #5
 800b4b8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b4bc:	f007 071f 	and.w	r7, r7, #31
 800b4c0:	fa01 f707 	lsl.w	r7, r1, r7
 800b4c4:	421f      	tst	r7, r3
 800b4c6:	f04f 0702 	mov.w	r7, #2
 800b4ca:	4629      	mov	r1, r5
 800b4cc:	4620      	mov	r0, r4
 800b4ce:	bf18      	it	ne
 800b4d0:	f04a 0a02 	orrne.w	sl, sl, #2
 800b4d4:	1b76      	subs	r6, r6, r5
 800b4d6:	f7ff fdf4 	bl	800b0c2 <rshift>
 800b4da:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b4de:	f1ba 0f00 	cmp.w	sl, #0
 800b4e2:	d048      	beq.n	800b576 <__gethex+0x3e2>
 800b4e4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b4e8:	2b02      	cmp	r3, #2
 800b4ea:	d015      	beq.n	800b518 <__gethex+0x384>
 800b4ec:	2b03      	cmp	r3, #3
 800b4ee:	d017      	beq.n	800b520 <__gethex+0x38c>
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d109      	bne.n	800b508 <__gethex+0x374>
 800b4f4:	f01a 0f02 	tst.w	sl, #2
 800b4f8:	d006      	beq.n	800b508 <__gethex+0x374>
 800b4fa:	f8d9 0000 	ldr.w	r0, [r9]
 800b4fe:	ea4a 0a00 	orr.w	sl, sl, r0
 800b502:	f01a 0f01 	tst.w	sl, #1
 800b506:	d10e      	bne.n	800b526 <__gethex+0x392>
 800b508:	f047 0710 	orr.w	r7, r7, #16
 800b50c:	e033      	b.n	800b576 <__gethex+0x3e2>
 800b50e:	f04f 0a01 	mov.w	sl, #1
 800b512:	e7cf      	b.n	800b4b4 <__gethex+0x320>
 800b514:	2701      	movs	r7, #1
 800b516:	e7e2      	b.n	800b4de <__gethex+0x34a>
 800b518:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b51a:	f1c3 0301 	rsb	r3, r3, #1
 800b51e:	9315      	str	r3, [sp, #84]	; 0x54
 800b520:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b522:	2b00      	cmp	r3, #0
 800b524:	d0f0      	beq.n	800b508 <__gethex+0x374>
 800b526:	f04f 0c00 	mov.w	ip, #0
 800b52a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b52e:	f104 0314 	add.w	r3, r4, #20
 800b532:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b536:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b53a:	4618      	mov	r0, r3
 800b53c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b540:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b544:	d01c      	beq.n	800b580 <__gethex+0x3ec>
 800b546:	3201      	adds	r2, #1
 800b548:	6002      	str	r2, [r0, #0]
 800b54a:	2f02      	cmp	r7, #2
 800b54c:	f104 0314 	add.w	r3, r4, #20
 800b550:	d13d      	bne.n	800b5ce <__gethex+0x43a>
 800b552:	f8d8 2000 	ldr.w	r2, [r8]
 800b556:	3a01      	subs	r2, #1
 800b558:	42b2      	cmp	r2, r6
 800b55a:	d10a      	bne.n	800b572 <__gethex+0x3de>
 800b55c:	2201      	movs	r2, #1
 800b55e:	1171      	asrs	r1, r6, #5
 800b560:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b564:	f006 061f 	and.w	r6, r6, #31
 800b568:	fa02 f606 	lsl.w	r6, r2, r6
 800b56c:	421e      	tst	r6, r3
 800b56e:	bf18      	it	ne
 800b570:	4617      	movne	r7, r2
 800b572:	f047 0720 	orr.w	r7, r7, #32
 800b576:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b578:	601c      	str	r4, [r3, #0]
 800b57a:	9b06      	ldr	r3, [sp, #24]
 800b57c:	601d      	str	r5, [r3, #0]
 800b57e:	e69b      	b.n	800b2b8 <__gethex+0x124>
 800b580:	4299      	cmp	r1, r3
 800b582:	f843 cc04 	str.w	ip, [r3, #-4]
 800b586:	d8d8      	bhi.n	800b53a <__gethex+0x3a6>
 800b588:	68a3      	ldr	r3, [r4, #8]
 800b58a:	459b      	cmp	fp, r3
 800b58c:	db17      	blt.n	800b5be <__gethex+0x42a>
 800b58e:	6861      	ldr	r1, [r4, #4]
 800b590:	9802      	ldr	r0, [sp, #8]
 800b592:	3101      	adds	r1, #1
 800b594:	f000 f9ae 	bl	800b8f4 <_Balloc>
 800b598:	4681      	mov	r9, r0
 800b59a:	b918      	cbnz	r0, 800b5a4 <__gethex+0x410>
 800b59c:	4602      	mov	r2, r0
 800b59e:	2184      	movs	r1, #132	; 0x84
 800b5a0:	4b19      	ldr	r3, [pc, #100]	; (800b608 <__gethex+0x474>)
 800b5a2:	e6ac      	b.n	800b2fe <__gethex+0x16a>
 800b5a4:	6922      	ldr	r2, [r4, #16]
 800b5a6:	f104 010c 	add.w	r1, r4, #12
 800b5aa:	3202      	adds	r2, #2
 800b5ac:	0092      	lsls	r2, r2, #2
 800b5ae:	300c      	adds	r0, #12
 800b5b0:	f7fc fd2e 	bl	8008010 <memcpy>
 800b5b4:	4621      	mov	r1, r4
 800b5b6:	9802      	ldr	r0, [sp, #8]
 800b5b8:	f000 f9dc 	bl	800b974 <_Bfree>
 800b5bc:	464c      	mov	r4, r9
 800b5be:	6923      	ldr	r3, [r4, #16]
 800b5c0:	1c5a      	adds	r2, r3, #1
 800b5c2:	6122      	str	r2, [r4, #16]
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b5ca:	615a      	str	r2, [r3, #20]
 800b5cc:	e7bd      	b.n	800b54a <__gethex+0x3b6>
 800b5ce:	6922      	ldr	r2, [r4, #16]
 800b5d0:	455a      	cmp	r2, fp
 800b5d2:	dd0b      	ble.n	800b5ec <__gethex+0x458>
 800b5d4:	2101      	movs	r1, #1
 800b5d6:	4620      	mov	r0, r4
 800b5d8:	f7ff fd73 	bl	800b0c2 <rshift>
 800b5dc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b5e0:	3501      	adds	r5, #1
 800b5e2:	42ab      	cmp	r3, r5
 800b5e4:	f6ff aed5 	blt.w	800b392 <__gethex+0x1fe>
 800b5e8:	2701      	movs	r7, #1
 800b5ea:	e7c2      	b.n	800b572 <__gethex+0x3de>
 800b5ec:	f016 061f 	ands.w	r6, r6, #31
 800b5f0:	d0fa      	beq.n	800b5e8 <__gethex+0x454>
 800b5f2:	449a      	add	sl, r3
 800b5f4:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b5f8:	f000 fa72 	bl	800bae0 <__hi0bits>
 800b5fc:	f1c6 0620 	rsb	r6, r6, #32
 800b600:	42b0      	cmp	r0, r6
 800b602:	dbe7      	blt.n	800b5d4 <__gethex+0x440>
 800b604:	e7f0      	b.n	800b5e8 <__gethex+0x454>
 800b606:	bf00      	nop
 800b608:	0800caec 	.word	0x0800caec

0800b60c <L_shift>:
 800b60c:	f1c2 0208 	rsb	r2, r2, #8
 800b610:	0092      	lsls	r2, r2, #2
 800b612:	b570      	push	{r4, r5, r6, lr}
 800b614:	f1c2 0620 	rsb	r6, r2, #32
 800b618:	6843      	ldr	r3, [r0, #4]
 800b61a:	6804      	ldr	r4, [r0, #0]
 800b61c:	fa03 f506 	lsl.w	r5, r3, r6
 800b620:	432c      	orrs	r4, r5
 800b622:	40d3      	lsrs	r3, r2
 800b624:	6004      	str	r4, [r0, #0]
 800b626:	f840 3f04 	str.w	r3, [r0, #4]!
 800b62a:	4288      	cmp	r0, r1
 800b62c:	d3f4      	bcc.n	800b618 <L_shift+0xc>
 800b62e:	bd70      	pop	{r4, r5, r6, pc}

0800b630 <__match>:
 800b630:	b530      	push	{r4, r5, lr}
 800b632:	6803      	ldr	r3, [r0, #0]
 800b634:	3301      	adds	r3, #1
 800b636:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b63a:	b914      	cbnz	r4, 800b642 <__match+0x12>
 800b63c:	6003      	str	r3, [r0, #0]
 800b63e:	2001      	movs	r0, #1
 800b640:	bd30      	pop	{r4, r5, pc}
 800b642:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b646:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b64a:	2d19      	cmp	r5, #25
 800b64c:	bf98      	it	ls
 800b64e:	3220      	addls	r2, #32
 800b650:	42a2      	cmp	r2, r4
 800b652:	d0f0      	beq.n	800b636 <__match+0x6>
 800b654:	2000      	movs	r0, #0
 800b656:	e7f3      	b.n	800b640 <__match+0x10>

0800b658 <__hexnan>:
 800b658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b65c:	2500      	movs	r5, #0
 800b65e:	680b      	ldr	r3, [r1, #0]
 800b660:	4682      	mov	sl, r0
 800b662:	115e      	asrs	r6, r3, #5
 800b664:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b668:	f013 031f 	ands.w	r3, r3, #31
 800b66c:	bf18      	it	ne
 800b66e:	3604      	addne	r6, #4
 800b670:	1f37      	subs	r7, r6, #4
 800b672:	4690      	mov	r8, r2
 800b674:	46b9      	mov	r9, r7
 800b676:	463c      	mov	r4, r7
 800b678:	46ab      	mov	fp, r5
 800b67a:	b087      	sub	sp, #28
 800b67c:	6801      	ldr	r1, [r0, #0]
 800b67e:	9301      	str	r3, [sp, #4]
 800b680:	f846 5c04 	str.w	r5, [r6, #-4]
 800b684:	9502      	str	r5, [sp, #8]
 800b686:	784a      	ldrb	r2, [r1, #1]
 800b688:	1c4b      	adds	r3, r1, #1
 800b68a:	9303      	str	r3, [sp, #12]
 800b68c:	b342      	cbz	r2, 800b6e0 <__hexnan+0x88>
 800b68e:	4610      	mov	r0, r2
 800b690:	9105      	str	r1, [sp, #20]
 800b692:	9204      	str	r2, [sp, #16]
 800b694:	f7ff fd68 	bl	800b168 <__hexdig_fun>
 800b698:	2800      	cmp	r0, #0
 800b69a:	d14f      	bne.n	800b73c <__hexnan+0xe4>
 800b69c:	9a04      	ldr	r2, [sp, #16]
 800b69e:	9905      	ldr	r1, [sp, #20]
 800b6a0:	2a20      	cmp	r2, #32
 800b6a2:	d818      	bhi.n	800b6d6 <__hexnan+0x7e>
 800b6a4:	9b02      	ldr	r3, [sp, #8]
 800b6a6:	459b      	cmp	fp, r3
 800b6a8:	dd13      	ble.n	800b6d2 <__hexnan+0x7a>
 800b6aa:	454c      	cmp	r4, r9
 800b6ac:	d206      	bcs.n	800b6bc <__hexnan+0x64>
 800b6ae:	2d07      	cmp	r5, #7
 800b6b0:	dc04      	bgt.n	800b6bc <__hexnan+0x64>
 800b6b2:	462a      	mov	r2, r5
 800b6b4:	4649      	mov	r1, r9
 800b6b6:	4620      	mov	r0, r4
 800b6b8:	f7ff ffa8 	bl	800b60c <L_shift>
 800b6bc:	4544      	cmp	r4, r8
 800b6be:	d950      	bls.n	800b762 <__hexnan+0x10a>
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	f1a4 0904 	sub.w	r9, r4, #4
 800b6c6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b6ca:	461d      	mov	r5, r3
 800b6cc:	464c      	mov	r4, r9
 800b6ce:	f8cd b008 	str.w	fp, [sp, #8]
 800b6d2:	9903      	ldr	r1, [sp, #12]
 800b6d4:	e7d7      	b.n	800b686 <__hexnan+0x2e>
 800b6d6:	2a29      	cmp	r2, #41	; 0x29
 800b6d8:	d156      	bne.n	800b788 <__hexnan+0x130>
 800b6da:	3102      	adds	r1, #2
 800b6dc:	f8ca 1000 	str.w	r1, [sl]
 800b6e0:	f1bb 0f00 	cmp.w	fp, #0
 800b6e4:	d050      	beq.n	800b788 <__hexnan+0x130>
 800b6e6:	454c      	cmp	r4, r9
 800b6e8:	d206      	bcs.n	800b6f8 <__hexnan+0xa0>
 800b6ea:	2d07      	cmp	r5, #7
 800b6ec:	dc04      	bgt.n	800b6f8 <__hexnan+0xa0>
 800b6ee:	462a      	mov	r2, r5
 800b6f0:	4649      	mov	r1, r9
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	f7ff ff8a 	bl	800b60c <L_shift>
 800b6f8:	4544      	cmp	r4, r8
 800b6fa:	d934      	bls.n	800b766 <__hexnan+0x10e>
 800b6fc:	4623      	mov	r3, r4
 800b6fe:	f1a8 0204 	sub.w	r2, r8, #4
 800b702:	f853 1b04 	ldr.w	r1, [r3], #4
 800b706:	429f      	cmp	r7, r3
 800b708:	f842 1f04 	str.w	r1, [r2, #4]!
 800b70c:	d2f9      	bcs.n	800b702 <__hexnan+0xaa>
 800b70e:	1b3b      	subs	r3, r7, r4
 800b710:	f023 0303 	bic.w	r3, r3, #3
 800b714:	3304      	adds	r3, #4
 800b716:	3401      	adds	r4, #1
 800b718:	3e03      	subs	r6, #3
 800b71a:	42b4      	cmp	r4, r6
 800b71c:	bf88      	it	hi
 800b71e:	2304      	movhi	r3, #4
 800b720:	2200      	movs	r2, #0
 800b722:	4443      	add	r3, r8
 800b724:	f843 2b04 	str.w	r2, [r3], #4
 800b728:	429f      	cmp	r7, r3
 800b72a:	d2fb      	bcs.n	800b724 <__hexnan+0xcc>
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	b91b      	cbnz	r3, 800b738 <__hexnan+0xe0>
 800b730:	4547      	cmp	r7, r8
 800b732:	d127      	bne.n	800b784 <__hexnan+0x12c>
 800b734:	2301      	movs	r3, #1
 800b736:	603b      	str	r3, [r7, #0]
 800b738:	2005      	movs	r0, #5
 800b73a:	e026      	b.n	800b78a <__hexnan+0x132>
 800b73c:	3501      	adds	r5, #1
 800b73e:	2d08      	cmp	r5, #8
 800b740:	f10b 0b01 	add.w	fp, fp, #1
 800b744:	dd06      	ble.n	800b754 <__hexnan+0xfc>
 800b746:	4544      	cmp	r4, r8
 800b748:	d9c3      	bls.n	800b6d2 <__hexnan+0x7a>
 800b74a:	2300      	movs	r3, #0
 800b74c:	2501      	movs	r5, #1
 800b74e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b752:	3c04      	subs	r4, #4
 800b754:	6822      	ldr	r2, [r4, #0]
 800b756:	f000 000f 	and.w	r0, r0, #15
 800b75a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b75e:	6022      	str	r2, [r4, #0]
 800b760:	e7b7      	b.n	800b6d2 <__hexnan+0x7a>
 800b762:	2508      	movs	r5, #8
 800b764:	e7b5      	b.n	800b6d2 <__hexnan+0x7a>
 800b766:	9b01      	ldr	r3, [sp, #4]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d0df      	beq.n	800b72c <__hexnan+0xd4>
 800b76c:	f04f 32ff 	mov.w	r2, #4294967295
 800b770:	f1c3 0320 	rsb	r3, r3, #32
 800b774:	fa22 f303 	lsr.w	r3, r2, r3
 800b778:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b77c:	401a      	ands	r2, r3
 800b77e:	f846 2c04 	str.w	r2, [r6, #-4]
 800b782:	e7d3      	b.n	800b72c <__hexnan+0xd4>
 800b784:	3f04      	subs	r7, #4
 800b786:	e7d1      	b.n	800b72c <__hexnan+0xd4>
 800b788:	2004      	movs	r0, #4
 800b78a:	b007      	add	sp, #28
 800b78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b790 <_localeconv_r>:
 800b790:	4800      	ldr	r0, [pc, #0]	; (800b794 <_localeconv_r+0x4>)
 800b792:	4770      	bx	lr
 800b794:	200001ac 	.word	0x200001ac

0800b798 <__retarget_lock_init_recursive>:
 800b798:	4770      	bx	lr

0800b79a <__retarget_lock_acquire_recursive>:
 800b79a:	4770      	bx	lr

0800b79c <__retarget_lock_release_recursive>:
 800b79c:	4770      	bx	lr

0800b79e <__swhatbuf_r>:
 800b79e:	b570      	push	{r4, r5, r6, lr}
 800b7a0:	460e      	mov	r6, r1
 800b7a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7a6:	4614      	mov	r4, r2
 800b7a8:	2900      	cmp	r1, #0
 800b7aa:	461d      	mov	r5, r3
 800b7ac:	b096      	sub	sp, #88	; 0x58
 800b7ae:	da07      	bge.n	800b7c0 <__swhatbuf_r+0x22>
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	602b      	str	r3, [r5, #0]
 800b7b4:	89b3      	ldrh	r3, [r6, #12]
 800b7b6:	061a      	lsls	r2, r3, #24
 800b7b8:	d410      	bmi.n	800b7dc <__swhatbuf_r+0x3e>
 800b7ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7be:	e00e      	b.n	800b7de <__swhatbuf_r+0x40>
 800b7c0:	466a      	mov	r2, sp
 800b7c2:	f000 ffad 	bl	800c720 <_fstat_r>
 800b7c6:	2800      	cmp	r0, #0
 800b7c8:	dbf2      	blt.n	800b7b0 <__swhatbuf_r+0x12>
 800b7ca:	9a01      	ldr	r2, [sp, #4]
 800b7cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b7d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b7d4:	425a      	negs	r2, r3
 800b7d6:	415a      	adcs	r2, r3
 800b7d8:	602a      	str	r2, [r5, #0]
 800b7da:	e7ee      	b.n	800b7ba <__swhatbuf_r+0x1c>
 800b7dc:	2340      	movs	r3, #64	; 0x40
 800b7de:	2000      	movs	r0, #0
 800b7e0:	6023      	str	r3, [r4, #0]
 800b7e2:	b016      	add	sp, #88	; 0x58
 800b7e4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b7e8 <__smakebuf_r>:
 800b7e8:	898b      	ldrh	r3, [r1, #12]
 800b7ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b7ec:	079d      	lsls	r5, r3, #30
 800b7ee:	4606      	mov	r6, r0
 800b7f0:	460c      	mov	r4, r1
 800b7f2:	d507      	bpl.n	800b804 <__smakebuf_r+0x1c>
 800b7f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b7f8:	6023      	str	r3, [r4, #0]
 800b7fa:	6123      	str	r3, [r4, #16]
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	6163      	str	r3, [r4, #20]
 800b800:	b002      	add	sp, #8
 800b802:	bd70      	pop	{r4, r5, r6, pc}
 800b804:	466a      	mov	r2, sp
 800b806:	ab01      	add	r3, sp, #4
 800b808:	f7ff ffc9 	bl	800b79e <__swhatbuf_r>
 800b80c:	9900      	ldr	r1, [sp, #0]
 800b80e:	4605      	mov	r5, r0
 800b810:	4630      	mov	r0, r6
 800b812:	f7fc fc5f 	bl	80080d4 <_malloc_r>
 800b816:	b948      	cbnz	r0, 800b82c <__smakebuf_r+0x44>
 800b818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b81c:	059a      	lsls	r2, r3, #22
 800b81e:	d4ef      	bmi.n	800b800 <__smakebuf_r+0x18>
 800b820:	f023 0303 	bic.w	r3, r3, #3
 800b824:	f043 0302 	orr.w	r3, r3, #2
 800b828:	81a3      	strh	r3, [r4, #12]
 800b82a:	e7e3      	b.n	800b7f4 <__smakebuf_r+0xc>
 800b82c:	4b0d      	ldr	r3, [pc, #52]	; (800b864 <__smakebuf_r+0x7c>)
 800b82e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b830:	89a3      	ldrh	r3, [r4, #12]
 800b832:	6020      	str	r0, [r4, #0]
 800b834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b838:	81a3      	strh	r3, [r4, #12]
 800b83a:	9b00      	ldr	r3, [sp, #0]
 800b83c:	6120      	str	r0, [r4, #16]
 800b83e:	6163      	str	r3, [r4, #20]
 800b840:	9b01      	ldr	r3, [sp, #4]
 800b842:	b15b      	cbz	r3, 800b85c <__smakebuf_r+0x74>
 800b844:	4630      	mov	r0, r6
 800b846:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b84a:	f000 ff7b 	bl	800c744 <_isatty_r>
 800b84e:	b128      	cbz	r0, 800b85c <__smakebuf_r+0x74>
 800b850:	89a3      	ldrh	r3, [r4, #12]
 800b852:	f023 0303 	bic.w	r3, r3, #3
 800b856:	f043 0301 	orr.w	r3, r3, #1
 800b85a:	81a3      	strh	r3, [r4, #12]
 800b85c:	89a0      	ldrh	r0, [r4, #12]
 800b85e:	4305      	orrs	r5, r0
 800b860:	81a5      	strh	r5, [r4, #12]
 800b862:	e7cd      	b.n	800b800 <__smakebuf_r+0x18>
 800b864:	0800af21 	.word	0x0800af21

0800b868 <__ascii_mbtowc>:
 800b868:	b082      	sub	sp, #8
 800b86a:	b901      	cbnz	r1, 800b86e <__ascii_mbtowc+0x6>
 800b86c:	a901      	add	r1, sp, #4
 800b86e:	b142      	cbz	r2, 800b882 <__ascii_mbtowc+0x1a>
 800b870:	b14b      	cbz	r3, 800b886 <__ascii_mbtowc+0x1e>
 800b872:	7813      	ldrb	r3, [r2, #0]
 800b874:	600b      	str	r3, [r1, #0]
 800b876:	7812      	ldrb	r2, [r2, #0]
 800b878:	1e10      	subs	r0, r2, #0
 800b87a:	bf18      	it	ne
 800b87c:	2001      	movne	r0, #1
 800b87e:	b002      	add	sp, #8
 800b880:	4770      	bx	lr
 800b882:	4610      	mov	r0, r2
 800b884:	e7fb      	b.n	800b87e <__ascii_mbtowc+0x16>
 800b886:	f06f 0001 	mvn.w	r0, #1
 800b88a:	e7f8      	b.n	800b87e <__ascii_mbtowc+0x16>

0800b88c <memchr>:
 800b88c:	4603      	mov	r3, r0
 800b88e:	b510      	push	{r4, lr}
 800b890:	b2c9      	uxtb	r1, r1
 800b892:	4402      	add	r2, r0
 800b894:	4293      	cmp	r3, r2
 800b896:	4618      	mov	r0, r3
 800b898:	d101      	bne.n	800b89e <memchr+0x12>
 800b89a:	2000      	movs	r0, #0
 800b89c:	e003      	b.n	800b8a6 <memchr+0x1a>
 800b89e:	7804      	ldrb	r4, [r0, #0]
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	428c      	cmp	r4, r1
 800b8a4:	d1f6      	bne.n	800b894 <memchr+0x8>
 800b8a6:	bd10      	pop	{r4, pc}

0800b8a8 <memmove>:
 800b8a8:	4288      	cmp	r0, r1
 800b8aa:	b510      	push	{r4, lr}
 800b8ac:	eb01 0402 	add.w	r4, r1, r2
 800b8b0:	d902      	bls.n	800b8b8 <memmove+0x10>
 800b8b2:	4284      	cmp	r4, r0
 800b8b4:	4623      	mov	r3, r4
 800b8b6:	d807      	bhi.n	800b8c8 <memmove+0x20>
 800b8b8:	1e43      	subs	r3, r0, #1
 800b8ba:	42a1      	cmp	r1, r4
 800b8bc:	d008      	beq.n	800b8d0 <memmove+0x28>
 800b8be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b8c6:	e7f8      	b.n	800b8ba <memmove+0x12>
 800b8c8:	4601      	mov	r1, r0
 800b8ca:	4402      	add	r2, r0
 800b8cc:	428a      	cmp	r2, r1
 800b8ce:	d100      	bne.n	800b8d2 <memmove+0x2a>
 800b8d0:	bd10      	pop	{r4, pc}
 800b8d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b8d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b8da:	e7f7      	b.n	800b8cc <memmove+0x24>

0800b8dc <__malloc_lock>:
 800b8dc:	4801      	ldr	r0, [pc, #4]	; (800b8e4 <__malloc_lock+0x8>)
 800b8de:	f7ff bf5c 	b.w	800b79a <__retarget_lock_acquire_recursive>
 800b8e2:	bf00      	nop
 800b8e4:	20000a54 	.word	0x20000a54

0800b8e8 <__malloc_unlock>:
 800b8e8:	4801      	ldr	r0, [pc, #4]	; (800b8f0 <__malloc_unlock+0x8>)
 800b8ea:	f7ff bf57 	b.w	800b79c <__retarget_lock_release_recursive>
 800b8ee:	bf00      	nop
 800b8f0:	20000a54 	.word	0x20000a54

0800b8f4 <_Balloc>:
 800b8f4:	b570      	push	{r4, r5, r6, lr}
 800b8f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b8f8:	4604      	mov	r4, r0
 800b8fa:	460d      	mov	r5, r1
 800b8fc:	b976      	cbnz	r6, 800b91c <_Balloc+0x28>
 800b8fe:	2010      	movs	r0, #16
 800b900:	f7fc fb7e 	bl	8008000 <malloc>
 800b904:	4602      	mov	r2, r0
 800b906:	6260      	str	r0, [r4, #36]	; 0x24
 800b908:	b920      	cbnz	r0, 800b914 <_Balloc+0x20>
 800b90a:	2166      	movs	r1, #102	; 0x66
 800b90c:	4b17      	ldr	r3, [pc, #92]	; (800b96c <_Balloc+0x78>)
 800b90e:	4818      	ldr	r0, [pc, #96]	; (800b970 <_Balloc+0x7c>)
 800b910:	f7fc fb1c 	bl	8007f4c <__assert_func>
 800b914:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b918:	6006      	str	r6, [r0, #0]
 800b91a:	60c6      	str	r6, [r0, #12]
 800b91c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b91e:	68f3      	ldr	r3, [r6, #12]
 800b920:	b183      	cbz	r3, 800b944 <_Balloc+0x50>
 800b922:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b924:	68db      	ldr	r3, [r3, #12]
 800b926:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b92a:	b9b8      	cbnz	r0, 800b95c <_Balloc+0x68>
 800b92c:	2101      	movs	r1, #1
 800b92e:	fa01 f605 	lsl.w	r6, r1, r5
 800b932:	1d72      	adds	r2, r6, #5
 800b934:	4620      	mov	r0, r4
 800b936:	0092      	lsls	r2, r2, #2
 800b938:	f000 fc94 	bl	800c264 <_calloc_r>
 800b93c:	b160      	cbz	r0, 800b958 <_Balloc+0x64>
 800b93e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b942:	e00e      	b.n	800b962 <_Balloc+0x6e>
 800b944:	2221      	movs	r2, #33	; 0x21
 800b946:	2104      	movs	r1, #4
 800b948:	4620      	mov	r0, r4
 800b94a:	f000 fc8b 	bl	800c264 <_calloc_r>
 800b94e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b950:	60f0      	str	r0, [r6, #12]
 800b952:	68db      	ldr	r3, [r3, #12]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d1e4      	bne.n	800b922 <_Balloc+0x2e>
 800b958:	2000      	movs	r0, #0
 800b95a:	bd70      	pop	{r4, r5, r6, pc}
 800b95c:	6802      	ldr	r2, [r0, #0]
 800b95e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b962:	2300      	movs	r3, #0
 800b964:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b968:	e7f7      	b.n	800b95a <_Balloc+0x66>
 800b96a:	bf00      	nop
 800b96c:	0800ca76 	.word	0x0800ca76
 800b970:	0800cbe0 	.word	0x0800cbe0

0800b974 <_Bfree>:
 800b974:	b570      	push	{r4, r5, r6, lr}
 800b976:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b978:	4605      	mov	r5, r0
 800b97a:	460c      	mov	r4, r1
 800b97c:	b976      	cbnz	r6, 800b99c <_Bfree+0x28>
 800b97e:	2010      	movs	r0, #16
 800b980:	f7fc fb3e 	bl	8008000 <malloc>
 800b984:	4602      	mov	r2, r0
 800b986:	6268      	str	r0, [r5, #36]	; 0x24
 800b988:	b920      	cbnz	r0, 800b994 <_Bfree+0x20>
 800b98a:	218a      	movs	r1, #138	; 0x8a
 800b98c:	4b08      	ldr	r3, [pc, #32]	; (800b9b0 <_Bfree+0x3c>)
 800b98e:	4809      	ldr	r0, [pc, #36]	; (800b9b4 <_Bfree+0x40>)
 800b990:	f7fc fadc 	bl	8007f4c <__assert_func>
 800b994:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b998:	6006      	str	r6, [r0, #0]
 800b99a:	60c6      	str	r6, [r0, #12]
 800b99c:	b13c      	cbz	r4, 800b9ae <_Bfree+0x3a>
 800b99e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b9a0:	6862      	ldr	r2, [r4, #4]
 800b9a2:	68db      	ldr	r3, [r3, #12]
 800b9a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b9a8:	6021      	str	r1, [r4, #0]
 800b9aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b9ae:	bd70      	pop	{r4, r5, r6, pc}
 800b9b0:	0800ca76 	.word	0x0800ca76
 800b9b4:	0800cbe0 	.word	0x0800cbe0

0800b9b8 <__multadd>:
 800b9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9bc:	4698      	mov	r8, r3
 800b9be:	460c      	mov	r4, r1
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	690e      	ldr	r6, [r1, #16]
 800b9c4:	4607      	mov	r7, r0
 800b9c6:	f101 0014 	add.w	r0, r1, #20
 800b9ca:	6805      	ldr	r5, [r0, #0]
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	b2a9      	uxth	r1, r5
 800b9d0:	fb02 8101 	mla	r1, r2, r1, r8
 800b9d4:	0c2d      	lsrs	r5, r5, #16
 800b9d6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b9da:	fb02 c505 	mla	r5, r2, r5, ip
 800b9de:	b289      	uxth	r1, r1
 800b9e0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b9e4:	429e      	cmp	r6, r3
 800b9e6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b9ea:	f840 1b04 	str.w	r1, [r0], #4
 800b9ee:	dcec      	bgt.n	800b9ca <__multadd+0x12>
 800b9f0:	f1b8 0f00 	cmp.w	r8, #0
 800b9f4:	d022      	beq.n	800ba3c <__multadd+0x84>
 800b9f6:	68a3      	ldr	r3, [r4, #8]
 800b9f8:	42b3      	cmp	r3, r6
 800b9fa:	dc19      	bgt.n	800ba30 <__multadd+0x78>
 800b9fc:	6861      	ldr	r1, [r4, #4]
 800b9fe:	4638      	mov	r0, r7
 800ba00:	3101      	adds	r1, #1
 800ba02:	f7ff ff77 	bl	800b8f4 <_Balloc>
 800ba06:	4605      	mov	r5, r0
 800ba08:	b928      	cbnz	r0, 800ba16 <__multadd+0x5e>
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	21b5      	movs	r1, #181	; 0xb5
 800ba0e:	4b0d      	ldr	r3, [pc, #52]	; (800ba44 <__multadd+0x8c>)
 800ba10:	480d      	ldr	r0, [pc, #52]	; (800ba48 <__multadd+0x90>)
 800ba12:	f7fc fa9b 	bl	8007f4c <__assert_func>
 800ba16:	6922      	ldr	r2, [r4, #16]
 800ba18:	f104 010c 	add.w	r1, r4, #12
 800ba1c:	3202      	adds	r2, #2
 800ba1e:	0092      	lsls	r2, r2, #2
 800ba20:	300c      	adds	r0, #12
 800ba22:	f7fc faf5 	bl	8008010 <memcpy>
 800ba26:	4621      	mov	r1, r4
 800ba28:	4638      	mov	r0, r7
 800ba2a:	f7ff ffa3 	bl	800b974 <_Bfree>
 800ba2e:	462c      	mov	r4, r5
 800ba30:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ba34:	3601      	adds	r6, #1
 800ba36:	f8c3 8014 	str.w	r8, [r3, #20]
 800ba3a:	6126      	str	r6, [r4, #16]
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba42:	bf00      	nop
 800ba44:	0800caec 	.word	0x0800caec
 800ba48:	0800cbe0 	.word	0x0800cbe0

0800ba4c <__s2b>:
 800ba4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba50:	4615      	mov	r5, r2
 800ba52:	2209      	movs	r2, #9
 800ba54:	461f      	mov	r7, r3
 800ba56:	3308      	adds	r3, #8
 800ba58:	460c      	mov	r4, r1
 800ba5a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba5e:	4606      	mov	r6, r0
 800ba60:	2201      	movs	r2, #1
 800ba62:	2100      	movs	r1, #0
 800ba64:	429a      	cmp	r2, r3
 800ba66:	db09      	blt.n	800ba7c <__s2b+0x30>
 800ba68:	4630      	mov	r0, r6
 800ba6a:	f7ff ff43 	bl	800b8f4 <_Balloc>
 800ba6e:	b940      	cbnz	r0, 800ba82 <__s2b+0x36>
 800ba70:	4602      	mov	r2, r0
 800ba72:	21ce      	movs	r1, #206	; 0xce
 800ba74:	4b18      	ldr	r3, [pc, #96]	; (800bad8 <__s2b+0x8c>)
 800ba76:	4819      	ldr	r0, [pc, #100]	; (800badc <__s2b+0x90>)
 800ba78:	f7fc fa68 	bl	8007f4c <__assert_func>
 800ba7c:	0052      	lsls	r2, r2, #1
 800ba7e:	3101      	adds	r1, #1
 800ba80:	e7f0      	b.n	800ba64 <__s2b+0x18>
 800ba82:	9b08      	ldr	r3, [sp, #32]
 800ba84:	2d09      	cmp	r5, #9
 800ba86:	6143      	str	r3, [r0, #20]
 800ba88:	f04f 0301 	mov.w	r3, #1
 800ba8c:	6103      	str	r3, [r0, #16]
 800ba8e:	dd16      	ble.n	800babe <__s2b+0x72>
 800ba90:	f104 0909 	add.w	r9, r4, #9
 800ba94:	46c8      	mov	r8, r9
 800ba96:	442c      	add	r4, r5
 800ba98:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ba9c:	4601      	mov	r1, r0
 800ba9e:	220a      	movs	r2, #10
 800baa0:	4630      	mov	r0, r6
 800baa2:	3b30      	subs	r3, #48	; 0x30
 800baa4:	f7ff ff88 	bl	800b9b8 <__multadd>
 800baa8:	45a0      	cmp	r8, r4
 800baaa:	d1f5      	bne.n	800ba98 <__s2b+0x4c>
 800baac:	f1a5 0408 	sub.w	r4, r5, #8
 800bab0:	444c      	add	r4, r9
 800bab2:	1b2d      	subs	r5, r5, r4
 800bab4:	1963      	adds	r3, r4, r5
 800bab6:	42bb      	cmp	r3, r7
 800bab8:	db04      	blt.n	800bac4 <__s2b+0x78>
 800baba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800babe:	2509      	movs	r5, #9
 800bac0:	340a      	adds	r4, #10
 800bac2:	e7f6      	b.n	800bab2 <__s2b+0x66>
 800bac4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bac8:	4601      	mov	r1, r0
 800baca:	220a      	movs	r2, #10
 800bacc:	4630      	mov	r0, r6
 800bace:	3b30      	subs	r3, #48	; 0x30
 800bad0:	f7ff ff72 	bl	800b9b8 <__multadd>
 800bad4:	e7ee      	b.n	800bab4 <__s2b+0x68>
 800bad6:	bf00      	nop
 800bad8:	0800caec 	.word	0x0800caec
 800badc:	0800cbe0 	.word	0x0800cbe0

0800bae0 <__hi0bits>:
 800bae0:	0c02      	lsrs	r2, r0, #16
 800bae2:	0412      	lsls	r2, r2, #16
 800bae4:	4603      	mov	r3, r0
 800bae6:	b9ca      	cbnz	r2, 800bb1c <__hi0bits+0x3c>
 800bae8:	0403      	lsls	r3, r0, #16
 800baea:	2010      	movs	r0, #16
 800baec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800baf0:	bf04      	itt	eq
 800baf2:	021b      	lsleq	r3, r3, #8
 800baf4:	3008      	addeq	r0, #8
 800baf6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bafa:	bf04      	itt	eq
 800bafc:	011b      	lsleq	r3, r3, #4
 800bafe:	3004      	addeq	r0, #4
 800bb00:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bb04:	bf04      	itt	eq
 800bb06:	009b      	lsleq	r3, r3, #2
 800bb08:	3002      	addeq	r0, #2
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	db05      	blt.n	800bb1a <__hi0bits+0x3a>
 800bb0e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800bb12:	f100 0001 	add.w	r0, r0, #1
 800bb16:	bf08      	it	eq
 800bb18:	2020      	moveq	r0, #32
 800bb1a:	4770      	bx	lr
 800bb1c:	2000      	movs	r0, #0
 800bb1e:	e7e5      	b.n	800baec <__hi0bits+0xc>

0800bb20 <__lo0bits>:
 800bb20:	6803      	ldr	r3, [r0, #0]
 800bb22:	4602      	mov	r2, r0
 800bb24:	f013 0007 	ands.w	r0, r3, #7
 800bb28:	d00b      	beq.n	800bb42 <__lo0bits+0x22>
 800bb2a:	07d9      	lsls	r1, r3, #31
 800bb2c:	d422      	bmi.n	800bb74 <__lo0bits+0x54>
 800bb2e:	0798      	lsls	r0, r3, #30
 800bb30:	bf49      	itett	mi
 800bb32:	085b      	lsrmi	r3, r3, #1
 800bb34:	089b      	lsrpl	r3, r3, #2
 800bb36:	2001      	movmi	r0, #1
 800bb38:	6013      	strmi	r3, [r2, #0]
 800bb3a:	bf5c      	itt	pl
 800bb3c:	2002      	movpl	r0, #2
 800bb3e:	6013      	strpl	r3, [r2, #0]
 800bb40:	4770      	bx	lr
 800bb42:	b299      	uxth	r1, r3
 800bb44:	b909      	cbnz	r1, 800bb4a <__lo0bits+0x2a>
 800bb46:	2010      	movs	r0, #16
 800bb48:	0c1b      	lsrs	r3, r3, #16
 800bb4a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bb4e:	bf04      	itt	eq
 800bb50:	0a1b      	lsreq	r3, r3, #8
 800bb52:	3008      	addeq	r0, #8
 800bb54:	0719      	lsls	r1, r3, #28
 800bb56:	bf04      	itt	eq
 800bb58:	091b      	lsreq	r3, r3, #4
 800bb5a:	3004      	addeq	r0, #4
 800bb5c:	0799      	lsls	r1, r3, #30
 800bb5e:	bf04      	itt	eq
 800bb60:	089b      	lsreq	r3, r3, #2
 800bb62:	3002      	addeq	r0, #2
 800bb64:	07d9      	lsls	r1, r3, #31
 800bb66:	d403      	bmi.n	800bb70 <__lo0bits+0x50>
 800bb68:	085b      	lsrs	r3, r3, #1
 800bb6a:	f100 0001 	add.w	r0, r0, #1
 800bb6e:	d003      	beq.n	800bb78 <__lo0bits+0x58>
 800bb70:	6013      	str	r3, [r2, #0]
 800bb72:	4770      	bx	lr
 800bb74:	2000      	movs	r0, #0
 800bb76:	4770      	bx	lr
 800bb78:	2020      	movs	r0, #32
 800bb7a:	4770      	bx	lr

0800bb7c <__i2b>:
 800bb7c:	b510      	push	{r4, lr}
 800bb7e:	460c      	mov	r4, r1
 800bb80:	2101      	movs	r1, #1
 800bb82:	f7ff feb7 	bl	800b8f4 <_Balloc>
 800bb86:	4602      	mov	r2, r0
 800bb88:	b928      	cbnz	r0, 800bb96 <__i2b+0x1a>
 800bb8a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bb8e:	4b04      	ldr	r3, [pc, #16]	; (800bba0 <__i2b+0x24>)
 800bb90:	4804      	ldr	r0, [pc, #16]	; (800bba4 <__i2b+0x28>)
 800bb92:	f7fc f9db 	bl	8007f4c <__assert_func>
 800bb96:	2301      	movs	r3, #1
 800bb98:	6144      	str	r4, [r0, #20]
 800bb9a:	6103      	str	r3, [r0, #16]
 800bb9c:	bd10      	pop	{r4, pc}
 800bb9e:	bf00      	nop
 800bba0:	0800caec 	.word	0x0800caec
 800bba4:	0800cbe0 	.word	0x0800cbe0

0800bba8 <__multiply>:
 800bba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbac:	4614      	mov	r4, r2
 800bbae:	690a      	ldr	r2, [r1, #16]
 800bbb0:	6923      	ldr	r3, [r4, #16]
 800bbb2:	460d      	mov	r5, r1
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	bfbe      	ittt	lt
 800bbb8:	460b      	movlt	r3, r1
 800bbba:	4625      	movlt	r5, r4
 800bbbc:	461c      	movlt	r4, r3
 800bbbe:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bbc2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bbc6:	68ab      	ldr	r3, [r5, #8]
 800bbc8:	6869      	ldr	r1, [r5, #4]
 800bbca:	eb0a 0709 	add.w	r7, sl, r9
 800bbce:	42bb      	cmp	r3, r7
 800bbd0:	b085      	sub	sp, #20
 800bbd2:	bfb8      	it	lt
 800bbd4:	3101      	addlt	r1, #1
 800bbd6:	f7ff fe8d 	bl	800b8f4 <_Balloc>
 800bbda:	b930      	cbnz	r0, 800bbea <__multiply+0x42>
 800bbdc:	4602      	mov	r2, r0
 800bbde:	f240 115d 	movw	r1, #349	; 0x15d
 800bbe2:	4b41      	ldr	r3, [pc, #260]	; (800bce8 <__multiply+0x140>)
 800bbe4:	4841      	ldr	r0, [pc, #260]	; (800bcec <__multiply+0x144>)
 800bbe6:	f7fc f9b1 	bl	8007f4c <__assert_func>
 800bbea:	f100 0614 	add.w	r6, r0, #20
 800bbee:	4633      	mov	r3, r6
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bbf6:	4543      	cmp	r3, r8
 800bbf8:	d31e      	bcc.n	800bc38 <__multiply+0x90>
 800bbfa:	f105 0c14 	add.w	ip, r5, #20
 800bbfe:	f104 0314 	add.w	r3, r4, #20
 800bc02:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bc06:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bc0a:	9202      	str	r2, [sp, #8]
 800bc0c:	ebac 0205 	sub.w	r2, ip, r5
 800bc10:	3a15      	subs	r2, #21
 800bc12:	f022 0203 	bic.w	r2, r2, #3
 800bc16:	3204      	adds	r2, #4
 800bc18:	f105 0115 	add.w	r1, r5, #21
 800bc1c:	458c      	cmp	ip, r1
 800bc1e:	bf38      	it	cc
 800bc20:	2204      	movcc	r2, #4
 800bc22:	9201      	str	r2, [sp, #4]
 800bc24:	9a02      	ldr	r2, [sp, #8]
 800bc26:	9303      	str	r3, [sp, #12]
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d808      	bhi.n	800bc3e <__multiply+0x96>
 800bc2c:	2f00      	cmp	r7, #0
 800bc2e:	dc55      	bgt.n	800bcdc <__multiply+0x134>
 800bc30:	6107      	str	r7, [r0, #16]
 800bc32:	b005      	add	sp, #20
 800bc34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc38:	f843 2b04 	str.w	r2, [r3], #4
 800bc3c:	e7db      	b.n	800bbf6 <__multiply+0x4e>
 800bc3e:	f8b3 a000 	ldrh.w	sl, [r3]
 800bc42:	f1ba 0f00 	cmp.w	sl, #0
 800bc46:	d020      	beq.n	800bc8a <__multiply+0xe2>
 800bc48:	46b1      	mov	r9, r6
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f105 0e14 	add.w	lr, r5, #20
 800bc50:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bc54:	f8d9 b000 	ldr.w	fp, [r9]
 800bc58:	b2a1      	uxth	r1, r4
 800bc5a:	fa1f fb8b 	uxth.w	fp, fp
 800bc5e:	fb0a b101 	mla	r1, sl, r1, fp
 800bc62:	4411      	add	r1, r2
 800bc64:	f8d9 2000 	ldr.w	r2, [r9]
 800bc68:	0c24      	lsrs	r4, r4, #16
 800bc6a:	0c12      	lsrs	r2, r2, #16
 800bc6c:	fb0a 2404 	mla	r4, sl, r4, r2
 800bc70:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bc74:	b289      	uxth	r1, r1
 800bc76:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bc7a:	45f4      	cmp	ip, lr
 800bc7c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bc80:	f849 1b04 	str.w	r1, [r9], #4
 800bc84:	d8e4      	bhi.n	800bc50 <__multiply+0xa8>
 800bc86:	9901      	ldr	r1, [sp, #4]
 800bc88:	5072      	str	r2, [r6, r1]
 800bc8a:	9a03      	ldr	r2, [sp, #12]
 800bc8c:	3304      	adds	r3, #4
 800bc8e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bc92:	f1b9 0f00 	cmp.w	r9, #0
 800bc96:	d01f      	beq.n	800bcd8 <__multiply+0x130>
 800bc98:	46b6      	mov	lr, r6
 800bc9a:	f04f 0a00 	mov.w	sl, #0
 800bc9e:	6834      	ldr	r4, [r6, #0]
 800bca0:	f105 0114 	add.w	r1, r5, #20
 800bca4:	880a      	ldrh	r2, [r1, #0]
 800bca6:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bcaa:	b2a4      	uxth	r4, r4
 800bcac:	fb09 b202 	mla	r2, r9, r2, fp
 800bcb0:	4492      	add	sl, r2
 800bcb2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bcb6:	f84e 4b04 	str.w	r4, [lr], #4
 800bcba:	f851 4b04 	ldr.w	r4, [r1], #4
 800bcbe:	f8be 2000 	ldrh.w	r2, [lr]
 800bcc2:	0c24      	lsrs	r4, r4, #16
 800bcc4:	fb09 2404 	mla	r4, r9, r4, r2
 800bcc8:	458c      	cmp	ip, r1
 800bcca:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bcce:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bcd2:	d8e7      	bhi.n	800bca4 <__multiply+0xfc>
 800bcd4:	9a01      	ldr	r2, [sp, #4]
 800bcd6:	50b4      	str	r4, [r6, r2]
 800bcd8:	3604      	adds	r6, #4
 800bcda:	e7a3      	b.n	800bc24 <__multiply+0x7c>
 800bcdc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d1a5      	bne.n	800bc30 <__multiply+0x88>
 800bce4:	3f01      	subs	r7, #1
 800bce6:	e7a1      	b.n	800bc2c <__multiply+0x84>
 800bce8:	0800caec 	.word	0x0800caec
 800bcec:	0800cbe0 	.word	0x0800cbe0

0800bcf0 <__pow5mult>:
 800bcf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcf4:	4615      	mov	r5, r2
 800bcf6:	f012 0203 	ands.w	r2, r2, #3
 800bcfa:	4606      	mov	r6, r0
 800bcfc:	460f      	mov	r7, r1
 800bcfe:	d007      	beq.n	800bd10 <__pow5mult+0x20>
 800bd00:	4c25      	ldr	r4, [pc, #148]	; (800bd98 <__pow5mult+0xa8>)
 800bd02:	3a01      	subs	r2, #1
 800bd04:	2300      	movs	r3, #0
 800bd06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bd0a:	f7ff fe55 	bl	800b9b8 <__multadd>
 800bd0e:	4607      	mov	r7, r0
 800bd10:	10ad      	asrs	r5, r5, #2
 800bd12:	d03d      	beq.n	800bd90 <__pow5mult+0xa0>
 800bd14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bd16:	b97c      	cbnz	r4, 800bd38 <__pow5mult+0x48>
 800bd18:	2010      	movs	r0, #16
 800bd1a:	f7fc f971 	bl	8008000 <malloc>
 800bd1e:	4602      	mov	r2, r0
 800bd20:	6270      	str	r0, [r6, #36]	; 0x24
 800bd22:	b928      	cbnz	r0, 800bd30 <__pow5mult+0x40>
 800bd24:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bd28:	4b1c      	ldr	r3, [pc, #112]	; (800bd9c <__pow5mult+0xac>)
 800bd2a:	481d      	ldr	r0, [pc, #116]	; (800bda0 <__pow5mult+0xb0>)
 800bd2c:	f7fc f90e 	bl	8007f4c <__assert_func>
 800bd30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd34:	6004      	str	r4, [r0, #0]
 800bd36:	60c4      	str	r4, [r0, #12]
 800bd38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bd3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bd40:	b94c      	cbnz	r4, 800bd56 <__pow5mult+0x66>
 800bd42:	f240 2171 	movw	r1, #625	; 0x271
 800bd46:	4630      	mov	r0, r6
 800bd48:	f7ff ff18 	bl	800bb7c <__i2b>
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	4604      	mov	r4, r0
 800bd50:	f8c8 0008 	str.w	r0, [r8, #8]
 800bd54:	6003      	str	r3, [r0, #0]
 800bd56:	f04f 0900 	mov.w	r9, #0
 800bd5a:	07eb      	lsls	r3, r5, #31
 800bd5c:	d50a      	bpl.n	800bd74 <__pow5mult+0x84>
 800bd5e:	4639      	mov	r1, r7
 800bd60:	4622      	mov	r2, r4
 800bd62:	4630      	mov	r0, r6
 800bd64:	f7ff ff20 	bl	800bba8 <__multiply>
 800bd68:	4680      	mov	r8, r0
 800bd6a:	4639      	mov	r1, r7
 800bd6c:	4630      	mov	r0, r6
 800bd6e:	f7ff fe01 	bl	800b974 <_Bfree>
 800bd72:	4647      	mov	r7, r8
 800bd74:	106d      	asrs	r5, r5, #1
 800bd76:	d00b      	beq.n	800bd90 <__pow5mult+0xa0>
 800bd78:	6820      	ldr	r0, [r4, #0]
 800bd7a:	b938      	cbnz	r0, 800bd8c <__pow5mult+0x9c>
 800bd7c:	4622      	mov	r2, r4
 800bd7e:	4621      	mov	r1, r4
 800bd80:	4630      	mov	r0, r6
 800bd82:	f7ff ff11 	bl	800bba8 <__multiply>
 800bd86:	6020      	str	r0, [r4, #0]
 800bd88:	f8c0 9000 	str.w	r9, [r0]
 800bd8c:	4604      	mov	r4, r0
 800bd8e:	e7e4      	b.n	800bd5a <__pow5mult+0x6a>
 800bd90:	4638      	mov	r0, r7
 800bd92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd96:	bf00      	nop
 800bd98:	0800cd30 	.word	0x0800cd30
 800bd9c:	0800ca76 	.word	0x0800ca76
 800bda0:	0800cbe0 	.word	0x0800cbe0

0800bda4 <__lshift>:
 800bda4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bda8:	460c      	mov	r4, r1
 800bdaa:	4607      	mov	r7, r0
 800bdac:	4691      	mov	r9, r2
 800bdae:	6923      	ldr	r3, [r4, #16]
 800bdb0:	6849      	ldr	r1, [r1, #4]
 800bdb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bdb6:	68a3      	ldr	r3, [r4, #8]
 800bdb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bdbc:	f108 0601 	add.w	r6, r8, #1
 800bdc0:	42b3      	cmp	r3, r6
 800bdc2:	db0b      	blt.n	800bddc <__lshift+0x38>
 800bdc4:	4638      	mov	r0, r7
 800bdc6:	f7ff fd95 	bl	800b8f4 <_Balloc>
 800bdca:	4605      	mov	r5, r0
 800bdcc:	b948      	cbnz	r0, 800bde2 <__lshift+0x3e>
 800bdce:	4602      	mov	r2, r0
 800bdd0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bdd4:	4b27      	ldr	r3, [pc, #156]	; (800be74 <__lshift+0xd0>)
 800bdd6:	4828      	ldr	r0, [pc, #160]	; (800be78 <__lshift+0xd4>)
 800bdd8:	f7fc f8b8 	bl	8007f4c <__assert_func>
 800bddc:	3101      	adds	r1, #1
 800bdde:	005b      	lsls	r3, r3, #1
 800bde0:	e7ee      	b.n	800bdc0 <__lshift+0x1c>
 800bde2:	2300      	movs	r3, #0
 800bde4:	f100 0114 	add.w	r1, r0, #20
 800bde8:	f100 0210 	add.w	r2, r0, #16
 800bdec:	4618      	mov	r0, r3
 800bdee:	4553      	cmp	r3, sl
 800bdf0:	db33      	blt.n	800be5a <__lshift+0xb6>
 800bdf2:	6920      	ldr	r0, [r4, #16]
 800bdf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bdf8:	f104 0314 	add.w	r3, r4, #20
 800bdfc:	f019 091f 	ands.w	r9, r9, #31
 800be00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800be04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800be08:	d02b      	beq.n	800be62 <__lshift+0xbe>
 800be0a:	468a      	mov	sl, r1
 800be0c:	2200      	movs	r2, #0
 800be0e:	f1c9 0e20 	rsb	lr, r9, #32
 800be12:	6818      	ldr	r0, [r3, #0]
 800be14:	fa00 f009 	lsl.w	r0, r0, r9
 800be18:	4302      	orrs	r2, r0
 800be1a:	f84a 2b04 	str.w	r2, [sl], #4
 800be1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800be22:	459c      	cmp	ip, r3
 800be24:	fa22 f20e 	lsr.w	r2, r2, lr
 800be28:	d8f3      	bhi.n	800be12 <__lshift+0x6e>
 800be2a:	ebac 0304 	sub.w	r3, ip, r4
 800be2e:	3b15      	subs	r3, #21
 800be30:	f023 0303 	bic.w	r3, r3, #3
 800be34:	3304      	adds	r3, #4
 800be36:	f104 0015 	add.w	r0, r4, #21
 800be3a:	4584      	cmp	ip, r0
 800be3c:	bf38      	it	cc
 800be3e:	2304      	movcc	r3, #4
 800be40:	50ca      	str	r2, [r1, r3]
 800be42:	b10a      	cbz	r2, 800be48 <__lshift+0xa4>
 800be44:	f108 0602 	add.w	r6, r8, #2
 800be48:	3e01      	subs	r6, #1
 800be4a:	4638      	mov	r0, r7
 800be4c:	4621      	mov	r1, r4
 800be4e:	612e      	str	r6, [r5, #16]
 800be50:	f7ff fd90 	bl	800b974 <_Bfree>
 800be54:	4628      	mov	r0, r5
 800be56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be5a:	f842 0f04 	str.w	r0, [r2, #4]!
 800be5e:	3301      	adds	r3, #1
 800be60:	e7c5      	b.n	800bdee <__lshift+0x4a>
 800be62:	3904      	subs	r1, #4
 800be64:	f853 2b04 	ldr.w	r2, [r3], #4
 800be68:	459c      	cmp	ip, r3
 800be6a:	f841 2f04 	str.w	r2, [r1, #4]!
 800be6e:	d8f9      	bhi.n	800be64 <__lshift+0xc0>
 800be70:	e7ea      	b.n	800be48 <__lshift+0xa4>
 800be72:	bf00      	nop
 800be74:	0800caec 	.word	0x0800caec
 800be78:	0800cbe0 	.word	0x0800cbe0

0800be7c <__mcmp>:
 800be7c:	4603      	mov	r3, r0
 800be7e:	690a      	ldr	r2, [r1, #16]
 800be80:	6900      	ldr	r0, [r0, #16]
 800be82:	b530      	push	{r4, r5, lr}
 800be84:	1a80      	subs	r0, r0, r2
 800be86:	d10d      	bne.n	800bea4 <__mcmp+0x28>
 800be88:	3314      	adds	r3, #20
 800be8a:	3114      	adds	r1, #20
 800be8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800be90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800be94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800be98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800be9c:	4295      	cmp	r5, r2
 800be9e:	d002      	beq.n	800bea6 <__mcmp+0x2a>
 800bea0:	d304      	bcc.n	800beac <__mcmp+0x30>
 800bea2:	2001      	movs	r0, #1
 800bea4:	bd30      	pop	{r4, r5, pc}
 800bea6:	42a3      	cmp	r3, r4
 800bea8:	d3f4      	bcc.n	800be94 <__mcmp+0x18>
 800beaa:	e7fb      	b.n	800bea4 <__mcmp+0x28>
 800beac:	f04f 30ff 	mov.w	r0, #4294967295
 800beb0:	e7f8      	b.n	800bea4 <__mcmp+0x28>
	...

0800beb4 <__mdiff>:
 800beb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beb8:	460c      	mov	r4, r1
 800beba:	4606      	mov	r6, r0
 800bebc:	4611      	mov	r1, r2
 800bebe:	4620      	mov	r0, r4
 800bec0:	4692      	mov	sl, r2
 800bec2:	f7ff ffdb 	bl	800be7c <__mcmp>
 800bec6:	1e05      	subs	r5, r0, #0
 800bec8:	d111      	bne.n	800beee <__mdiff+0x3a>
 800beca:	4629      	mov	r1, r5
 800becc:	4630      	mov	r0, r6
 800bece:	f7ff fd11 	bl	800b8f4 <_Balloc>
 800bed2:	4602      	mov	r2, r0
 800bed4:	b928      	cbnz	r0, 800bee2 <__mdiff+0x2e>
 800bed6:	f240 2132 	movw	r1, #562	; 0x232
 800beda:	4b3c      	ldr	r3, [pc, #240]	; (800bfcc <__mdiff+0x118>)
 800bedc:	483c      	ldr	r0, [pc, #240]	; (800bfd0 <__mdiff+0x11c>)
 800bede:	f7fc f835 	bl	8007f4c <__assert_func>
 800bee2:	2301      	movs	r3, #1
 800bee4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bee8:	4610      	mov	r0, r2
 800beea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beee:	bfa4      	itt	ge
 800bef0:	4653      	movge	r3, sl
 800bef2:	46a2      	movge	sl, r4
 800bef4:	4630      	mov	r0, r6
 800bef6:	f8da 1004 	ldr.w	r1, [sl, #4]
 800befa:	bfa6      	itte	ge
 800befc:	461c      	movge	r4, r3
 800befe:	2500      	movge	r5, #0
 800bf00:	2501      	movlt	r5, #1
 800bf02:	f7ff fcf7 	bl	800b8f4 <_Balloc>
 800bf06:	4602      	mov	r2, r0
 800bf08:	b918      	cbnz	r0, 800bf12 <__mdiff+0x5e>
 800bf0a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bf0e:	4b2f      	ldr	r3, [pc, #188]	; (800bfcc <__mdiff+0x118>)
 800bf10:	e7e4      	b.n	800bedc <__mdiff+0x28>
 800bf12:	f100 0814 	add.w	r8, r0, #20
 800bf16:	f8da 7010 	ldr.w	r7, [sl, #16]
 800bf1a:	60c5      	str	r5, [r0, #12]
 800bf1c:	f04f 0c00 	mov.w	ip, #0
 800bf20:	f10a 0514 	add.w	r5, sl, #20
 800bf24:	f10a 0010 	add.w	r0, sl, #16
 800bf28:	46c2      	mov	sl, r8
 800bf2a:	6926      	ldr	r6, [r4, #16]
 800bf2c:	f104 0914 	add.w	r9, r4, #20
 800bf30:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800bf34:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bf38:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800bf3c:	f859 3b04 	ldr.w	r3, [r9], #4
 800bf40:	fa1f f18b 	uxth.w	r1, fp
 800bf44:	4461      	add	r1, ip
 800bf46:	fa1f fc83 	uxth.w	ip, r3
 800bf4a:	0c1b      	lsrs	r3, r3, #16
 800bf4c:	eba1 010c 	sub.w	r1, r1, ip
 800bf50:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bf54:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bf58:	b289      	uxth	r1, r1
 800bf5a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800bf5e:	454e      	cmp	r6, r9
 800bf60:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800bf64:	f84a 3b04 	str.w	r3, [sl], #4
 800bf68:	d8e6      	bhi.n	800bf38 <__mdiff+0x84>
 800bf6a:	1b33      	subs	r3, r6, r4
 800bf6c:	3b15      	subs	r3, #21
 800bf6e:	f023 0303 	bic.w	r3, r3, #3
 800bf72:	3415      	adds	r4, #21
 800bf74:	3304      	adds	r3, #4
 800bf76:	42a6      	cmp	r6, r4
 800bf78:	bf38      	it	cc
 800bf7a:	2304      	movcc	r3, #4
 800bf7c:	441d      	add	r5, r3
 800bf7e:	4443      	add	r3, r8
 800bf80:	461e      	mov	r6, r3
 800bf82:	462c      	mov	r4, r5
 800bf84:	4574      	cmp	r4, lr
 800bf86:	d30e      	bcc.n	800bfa6 <__mdiff+0xf2>
 800bf88:	f10e 0103 	add.w	r1, lr, #3
 800bf8c:	1b49      	subs	r1, r1, r5
 800bf8e:	f021 0103 	bic.w	r1, r1, #3
 800bf92:	3d03      	subs	r5, #3
 800bf94:	45ae      	cmp	lr, r5
 800bf96:	bf38      	it	cc
 800bf98:	2100      	movcc	r1, #0
 800bf9a:	4419      	add	r1, r3
 800bf9c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800bfa0:	b18b      	cbz	r3, 800bfc6 <__mdiff+0x112>
 800bfa2:	6117      	str	r7, [r2, #16]
 800bfa4:	e7a0      	b.n	800bee8 <__mdiff+0x34>
 800bfa6:	f854 8b04 	ldr.w	r8, [r4], #4
 800bfaa:	fa1f f188 	uxth.w	r1, r8
 800bfae:	4461      	add	r1, ip
 800bfb0:	1408      	asrs	r0, r1, #16
 800bfb2:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800bfb6:	b289      	uxth	r1, r1
 800bfb8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bfbc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bfc0:	f846 1b04 	str.w	r1, [r6], #4
 800bfc4:	e7de      	b.n	800bf84 <__mdiff+0xd0>
 800bfc6:	3f01      	subs	r7, #1
 800bfc8:	e7e8      	b.n	800bf9c <__mdiff+0xe8>
 800bfca:	bf00      	nop
 800bfcc:	0800caec 	.word	0x0800caec
 800bfd0:	0800cbe0 	.word	0x0800cbe0

0800bfd4 <__ulp>:
 800bfd4:	4b11      	ldr	r3, [pc, #68]	; (800c01c <__ulp+0x48>)
 800bfd6:	400b      	ands	r3, r1
 800bfd8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	dd02      	ble.n	800bfe6 <__ulp+0x12>
 800bfe0:	2000      	movs	r0, #0
 800bfe2:	4619      	mov	r1, r3
 800bfe4:	4770      	bx	lr
 800bfe6:	425b      	negs	r3, r3
 800bfe8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800bfec:	f04f 0000 	mov.w	r0, #0
 800bff0:	f04f 0100 	mov.w	r1, #0
 800bff4:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bff8:	da04      	bge.n	800c004 <__ulp+0x30>
 800bffa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bffe:	fa43 f102 	asr.w	r1, r3, r2
 800c002:	4770      	bx	lr
 800c004:	f1a2 0314 	sub.w	r3, r2, #20
 800c008:	2b1e      	cmp	r3, #30
 800c00a:	bfd6      	itet	le
 800c00c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c010:	2301      	movgt	r3, #1
 800c012:	fa22 f303 	lsrle.w	r3, r2, r3
 800c016:	4618      	mov	r0, r3
 800c018:	4770      	bx	lr
 800c01a:	bf00      	nop
 800c01c:	7ff00000 	.word	0x7ff00000

0800c020 <__b2d>:
 800c020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c024:	6907      	ldr	r7, [r0, #16]
 800c026:	f100 0914 	add.w	r9, r0, #20
 800c02a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800c02e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800c032:	f1a7 0804 	sub.w	r8, r7, #4
 800c036:	4630      	mov	r0, r6
 800c038:	f7ff fd52 	bl	800bae0 <__hi0bits>
 800c03c:	f1c0 0320 	rsb	r3, r0, #32
 800c040:	280a      	cmp	r0, #10
 800c042:	600b      	str	r3, [r1, #0]
 800c044:	491f      	ldr	r1, [pc, #124]	; (800c0c4 <__b2d+0xa4>)
 800c046:	dc17      	bgt.n	800c078 <__b2d+0x58>
 800c048:	45c1      	cmp	r9, r8
 800c04a:	bf28      	it	cs
 800c04c:	2200      	movcs	r2, #0
 800c04e:	f1c0 0c0b 	rsb	ip, r0, #11
 800c052:	fa26 f30c 	lsr.w	r3, r6, ip
 800c056:	bf38      	it	cc
 800c058:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c05c:	ea43 0501 	orr.w	r5, r3, r1
 800c060:	f100 0315 	add.w	r3, r0, #21
 800c064:	fa06 f303 	lsl.w	r3, r6, r3
 800c068:	fa22 f20c 	lsr.w	r2, r2, ip
 800c06c:	ea43 0402 	orr.w	r4, r3, r2
 800c070:	4620      	mov	r0, r4
 800c072:	4629      	mov	r1, r5
 800c074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c078:	45c1      	cmp	r9, r8
 800c07a:	bf2e      	itee	cs
 800c07c:	2200      	movcs	r2, #0
 800c07e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c082:	f1a7 0808 	subcc.w	r8, r7, #8
 800c086:	f1b0 030b 	subs.w	r3, r0, #11
 800c08a:	d016      	beq.n	800c0ba <__b2d+0x9a>
 800c08c:	f1c3 0720 	rsb	r7, r3, #32
 800c090:	fa22 f107 	lsr.w	r1, r2, r7
 800c094:	45c8      	cmp	r8, r9
 800c096:	fa06 f603 	lsl.w	r6, r6, r3
 800c09a:	ea46 0601 	orr.w	r6, r6, r1
 800c09e:	bf94      	ite	ls
 800c0a0:	2100      	movls	r1, #0
 800c0a2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800c0a6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800c0aa:	fa02 f003 	lsl.w	r0, r2, r3
 800c0ae:	40f9      	lsrs	r1, r7
 800c0b0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c0b4:	ea40 0401 	orr.w	r4, r0, r1
 800c0b8:	e7da      	b.n	800c070 <__b2d+0x50>
 800c0ba:	4614      	mov	r4, r2
 800c0bc:	ea46 0501 	orr.w	r5, r6, r1
 800c0c0:	e7d6      	b.n	800c070 <__b2d+0x50>
 800c0c2:	bf00      	nop
 800c0c4:	3ff00000 	.word	0x3ff00000

0800c0c8 <__d2b>:
 800c0c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c0cc:	2101      	movs	r1, #1
 800c0ce:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c0d2:	4690      	mov	r8, r2
 800c0d4:	461d      	mov	r5, r3
 800c0d6:	f7ff fc0d 	bl	800b8f4 <_Balloc>
 800c0da:	4604      	mov	r4, r0
 800c0dc:	b930      	cbnz	r0, 800c0ec <__d2b+0x24>
 800c0de:	4602      	mov	r2, r0
 800c0e0:	f240 310a 	movw	r1, #778	; 0x30a
 800c0e4:	4b24      	ldr	r3, [pc, #144]	; (800c178 <__d2b+0xb0>)
 800c0e6:	4825      	ldr	r0, [pc, #148]	; (800c17c <__d2b+0xb4>)
 800c0e8:	f7fb ff30 	bl	8007f4c <__assert_func>
 800c0ec:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c0f0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c0f4:	bb2d      	cbnz	r5, 800c142 <__d2b+0x7a>
 800c0f6:	9301      	str	r3, [sp, #4]
 800c0f8:	f1b8 0300 	subs.w	r3, r8, #0
 800c0fc:	d026      	beq.n	800c14c <__d2b+0x84>
 800c0fe:	4668      	mov	r0, sp
 800c100:	9300      	str	r3, [sp, #0]
 800c102:	f7ff fd0d 	bl	800bb20 <__lo0bits>
 800c106:	9900      	ldr	r1, [sp, #0]
 800c108:	b1f0      	cbz	r0, 800c148 <__d2b+0x80>
 800c10a:	9a01      	ldr	r2, [sp, #4]
 800c10c:	f1c0 0320 	rsb	r3, r0, #32
 800c110:	fa02 f303 	lsl.w	r3, r2, r3
 800c114:	430b      	orrs	r3, r1
 800c116:	40c2      	lsrs	r2, r0
 800c118:	6163      	str	r3, [r4, #20]
 800c11a:	9201      	str	r2, [sp, #4]
 800c11c:	9b01      	ldr	r3, [sp, #4]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	bf14      	ite	ne
 800c122:	2102      	movne	r1, #2
 800c124:	2101      	moveq	r1, #1
 800c126:	61a3      	str	r3, [r4, #24]
 800c128:	6121      	str	r1, [r4, #16]
 800c12a:	b1c5      	cbz	r5, 800c15e <__d2b+0x96>
 800c12c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c130:	4405      	add	r5, r0
 800c132:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c136:	603d      	str	r5, [r7, #0]
 800c138:	6030      	str	r0, [r6, #0]
 800c13a:	4620      	mov	r0, r4
 800c13c:	b002      	add	sp, #8
 800c13e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c142:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c146:	e7d6      	b.n	800c0f6 <__d2b+0x2e>
 800c148:	6161      	str	r1, [r4, #20]
 800c14a:	e7e7      	b.n	800c11c <__d2b+0x54>
 800c14c:	a801      	add	r0, sp, #4
 800c14e:	f7ff fce7 	bl	800bb20 <__lo0bits>
 800c152:	2101      	movs	r1, #1
 800c154:	9b01      	ldr	r3, [sp, #4]
 800c156:	6121      	str	r1, [r4, #16]
 800c158:	6163      	str	r3, [r4, #20]
 800c15a:	3020      	adds	r0, #32
 800c15c:	e7e5      	b.n	800c12a <__d2b+0x62>
 800c15e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c162:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c166:	6038      	str	r0, [r7, #0]
 800c168:	6918      	ldr	r0, [r3, #16]
 800c16a:	f7ff fcb9 	bl	800bae0 <__hi0bits>
 800c16e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c172:	6031      	str	r1, [r6, #0]
 800c174:	e7e1      	b.n	800c13a <__d2b+0x72>
 800c176:	bf00      	nop
 800c178:	0800caec 	.word	0x0800caec
 800c17c:	0800cbe0 	.word	0x0800cbe0

0800c180 <__ratio>:
 800c180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c184:	4688      	mov	r8, r1
 800c186:	4669      	mov	r1, sp
 800c188:	4681      	mov	r9, r0
 800c18a:	f7ff ff49 	bl	800c020 <__b2d>
 800c18e:	460f      	mov	r7, r1
 800c190:	4604      	mov	r4, r0
 800c192:	460d      	mov	r5, r1
 800c194:	4640      	mov	r0, r8
 800c196:	a901      	add	r1, sp, #4
 800c198:	f7ff ff42 	bl	800c020 <__b2d>
 800c19c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c1a0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c1a4:	468b      	mov	fp, r1
 800c1a6:	eba3 0c02 	sub.w	ip, r3, r2
 800c1aa:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c1ae:	1a9b      	subs	r3, r3, r2
 800c1b0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	bfd5      	itete	le
 800c1b8:	460a      	movle	r2, r1
 800c1ba:	462a      	movgt	r2, r5
 800c1bc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c1c0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c1c4:	bfd8      	it	le
 800c1c6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c1ca:	465b      	mov	r3, fp
 800c1cc:	4602      	mov	r2, r0
 800c1ce:	4639      	mov	r1, r7
 800c1d0:	4620      	mov	r0, r4
 800c1d2:	f7f4 faab 	bl	800072c <__aeabi_ddiv>
 800c1d6:	b003      	add	sp, #12
 800c1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c1dc <__copybits>:
 800c1dc:	3901      	subs	r1, #1
 800c1de:	b570      	push	{r4, r5, r6, lr}
 800c1e0:	1149      	asrs	r1, r1, #5
 800c1e2:	6914      	ldr	r4, [r2, #16]
 800c1e4:	3101      	adds	r1, #1
 800c1e6:	f102 0314 	add.w	r3, r2, #20
 800c1ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c1ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c1f2:	1f05      	subs	r5, r0, #4
 800c1f4:	42a3      	cmp	r3, r4
 800c1f6:	d30c      	bcc.n	800c212 <__copybits+0x36>
 800c1f8:	1aa3      	subs	r3, r4, r2
 800c1fa:	3b11      	subs	r3, #17
 800c1fc:	f023 0303 	bic.w	r3, r3, #3
 800c200:	3211      	adds	r2, #17
 800c202:	42a2      	cmp	r2, r4
 800c204:	bf88      	it	hi
 800c206:	2300      	movhi	r3, #0
 800c208:	4418      	add	r0, r3
 800c20a:	2300      	movs	r3, #0
 800c20c:	4288      	cmp	r0, r1
 800c20e:	d305      	bcc.n	800c21c <__copybits+0x40>
 800c210:	bd70      	pop	{r4, r5, r6, pc}
 800c212:	f853 6b04 	ldr.w	r6, [r3], #4
 800c216:	f845 6f04 	str.w	r6, [r5, #4]!
 800c21a:	e7eb      	b.n	800c1f4 <__copybits+0x18>
 800c21c:	f840 3b04 	str.w	r3, [r0], #4
 800c220:	e7f4      	b.n	800c20c <__copybits+0x30>

0800c222 <__any_on>:
 800c222:	f100 0214 	add.w	r2, r0, #20
 800c226:	6900      	ldr	r0, [r0, #16]
 800c228:	114b      	asrs	r3, r1, #5
 800c22a:	4298      	cmp	r0, r3
 800c22c:	b510      	push	{r4, lr}
 800c22e:	db11      	blt.n	800c254 <__any_on+0x32>
 800c230:	dd0a      	ble.n	800c248 <__any_on+0x26>
 800c232:	f011 011f 	ands.w	r1, r1, #31
 800c236:	d007      	beq.n	800c248 <__any_on+0x26>
 800c238:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c23c:	fa24 f001 	lsr.w	r0, r4, r1
 800c240:	fa00 f101 	lsl.w	r1, r0, r1
 800c244:	428c      	cmp	r4, r1
 800c246:	d10b      	bne.n	800c260 <__any_on+0x3e>
 800c248:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d803      	bhi.n	800c258 <__any_on+0x36>
 800c250:	2000      	movs	r0, #0
 800c252:	bd10      	pop	{r4, pc}
 800c254:	4603      	mov	r3, r0
 800c256:	e7f7      	b.n	800c248 <__any_on+0x26>
 800c258:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c25c:	2900      	cmp	r1, #0
 800c25e:	d0f5      	beq.n	800c24c <__any_on+0x2a>
 800c260:	2001      	movs	r0, #1
 800c262:	e7f6      	b.n	800c252 <__any_on+0x30>

0800c264 <_calloc_r>:
 800c264:	b538      	push	{r3, r4, r5, lr}
 800c266:	fb02 f501 	mul.w	r5, r2, r1
 800c26a:	4629      	mov	r1, r5
 800c26c:	f7fb ff32 	bl	80080d4 <_malloc_r>
 800c270:	4604      	mov	r4, r0
 800c272:	b118      	cbz	r0, 800c27c <_calloc_r+0x18>
 800c274:	462a      	mov	r2, r5
 800c276:	2100      	movs	r1, #0
 800c278:	f7fb fed8 	bl	800802c <memset>
 800c27c:	4620      	mov	r0, r4
 800c27e:	bd38      	pop	{r3, r4, r5, pc}

0800c280 <_realloc_r>:
 800c280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c282:	4607      	mov	r7, r0
 800c284:	4614      	mov	r4, r2
 800c286:	460e      	mov	r6, r1
 800c288:	b921      	cbnz	r1, 800c294 <_realloc_r+0x14>
 800c28a:	4611      	mov	r1, r2
 800c28c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c290:	f7fb bf20 	b.w	80080d4 <_malloc_r>
 800c294:	b922      	cbnz	r2, 800c2a0 <_realloc_r+0x20>
 800c296:	f7fb fed1 	bl	800803c <_free_r>
 800c29a:	4625      	mov	r5, r4
 800c29c:	4628      	mov	r0, r5
 800c29e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2a0:	f000 fa72 	bl	800c788 <_malloc_usable_size_r>
 800c2a4:	42a0      	cmp	r0, r4
 800c2a6:	d20f      	bcs.n	800c2c8 <_realloc_r+0x48>
 800c2a8:	4621      	mov	r1, r4
 800c2aa:	4638      	mov	r0, r7
 800c2ac:	f7fb ff12 	bl	80080d4 <_malloc_r>
 800c2b0:	4605      	mov	r5, r0
 800c2b2:	2800      	cmp	r0, #0
 800c2b4:	d0f2      	beq.n	800c29c <_realloc_r+0x1c>
 800c2b6:	4631      	mov	r1, r6
 800c2b8:	4622      	mov	r2, r4
 800c2ba:	f7fb fea9 	bl	8008010 <memcpy>
 800c2be:	4631      	mov	r1, r6
 800c2c0:	4638      	mov	r0, r7
 800c2c2:	f7fb febb 	bl	800803c <_free_r>
 800c2c6:	e7e9      	b.n	800c29c <_realloc_r+0x1c>
 800c2c8:	4635      	mov	r5, r6
 800c2ca:	e7e7      	b.n	800c29c <_realloc_r+0x1c>

0800c2cc <__ssputs_r>:
 800c2cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2d0:	688e      	ldr	r6, [r1, #8]
 800c2d2:	4682      	mov	sl, r0
 800c2d4:	429e      	cmp	r6, r3
 800c2d6:	460c      	mov	r4, r1
 800c2d8:	4690      	mov	r8, r2
 800c2da:	461f      	mov	r7, r3
 800c2dc:	d838      	bhi.n	800c350 <__ssputs_r+0x84>
 800c2de:	898a      	ldrh	r2, [r1, #12]
 800c2e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c2e4:	d032      	beq.n	800c34c <__ssputs_r+0x80>
 800c2e6:	6825      	ldr	r5, [r4, #0]
 800c2e8:	6909      	ldr	r1, [r1, #16]
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	eba5 0901 	sub.w	r9, r5, r1
 800c2f0:	6965      	ldr	r5, [r4, #20]
 800c2f2:	444b      	add	r3, r9
 800c2f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c2f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c2fc:	106d      	asrs	r5, r5, #1
 800c2fe:	429d      	cmp	r5, r3
 800c300:	bf38      	it	cc
 800c302:	461d      	movcc	r5, r3
 800c304:	0553      	lsls	r3, r2, #21
 800c306:	d531      	bpl.n	800c36c <__ssputs_r+0xa0>
 800c308:	4629      	mov	r1, r5
 800c30a:	f7fb fee3 	bl	80080d4 <_malloc_r>
 800c30e:	4606      	mov	r6, r0
 800c310:	b950      	cbnz	r0, 800c328 <__ssputs_r+0x5c>
 800c312:	230c      	movs	r3, #12
 800c314:	f04f 30ff 	mov.w	r0, #4294967295
 800c318:	f8ca 3000 	str.w	r3, [sl]
 800c31c:	89a3      	ldrh	r3, [r4, #12]
 800c31e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c322:	81a3      	strh	r3, [r4, #12]
 800c324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c328:	464a      	mov	r2, r9
 800c32a:	6921      	ldr	r1, [r4, #16]
 800c32c:	f7fb fe70 	bl	8008010 <memcpy>
 800c330:	89a3      	ldrh	r3, [r4, #12]
 800c332:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c33a:	81a3      	strh	r3, [r4, #12]
 800c33c:	6126      	str	r6, [r4, #16]
 800c33e:	444e      	add	r6, r9
 800c340:	6026      	str	r6, [r4, #0]
 800c342:	463e      	mov	r6, r7
 800c344:	6165      	str	r5, [r4, #20]
 800c346:	eba5 0509 	sub.w	r5, r5, r9
 800c34a:	60a5      	str	r5, [r4, #8]
 800c34c:	42be      	cmp	r6, r7
 800c34e:	d900      	bls.n	800c352 <__ssputs_r+0x86>
 800c350:	463e      	mov	r6, r7
 800c352:	4632      	mov	r2, r6
 800c354:	4641      	mov	r1, r8
 800c356:	6820      	ldr	r0, [r4, #0]
 800c358:	f7ff faa6 	bl	800b8a8 <memmove>
 800c35c:	68a3      	ldr	r3, [r4, #8]
 800c35e:	6822      	ldr	r2, [r4, #0]
 800c360:	1b9b      	subs	r3, r3, r6
 800c362:	4432      	add	r2, r6
 800c364:	2000      	movs	r0, #0
 800c366:	60a3      	str	r3, [r4, #8]
 800c368:	6022      	str	r2, [r4, #0]
 800c36a:	e7db      	b.n	800c324 <__ssputs_r+0x58>
 800c36c:	462a      	mov	r2, r5
 800c36e:	f7ff ff87 	bl	800c280 <_realloc_r>
 800c372:	4606      	mov	r6, r0
 800c374:	2800      	cmp	r0, #0
 800c376:	d1e1      	bne.n	800c33c <__ssputs_r+0x70>
 800c378:	4650      	mov	r0, sl
 800c37a:	6921      	ldr	r1, [r4, #16]
 800c37c:	f7fb fe5e 	bl	800803c <_free_r>
 800c380:	e7c7      	b.n	800c312 <__ssputs_r+0x46>
	...

0800c384 <_svfiprintf_r>:
 800c384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c388:	4698      	mov	r8, r3
 800c38a:	898b      	ldrh	r3, [r1, #12]
 800c38c:	4607      	mov	r7, r0
 800c38e:	061b      	lsls	r3, r3, #24
 800c390:	460d      	mov	r5, r1
 800c392:	4614      	mov	r4, r2
 800c394:	b09d      	sub	sp, #116	; 0x74
 800c396:	d50e      	bpl.n	800c3b6 <_svfiprintf_r+0x32>
 800c398:	690b      	ldr	r3, [r1, #16]
 800c39a:	b963      	cbnz	r3, 800c3b6 <_svfiprintf_r+0x32>
 800c39c:	2140      	movs	r1, #64	; 0x40
 800c39e:	f7fb fe99 	bl	80080d4 <_malloc_r>
 800c3a2:	6028      	str	r0, [r5, #0]
 800c3a4:	6128      	str	r0, [r5, #16]
 800c3a6:	b920      	cbnz	r0, 800c3b2 <_svfiprintf_r+0x2e>
 800c3a8:	230c      	movs	r3, #12
 800c3aa:	603b      	str	r3, [r7, #0]
 800c3ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c3b0:	e0d1      	b.n	800c556 <_svfiprintf_r+0x1d2>
 800c3b2:	2340      	movs	r3, #64	; 0x40
 800c3b4:	616b      	str	r3, [r5, #20]
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	9309      	str	r3, [sp, #36]	; 0x24
 800c3ba:	2320      	movs	r3, #32
 800c3bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3c0:	2330      	movs	r3, #48	; 0x30
 800c3c2:	f04f 0901 	mov.w	r9, #1
 800c3c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c570 <_svfiprintf_r+0x1ec>
 800c3ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3d2:	4623      	mov	r3, r4
 800c3d4:	469a      	mov	sl, r3
 800c3d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3da:	b10a      	cbz	r2, 800c3e0 <_svfiprintf_r+0x5c>
 800c3dc:	2a25      	cmp	r2, #37	; 0x25
 800c3de:	d1f9      	bne.n	800c3d4 <_svfiprintf_r+0x50>
 800c3e0:	ebba 0b04 	subs.w	fp, sl, r4
 800c3e4:	d00b      	beq.n	800c3fe <_svfiprintf_r+0x7a>
 800c3e6:	465b      	mov	r3, fp
 800c3e8:	4622      	mov	r2, r4
 800c3ea:	4629      	mov	r1, r5
 800c3ec:	4638      	mov	r0, r7
 800c3ee:	f7ff ff6d 	bl	800c2cc <__ssputs_r>
 800c3f2:	3001      	adds	r0, #1
 800c3f4:	f000 80aa 	beq.w	800c54c <_svfiprintf_r+0x1c8>
 800c3f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3fa:	445a      	add	r2, fp
 800c3fc:	9209      	str	r2, [sp, #36]	; 0x24
 800c3fe:	f89a 3000 	ldrb.w	r3, [sl]
 800c402:	2b00      	cmp	r3, #0
 800c404:	f000 80a2 	beq.w	800c54c <_svfiprintf_r+0x1c8>
 800c408:	2300      	movs	r3, #0
 800c40a:	f04f 32ff 	mov.w	r2, #4294967295
 800c40e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c412:	f10a 0a01 	add.w	sl, sl, #1
 800c416:	9304      	str	r3, [sp, #16]
 800c418:	9307      	str	r3, [sp, #28]
 800c41a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c41e:	931a      	str	r3, [sp, #104]	; 0x68
 800c420:	4654      	mov	r4, sl
 800c422:	2205      	movs	r2, #5
 800c424:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c428:	4851      	ldr	r0, [pc, #324]	; (800c570 <_svfiprintf_r+0x1ec>)
 800c42a:	f7ff fa2f 	bl	800b88c <memchr>
 800c42e:	9a04      	ldr	r2, [sp, #16]
 800c430:	b9d8      	cbnz	r0, 800c46a <_svfiprintf_r+0xe6>
 800c432:	06d0      	lsls	r0, r2, #27
 800c434:	bf44      	itt	mi
 800c436:	2320      	movmi	r3, #32
 800c438:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c43c:	0711      	lsls	r1, r2, #28
 800c43e:	bf44      	itt	mi
 800c440:	232b      	movmi	r3, #43	; 0x2b
 800c442:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c446:	f89a 3000 	ldrb.w	r3, [sl]
 800c44a:	2b2a      	cmp	r3, #42	; 0x2a
 800c44c:	d015      	beq.n	800c47a <_svfiprintf_r+0xf6>
 800c44e:	4654      	mov	r4, sl
 800c450:	2000      	movs	r0, #0
 800c452:	f04f 0c0a 	mov.w	ip, #10
 800c456:	9a07      	ldr	r2, [sp, #28]
 800c458:	4621      	mov	r1, r4
 800c45a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c45e:	3b30      	subs	r3, #48	; 0x30
 800c460:	2b09      	cmp	r3, #9
 800c462:	d94e      	bls.n	800c502 <_svfiprintf_r+0x17e>
 800c464:	b1b0      	cbz	r0, 800c494 <_svfiprintf_r+0x110>
 800c466:	9207      	str	r2, [sp, #28]
 800c468:	e014      	b.n	800c494 <_svfiprintf_r+0x110>
 800c46a:	eba0 0308 	sub.w	r3, r0, r8
 800c46e:	fa09 f303 	lsl.w	r3, r9, r3
 800c472:	4313      	orrs	r3, r2
 800c474:	46a2      	mov	sl, r4
 800c476:	9304      	str	r3, [sp, #16]
 800c478:	e7d2      	b.n	800c420 <_svfiprintf_r+0x9c>
 800c47a:	9b03      	ldr	r3, [sp, #12]
 800c47c:	1d19      	adds	r1, r3, #4
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	9103      	str	r1, [sp, #12]
 800c482:	2b00      	cmp	r3, #0
 800c484:	bfbb      	ittet	lt
 800c486:	425b      	neglt	r3, r3
 800c488:	f042 0202 	orrlt.w	r2, r2, #2
 800c48c:	9307      	strge	r3, [sp, #28]
 800c48e:	9307      	strlt	r3, [sp, #28]
 800c490:	bfb8      	it	lt
 800c492:	9204      	strlt	r2, [sp, #16]
 800c494:	7823      	ldrb	r3, [r4, #0]
 800c496:	2b2e      	cmp	r3, #46	; 0x2e
 800c498:	d10c      	bne.n	800c4b4 <_svfiprintf_r+0x130>
 800c49a:	7863      	ldrb	r3, [r4, #1]
 800c49c:	2b2a      	cmp	r3, #42	; 0x2a
 800c49e:	d135      	bne.n	800c50c <_svfiprintf_r+0x188>
 800c4a0:	9b03      	ldr	r3, [sp, #12]
 800c4a2:	3402      	adds	r4, #2
 800c4a4:	1d1a      	adds	r2, r3, #4
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	9203      	str	r2, [sp, #12]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	bfb8      	it	lt
 800c4ae:	f04f 33ff 	movlt.w	r3, #4294967295
 800c4b2:	9305      	str	r3, [sp, #20]
 800c4b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c580 <_svfiprintf_r+0x1fc>
 800c4b8:	2203      	movs	r2, #3
 800c4ba:	4650      	mov	r0, sl
 800c4bc:	7821      	ldrb	r1, [r4, #0]
 800c4be:	f7ff f9e5 	bl	800b88c <memchr>
 800c4c2:	b140      	cbz	r0, 800c4d6 <_svfiprintf_r+0x152>
 800c4c4:	2340      	movs	r3, #64	; 0x40
 800c4c6:	eba0 000a 	sub.w	r0, r0, sl
 800c4ca:	fa03 f000 	lsl.w	r0, r3, r0
 800c4ce:	9b04      	ldr	r3, [sp, #16]
 800c4d0:	3401      	adds	r4, #1
 800c4d2:	4303      	orrs	r3, r0
 800c4d4:	9304      	str	r3, [sp, #16]
 800c4d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4da:	2206      	movs	r2, #6
 800c4dc:	4825      	ldr	r0, [pc, #148]	; (800c574 <_svfiprintf_r+0x1f0>)
 800c4de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c4e2:	f7ff f9d3 	bl	800b88c <memchr>
 800c4e6:	2800      	cmp	r0, #0
 800c4e8:	d038      	beq.n	800c55c <_svfiprintf_r+0x1d8>
 800c4ea:	4b23      	ldr	r3, [pc, #140]	; (800c578 <_svfiprintf_r+0x1f4>)
 800c4ec:	bb1b      	cbnz	r3, 800c536 <_svfiprintf_r+0x1b2>
 800c4ee:	9b03      	ldr	r3, [sp, #12]
 800c4f0:	3307      	adds	r3, #7
 800c4f2:	f023 0307 	bic.w	r3, r3, #7
 800c4f6:	3308      	adds	r3, #8
 800c4f8:	9303      	str	r3, [sp, #12]
 800c4fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4fc:	4433      	add	r3, r6
 800c4fe:	9309      	str	r3, [sp, #36]	; 0x24
 800c500:	e767      	b.n	800c3d2 <_svfiprintf_r+0x4e>
 800c502:	460c      	mov	r4, r1
 800c504:	2001      	movs	r0, #1
 800c506:	fb0c 3202 	mla	r2, ip, r2, r3
 800c50a:	e7a5      	b.n	800c458 <_svfiprintf_r+0xd4>
 800c50c:	2300      	movs	r3, #0
 800c50e:	f04f 0c0a 	mov.w	ip, #10
 800c512:	4619      	mov	r1, r3
 800c514:	3401      	adds	r4, #1
 800c516:	9305      	str	r3, [sp, #20]
 800c518:	4620      	mov	r0, r4
 800c51a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c51e:	3a30      	subs	r2, #48	; 0x30
 800c520:	2a09      	cmp	r2, #9
 800c522:	d903      	bls.n	800c52c <_svfiprintf_r+0x1a8>
 800c524:	2b00      	cmp	r3, #0
 800c526:	d0c5      	beq.n	800c4b4 <_svfiprintf_r+0x130>
 800c528:	9105      	str	r1, [sp, #20]
 800c52a:	e7c3      	b.n	800c4b4 <_svfiprintf_r+0x130>
 800c52c:	4604      	mov	r4, r0
 800c52e:	2301      	movs	r3, #1
 800c530:	fb0c 2101 	mla	r1, ip, r1, r2
 800c534:	e7f0      	b.n	800c518 <_svfiprintf_r+0x194>
 800c536:	ab03      	add	r3, sp, #12
 800c538:	9300      	str	r3, [sp, #0]
 800c53a:	462a      	mov	r2, r5
 800c53c:	4638      	mov	r0, r7
 800c53e:	4b0f      	ldr	r3, [pc, #60]	; (800c57c <_svfiprintf_r+0x1f8>)
 800c540:	a904      	add	r1, sp, #16
 800c542:	f7fc f817 	bl	8008574 <_printf_float>
 800c546:	1c42      	adds	r2, r0, #1
 800c548:	4606      	mov	r6, r0
 800c54a:	d1d6      	bne.n	800c4fa <_svfiprintf_r+0x176>
 800c54c:	89ab      	ldrh	r3, [r5, #12]
 800c54e:	065b      	lsls	r3, r3, #25
 800c550:	f53f af2c 	bmi.w	800c3ac <_svfiprintf_r+0x28>
 800c554:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c556:	b01d      	add	sp, #116	; 0x74
 800c558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c55c:	ab03      	add	r3, sp, #12
 800c55e:	9300      	str	r3, [sp, #0]
 800c560:	462a      	mov	r2, r5
 800c562:	4638      	mov	r0, r7
 800c564:	4b05      	ldr	r3, [pc, #20]	; (800c57c <_svfiprintf_r+0x1f8>)
 800c566:	a904      	add	r1, sp, #16
 800c568:	f7fc faa0 	bl	8008aac <_printf_i>
 800c56c:	e7eb      	b.n	800c546 <_svfiprintf_r+0x1c2>
 800c56e:	bf00      	nop
 800c570:	0800c8c8 	.word	0x0800c8c8
 800c574:	0800c8d2 	.word	0x0800c8d2
 800c578:	08008575 	.word	0x08008575
 800c57c:	0800c2cd 	.word	0x0800c2cd
 800c580:	0800c8ce 	.word	0x0800c8ce

0800c584 <nan>:
 800c584:	2000      	movs	r0, #0
 800c586:	4901      	ldr	r1, [pc, #4]	; (800c58c <nan+0x8>)
 800c588:	4770      	bx	lr
 800c58a:	bf00      	nop
 800c58c:	7ff80000 	.word	0x7ff80000

0800c590 <_raise_r>:
 800c590:	291f      	cmp	r1, #31
 800c592:	b538      	push	{r3, r4, r5, lr}
 800c594:	4604      	mov	r4, r0
 800c596:	460d      	mov	r5, r1
 800c598:	d904      	bls.n	800c5a4 <_raise_r+0x14>
 800c59a:	2316      	movs	r3, #22
 800c59c:	6003      	str	r3, [r0, #0]
 800c59e:	f04f 30ff 	mov.w	r0, #4294967295
 800c5a2:	bd38      	pop	{r3, r4, r5, pc}
 800c5a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c5a6:	b112      	cbz	r2, 800c5ae <_raise_r+0x1e>
 800c5a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c5ac:	b94b      	cbnz	r3, 800c5c2 <_raise_r+0x32>
 800c5ae:	4620      	mov	r0, r4
 800c5b0:	f000 f830 	bl	800c614 <_getpid_r>
 800c5b4:	462a      	mov	r2, r5
 800c5b6:	4601      	mov	r1, r0
 800c5b8:	4620      	mov	r0, r4
 800c5ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5be:	f000 b817 	b.w	800c5f0 <_kill_r>
 800c5c2:	2b01      	cmp	r3, #1
 800c5c4:	d00a      	beq.n	800c5dc <_raise_r+0x4c>
 800c5c6:	1c59      	adds	r1, r3, #1
 800c5c8:	d103      	bne.n	800c5d2 <_raise_r+0x42>
 800c5ca:	2316      	movs	r3, #22
 800c5cc:	6003      	str	r3, [r0, #0]
 800c5ce:	2001      	movs	r0, #1
 800c5d0:	e7e7      	b.n	800c5a2 <_raise_r+0x12>
 800c5d2:	2400      	movs	r4, #0
 800c5d4:	4628      	mov	r0, r5
 800c5d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c5da:	4798      	blx	r3
 800c5dc:	2000      	movs	r0, #0
 800c5de:	e7e0      	b.n	800c5a2 <_raise_r+0x12>

0800c5e0 <raise>:
 800c5e0:	4b02      	ldr	r3, [pc, #8]	; (800c5ec <raise+0xc>)
 800c5e2:	4601      	mov	r1, r0
 800c5e4:	6818      	ldr	r0, [r3, #0]
 800c5e6:	f7ff bfd3 	b.w	800c590 <_raise_r>
 800c5ea:	bf00      	nop
 800c5ec:	20000054 	.word	0x20000054

0800c5f0 <_kill_r>:
 800c5f0:	b538      	push	{r3, r4, r5, lr}
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	4d06      	ldr	r5, [pc, #24]	; (800c610 <_kill_r+0x20>)
 800c5f6:	4604      	mov	r4, r0
 800c5f8:	4608      	mov	r0, r1
 800c5fa:	4611      	mov	r1, r2
 800c5fc:	602b      	str	r3, [r5, #0]
 800c5fe:	f7f5 ff4a 	bl	8002496 <_kill>
 800c602:	1c43      	adds	r3, r0, #1
 800c604:	d102      	bne.n	800c60c <_kill_r+0x1c>
 800c606:	682b      	ldr	r3, [r5, #0]
 800c608:	b103      	cbz	r3, 800c60c <_kill_r+0x1c>
 800c60a:	6023      	str	r3, [r4, #0]
 800c60c:	bd38      	pop	{r3, r4, r5, pc}
 800c60e:	bf00      	nop
 800c610:	20000a5c 	.word	0x20000a5c

0800c614 <_getpid_r>:
 800c614:	f7f5 bf38 	b.w	8002488 <_getpid>

0800c618 <__sread>:
 800c618:	b510      	push	{r4, lr}
 800c61a:	460c      	mov	r4, r1
 800c61c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c620:	f000 f8ba 	bl	800c798 <_read_r>
 800c624:	2800      	cmp	r0, #0
 800c626:	bfab      	itete	ge
 800c628:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c62a:	89a3      	ldrhlt	r3, [r4, #12]
 800c62c:	181b      	addge	r3, r3, r0
 800c62e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c632:	bfac      	ite	ge
 800c634:	6563      	strge	r3, [r4, #84]	; 0x54
 800c636:	81a3      	strhlt	r3, [r4, #12]
 800c638:	bd10      	pop	{r4, pc}

0800c63a <__swrite>:
 800c63a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c63e:	461f      	mov	r7, r3
 800c640:	898b      	ldrh	r3, [r1, #12]
 800c642:	4605      	mov	r5, r0
 800c644:	05db      	lsls	r3, r3, #23
 800c646:	460c      	mov	r4, r1
 800c648:	4616      	mov	r6, r2
 800c64a:	d505      	bpl.n	800c658 <__swrite+0x1e>
 800c64c:	2302      	movs	r3, #2
 800c64e:	2200      	movs	r2, #0
 800c650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c654:	f000 f886 	bl	800c764 <_lseek_r>
 800c658:	89a3      	ldrh	r3, [r4, #12]
 800c65a:	4632      	mov	r2, r6
 800c65c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c660:	81a3      	strh	r3, [r4, #12]
 800c662:	4628      	mov	r0, r5
 800c664:	463b      	mov	r3, r7
 800c666:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c66a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c66e:	f000 b835 	b.w	800c6dc <_write_r>

0800c672 <__sseek>:
 800c672:	b510      	push	{r4, lr}
 800c674:	460c      	mov	r4, r1
 800c676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c67a:	f000 f873 	bl	800c764 <_lseek_r>
 800c67e:	1c43      	adds	r3, r0, #1
 800c680:	89a3      	ldrh	r3, [r4, #12]
 800c682:	bf15      	itete	ne
 800c684:	6560      	strne	r0, [r4, #84]	; 0x54
 800c686:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c68a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c68e:	81a3      	strheq	r3, [r4, #12]
 800c690:	bf18      	it	ne
 800c692:	81a3      	strhne	r3, [r4, #12]
 800c694:	bd10      	pop	{r4, pc}

0800c696 <__sclose>:
 800c696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c69a:	f000 b831 	b.w	800c700 <_close_r>

0800c69e <strncmp>:
 800c69e:	b510      	push	{r4, lr}
 800c6a0:	b16a      	cbz	r2, 800c6be <strncmp+0x20>
 800c6a2:	3901      	subs	r1, #1
 800c6a4:	1884      	adds	r4, r0, r2
 800c6a6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c6aa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d103      	bne.n	800c6ba <strncmp+0x1c>
 800c6b2:	42a0      	cmp	r0, r4
 800c6b4:	d001      	beq.n	800c6ba <strncmp+0x1c>
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d1f5      	bne.n	800c6a6 <strncmp+0x8>
 800c6ba:	1a98      	subs	r0, r3, r2
 800c6bc:	bd10      	pop	{r4, pc}
 800c6be:	4610      	mov	r0, r2
 800c6c0:	e7fc      	b.n	800c6bc <strncmp+0x1e>

0800c6c2 <__ascii_wctomb>:
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	4608      	mov	r0, r1
 800c6c6:	b141      	cbz	r1, 800c6da <__ascii_wctomb+0x18>
 800c6c8:	2aff      	cmp	r2, #255	; 0xff
 800c6ca:	d904      	bls.n	800c6d6 <__ascii_wctomb+0x14>
 800c6cc:	228a      	movs	r2, #138	; 0x8a
 800c6ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c6d2:	601a      	str	r2, [r3, #0]
 800c6d4:	4770      	bx	lr
 800c6d6:	2001      	movs	r0, #1
 800c6d8:	700a      	strb	r2, [r1, #0]
 800c6da:	4770      	bx	lr

0800c6dc <_write_r>:
 800c6dc:	b538      	push	{r3, r4, r5, lr}
 800c6de:	4604      	mov	r4, r0
 800c6e0:	4608      	mov	r0, r1
 800c6e2:	4611      	mov	r1, r2
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	4d05      	ldr	r5, [pc, #20]	; (800c6fc <_write_r+0x20>)
 800c6e8:	602a      	str	r2, [r5, #0]
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	f7f5 ff0a 	bl	8002504 <_write>
 800c6f0:	1c43      	adds	r3, r0, #1
 800c6f2:	d102      	bne.n	800c6fa <_write_r+0x1e>
 800c6f4:	682b      	ldr	r3, [r5, #0]
 800c6f6:	b103      	cbz	r3, 800c6fa <_write_r+0x1e>
 800c6f8:	6023      	str	r3, [r4, #0]
 800c6fa:	bd38      	pop	{r3, r4, r5, pc}
 800c6fc:	20000a5c 	.word	0x20000a5c

0800c700 <_close_r>:
 800c700:	b538      	push	{r3, r4, r5, lr}
 800c702:	2300      	movs	r3, #0
 800c704:	4d05      	ldr	r5, [pc, #20]	; (800c71c <_close_r+0x1c>)
 800c706:	4604      	mov	r4, r0
 800c708:	4608      	mov	r0, r1
 800c70a:	602b      	str	r3, [r5, #0]
 800c70c:	f7f5 ff16 	bl	800253c <_close>
 800c710:	1c43      	adds	r3, r0, #1
 800c712:	d102      	bne.n	800c71a <_close_r+0x1a>
 800c714:	682b      	ldr	r3, [r5, #0]
 800c716:	b103      	cbz	r3, 800c71a <_close_r+0x1a>
 800c718:	6023      	str	r3, [r4, #0]
 800c71a:	bd38      	pop	{r3, r4, r5, pc}
 800c71c:	20000a5c 	.word	0x20000a5c

0800c720 <_fstat_r>:
 800c720:	b538      	push	{r3, r4, r5, lr}
 800c722:	2300      	movs	r3, #0
 800c724:	4d06      	ldr	r5, [pc, #24]	; (800c740 <_fstat_r+0x20>)
 800c726:	4604      	mov	r4, r0
 800c728:	4608      	mov	r0, r1
 800c72a:	4611      	mov	r1, r2
 800c72c:	602b      	str	r3, [r5, #0]
 800c72e:	f7f5 ff10 	bl	8002552 <_fstat>
 800c732:	1c43      	adds	r3, r0, #1
 800c734:	d102      	bne.n	800c73c <_fstat_r+0x1c>
 800c736:	682b      	ldr	r3, [r5, #0]
 800c738:	b103      	cbz	r3, 800c73c <_fstat_r+0x1c>
 800c73a:	6023      	str	r3, [r4, #0]
 800c73c:	bd38      	pop	{r3, r4, r5, pc}
 800c73e:	bf00      	nop
 800c740:	20000a5c 	.word	0x20000a5c

0800c744 <_isatty_r>:
 800c744:	b538      	push	{r3, r4, r5, lr}
 800c746:	2300      	movs	r3, #0
 800c748:	4d05      	ldr	r5, [pc, #20]	; (800c760 <_isatty_r+0x1c>)
 800c74a:	4604      	mov	r4, r0
 800c74c:	4608      	mov	r0, r1
 800c74e:	602b      	str	r3, [r5, #0]
 800c750:	f7f5 ff0e 	bl	8002570 <_isatty>
 800c754:	1c43      	adds	r3, r0, #1
 800c756:	d102      	bne.n	800c75e <_isatty_r+0x1a>
 800c758:	682b      	ldr	r3, [r5, #0]
 800c75a:	b103      	cbz	r3, 800c75e <_isatty_r+0x1a>
 800c75c:	6023      	str	r3, [r4, #0]
 800c75e:	bd38      	pop	{r3, r4, r5, pc}
 800c760:	20000a5c 	.word	0x20000a5c

0800c764 <_lseek_r>:
 800c764:	b538      	push	{r3, r4, r5, lr}
 800c766:	4604      	mov	r4, r0
 800c768:	4608      	mov	r0, r1
 800c76a:	4611      	mov	r1, r2
 800c76c:	2200      	movs	r2, #0
 800c76e:	4d05      	ldr	r5, [pc, #20]	; (800c784 <_lseek_r+0x20>)
 800c770:	602a      	str	r2, [r5, #0]
 800c772:	461a      	mov	r2, r3
 800c774:	f7f5 ff06 	bl	8002584 <_lseek>
 800c778:	1c43      	adds	r3, r0, #1
 800c77a:	d102      	bne.n	800c782 <_lseek_r+0x1e>
 800c77c:	682b      	ldr	r3, [r5, #0]
 800c77e:	b103      	cbz	r3, 800c782 <_lseek_r+0x1e>
 800c780:	6023      	str	r3, [r4, #0]
 800c782:	bd38      	pop	{r3, r4, r5, pc}
 800c784:	20000a5c 	.word	0x20000a5c

0800c788 <_malloc_usable_size_r>:
 800c788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c78c:	1f18      	subs	r0, r3, #4
 800c78e:	2b00      	cmp	r3, #0
 800c790:	bfbc      	itt	lt
 800c792:	580b      	ldrlt	r3, [r1, r0]
 800c794:	18c0      	addlt	r0, r0, r3
 800c796:	4770      	bx	lr

0800c798 <_read_r>:
 800c798:	b538      	push	{r3, r4, r5, lr}
 800c79a:	4604      	mov	r4, r0
 800c79c:	4608      	mov	r0, r1
 800c79e:	4611      	mov	r1, r2
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	4d05      	ldr	r5, [pc, #20]	; (800c7b8 <_read_r+0x20>)
 800c7a4:	602a      	str	r2, [r5, #0]
 800c7a6:	461a      	mov	r2, r3
 800c7a8:	f7f5 fe8f 	bl	80024ca <_read>
 800c7ac:	1c43      	adds	r3, r0, #1
 800c7ae:	d102      	bne.n	800c7b6 <_read_r+0x1e>
 800c7b0:	682b      	ldr	r3, [r5, #0]
 800c7b2:	b103      	cbz	r3, 800c7b6 <_read_r+0x1e>
 800c7b4:	6023      	str	r3, [r4, #0]
 800c7b6:	bd38      	pop	{r3, r4, r5, pc}
 800c7b8:	20000a5c 	.word	0x20000a5c

0800c7bc <_init>:
 800c7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7be:	bf00      	nop
 800c7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7c2:	bc08      	pop	{r3}
 800c7c4:	469e      	mov	lr, r3
 800c7c6:	4770      	bx	lr

0800c7c8 <_fini>:
 800c7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ca:	bf00      	nop
 800c7cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7ce:	bc08      	pop	{r3}
 800c7d0:	469e      	mov	lr, r3
 800c7d2:	4770      	bx	lr
