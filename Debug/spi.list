
spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c66c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800c780  0800c780  0001c780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cce4  0800cce4  00020228  2**0
                  CONTENTS
  4 .ARM          00000000  0800cce4  0800cce4  00020228  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cce4  0800cce4  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cce4  0800cce4  0001cce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cce8  0800cce8  0001cce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0800ccec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000838  20000228  0800cf14  00020228  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000a60  0800cf14  00020a60  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125ed  00000000  00000000  00020251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030ce  00000000  00000000  0003283e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00035910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e48  00000000  00000000  000368c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016438  00000000  00000000  00037708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b20  00000000  00000000  0004db40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074841  00000000  00000000  0005e660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2ea1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005504  00000000  00000000  000d2ef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000228 	.word	0x20000228
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c764 	.word	0x0800c764

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000022c 	.word	0x2000022c
 800014c:	0800c764 	.word	0x0800c764

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2iz>:
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30f      	bcc.n	800104e <__aeabi_f2iz+0x2a>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d90d      	bls.n	8001054 <__aeabi_f2iz+0x30>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	bf18      	it	ne
 800104a:	4240      	negne	r0, r0
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2iz+0x3a>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d105      	bne.n	800106a <__aeabi_f2iz+0x46>
 800105e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001062:	bf08      	it	eq
 8001064:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <__aeabi_d2lz>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	460c      	mov	r4, r1
 8001074:	4605      	mov	r5, r0
 8001076:	4621      	mov	r1, r4
 8001078:	4628      	mov	r0, r5
 800107a:	2200      	movs	r2, #0
 800107c:	2300      	movs	r3, #0
 800107e:	f7ff fc9d 	bl	80009bc <__aeabi_dcmplt>
 8001082:	b928      	cbnz	r0, 8001090 <__aeabi_d2lz+0x20>
 8001084:	4628      	mov	r0, r5
 8001086:	4621      	mov	r1, r4
 8001088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800108c:	f000 b80a 	b.w	80010a4 <__aeabi_d2ulz>
 8001090:	4628      	mov	r0, r5
 8001092:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001096:	f000 f805 	bl	80010a4 <__aeabi_d2ulz>
 800109a:	4240      	negs	r0, r0
 800109c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010a0:	bd38      	pop	{r3, r4, r5, pc}
 80010a2:	bf00      	nop

080010a4 <__aeabi_d2ulz>:
 80010a4:	b5d0      	push	{r4, r6, r7, lr}
 80010a6:	2200      	movs	r2, #0
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <__aeabi_d2ulz+0x34>)
 80010aa:	4606      	mov	r6, r0
 80010ac:	460f      	mov	r7, r1
 80010ae:	f7ff fa13 	bl	80004d8 <__aeabi_dmul>
 80010b2:	f7ff fce9 	bl	8000a88 <__aeabi_d2uiz>
 80010b6:	4604      	mov	r4, r0
 80010b8:	f7ff f994 	bl	80003e4 <__aeabi_ui2d>
 80010bc:	2200      	movs	r2, #0
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <__aeabi_d2ulz+0x38>)
 80010c0:	f7ff fa0a 	bl	80004d8 <__aeabi_dmul>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4630      	mov	r0, r6
 80010ca:	4639      	mov	r1, r7
 80010cc:	f7ff f84c 	bl	8000168 <__aeabi_dsub>
 80010d0:	f7ff fcda 	bl	8000a88 <__aeabi_d2uiz>
 80010d4:	4621      	mov	r1, r4
 80010d6:	bdd0      	pop	{r4, r6, r7, pc}
 80010d8:	3df00000 	.word	0x3df00000
 80010dc:	41f00000 	.word	0x41f00000

080010e0 <SET_COUNT>:
extern uint8_t read_X2[4], read_X1[4], read_X0[4];
extern uint8_t read_Y2[4], read_Y1[4], read_Y0[4];
extern uint8_t read_Z2[4], read_Z1[4], read_Z0[4];


void SET_COUNT(int chip_select) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 80010e8:	4a2c      	ldr	r2, [pc, #176]	; (800119c <SET_COUNT+0xbc>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010f0:	4a2b      	ldr	r2, [pc, #172]	; (80011a0 <SET_COUNT+0xc0>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010f8:	2201      	movs	r2, #1
 80010fa:	4619      	mov	r1, r3
 80010fc:	f002 f8f2 	bl	80032e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_LOW); //SSN LOW TO COMMUNICATE WITH SENSOR
 8001100:	4a26      	ldr	r2, [pc, #152]	; (800119c <SET_COUNT+0xbc>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001108:	4a25      	ldr	r2, [pc, #148]	; (80011a0 <SET_COUNT+0xc0>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001110:	2200      	movs	r2, #0
 8001112:	4619      	mov	r1, r3
 8001114:	f002 f8e6 	bl	80032e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, rm3100_MSB_X_buf, sizeof(rm3100_MSB_X_buf), 1000); //Not need to necessary to send multiple value or register
 8001118:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111c:	2201      	movs	r2, #1
 800111e:	4921      	ldr	r1, [pc, #132]	; (80011a4 <SET_COUNT+0xc4>)
 8001120:	4821      	ldr	r0, [pc, #132]	; (80011a8 <SET_COUNT+0xc8>)
 8001122:	f004 fa0e 	bl	8005542 <HAL_SPI_Transmit>
	//Initiate Count cycle
	HAL_SPI_Transmit(&hspi1, MSB_X_buf, sizeof(MSB_X_buf), 1000);
 8001126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112a:	2201      	movs	r2, #1
 800112c:	491f      	ldr	r1, [pc, #124]	; (80011ac <SET_COUNT+0xcc>)
 800112e:	481e      	ldr	r0, [pc, #120]	; (80011a8 <SET_COUNT+0xc8>)
 8001130:	f004 fa07 	bl	8005542 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, LSB_X_buf, sizeof(LSB_X_buf), 1000);
 8001134:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001138:	2201      	movs	r2, #1
 800113a:	491d      	ldr	r1, [pc, #116]	; (80011b0 <SET_COUNT+0xd0>)
 800113c:	481a      	ldr	r0, [pc, #104]	; (80011a8 <SET_COUNT+0xc8>)
 800113e:	f004 fa00 	bl	8005542 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, MSB_Y_buf, sizeof(MSB_Y_buf), 1000);
 8001142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001146:	2201      	movs	r2, #1
 8001148:	491a      	ldr	r1, [pc, #104]	; (80011b4 <SET_COUNT+0xd4>)
 800114a:	4817      	ldr	r0, [pc, #92]	; (80011a8 <SET_COUNT+0xc8>)
 800114c:	f004 f9f9 	bl	8005542 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, LSB_Y_buf, sizeof(LSB_Y_buf), 1000);
 8001150:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001154:	2201      	movs	r2, #1
 8001156:	4918      	ldr	r1, [pc, #96]	; (80011b8 <SET_COUNT+0xd8>)
 8001158:	4813      	ldr	r0, [pc, #76]	; (80011a8 <SET_COUNT+0xc8>)
 800115a:	f004 f9f2 	bl	8005542 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, MSB_Z_buf, sizeof(MSB_Z_buf), 1000);
 800115e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001162:	2201      	movs	r2, #1
 8001164:	4915      	ldr	r1, [pc, #84]	; (80011bc <SET_COUNT+0xdc>)
 8001166:	4810      	ldr	r0, [pc, #64]	; (80011a8 <SET_COUNT+0xc8>)
 8001168:	f004 f9eb 	bl	8005542 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, LSB_Z_buf, sizeof(LSB_Z_buf), 1000);
 800116c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001170:	2201      	movs	r2, #1
 8001172:	4913      	ldr	r1, [pc, #76]	; (80011c0 <SET_COUNT+0xe0>)
 8001174:	480c      	ldr	r0, [pc, #48]	; (80011a8 <SET_COUNT+0xc8>)
 8001176:	f004 f9e4 	bl	8005542 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH);
 800117a:	4a08      	ldr	r2, [pc, #32]	; (800119c <SET_COUNT+0xbc>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001182:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <SET_COUNT+0xc0>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800118a:	2201      	movs	r2, #1
 800118c:	4619      	mov	r1, r3
 800118e:	f002 f8a9 	bl	80032e4 <HAL_GPIO_WritePin>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000028 	.word	0x20000028
 80011a0:	20000038 	.word	0x20000038
 80011a4:	20000004 	.word	0x20000004
 80011a8:	20000620 	.word	0x20000620
 80011ac:	20000248 	.word	0x20000248
 80011b0:	20000008 	.word	0x20000008
 80011b4:	2000024c 	.word	0x2000024c
 80011b8:	2000000c 	.word	0x2000000c
 80011bc:	20000250 	.word	0x20000250
 80011c0:	20000010 	.word	0x20000010

080011c4 <Continuous_Mode>:
//Initiate Continuous Measurements Mode

void Continuous_Mode(int chip_select) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 80011cc:	4a1a      	ldr	r2, [pc, #104]	; (8001238 <Continuous_Mode+0x74>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011d4:	4a19      	ldr	r2, [pc, #100]	; (800123c <Continuous_Mode+0x78>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011dc:	2201      	movs	r2, #1
 80011de:	4619      	mov	r1, r3
 80011e0:	f002 f880 	bl	80032e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_LOW); //SSN LOW TO COMMUNICATE WITH SENSOR
 80011e4:	4a14      	ldr	r2, [pc, #80]	; (8001238 <Continuous_Mode+0x74>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011ec:	4a13      	ldr	r2, [pc, #76]	; (800123c <Continuous_Mode+0x78>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011f4:	2200      	movs	r2, #0
 80011f6:	4619      	mov	r1, r3
 80011f8:	f002 f874 	bl	80032e4 <HAL_GPIO_WritePin>
	//Initiate Continuous Measurements Mode
	HAL_SPI_Transmit(&hspi1, rm3100_cmm_buf, sizeof(rm3100_cmm_buf), 1000);
 80011fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001200:	2201      	movs	r2, #1
 8001202:	490f      	ldr	r1, [pc, #60]	; (8001240 <Continuous_Mode+0x7c>)
 8001204:	480f      	ldr	r0, [pc, #60]	; (8001244 <Continuous_Mode+0x80>)
 8001206:	f004 f99c 	bl	8005542 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, rm3100_cmm_mod_buf, sizeof(rm3100_cmm_mod_buf), 1000);
 800120a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120e:	2201      	movs	r2, #1
 8001210:	490d      	ldr	r1, [pc, #52]	; (8001248 <Continuous_Mode+0x84>)
 8001212:	480c      	ldr	r0, [pc, #48]	; (8001244 <Continuous_Mode+0x80>)
 8001214:	f004 f995 	bl	8005542 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 8001218:	4a07      	ldr	r2, [pc, #28]	; (8001238 <Continuous_Mode+0x74>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001220:	4a06      	ldr	r2, [pc, #24]	; (800123c <Continuous_Mode+0x78>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001228:	2201      	movs	r2, #1
 800122a:	4619      	mov	r1, r3
 800122c:	f002 f85a 	bl	80032e4 <HAL_GPIO_WritePin>
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000028 	.word	0x20000028
 800123c:	20000038 	.word	0x20000038
 8001240:	20000014 	.word	0x20000014
 8001244:	20000620 	.word	0x20000620
 8001248:	20000018 	.word	0x20000018

0800124c <TMRC_Mode>:
//Initiate Time Measurements and Rate Control

void TMRC_Mode(int chip_select) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 8001254:	4a1a      	ldr	r2, [pc, #104]	; (80012c0 <TMRC_Mode+0x74>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800125c:	4a19      	ldr	r2, [pc, #100]	; (80012c4 <TMRC_Mode+0x78>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001264:	2201      	movs	r2, #1
 8001266:	4619      	mov	r1, r3
 8001268:	f002 f83c 	bl	80032e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_LOW); //SSN LOW TO COMMUNICATE WITH SENSOR
 800126c:	4a14      	ldr	r2, [pc, #80]	; (80012c0 <TMRC_Mode+0x74>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001274:	4a13      	ldr	r2, [pc, #76]	; (80012c4 <TMRC_Mode+0x78>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800127c:	2200      	movs	r2, #0
 800127e:	4619      	mov	r1, r3
 8001280:	f002 f830 	bl	80032e4 <HAL_GPIO_WritePin>
	//initiate Time Measurements and Reset Control
	HAL_SPI_Transmit(&hspi1, rm3100_tmrc_add_buf, sizeof(rm3100_tmrc_add_buf), 1000);
 8001284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001288:	2201      	movs	r2, #1
 800128a:	490f      	ldr	r1, [pc, #60]	; (80012c8 <TMRC_Mode+0x7c>)
 800128c:	480f      	ldr	r0, [pc, #60]	; (80012cc <TMRC_Mode+0x80>)
 800128e:	f004 f958 	bl	8005542 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, rm3100_tmrc_Val_buf, sizeof(rm3100_tmrc_Val_buf), 1000);
 8001292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001296:	2201      	movs	r2, #1
 8001298:	490d      	ldr	r1, [pc, #52]	; (80012d0 <TMRC_Mode+0x84>)
 800129a:	480c      	ldr	r0, [pc, #48]	; (80012cc <TMRC_Mode+0x80>)
 800129c:	f004 f951 	bl	8005542 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(&hspi1, rm3100_tmrc_read_buf, sizeof(rm3100_tmrc_read_buf),
//			1000);
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 80012a0:	4a07      	ldr	r2, [pc, #28]	; (80012c0 <TMRC_Mode+0x74>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012a8:	4a06      	ldr	r2, [pc, #24]	; (80012c4 <TMRC_Mode+0x78>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012b0:	2201      	movs	r2, #1
 80012b2:	4619      	mov	r1, r3
 80012b4:	f002 f816 	bl	80032e4 <HAL_GPIO_WritePin>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000028 	.word	0x20000028
 80012c4:	20000038 	.word	0x20000038
 80012c8:	2000001c 	.word	0x2000001c
 80012cc:	20000620 	.word	0x20000620
 80012d0:	20000020 	.word	0x20000020

080012d4 <Mea_Result>:

//Read Measurements Results
void Mea_Result(int chip_select) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 80012dc:	4a3f      	ldr	r2, [pc, #252]	; (80013dc <Mea_Result+0x108>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012e4:	4a3e      	ldr	r2, [pc, #248]	; (80013e0 <Mea_Result+0x10c>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012ec:	2201      	movs	r2, #1
 80012ee:	4619      	mov	r1, r3
 80012f0:	f001 fff8 	bl	80032e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_LOW); //SSN LOW TO COMMUNICATE WITH SENSOR
 80012f4:	4a39      	ldr	r2, [pc, #228]	; (80013dc <Mea_Result+0x108>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012fc:	4a38      	ldr	r2, [pc, #224]	; (80013e0 <Mea_Result+0x10c>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001304:	2200      	movs	r2, #0
 8001306:	4619      	mov	r1, r3
 8001308:	f001 ffec 	bl	80032e4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, MRRW2_X_buf, sizeof(MRRW2_X_buf), 1000);
 800130c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001310:	2201      	movs	r2, #1
 8001312:	4934      	ldr	r1, [pc, #208]	; (80013e4 <Mea_Result+0x110>)
 8001314:	4834      	ldr	r0, [pc, #208]	; (80013e8 <Mea_Result+0x114>)
 8001316:	f004 f914 	bl	8005542 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &read_X2[chip_select], sizeof(read_X2[chip_select]), 1000);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a33      	ldr	r2, [pc, #204]	; (80013ec <Mea_Result+0x118>)
 800131e:	1899      	adds	r1, r3, r2
 8001320:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001324:	2201      	movs	r2, #1
 8001326:	4830      	ldr	r0, [pc, #192]	; (80013e8 <Mea_Result+0x114>)
 8001328:	f004 fa3f 	bl	80057aa <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_X1[chip_select], sizeof(read_X1[chip_select]), 1000);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a30      	ldr	r2, [pc, #192]	; (80013f0 <Mea_Result+0x11c>)
 8001330:	1899      	adds	r1, r3, r2
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	2201      	movs	r2, #1
 8001338:	482b      	ldr	r0, [pc, #172]	; (80013e8 <Mea_Result+0x114>)
 800133a:	f004 fa36 	bl	80057aa <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_X0[chip_select], sizeof(read_X0[chip_select]), 1000);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a2c      	ldr	r2, [pc, #176]	; (80013f4 <Mea_Result+0x120>)
 8001342:	1899      	adds	r1, r3, r2
 8001344:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001348:	2201      	movs	r2, #1
 800134a:	4827      	ldr	r0, [pc, #156]	; (80013e8 <Mea_Result+0x114>)
 800134c:	f004 fa2d 	bl	80057aa <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Y2[chip_select], sizeof(read_Y2[chip_select]), 1000);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a29      	ldr	r2, [pc, #164]	; (80013f8 <Mea_Result+0x124>)
 8001354:	1899      	adds	r1, r3, r2
 8001356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135a:	2201      	movs	r2, #1
 800135c:	4822      	ldr	r0, [pc, #136]	; (80013e8 <Mea_Result+0x114>)
 800135e:	f004 fa24 	bl	80057aa <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Y1[chip_select], sizeof(read_Y1[chip_select]), 1000);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a25      	ldr	r2, [pc, #148]	; (80013fc <Mea_Result+0x128>)
 8001366:	1899      	adds	r1, r3, r2
 8001368:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136c:	2201      	movs	r2, #1
 800136e:	481e      	ldr	r0, [pc, #120]	; (80013e8 <Mea_Result+0x114>)
 8001370:	f004 fa1b 	bl	80057aa <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Y0[chip_select], sizeof(read_Y0[chip_select]), 1000);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a22      	ldr	r2, [pc, #136]	; (8001400 <Mea_Result+0x12c>)
 8001378:	1899      	adds	r1, r3, r2
 800137a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137e:	2201      	movs	r2, #1
 8001380:	4819      	ldr	r0, [pc, #100]	; (80013e8 <Mea_Result+0x114>)
 8001382:	f004 fa12 	bl	80057aa <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Z2[chip_select], sizeof(read_Z2[chip_select]), 1000);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a1e      	ldr	r2, [pc, #120]	; (8001404 <Mea_Result+0x130>)
 800138a:	1899      	adds	r1, r3, r2
 800138c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001390:	2201      	movs	r2, #1
 8001392:	4815      	ldr	r0, [pc, #84]	; (80013e8 <Mea_Result+0x114>)
 8001394:	f004 fa09 	bl	80057aa <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Z1[chip_select], sizeof(read_Z1[chip_select]), 1000);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a1b      	ldr	r2, [pc, #108]	; (8001408 <Mea_Result+0x134>)
 800139c:	1899      	adds	r1, r3, r2
 800139e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a2:	2201      	movs	r2, #1
 80013a4:	4810      	ldr	r0, [pc, #64]	; (80013e8 <Mea_Result+0x114>)
 80013a6:	f004 fa00 	bl	80057aa <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Z0[chip_select], sizeof(read_Z0[chip_select]), 1000);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a17      	ldr	r2, [pc, #92]	; (800140c <Mea_Result+0x138>)
 80013ae:	1899      	adds	r1, r3, r2
 80013b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b4:	2201      	movs	r2, #1
 80013b6:	480c      	ldr	r0, [pc, #48]	; (80013e8 <Mea_Result+0x114>)
 80013b8:	f004 f9f7 	bl	80057aa <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 80013bc:	4a07      	ldr	r2, [pc, #28]	; (80013dc <Mea_Result+0x108>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80013c4:	4a06      	ldr	r2, [pc, #24]	; (80013e0 <Mea_Result+0x10c>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013cc:	2201      	movs	r2, #1
 80013ce:	4619      	mov	r1, r3
 80013d0:	f001 ff88 	bl	80032e4 <HAL_GPIO_WritePin>
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000028 	.word	0x20000028
 80013e0:	20000038 	.word	0x20000038
 80013e4:	20000024 	.word	0x20000024
 80013e8:	20000620 	.word	0x20000620
 80013ec:	20000404 	.word	0x20000404
 80013f0:	200003c4 	.word	0x200003c4
 80013f4:	20000418 	.word	0x20000418
 80013f8:	20000438 	.word	0x20000438
 80013fc:	2000035c 	.word	0x2000035c
 8001400:	20000430 	.word	0x20000430
 8001404:	200003c8 	.word	0x200003c8
 8001408:	20000380 	.word	0x20000380
 800140c:	2000042c 	.word	0x2000042c

08001410 <Comb_measurement>:
//    HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
//}


//Combine Measurements
void Comb_measurement(int chip_select) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
//    // Get current time from RTC
//    HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
//    HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);

    // Combine bytes for X-axis
    mag_X[chip_select] = (read_X2[chip_select] << 16) | (read_X1[chip_select] << 8) | read_X0[chip_select];
 8001418:	4a82      	ldr	r2, [pc, #520]	; (8001624 <Comb_measurement+0x214>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	041a      	lsls	r2, r3, #16
 8001422:	4981      	ldr	r1, [pc, #516]	; (8001628 <Comb_measurement+0x218>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	440b      	add	r3, r1
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	021b      	lsls	r3, r3, #8
 800142c:	4313      	orrs	r3, r2
 800142e:	497f      	ldr	r1, [pc, #508]	; (800162c <Comb_measurement+0x21c>)
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	440a      	add	r2, r1
 8001434:	7812      	ldrb	r2, [r2, #0]
 8001436:	4313      	orrs	r3, r2
 8001438:	4619      	mov	r1, r3
 800143a:	4a7d      	ldr	r2, [pc, #500]	; (8001630 <Comb_measurement+0x220>)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // Extend the sign bit for negative values
    signed_mag_X[chip_select] = (mag_X[chip_select] & 0x800000) ? (mag_X[chip_select] | 0xFF000000) : mag_X[chip_select];
 8001442:	4a7b      	ldr	r2, [pc, #492]	; (8001630 <Comb_measurement+0x220>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d007      	beq.n	8001462 <Comb_measurement+0x52>
 8001452:	4a77      	ldr	r2, [pc, #476]	; (8001630 <Comb_measurement+0x220>)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800145e:	4619      	mov	r1, r3
 8001460:	e004      	b.n	800146c <Comb_measurement+0x5c>
 8001462:	4a73      	ldr	r2, [pc, #460]	; (8001630 <Comb_measurement+0x220>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146a:	4619      	mov	r1, r3
 800146c:	4a71      	ldr	r2, [pc, #452]	; (8001634 <Comb_measurement+0x224>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    // Combine bytes for Y-axis
    mag_Y[chip_select] = (read_Y2[chip_select] << 16) | (read_Y1[chip_select] << 8) | read_Y0[chip_select];
 8001474:	4a70      	ldr	r2, [pc, #448]	; (8001638 <Comb_measurement+0x228>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4413      	add	r3, r2
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	041a      	lsls	r2, r3, #16
 800147e:	496f      	ldr	r1, [pc, #444]	; (800163c <Comb_measurement+0x22c>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	440b      	add	r3, r1
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	021b      	lsls	r3, r3, #8
 8001488:	4313      	orrs	r3, r2
 800148a:	496d      	ldr	r1, [pc, #436]	; (8001640 <Comb_measurement+0x230>)
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	440a      	add	r2, r1
 8001490:	7812      	ldrb	r2, [r2, #0]
 8001492:	4313      	orrs	r3, r2
 8001494:	4619      	mov	r1, r3
 8001496:	4a6b      	ldr	r2, [pc, #428]	; (8001644 <Comb_measurement+0x234>)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // Extend the sign bit for negative values
    signed_mag_Y[chip_select] = (mag_Y[chip_select] & 0x800000) ? (mag_Y[chip_select] | 0xFF000000) : mag_Y[chip_select];
 800149e:	4a69      	ldr	r2, [pc, #420]	; (8001644 <Comb_measurement+0x234>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d007      	beq.n	80014be <Comb_measurement+0xae>
 80014ae:	4a65      	ldr	r2, [pc, #404]	; (8001644 <Comb_measurement+0x234>)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80014ba:	4619      	mov	r1, r3
 80014bc:	e004      	b.n	80014c8 <Comb_measurement+0xb8>
 80014be:	4a61      	ldr	r2, [pc, #388]	; (8001644 <Comb_measurement+0x234>)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c6:	4619      	mov	r1, r3
 80014c8:	4a5f      	ldr	r2, [pc, #380]	; (8001648 <Comb_measurement+0x238>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    // Combine bytes for Z-axis
    mag_Z[chip_select] = (read_Z2[chip_select] << 16) | (read_Z1[chip_select] << 8) | read_Z0[chip_select];
 80014d0:	4a5e      	ldr	r2, [pc, #376]	; (800164c <Comb_measurement+0x23c>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	041a      	lsls	r2, r3, #16
 80014da:	495d      	ldr	r1, [pc, #372]	; (8001650 <Comb_measurement+0x240>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	440b      	add	r3, r1
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	4313      	orrs	r3, r2
 80014e6:	495b      	ldr	r1, [pc, #364]	; (8001654 <Comb_measurement+0x244>)
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	440a      	add	r2, r1
 80014ec:	7812      	ldrb	r2, [r2, #0]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	4a59      	ldr	r2, [pc, #356]	; (8001658 <Comb_measurement+0x248>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // Extend the sign bit for negative values
    signed_mag_Z[chip_select] = (mag_Z[chip_select] & 0x800000) ? (mag_Z[chip_select] | 0xFF000000) : mag_Z[chip_select];
 80014fa:	4a57      	ldr	r2, [pc, #348]	; (8001658 <Comb_measurement+0x248>)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001502:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d007      	beq.n	800151a <Comb_measurement+0x10a>
 800150a:	4a53      	ldr	r2, [pc, #332]	; (8001658 <Comb_measurement+0x248>)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001512:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001516:	4619      	mov	r1, r3
 8001518:	e004      	b.n	8001524 <Comb_measurement+0x114>
 800151a:	4a4f      	ldr	r2, [pc, #316]	; (8001658 <Comb_measurement+0x248>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001522:	4619      	mov	r1, r3
 8001524:	4a4d      	ldr	r2, [pc, #308]	; (800165c <Comb_measurement+0x24c>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    // Calculate magnitude
   // magnitude[chip_select] = sqrt((float)(signed_mag_X[chip_select] * signed_mag_X[chip_select]) + (signed_mag_Y[chip_select] * signed_mag_Y[chip_select]) + (signed_mag_Z[chip_select] * signed_mag_Z[chip_select]));

    // Calculate axis values in float
    X_axis[chip_select] = (float)signed_mag_X[chip_select] / gain;
 800152c:	4a41      	ldr	r2, [pc, #260]	; (8001634 <Comb_measurement+0x224>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fbd1 	bl	8000cdc <__aeabi_i2f>
 800153a:	4602      	mov	r2, r0
 800153c:	4b48      	ldr	r3, [pc, #288]	; (8001660 <Comb_measurement+0x250>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4619      	mov	r1, r3
 8001542:	4610      	mov	r0, r2
 8001544:	f7ff fcd2 	bl	8000eec <__aeabi_fdiv>
 8001548:	4603      	mov	r3, r0
 800154a:	4619      	mov	r1, r3
 800154c:	4a45      	ldr	r2, [pc, #276]	; (8001664 <Comb_measurement+0x254>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Y_axis[chip_select] = (float)signed_mag_Y[chip_select] / gain;
 8001554:	4a3c      	ldr	r2, [pc, #240]	; (8001648 <Comb_measurement+0x238>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fbbd 	bl	8000cdc <__aeabi_i2f>
 8001562:	4602      	mov	r2, r0
 8001564:	4b3e      	ldr	r3, [pc, #248]	; (8001660 <Comb_measurement+0x250>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4619      	mov	r1, r3
 800156a:	4610      	mov	r0, r2
 800156c:	f7ff fcbe 	bl	8000eec <__aeabi_fdiv>
 8001570:	4603      	mov	r3, r0
 8001572:	4619      	mov	r1, r3
 8001574:	4a3c      	ldr	r2, [pc, #240]	; (8001668 <Comb_measurement+0x258>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Z_axis[chip_select] = (float)signed_mag_Z[chip_select] / gain;
 800157c:	4a37      	ldr	r2, [pc, #220]	; (800165c <Comb_measurement+0x24c>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fba9 	bl	8000cdc <__aeabi_i2f>
 800158a:	4602      	mov	r2, r0
 800158c:	4b34      	ldr	r3, [pc, #208]	; (8001660 <Comb_measurement+0x250>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	4610      	mov	r0, r2
 8001594:	f7ff fcaa 	bl	8000eec <__aeabi_fdiv>
 8001598:	4603      	mov	r3, r0
 800159a:	4619      	mov	r1, r3
 800159c:	4a33      	ldr	r2, [pc, #204]	; (800166c <Comb_measurement+0x25c>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    //Converting float axis data in to  integer data
    x_axis[chip_select] = (int16_t)(X_axis[chip_select] * 1000);
 80015a4:	4a2f      	ldr	r2, [pc, #188]	; (8001664 <Comb_measurement+0x254>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ac:	4930      	ldr	r1, [pc, #192]	; (8001670 <Comb_measurement+0x260>)
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fbe8 	bl	8000d84 <__aeabi_fmul>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fd34 	bl	8001024 <__aeabi_f2iz>
 80015bc:	4603      	mov	r3, r0
 80015be:	b21b      	sxth	r3, r3
 80015c0:	b2d9      	uxtb	r1, r3
 80015c2:	4a2c      	ldr	r2, [pc, #176]	; (8001674 <Comb_measurement+0x264>)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4413      	add	r3, r2
 80015c8:	460a      	mov	r2, r1
 80015ca:	701a      	strb	r2, [r3, #0]
    y_axis[chip_select] = (int16_t)(Y_axis[chip_select] * 1000);
 80015cc:	4a26      	ldr	r2, [pc, #152]	; (8001668 <Comb_measurement+0x258>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d4:	4926      	ldr	r1, [pc, #152]	; (8001670 <Comb_measurement+0x260>)
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fbd4 	bl	8000d84 <__aeabi_fmul>
 80015dc:	4603      	mov	r3, r0
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fd20 	bl	8001024 <__aeabi_f2iz>
 80015e4:	4603      	mov	r3, r0
 80015e6:	b21b      	sxth	r3, r3
 80015e8:	b2d9      	uxtb	r1, r3
 80015ea:	4a23      	ldr	r2, [pc, #140]	; (8001678 <Comb_measurement+0x268>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4413      	add	r3, r2
 80015f0:	460a      	mov	r2, r1
 80015f2:	701a      	strb	r2, [r3, #0]
    z_axis[chip_select] = (int16_t)(Z_axis[chip_select] * 1000);
 80015f4:	4a1d      	ldr	r2, [pc, #116]	; (800166c <Comb_measurement+0x25c>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fc:	491c      	ldr	r1, [pc, #112]	; (8001670 <Comb_measurement+0x260>)
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fbc0 	bl	8000d84 <__aeabi_fmul>
 8001604:	4603      	mov	r3, r0
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fd0c 	bl	8001024 <__aeabi_f2iz>
 800160c:	4603      	mov	r3, r0
 800160e:	b21b      	sxth	r3, r3
 8001610:	b2d9      	uxtb	r1, r3
 8001612:	4a1a      	ldr	r2, [pc, #104]	; (800167c <Comb_measurement+0x26c>)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4413      	add	r3, r2
 8001618:	460a      	mov	r2, r1
 800161a:	701a      	strb	r2, [r3, #0]
      //  myDebug("%.2f %.2f %.2f %.2f ", X_axis[chip_select],Y_axis[chip_select],Z_axis[chip_select],Magnitude[chip_select]);
//    	myDebug("%.2f", x_axis[chip_select]);
//    	myDebug("%.2f", y_axis[chip_select]);
//    	myDebug("%.2f", z_axis[chip_select]);
//        myDebug("%.2f", Magnitude[chip_select]);
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000404 	.word	0x20000404
 8001628:	200003c4 	.word	0x200003c4
 800162c:	20000418 	.word	0x20000418
 8001630:	20000408 	.word	0x20000408
 8001634:	2000033c 	.word	0x2000033c
 8001638:	20000438 	.word	0x20000438
 800163c:	2000035c 	.word	0x2000035c
 8001640:	20000430 	.word	0x20000430
 8001644:	20000264 	.word	0x20000264
 8001648:	2000041c 	.word	0x2000041c
 800164c:	200003c8 	.word	0x200003c8
 8001650:	20000380 	.word	0x20000380
 8001654:	2000042c 	.word	0x2000042c
 8001658:	20000360 	.word	0x20000360
 800165c:	200003b4 	.word	0x200003b4
 8001660:	20000000 	.word	0x20000000
 8001664:	200003a4 	.word	0x200003a4
 8001668:	20000384 	.word	0x20000384
 800166c:	2000034c 	.word	0x2000034c
 8001670:	447a0000 	.word	0x447a0000
 8001674:	20000400 	.word	0x20000400
 8001678:	20000434 	.word	0x20000434
 800167c:	20000260 	.word	0x20000260

08001680 <READ_DATA>:
//    while (*buffer++ != '\0')
//        i++;
//    return i;
//}

READ_DATA(){
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
	// Define the command sequence to compare
	uint8_t command[7] = {0x53, 0x0e, 0x0d, 0x0e, 0x01, 0x7e};
 8001686:	4a35      	ldr	r2, [pc, #212]	; (800175c <READ_DATA+0xdc>)
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800168e:	6018      	str	r0, [r3, #0]
 8001690:	3304      	adds	r3, #4
 8001692:	8019      	strh	r1, [r3, #0]
 8001694:	3302      	adds	r3, #2
 8001696:	0c0a      	lsrs	r2, r1, #16
 8001698:	701a      	strb	r2, [r3, #0]
	uint8_t match = 1;  // Flag to track if the command matches
 800169a:	2301      	movs	r3, #1
 800169c:	75fb      	strb	r3, [r7, #23]
	uint32_t startTime = HAL_GetTick();  // Record the start time
 800169e:	f001 f809 	bl	80026b4 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]
	uint32_t maxDuration = 1 * 60 * 1000;  // Maximum duration (1 minute in milliseconds)
 80016a4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80016a8:	60fb      	str	r3, [r7, #12]

	if(HAL_UART_Receive(&huart2, OBC_CMD_RX, sizeof(OBC_CMD_RX),1000)==HAL_OK){
 80016aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ae:	2207      	movs	r2, #7
 80016b0:	492b      	ldr	r1, [pc, #172]	; (8001760 <READ_DATA+0xe0>)
 80016b2:	482c      	ldr	r0, [pc, #176]	; (8001764 <READ_DATA+0xe4>)
 80016b4:	f004 fde7 	bl	8006286 <HAL_UART_Receive>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d149      	bne.n	8001752 <READ_DATA+0xd2>
			if(HAL_UART_Transmit(&huart2, OBC_CMD_RX, sizeof(OBC_CMD_RX), 3000)==HAL_OK){
 80016be:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80016c2:	2207      	movs	r2, #7
 80016c4:	4926      	ldr	r1, [pc, #152]	; (8001760 <READ_DATA+0xe0>)
 80016c6:	4827      	ldr	r0, [pc, #156]	; (8001764 <READ_DATA+0xe4>)
 80016c8:	f004 fd44 	bl	8006154 <HAL_UART_Transmit>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d13f      	bne.n	8001752 <READ_DATA+0xd2>
				HAL_UART_Transmit(&huart1, "COMMAND RECEIVED\n", sizeof("COMMAND RECEIVED"), 1000);
 80016d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d6:	2211      	movs	r2, #17
 80016d8:	4923      	ldr	r1, [pc, #140]	; (8001768 <READ_DATA+0xe8>)
 80016da:	4824      	ldr	r0, [pc, #144]	; (800176c <READ_DATA+0xec>)
 80016dc:	f004 fd3a 	bl	8006154 <HAL_UART_Transmit>
				for(int i = 0; i<4; i++){
 80016e0:	2300      	movs	r3, #0
 80016e2:	61fb      	str	r3, [r7, #28]
 80016e4:	e00b      	b.n	80016fe <READ_DATA+0x7e>
					SET_COUNT(i);
 80016e6:	69f8      	ldr	r0, [r7, #28]
 80016e8:	f7ff fcfa 	bl	80010e0 <SET_COUNT>
					Continuous_Mode(i);
 80016ec:	69f8      	ldr	r0, [r7, #28]
 80016ee:	f7ff fd69 	bl	80011c4 <Continuous_Mode>
					TMRC_Mode(i);
 80016f2:	69f8      	ldr	r0, [r7, #28]
 80016f4:	f7ff fdaa 	bl	800124c <TMRC_Mode>
				for(int i = 0; i<4; i++){
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	3301      	adds	r3, #1
 80016fc:	61fb      	str	r3, [r7, #28]
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	2b03      	cmp	r3, #3
 8001702:	ddf0      	ble.n	80016e6 <READ_DATA+0x66>
				}
				 while (HAL_GetTick() - startTime < maxDuration) {  // Run loop for 1 minute
 8001704:	e01d      	b.n	8001742 <READ_DATA+0xc2>
					            for (int i = 0; i < 4; i++) {
 8001706:	2300      	movs	r3, #0
 8001708:	61bb      	str	r3, [r7, #24]
 800170a:	e017      	b.n	800173c <READ_DATA+0xbc>
					                Mea_Result(i);
 800170c:	69b8      	ldr	r0, [r7, #24]
 800170e:	f7ff fde1 	bl	80012d4 <Mea_Result>
					                Comb_measurement(i);
 8001712:	69b8      	ldr	r0, [r7, #24]
 8001714:	f7ff fe7c 	bl	8001410 <Comb_measurement>
					                HAL_Delay(100);  // Delay 100ms between iterations
 8001718:	2064      	movs	r0, #100	; 0x64
 800171a:	f000 ffd5 	bl	80026c8 <HAL_Delay>
					                HAL_UART_Transmit(&huart1, "QUD_MAG IS WORKING\n", sizeof("QUDD_MAG IS WORKING"), 1000);
 800171e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001722:	2214      	movs	r2, #20
 8001724:	4912      	ldr	r1, [pc, #72]	; (8001770 <READ_DATA+0xf0>)
 8001726:	4811      	ldr	r0, [pc, #68]	; (800176c <READ_DATA+0xec>)
 8001728:	f004 fd14 	bl	8006154 <HAL_UART_Transmit>
					                counter++;
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <READ_DATA+0xf4>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	3301      	adds	r3, #1
 8001732:	4a10      	ldr	r2, [pc, #64]	; (8001774 <READ_DATA+0xf4>)
 8001734:	6013      	str	r3, [r2, #0]
					            for (int i = 0; i < 4; i++) {
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	3301      	adds	r3, #1
 800173a:	61bb      	str	r3, [r7, #24]
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	2b03      	cmp	r3, #3
 8001740:	dde4      	ble.n	800170c <READ_DATA+0x8c>
				 while (HAL_GetTick() - startTime < maxDuration) {  // Run loop for 1 minute
 8001742:	f000 ffb7 	bl	80026b4 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	429a      	cmp	r2, r3
 8001750:	d8d9      	bhi.n	8001706 <READ_DATA+0x86>
//	    }




}
 8001752:	bf00      	nop
 8001754:	3720      	adds	r7, #32
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	0800c7a8 	.word	0x0800c7a8
 8001760:	20000040 	.word	0x20000040
 8001764:	20000678 	.word	0x20000678
 8001768:	0800c780 	.word	0x0800c780
 800176c:	200005b0 	.word	0x200005b0
 8001770:	0800c794 	.word	0x0800c794
 8001774:	20000244 	.word	0x20000244

08001778 <OBC_HANDSHAKE>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//HANDSHAKE WITH ON-BOARD COMPUTER
uint8_t OBC_HANDSHAKE(){
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
	memset(OBC_HANDSHAKE_RX, '\0', sizeof(OBC_HANDSHAKE_RX));
 800177c:	2207      	movs	r2, #7
 800177e:	2100      	movs	r1, #0
 8001780:	4816      	ldr	r0, [pc, #88]	; (80017dc <OBC_HANDSHAKE+0x64>)
 8001782:	f006 fc25 	bl	8007fd0 <memset>
	memset(OBC_HANDSHAKE_TX, '\0', sizeof(OBC_HANDSHAKE_TX));
 8001786:	2207      	movs	r2, #7
 8001788:	2100      	movs	r1, #0
 800178a:	4815      	ldr	r0, [pc, #84]	; (80017e0 <OBC_HANDSHAKE+0x68>)
 800178c:	f006 fc20 	bl	8007fd0 <memset>
	OBC_HANDSHAKE_SUCESS = 0;
 8001790:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <OBC_HANDSHAKE+0x6c>)
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]
	if(HAL_UART_Receive(&huart2, OBC_HANDSHAKE_RX, sizeof(OBC_HANDSHAKE_RX),1000)==HAL_OK){
 8001796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179a:	2207      	movs	r2, #7
 800179c:	490f      	ldr	r1, [pc, #60]	; (80017dc <OBC_HANDSHAKE+0x64>)
 800179e:	4812      	ldr	r0, [pc, #72]	; (80017e8 <OBC_HANDSHAKE+0x70>)
 80017a0:	f004 fd71 	bl	8006286 <HAL_UART_Receive>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d114      	bne.n	80017d4 <OBC_HANDSHAKE+0x5c>
		if(HAL_UART_Transmit(&huart2, OBC_HANDSHAKE_RX, sizeof(OBC_HANDSHAKE_RX), 3000)==HAL_OK){
 80017aa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80017ae:	2207      	movs	r2, #7
 80017b0:	490a      	ldr	r1, [pc, #40]	; (80017dc <OBC_HANDSHAKE+0x64>)
 80017b2:	480d      	ldr	r0, [pc, #52]	; (80017e8 <OBC_HANDSHAKE+0x70>)
 80017b4:	f004 fcce 	bl	8006154 <HAL_UART_Transmit>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10a      	bne.n	80017d4 <OBC_HANDSHAKE+0x5c>
			OBC_HANDSHAKE_SUCESS = 1;
 80017be:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <OBC_HANDSHAKE+0x6c>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, "HANDSHAKE SUCCESSFULLY\n", "HANDSHAKE SUCCESSFULLY", 1000);
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <OBC_HANDSHAKE+0x74>)
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017cc:	4908      	ldr	r1, [pc, #32]	; (80017f0 <OBC_HANDSHAKE+0x78>)
 80017ce:	4809      	ldr	r0, [pc, #36]	; (80017f4 <OBC_HANDSHAKE+0x7c>)
 80017d0:	f004 fcc0 	bl	8006154 <HAL_UART_Transmit>
		}
	}
	return OBC_HANDSHAKE_SUCESS;
 80017d4:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <OBC_HANDSHAKE+0x6c>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	200004dc 	.word	0x200004dc
 80017e0:	20000618 	.word	0x20000618
 80017e4:	20000252 	.word	0x20000252
 80017e8:	20000678 	.word	0x20000678
 80017ec:	0800c7b0 	.word	0x0800c7b0
 80017f0:	0800c7c8 	.word	0x0800c7c8
 80017f4:	200005b0 	.word	0x200005b0

080017f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017fe:	f000 ff01 	bl	8002604 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001802:	f000 f85b 	bl	80018bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001806:	f000 f9fd 	bl	8001c04 <MX_GPIO_Init>
  MX_SPI1_Init();
 800180a:	f000 f8d3 	bl	80019b4 <MX_SPI1_Init>
  MX_DMA_Init();
 800180e:	f000 f9b3 	bl	8001b78 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001812:	f000 f965 	bl	8001ae0 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001816:	f000 f903 	bl	8001a20 <MX_SPI2_Init>
  MX_USB_PCD_Init();
 800181a:	f000 f98b 	bl	8001b34 <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 800181e:	f000 f935 	bl	8001a8c <MX_USART1_UART_Init>
  MX_RTC_Init();
 8001822:	f000 f8ab 	bl	800197c <MX_RTC_Init>
//while(1){
//	if(HAL_UART_Receive(&huart2,&rx, 1, 1000)==HAL_OK){
//		HAL_UART_Transmit(&huart1, &rx, 1, 1000);
//	}
//}
   while(OBC_HANDSHAKE_SUCESS ==0){
 8001826:	e001      	b.n	800182c <main+0x34>
  	 OBC_HANDSHAKE();
 8001828:	f7ff ffa6 	bl	8001778 <OBC_HANDSHAKE>
   while(OBC_HANDSHAKE_SUCESS ==0){
 800182c:	4b1c      	ldr	r3, [pc, #112]	; (80018a0 <main+0xa8>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0f9      	beq.n	8001828 <main+0x30>
   }

   while(OBC_CMD_RX_FLAG != 1){
 8001834:	e00e      	b.n	8001854 <main+0x5c>
  	 OBC_HANDSHAKE();
 8001836:	f7ff ff9f 	bl	8001778 <OBC_HANDSHAKE>
  	 if(HAL_UART_Receive(&huart2, OBC_HANDSHAKE_RX, sizeof(OBC_HANDSHAKE_RX),1000) >0){
 800183a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183e:	2207      	movs	r2, #7
 8001840:	4918      	ldr	r1, [pc, #96]	; (80018a4 <main+0xac>)
 8001842:	4819      	ldr	r0, [pc, #100]	; (80018a8 <main+0xb0>)
 8001844:	f004 fd1f 	bl	8006286 <HAL_UART_Receive>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d002      	beq.n	8001854 <main+0x5c>
  		 OBC_CMD_RX_FLAG = 1;
 800184e:	4b17      	ldr	r3, [pc, #92]	; (80018ac <main+0xb4>)
 8001850:	2201      	movs	r2, #1
 8001852:	701a      	strb	r2, [r3, #0]
   while(OBC_CMD_RX_FLAG != 1){
 8001854:	4b15      	ldr	r3, [pc, #84]	; (80018ac <main+0xb4>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d1ec      	bne.n	8001836 <main+0x3e>
  	 }

   }

  HAL_GPIO_WritePin(GPIOB, MSN_EN1_Pin, SET); // Set PB9 high
 800185c:	2201      	movs	r2, #1
 800185e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001862:	4813      	ldr	r0, [pc, #76]	; (80018b0 <main+0xb8>)
 8001864:	f001 fd3e 	bl	80032e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, MSN_EN2_Pin, SET); // Set PB8 high
 8001868:	2201      	movs	r2, #1
 800186a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800186e:	4810      	ldr	r0, [pc, #64]	; (80018b0 <main+0xb8>)
 8001870:	f001 fd38 	bl	80032e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, MSN_EN3_Pin, SET); // Set PA15 high
 8001874:	2201      	movs	r2, #1
 8001876:	f44f 7180 	mov.w	r1, #256	; 0x100
 800187a:	480d      	ldr	r0, [pc, #52]	; (80018b0 <main+0xb8>)
 800187c:	f001 fd32 	bl	80032e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, MSN_EN4_Pin, SET); // Set PA8 high
 8001880:	2201      	movs	r2, #1
 8001882:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001886:	480a      	ldr	r0, [pc, #40]	; (80018b0 <main+0xb8>)
 8001888:	f001 fd2c 	bl	80032e4 <HAL_GPIO_WritePin>
  uint8_t data[20];
// Read_ID(&hspi2, GPIOB, GPIO_PIN_12, data);
 //   HAL_Delay(100);
    HAL_UART_Transmit(&huart1, "STARTING DATA READING", sizeof("STARTING DATA READING"), 1000);
 800188c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001890:	2216      	movs	r2, #22
 8001892:	4908      	ldr	r1, [pc, #32]	; (80018b4 <main+0xbc>)
 8001894:	4808      	ldr	r0, [pc, #32]	; (80018b8 <main+0xc0>)
 8001896:	f004 fc5d 	bl	8006154 <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  READ_DATA();
 800189a:	f7ff fef1 	bl	8001680 <READ_DATA>
 800189e:	e7fc      	b.n	800189a <main+0xa2>
 80018a0:	20000252 	.word	0x20000252
 80018a4:	200004dc 	.word	0x200004dc
 80018a8:	20000678 	.word	0x20000678
 80018ac:	20000251 	.word	0x20000251
 80018b0:	40010c00 	.word	0x40010c00
 80018b4:	0800c7e0 	.word	0x0800c7e0
 80018b8:	200005b0 	.word	0x200005b0

080018bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b094      	sub	sp, #80	; 0x50
 80018c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018c6:	2228      	movs	r2, #40	; 0x28
 80018c8:	2100      	movs	r1, #0
 80018ca:	4618      	mov	r0, r3
 80018cc:	f006 fb80 	bl	8007fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80018ec:	2309      	movs	r3, #9
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018f6:	2300      	movs	r3, #0
 80018f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018fa:	2301      	movs	r3, #1
 80018fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80018fe:	2301      	movs	r3, #1
 8001900:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001902:	2302      	movs	r3, #2
 8001904:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001906:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800190a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800190c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001910:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001912:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001916:	4618      	mov	r0, r3
 8001918:	f002 fe94 	bl	8004644 <HAL_RCC_OscConfig>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001922:	f000 f9e1 	bl	8001ce8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001926:	230f      	movs	r3, #15
 8001928:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800192a:	2302      	movs	r3, #2
 800192c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001936:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001938:	2300      	movs	r3, #0
 800193a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	2101      	movs	r1, #1
 8001942:	4618      	mov	r0, r3
 8001944:	f003 f8fe 	bl	8004b44 <HAL_RCC_ClockConfig>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800194e:	f000 f9cb 	bl	8001ce8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8001952:	2311      	movs	r3, #17
 8001954:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001956:	f44f 7300 	mov.w	r3, #512	; 0x200
 800195a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800195c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001960:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	4618      	mov	r0, r3
 8001966:	f003 fa87 	bl	8004e78 <HAL_RCCEx_PeriphCLKConfig>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001970:	f000 f9ba 	bl	8001ce8 <Error_Handler>
  }
}
 8001974:	bf00      	nop
 8001976:	3750      	adds	r7, #80	; 0x50
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001980:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <MX_RTC_Init+0x30>)
 8001982:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <MX_RTC_Init+0x34>)
 8001984:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <MX_RTC_Init+0x30>)
 8001988:	f04f 32ff 	mov.w	r2, #4294967295
 800198c:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800198e:	4b07      	ldr	r3, [pc, #28]	; (80019ac <MX_RTC_Init+0x30>)
 8001990:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001994:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001996:	4805      	ldr	r0, [pc, #20]	; (80019ac <MX_RTC_Init+0x30>)
 8001998:	f003 fbe8 	bl	800516c <HAL_RTC_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 80019a2:	f000 f9a1 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200005f0 	.word	0x200005f0
 80019b0:	40002800 	.word	0x40002800

080019b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019b8:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <MX_SPI1_Init+0x64>)
 80019ba:	4a18      	ldr	r2, [pc, #96]	; (8001a1c <MX_SPI1_Init+0x68>)
 80019bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019be:	4b16      	ldr	r3, [pc, #88]	; (8001a18 <MX_SPI1_Init+0x64>)
 80019c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019c6:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <MX_SPI1_Init+0x64>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <MX_SPI1_Init+0x64>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019d2:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <MX_SPI1_Init+0x64>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019d8:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <MX_SPI1_Init+0x64>)
 80019da:	2200      	movs	r2, #0
 80019dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019de:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <MX_SPI1_Init+0x64>)
 80019e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80019e6:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <MX_SPI1_Init+0x64>)
 80019e8:	2220      	movs	r2, #32
 80019ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019ec:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <MX_SPI1_Init+0x64>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <MX_SPI1_Init+0x64>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019f8:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <MX_SPI1_Init+0x64>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <MX_SPI1_Init+0x64>)
 8001a00:	220a      	movs	r2, #10
 8001a02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a04:	4804      	ldr	r0, [pc, #16]	; (8001a18 <MX_SPI1_Init+0x64>)
 8001a06:	f003 fd3b 	bl	8005480 <HAL_SPI_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a10:	f000 f96a 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000620 	.word	0x20000620
 8001a1c:	40013000 	.word	0x40013000

08001a20 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a24:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <MX_SPI2_Init+0x64>)
 8001a26:	4a18      	ldr	r2, [pc, #96]	; (8001a88 <MX_SPI2_Init+0x68>)
 8001a28:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a2a:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <MX_SPI2_Init+0x64>)
 8001a2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a30:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <MX_SPI2_Init+0x64>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <MX_SPI2_Init+0x64>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <MX_SPI2_Init+0x64>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <MX_SPI2_Init+0x64>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <MX_SPI2_Init+0x64>)
 8001a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a50:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001a52:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <MX_SPI2_Init+0x64>)
 8001a54:	2218      	movs	r2, #24
 8001a56:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <MX_SPI2_Init+0x64>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <MX_SPI2_Init+0x64>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a64:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <MX_SPI2_Init+0x64>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <MX_SPI2_Init+0x64>)
 8001a6c:	220a      	movs	r2, #10
 8001a6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a70:	4804      	ldr	r0, [pc, #16]	; (8001a84 <MX_SPI2_Init+0x64>)
 8001a72:	f003 fd05 	bl	8005480 <HAL_SPI_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001a7c:	f000 f934 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000484 	.word	0x20000484
 8001a88:	40003800 	.word	0x40003800

08001a8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001a92:	4a12      	ldr	r2, [pc, #72]	; (8001adc <MX_USART1_UART_Init+0x50>)
 8001a94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a96:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001a98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ab0:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001ab2:	220c      	movs	r2, #12
 8001ab4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ab6:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ac2:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001ac4:	f004 faf9 	bl	80060ba <HAL_UART_Init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ace:	f000 f90b 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	200005b0 	.word	0x200005b0
 8001adc:	40013800 	.word	0x40013800

08001ae0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ae4:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001ae6:	4a12      	ldr	r2, [pc, #72]	; (8001b30 <MX_USART2_UART_Init+0x50>)
 8001ae8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001aea:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001aec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001af0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001af2:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001afe:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001b06:	220c      	movs	r2, #12
 8001b08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b0a:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b16:	4805      	ldr	r0, [pc, #20]	; (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001b18:	f004 facf 	bl	80060ba <HAL_UART_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b22:	f000 f8e1 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000678 	.word	0x20000678
 8001b30:	40004400 	.word	0x40004400

08001b34 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001b38:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <MX_USB_PCD_Init+0x3c>)
 8001b3a:	4a0e      	ldr	r2, [pc, #56]	; (8001b74 <MX_USB_PCD_Init+0x40>)
 8001b3c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <MX_USB_PCD_Init+0x3c>)
 8001b40:	2208      	movs	r2, #8
 8001b42:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001b44:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <MX_USB_PCD_Init+0x3c>)
 8001b46:	2202      	movs	r2, #2
 8001b48:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <MX_USB_PCD_Init+0x3c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001b50:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <MX_USB_PCD_Init+0x3c>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <MX_USB_PCD_Init+0x3c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001b5c:	4804      	ldr	r0, [pc, #16]	; (8001b70 <MX_USB_PCD_Init+0x3c>)
 8001b5e:	f001 fbd9 	bl	8003314 <HAL_PCD_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001b68:	f000 f8be 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	200006fc 	.word	0x200006fc
 8001b74:	40005c00 	.word	0x40005c00

08001b78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b7e:	4b20      	ldr	r3, [pc, #128]	; (8001c00 <MX_DMA_Init+0x88>)
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	4a1f      	ldr	r2, [pc, #124]	; (8001c00 <MX_DMA_Init+0x88>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6153      	str	r3, [r2, #20]
 8001b8a:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <MX_DMA_Init+0x88>)
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001b96:	2200      	movs	r2, #0
 8001b98:	2100      	movs	r1, #0
 8001b9a:	200c      	movs	r0, #12
 8001b9c:	f000 fe8f 	bl	80028be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001ba0:	200c      	movs	r0, #12
 8001ba2:	f000 fea8 	bl	80028f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2100      	movs	r1, #0
 8001baa:	200d      	movs	r0, #13
 8001bac:	f000 fe87 	bl	80028be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001bb0:	200d      	movs	r0, #13
 8001bb2:	f000 fea0 	bl	80028f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2100      	movs	r1, #0
 8001bba:	200e      	movs	r0, #14
 8001bbc:	f000 fe7f 	bl	80028be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001bc0:	200e      	movs	r0, #14
 8001bc2:	f000 fe98 	bl	80028f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2100      	movs	r1, #0
 8001bca:	200f      	movs	r0, #15
 8001bcc:	f000 fe77 	bl	80028be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001bd0:	200f      	movs	r0, #15
 8001bd2:	f000 fe90 	bl	80028f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2100      	movs	r1, #0
 8001bda:	2010      	movs	r0, #16
 8001bdc:	f000 fe6f 	bl	80028be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001be0:	2010      	movs	r0, #16
 8001be2:	f000 fe88 	bl	80028f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2100      	movs	r1, #0
 8001bea:	2011      	movs	r0, #17
 8001bec:	f000 fe67 	bl	80028be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001bf0:	2011      	movs	r0, #17
 8001bf2:	f000 fe80 	bl	80028f6 <HAL_NVIC_EnableIRQ>

}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40021000 	.word	0x40021000

08001c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0a:	f107 0310 	add.w	r3, r7, #16
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	609a      	str	r2, [r3, #8]
 8001c16:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c18:	4b30      	ldr	r3, [pc, #192]	; (8001cdc <MX_GPIO_Init+0xd8>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	4a2f      	ldr	r2, [pc, #188]	; (8001cdc <MX_GPIO_Init+0xd8>)
 8001c1e:	f043 0320 	orr.w	r3, r3, #32
 8001c22:	6193      	str	r3, [r2, #24]
 8001c24:	4b2d      	ldr	r3, [pc, #180]	; (8001cdc <MX_GPIO_Init+0xd8>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	f003 0320 	and.w	r3, r3, #32
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c30:	4b2a      	ldr	r3, [pc, #168]	; (8001cdc <MX_GPIO_Init+0xd8>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	4a29      	ldr	r2, [pc, #164]	; (8001cdc <MX_GPIO_Init+0xd8>)
 8001c36:	f043 0304 	orr.w	r3, r3, #4
 8001c3a:	6193      	str	r3, [r2, #24]
 8001c3c:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <MX_GPIO_Init+0xd8>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c48:	4b24      	ldr	r3, [pc, #144]	; (8001cdc <MX_GPIO_Init+0xd8>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	4a23      	ldr	r2, [pc, #140]	; (8001cdc <MX_GPIO_Init+0xd8>)
 8001c4e:	f043 0308 	orr.w	r3, r3, #8
 8001c52:	6193      	str	r3, [r2, #24]
 8001c54:	4b21      	ldr	r3, [pc, #132]	; (8001cdc <MX_GPIO_Init+0xd8>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS1_Pin|SS2_Pin|SS3_Pin|SS4_Pin
 8001c60:	2200      	movs	r2, #0
 8001c62:	f241 717f 	movw	r1, #6015	; 0x177f
 8001c66:	481e      	ldr	r0, [pc, #120]	; (8001ce0 <MX_GPIO_Init+0xdc>)
 8001c68:	f001 fb3c 	bl	80032e4 <HAL_GPIO_WritePin>
                          |SS_FM_Pin|DRDY4_Pin|DRDY3_Pin|DRDY2_Pin
                          |DRDY1_Pin|MSN_EN3_Pin|MSN_EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MSN_EN4_Pin|MSN_EN2_Pin, GPIO_PIN_RESET);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8001c72:	481c      	ldr	r0, [pc, #112]	; (8001ce4 <MX_GPIO_Init+0xe0>)
 8001c74:	f001 fb36 	bl	80032e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SS1_Pin SS2_Pin SS3_Pin SS4_Pin
                           SS_FM_Pin DRDY4_Pin DRDY3_Pin DRDY2_Pin
                           DRDY1_Pin */
  GPIO_InitStruct.Pin = SS1_Pin|SS2_Pin|SS3_Pin|SS4_Pin
 8001c78:	f241 437f 	movw	r3, #5247	; 0x147f
 8001c7c:	613b      	str	r3, [r7, #16]
                          |SS_FM_Pin|DRDY4_Pin|DRDY3_Pin|DRDY2_Pin
                          |DRDY1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c86:	2302      	movs	r3, #2
 8001c88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8a:	f107 0310 	add.w	r3, r7, #16
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4813      	ldr	r0, [pc, #76]	; (8001ce0 <MX_GPIO_Init+0xdc>)
 8001c92:	f001 f9a3 	bl	8002fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : MSN_EN4_Pin MSN_EN2_Pin */
  GPIO_InitStruct.Pin = MSN_EN4_Pin|MSN_EN2_Pin;
 8001c96:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001c9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca8:	f107 0310 	add.w	r3, r7, #16
 8001cac:	4619      	mov	r1, r3
 8001cae:	480d      	ldr	r0, [pc, #52]	; (8001ce4 <MX_GPIO_Init+0xe0>)
 8001cb0:	f001 f994 	bl	8002fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : MSN_EN3_Pin MSN_EN1_Pin */
  GPIO_InitStruct.Pin = MSN_EN3_Pin|MSN_EN1_Pin;
 8001cb4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc6:	f107 0310 	add.w	r3, r7, #16
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4804      	ldr	r0, [pc, #16]	; (8001ce0 <MX_GPIO_Init+0xdc>)
 8001cce:	f001 f985 	bl	8002fdc <HAL_GPIO_Init>

}
 8001cd2:	bf00      	nop
 8001cd4:	3720      	adds	r7, #32
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40010c00 	.word	0x40010c00
 8001ce4:	40010800 	.word	0x40010800

08001ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cec:	b672      	cpsid	i
}
 8001cee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cf0:	e7fe      	b.n	8001cf0 <Error_Handler+0x8>
	...

08001cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cfa:	4b21      	ldr	r3, [pc, #132]	; (8001d80 <HAL_MspInit+0x8c>)
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	4a20      	ldr	r2, [pc, #128]	; (8001d80 <HAL_MspInit+0x8c>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6193      	str	r3, [r2, #24]
 8001d06:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <HAL_MspInit+0x8c>)
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d12:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <HAL_MspInit+0x8c>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	4a1a      	ldr	r2, [pc, #104]	; (8001d80 <HAL_MspInit+0x8c>)
 8001d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	61d3      	str	r3, [r2, #28]
 8001d1e:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <HAL_MspInit+0x8c>)
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	2001      	movs	r0, #1
 8001d30:	f000 fdc5 	bl	80028be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001d34:	2001      	movs	r0, #1
 8001d36:	f000 fdde 	bl	80028f6 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	2004      	movs	r0, #4
 8001d40:	f000 fdbd 	bl	80028be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001d44:	2004      	movs	r0, #4
 8001d46:	f000 fdd6 	bl	80028f6 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	2005      	movs	r0, #5
 8001d50:	f000 fdb5 	bl	80028be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001d54:	2005      	movs	r0, #5
 8001d56:	f000 fdce 	bl	80028f6 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <HAL_MspInit+0x90>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	4a04      	ldr	r2, [pc, #16]	; (8001d84 <HAL_MspInit+0x90>)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40010000 	.word	0x40010000

08001d88 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a13      	ldr	r2, [pc, #76]	; (8001de4 <HAL_RTC_MspInit+0x5c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d120      	bne.n	8001ddc <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001d9a:	f002 fc2f 	bl	80045fc <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001d9e:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <HAL_RTC_MspInit+0x60>)
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	4a11      	ldr	r2, [pc, #68]	; (8001de8 <HAL_RTC_MspInit+0x60>)
 8001da4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001da8:	61d3      	str	r3, [r2, #28]
 8001daa:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <HAL_RTC_MspInit+0x60>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001db6:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <HAL_RTC_MspInit+0x64>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	2003      	movs	r0, #3
 8001dc2:	f000 fd7c 	bl	80028be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001dc6:	2003      	movs	r0, #3
 8001dc8:	f000 fd95 	bl	80028f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2100      	movs	r1, #0
 8001dd0:	2029      	movs	r0, #41	; 0x29
 8001dd2:	f000 fd74 	bl	80028be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001dd6:	2029      	movs	r0, #41	; 0x29
 8001dd8:	f000 fd8d 	bl	80028f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ddc:	bf00      	nop
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40002800 	.word	0x40002800
 8001de8:	40021000 	.word	0x40021000
 8001dec:	4242043c 	.word	0x4242043c

08001df0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08a      	sub	sp, #40	; 0x28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 0318 	add.w	r3, r7, #24
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a66      	ldr	r2, [pc, #408]	; (8001fa4 <HAL_SPI_MspInit+0x1b4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	f040 8085 	bne.w	8001f1c <HAL_SPI_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e12:	4b65      	ldr	r3, [pc, #404]	; (8001fa8 <HAL_SPI_MspInit+0x1b8>)
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	4a64      	ldr	r2, [pc, #400]	; (8001fa8 <HAL_SPI_MspInit+0x1b8>)
 8001e18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e1c:	6193      	str	r3, [r2, #24]
 8001e1e:	4b62      	ldr	r3, [pc, #392]	; (8001fa8 <HAL_SPI_MspInit+0x1b8>)
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2a:	4b5f      	ldr	r3, [pc, #380]	; (8001fa8 <HAL_SPI_MspInit+0x1b8>)
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	4a5e      	ldr	r2, [pc, #376]	; (8001fa8 <HAL_SPI_MspInit+0x1b8>)
 8001e30:	f043 0304 	orr.w	r3, r3, #4
 8001e34:	6193      	str	r3, [r2, #24]
 8001e36:	4b5c      	ldr	r3, [pc, #368]	; (8001fa8 <HAL_SPI_MspInit+0x1b8>)
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001e42:	23a0      	movs	r3, #160	; 0xa0
 8001e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	2302      	movs	r3, #2
 8001e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4e:	f107 0318 	add.w	r3, r7, #24
 8001e52:	4619      	mov	r1, r3
 8001e54:	4855      	ldr	r0, [pc, #340]	; (8001fac <HAL_SPI_MspInit+0x1bc>)
 8001e56:	f001 f8c1 	bl	8002fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e5a:	2340      	movs	r3, #64	; 0x40
 8001e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e66:	f107 0318 	add.w	r3, r7, #24
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	484f      	ldr	r0, [pc, #316]	; (8001fac <HAL_SPI_MspInit+0x1bc>)
 8001e6e:	f001 f8b5 	bl	8002fdc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001e72:	4b4f      	ldr	r3, [pc, #316]	; (8001fb0 <HAL_SPI_MspInit+0x1c0>)
 8001e74:	4a4f      	ldr	r2, [pc, #316]	; (8001fb4 <HAL_SPI_MspInit+0x1c4>)
 8001e76:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e78:	4b4d      	ldr	r3, [pc, #308]	; (8001fb0 <HAL_SPI_MspInit+0x1c0>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e7e:	4b4c      	ldr	r3, [pc, #304]	; (8001fb0 <HAL_SPI_MspInit+0x1c0>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e84:	4b4a      	ldr	r3, [pc, #296]	; (8001fb0 <HAL_SPI_MspInit+0x1c0>)
 8001e86:	2280      	movs	r2, #128	; 0x80
 8001e88:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e8a:	4b49      	ldr	r3, [pc, #292]	; (8001fb0 <HAL_SPI_MspInit+0x1c0>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e90:	4b47      	ldr	r3, [pc, #284]	; (8001fb0 <HAL_SPI_MspInit+0x1c0>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001e96:	4b46      	ldr	r3, [pc, #280]	; (8001fb0 <HAL_SPI_MspInit+0x1c0>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e9c:	4b44      	ldr	r3, [pc, #272]	; (8001fb0 <HAL_SPI_MspInit+0x1c0>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001ea2:	4843      	ldr	r0, [pc, #268]	; (8001fb0 <HAL_SPI_MspInit+0x1c0>)
 8001ea4:	f000 fd42 	bl	800292c <HAL_DMA_Init>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_SPI_MspInit+0xc2>
    {
      Error_Handler();
 8001eae:	f7ff ff1b 	bl	8001ce8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a3e      	ldr	r2, [pc, #248]	; (8001fb0 <HAL_SPI_MspInit+0x1c0>)
 8001eb6:	64da      	str	r2, [r3, #76]	; 0x4c
 8001eb8:	4a3d      	ldr	r2, [pc, #244]	; (8001fb0 <HAL_SPI_MspInit+0x1c0>)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001ebe:	4b3e      	ldr	r3, [pc, #248]	; (8001fb8 <HAL_SPI_MspInit+0x1c8>)
 8001ec0:	4a3e      	ldr	r2, [pc, #248]	; (8001fbc <HAL_SPI_MspInit+0x1cc>)
 8001ec2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ec4:	4b3c      	ldr	r3, [pc, #240]	; (8001fb8 <HAL_SPI_MspInit+0x1c8>)
 8001ec6:	2210      	movs	r2, #16
 8001ec8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eca:	4b3b      	ldr	r3, [pc, #236]	; (8001fb8 <HAL_SPI_MspInit+0x1c8>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ed0:	4b39      	ldr	r3, [pc, #228]	; (8001fb8 <HAL_SPI_MspInit+0x1c8>)
 8001ed2:	2280      	movs	r2, #128	; 0x80
 8001ed4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ed6:	4b38      	ldr	r3, [pc, #224]	; (8001fb8 <HAL_SPI_MspInit+0x1c8>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001edc:	4b36      	ldr	r3, [pc, #216]	; (8001fb8 <HAL_SPI_MspInit+0x1c8>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001ee2:	4b35      	ldr	r3, [pc, #212]	; (8001fb8 <HAL_SPI_MspInit+0x1c8>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ee8:	4b33      	ldr	r3, [pc, #204]	; (8001fb8 <HAL_SPI_MspInit+0x1c8>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001eee:	4832      	ldr	r0, [pc, #200]	; (8001fb8 <HAL_SPI_MspInit+0x1c8>)
 8001ef0:	f000 fd1c 	bl	800292c <HAL_DMA_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 8001efa:	f7ff fef5 	bl	8001ce8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a2d      	ldr	r2, [pc, #180]	; (8001fb8 <HAL_SPI_MspInit+0x1c8>)
 8001f02:	649a      	str	r2, [r3, #72]	; 0x48
 8001f04:	4a2c      	ldr	r2, [pc, #176]	; (8001fb8 <HAL_SPI_MspInit+0x1c8>)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	2023      	movs	r0, #35	; 0x23
 8001f10:	f000 fcd5 	bl	80028be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001f14:	2023      	movs	r0, #35	; 0x23
 8001f16:	f000 fcee 	bl	80028f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001f1a:	e03e      	b.n	8001f9a <HAL_SPI_MspInit+0x1aa>
  else if(hspi->Instance==SPI2)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a27      	ldr	r2, [pc, #156]	; (8001fc0 <HAL_SPI_MspInit+0x1d0>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d139      	bne.n	8001f9a <HAL_SPI_MspInit+0x1aa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f26:	4b20      	ldr	r3, [pc, #128]	; (8001fa8 <HAL_SPI_MspInit+0x1b8>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	4a1f      	ldr	r2, [pc, #124]	; (8001fa8 <HAL_SPI_MspInit+0x1b8>)
 8001f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f30:	61d3      	str	r3, [r2, #28]
 8001f32:	4b1d      	ldr	r3, [pc, #116]	; (8001fa8 <HAL_SPI_MspInit+0x1b8>)
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3e:	4b1a      	ldr	r3, [pc, #104]	; (8001fa8 <HAL_SPI_MspInit+0x1b8>)
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	4a19      	ldr	r2, [pc, #100]	; (8001fa8 <HAL_SPI_MspInit+0x1b8>)
 8001f44:	f043 0308 	orr.w	r3, r3, #8
 8001f48:	6193      	str	r3, [r2, #24]
 8001f4a:	4b17      	ldr	r3, [pc, #92]	; (8001fa8 <HAL_SPI_MspInit+0x1b8>)
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001f56:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f60:	2303      	movs	r3, #3
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f64:	f107 0318 	add.w	r3, r7, #24
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4816      	ldr	r0, [pc, #88]	; (8001fc4 <HAL_SPI_MspInit+0x1d4>)
 8001f6c:	f001 f836 	bl	8002fdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001f70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7e:	f107 0318 	add.w	r3, r7, #24
 8001f82:	4619      	mov	r1, r3
 8001f84:	480f      	ldr	r0, [pc, #60]	; (8001fc4 <HAL_SPI_MspInit+0x1d4>)
 8001f86:	f001 f829 	bl	8002fdc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	2024      	movs	r0, #36	; 0x24
 8001f90:	f000 fc95 	bl	80028be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001f94:	2024      	movs	r0, #36	; 0x24
 8001f96:	f000 fcae 	bl	80028f6 <HAL_NVIC_EnableIRQ>
}
 8001f9a:	bf00      	nop
 8001f9c:	3728      	adds	r7, #40	; 0x28
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40013000 	.word	0x40013000
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40010800 	.word	0x40010800
 8001fb0:	200006b8 	.word	0x200006b8
 8001fb4:	4002001c 	.word	0x4002001c
 8001fb8:	200009e8 	.word	0x200009e8
 8001fbc:	40020030 	.word	0x40020030
 8001fc0:	40003800 	.word	0x40003800
 8001fc4:	40010c00 	.word	0x40010c00

08001fc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08a      	sub	sp, #40	; 0x28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd0:	f107 0318 	add.w	r3, r7, #24
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a8c      	ldr	r2, [pc, #560]	; (8002214 <HAL_UART_MspInit+0x24c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	f040 8087 	bne.w	80020f8 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fea:	4b8b      	ldr	r3, [pc, #556]	; (8002218 <HAL_UART_MspInit+0x250>)
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	4a8a      	ldr	r2, [pc, #552]	; (8002218 <HAL_UART_MspInit+0x250>)
 8001ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff4:	6193      	str	r3, [r2, #24]
 8001ff6:	4b88      	ldr	r3, [pc, #544]	; (8002218 <HAL_UART_MspInit+0x250>)
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002002:	4b85      	ldr	r3, [pc, #532]	; (8002218 <HAL_UART_MspInit+0x250>)
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	4a84      	ldr	r2, [pc, #528]	; (8002218 <HAL_UART_MspInit+0x250>)
 8002008:	f043 0304 	orr.w	r3, r3, #4
 800200c:	6193      	str	r3, [r2, #24]
 800200e:	4b82      	ldr	r3, [pc, #520]	; (8002218 <HAL_UART_MspInit+0x250>)
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800201a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800201e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002020:	2302      	movs	r3, #2
 8002022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002024:	2303      	movs	r3, #3
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002028:	f107 0318 	add.w	r3, r7, #24
 800202c:	4619      	mov	r1, r3
 800202e:	487b      	ldr	r0, [pc, #492]	; (800221c <HAL_UART_MspInit+0x254>)
 8002030:	f000 ffd4 	bl	8002fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002034:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002042:	f107 0318 	add.w	r3, r7, #24
 8002046:	4619      	mov	r1, r3
 8002048:	4874      	ldr	r0, [pc, #464]	; (800221c <HAL_UART_MspInit+0x254>)
 800204a:	f000 ffc7 	bl	8002fdc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800204e:	4b74      	ldr	r3, [pc, #464]	; (8002220 <HAL_UART_MspInit+0x258>)
 8002050:	4a74      	ldr	r2, [pc, #464]	; (8002224 <HAL_UART_MspInit+0x25c>)
 8002052:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002054:	4b72      	ldr	r3, [pc, #456]	; (8002220 <HAL_UART_MspInit+0x258>)
 8002056:	2200      	movs	r2, #0
 8002058:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800205a:	4b71      	ldr	r3, [pc, #452]	; (8002220 <HAL_UART_MspInit+0x258>)
 800205c:	2200      	movs	r2, #0
 800205e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002060:	4b6f      	ldr	r3, [pc, #444]	; (8002220 <HAL_UART_MspInit+0x258>)
 8002062:	2280      	movs	r2, #128	; 0x80
 8002064:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002066:	4b6e      	ldr	r3, [pc, #440]	; (8002220 <HAL_UART_MspInit+0x258>)
 8002068:	2200      	movs	r2, #0
 800206a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800206c:	4b6c      	ldr	r3, [pc, #432]	; (8002220 <HAL_UART_MspInit+0x258>)
 800206e:	2200      	movs	r2, #0
 8002070:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002072:	4b6b      	ldr	r3, [pc, #428]	; (8002220 <HAL_UART_MspInit+0x258>)
 8002074:	2200      	movs	r2, #0
 8002076:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002078:	4b69      	ldr	r3, [pc, #420]	; (8002220 <HAL_UART_MspInit+0x258>)
 800207a:	2200      	movs	r2, #0
 800207c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800207e:	4868      	ldr	r0, [pc, #416]	; (8002220 <HAL_UART_MspInit+0x258>)
 8002080:	f000 fc54 	bl	800292c <HAL_DMA_Init>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800208a:	f7ff fe2d 	bl	8001ce8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a63      	ldr	r2, [pc, #396]	; (8002220 <HAL_UART_MspInit+0x258>)
 8002092:	635a      	str	r2, [r3, #52]	; 0x34
 8002094:	4a62      	ldr	r2, [pc, #392]	; (8002220 <HAL_UART_MspInit+0x258>)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800209a:	4b63      	ldr	r3, [pc, #396]	; (8002228 <HAL_UART_MspInit+0x260>)
 800209c:	4a63      	ldr	r2, [pc, #396]	; (800222c <HAL_UART_MspInit+0x264>)
 800209e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020a0:	4b61      	ldr	r3, [pc, #388]	; (8002228 <HAL_UART_MspInit+0x260>)
 80020a2:	2210      	movs	r2, #16
 80020a4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020a6:	4b60      	ldr	r3, [pc, #384]	; (8002228 <HAL_UART_MspInit+0x260>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020ac:	4b5e      	ldr	r3, [pc, #376]	; (8002228 <HAL_UART_MspInit+0x260>)
 80020ae:	2280      	movs	r2, #128	; 0x80
 80020b0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020b2:	4b5d      	ldr	r3, [pc, #372]	; (8002228 <HAL_UART_MspInit+0x260>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020b8:	4b5b      	ldr	r3, [pc, #364]	; (8002228 <HAL_UART_MspInit+0x260>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80020be:	4b5a      	ldr	r3, [pc, #360]	; (8002228 <HAL_UART_MspInit+0x260>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020c4:	4b58      	ldr	r3, [pc, #352]	; (8002228 <HAL_UART_MspInit+0x260>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80020ca:	4857      	ldr	r0, [pc, #348]	; (8002228 <HAL_UART_MspInit+0x260>)
 80020cc:	f000 fc2e 	bl	800292c <HAL_DMA_Init>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80020d6:	f7ff fe07 	bl	8001ce8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a52      	ldr	r2, [pc, #328]	; (8002228 <HAL_UART_MspInit+0x260>)
 80020de:	631a      	str	r2, [r3, #48]	; 0x30
 80020e0:	4a51      	ldr	r2, [pc, #324]	; (8002228 <HAL_UART_MspInit+0x260>)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020e6:	2200      	movs	r2, #0
 80020e8:	2100      	movs	r1, #0
 80020ea:	2025      	movs	r0, #37	; 0x25
 80020ec:	f000 fbe7 	bl	80028be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020f0:	2025      	movs	r0, #37	; 0x25
 80020f2:	f000 fc00 	bl	80028f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020f6:	e089      	b.n	800220c <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART2)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a4c      	ldr	r2, [pc, #304]	; (8002230 <HAL_UART_MspInit+0x268>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	f040 8084 	bne.w	800220c <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002104:	4b44      	ldr	r3, [pc, #272]	; (8002218 <HAL_UART_MspInit+0x250>)
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	4a43      	ldr	r2, [pc, #268]	; (8002218 <HAL_UART_MspInit+0x250>)
 800210a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800210e:	61d3      	str	r3, [r2, #28]
 8002110:	4b41      	ldr	r3, [pc, #260]	; (8002218 <HAL_UART_MspInit+0x250>)
 8002112:	69db      	ldr	r3, [r3, #28]
 8002114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211c:	4b3e      	ldr	r3, [pc, #248]	; (8002218 <HAL_UART_MspInit+0x250>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	4a3d      	ldr	r2, [pc, #244]	; (8002218 <HAL_UART_MspInit+0x250>)
 8002122:	f043 0304 	orr.w	r3, r3, #4
 8002126:	6193      	str	r3, [r2, #24]
 8002128:	4b3b      	ldr	r3, [pc, #236]	; (8002218 <HAL_UART_MspInit+0x250>)
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002134:	2304      	movs	r3, #4
 8002136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002138:	2302      	movs	r3, #2
 800213a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800213c:	2303      	movs	r3, #3
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002140:	f107 0318 	add.w	r3, r7, #24
 8002144:	4619      	mov	r1, r3
 8002146:	4835      	ldr	r0, [pc, #212]	; (800221c <HAL_UART_MspInit+0x254>)
 8002148:	f000 ff48 	bl	8002fdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800214c:	2308      	movs	r3, #8
 800214e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002150:	2300      	movs	r3, #0
 8002152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002154:	2300      	movs	r3, #0
 8002156:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002158:	f107 0318 	add.w	r3, r7, #24
 800215c:	4619      	mov	r1, r3
 800215e:	482f      	ldr	r0, [pc, #188]	; (800221c <HAL_UART_MspInit+0x254>)
 8002160:	f000 ff3c 	bl	8002fdc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002164:	4b33      	ldr	r3, [pc, #204]	; (8002234 <HAL_UART_MspInit+0x26c>)
 8002166:	4a34      	ldr	r2, [pc, #208]	; (8002238 <HAL_UART_MspInit+0x270>)
 8002168:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800216a:	4b32      	ldr	r3, [pc, #200]	; (8002234 <HAL_UART_MspInit+0x26c>)
 800216c:	2200      	movs	r2, #0
 800216e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002170:	4b30      	ldr	r3, [pc, #192]	; (8002234 <HAL_UART_MspInit+0x26c>)
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002176:	4b2f      	ldr	r3, [pc, #188]	; (8002234 <HAL_UART_MspInit+0x26c>)
 8002178:	2280      	movs	r2, #128	; 0x80
 800217a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800217c:	4b2d      	ldr	r3, [pc, #180]	; (8002234 <HAL_UART_MspInit+0x26c>)
 800217e:	2200      	movs	r2, #0
 8002180:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002182:	4b2c      	ldr	r3, [pc, #176]	; (8002234 <HAL_UART_MspInit+0x26c>)
 8002184:	2200      	movs	r2, #0
 8002186:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002188:	4b2a      	ldr	r3, [pc, #168]	; (8002234 <HAL_UART_MspInit+0x26c>)
 800218a:	2200      	movs	r2, #0
 800218c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800218e:	4b29      	ldr	r3, [pc, #164]	; (8002234 <HAL_UART_MspInit+0x26c>)
 8002190:	2200      	movs	r2, #0
 8002192:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002194:	4827      	ldr	r0, [pc, #156]	; (8002234 <HAL_UART_MspInit+0x26c>)
 8002196:	f000 fbc9 	bl	800292c <HAL_DMA_Init>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 80021a0:	f7ff fda2 	bl	8001ce8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a23      	ldr	r2, [pc, #140]	; (8002234 <HAL_UART_MspInit+0x26c>)
 80021a8:	635a      	str	r2, [r3, #52]	; 0x34
 80021aa:	4a22      	ldr	r2, [pc, #136]	; (8002234 <HAL_UART_MspInit+0x26c>)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80021b0:	4b22      	ldr	r3, [pc, #136]	; (800223c <HAL_UART_MspInit+0x274>)
 80021b2:	4a23      	ldr	r2, [pc, #140]	; (8002240 <HAL_UART_MspInit+0x278>)
 80021b4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021b6:	4b21      	ldr	r3, [pc, #132]	; (800223c <HAL_UART_MspInit+0x274>)
 80021b8:	2210      	movs	r2, #16
 80021ba:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021bc:	4b1f      	ldr	r3, [pc, #124]	; (800223c <HAL_UART_MspInit+0x274>)
 80021be:	2200      	movs	r2, #0
 80021c0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021c2:	4b1e      	ldr	r3, [pc, #120]	; (800223c <HAL_UART_MspInit+0x274>)
 80021c4:	2280      	movs	r2, #128	; 0x80
 80021c6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021c8:	4b1c      	ldr	r3, [pc, #112]	; (800223c <HAL_UART_MspInit+0x274>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021ce:	4b1b      	ldr	r3, [pc, #108]	; (800223c <HAL_UART_MspInit+0x274>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80021d4:	4b19      	ldr	r3, [pc, #100]	; (800223c <HAL_UART_MspInit+0x274>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021da:	4b18      	ldr	r3, [pc, #96]	; (800223c <HAL_UART_MspInit+0x274>)
 80021dc:	2200      	movs	r2, #0
 80021de:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80021e0:	4816      	ldr	r0, [pc, #88]	; (800223c <HAL_UART_MspInit+0x274>)
 80021e2:	f000 fba3 	bl	800292c <HAL_DMA_Init>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <HAL_UART_MspInit+0x228>
      Error_Handler();
 80021ec:	f7ff fd7c 	bl	8001ce8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a12      	ldr	r2, [pc, #72]	; (800223c <HAL_UART_MspInit+0x274>)
 80021f4:	631a      	str	r2, [r3, #48]	; 0x30
 80021f6:	4a11      	ldr	r2, [pc, #68]	; (800223c <HAL_UART_MspInit+0x274>)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021fc:	2200      	movs	r2, #0
 80021fe:	2100      	movs	r1, #0
 8002200:	2026      	movs	r0, #38	; 0x26
 8002202:	f000 fb5c 	bl	80028be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002206:	2026      	movs	r0, #38	; 0x26
 8002208:	f000 fb75 	bl	80028f6 <HAL_NVIC_EnableIRQ>
}
 800220c:	bf00      	nop
 800220e:	3728      	adds	r7, #40	; 0x28
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40013800 	.word	0x40013800
 8002218:	40021000 	.word	0x40021000
 800221c:	40010800 	.word	0x40010800
 8002220:	20000528 	.word	0x20000528
 8002224:	40020058 	.word	0x40020058
 8002228:	200004e4 	.word	0x200004e4
 800222c:	40020044 	.word	0x40020044
 8002230:	40004400 	.word	0x40004400
 8002234:	20000440 	.word	0x20000440
 8002238:	4002006c 	.word	0x4002006c
 800223c:	2000056c 	.word	0x2000056c
 8002240:	40020080 	.word	0x40020080

08002244 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a11      	ldr	r2, [pc, #68]	; (8002298 <HAL_PCD_MspInit+0x54>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d11b      	bne.n	800228e <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002256:	4b11      	ldr	r3, [pc, #68]	; (800229c <HAL_PCD_MspInit+0x58>)
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	4a10      	ldr	r2, [pc, #64]	; (800229c <HAL_PCD_MspInit+0x58>)
 800225c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002260:	61d3      	str	r3, [r2, #28]
 8002262:	4b0e      	ldr	r3, [pc, #56]	; (800229c <HAL_PCD_MspInit+0x58>)
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800226e:	2200      	movs	r2, #0
 8002270:	2100      	movs	r1, #0
 8002272:	2013      	movs	r0, #19
 8002274:	f000 fb23 	bl	80028be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8002278:	2013      	movs	r0, #19
 800227a:	f000 fb3c 	bl	80028f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800227e:	2200      	movs	r2, #0
 8002280:	2100      	movs	r1, #0
 8002282:	2014      	movs	r0, #20
 8002284:	f000 fb1b 	bl	80028be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002288:	2014      	movs	r0, #20
 800228a:	f000 fb34 	bl	80028f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800228e:	bf00      	nop
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40005c00 	.word	0x40005c00
 800229c:	40021000 	.word	0x40021000

080022a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <NMI_Handler+0x4>

080022a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022aa:	e7fe      	b.n	80022aa <HardFault_Handler+0x4>

080022ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <MemManage_Handler+0x4>

080022b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022b6:	e7fe      	b.n	80022b6 <BusFault_Handler+0x4>

080022b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022bc:	e7fe      	b.n	80022bc <UsageFault_Handler+0x4>

080022be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr

080022ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr

080022d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022d6:	b480      	push	{r7}
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr

080022e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022e6:	f000 f9d3 	bl	8002690 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}

080022ee <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80022f2:	f002 f98f 	bl	8004614 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8002300:	4802      	ldr	r0, [pc, #8]	; (800230c <RTC_IRQHandler+0x10>)
 8002302:	f003 f877 	bl	80053f4 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	200005f0 	.word	0x200005f0

08002310 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8002314:	f000 fce0 	bl	8002cd8 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8002318:	bf00      	nop
 800231a:	bd80      	pop	{r7, pc}

0800231c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr

08002328 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800232c:	4802      	ldr	r0, [pc, #8]	; (8002338 <DMA1_Channel2_IRQHandler+0x10>)
 800232e:	f000 fbcd 	bl	8002acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	200006b8 	.word	0x200006b8

0800233c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002340:	4802      	ldr	r0, [pc, #8]	; (800234c <DMA1_Channel3_IRQHandler+0x10>)
 8002342:	f000 fbc3 	bl	8002acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	200009e8 	.word	0x200009e8

08002350 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002354:	4802      	ldr	r0, [pc, #8]	; (8002360 <DMA1_Channel4_IRQHandler+0x10>)
 8002356:	f000 fbb9 	bl	8002acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	200004e4 	.word	0x200004e4

08002364 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002368:	4802      	ldr	r0, [pc, #8]	; (8002374 <DMA1_Channel5_IRQHandler+0x10>)
 800236a:	f000 fbaf 	bl	8002acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000528 	.word	0x20000528

08002378 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800237c:	4802      	ldr	r0, [pc, #8]	; (8002388 <DMA1_Channel6_IRQHandler+0x10>)
 800237e:	f000 fba5 	bl	8002acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000440 	.word	0x20000440

0800238c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002390:	4802      	ldr	r0, [pc, #8]	; (800239c <DMA1_Channel7_IRQHandler+0x10>)
 8002392:	f000 fb9b 	bl	8002acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	2000056c 	.word	0x2000056c

080023a0 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80023a4:	4802      	ldr	r0, [pc, #8]	; (80023b0 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80023a6:	f001 f8c0 	bl	800352a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	200006fc 	.word	0x200006fc

080023b4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80023b8:	4802      	ldr	r0, [pc, #8]	; (80023c4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80023ba:	f001 f8b6 	bl	800352a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	200006fc 	.word	0x200006fc

080023c8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80023cc:	4802      	ldr	r0, [pc, #8]	; (80023d8 <SPI1_IRQHandler+0x10>)
 80023ce:	f003 fc97 	bl	8005d00 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20000620 	.word	0x20000620

080023dc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80023e0:	4802      	ldr	r0, [pc, #8]	; (80023ec <SPI2_IRQHandler+0x10>)
 80023e2:	f003 fc8d 	bl	8005d00 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20000484 	.word	0x20000484

080023f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023f4:	4802      	ldr	r0, [pc, #8]	; (8002400 <USART1_IRQHandler+0x10>)
 80023f6:	f003 ffed 	bl	80063d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	200005b0 	.word	0x200005b0

08002404 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002408:	4802      	ldr	r0, [pc, #8]	; (8002414 <USART2_IRQHandler+0x10>)
 800240a:	f003 ffe3 	bl	80063d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20000678 	.word	0x20000678

08002418 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800241c:	4802      	ldr	r0, [pc, #8]	; (8002428 <RTC_Alarm_IRQHandler+0x10>)
 800241e:	f002 ff3b 	bl	8005298 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	200005f0 	.word	0x200005f0

0800242c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
	return 1;
 8002430:	2301      	movs	r3, #1
}
 8002432:	4618      	mov	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr

0800243a <_kill>:

int _kill(int pid, int sig)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002444:	f005 fd72 	bl	8007f2c <__errno>
 8002448:	4603      	mov	r3, r0
 800244a:	2216      	movs	r2, #22
 800244c:	601a      	str	r2, [r3, #0]
	return -1;
 800244e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <_exit>:

void _exit (int status)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002462:	f04f 31ff 	mov.w	r1, #4294967295
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff ffe7 	bl	800243a <_kill>
	while (1) {}		/* Make sure we hang here */
 800246c:	e7fe      	b.n	800246c <_exit+0x12>

0800246e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b086      	sub	sp, #24
 8002472:	af00      	add	r7, sp, #0
 8002474:	60f8      	str	r0, [r7, #12]
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800247a:	2300      	movs	r3, #0
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	e00a      	b.n	8002496 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002480:	f3af 8000 	nop.w
 8002484:	4601      	mov	r1, r0
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	60ba      	str	r2, [r7, #8]
 800248c:	b2ca      	uxtb	r2, r1
 800248e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	3301      	adds	r3, #1
 8002494:	617b      	str	r3, [r7, #20]
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	429a      	cmp	r2, r3
 800249c:	dbf0      	blt.n	8002480 <_read+0x12>
	}

return len;
 800249e:	687b      	ldr	r3, [r7, #4]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]
 80024b8:	e009      	b.n	80024ce <_write+0x26>
	{
		__io_putchar(*ptr++);
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	60ba      	str	r2, [r7, #8]
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	3301      	adds	r3, #1
 80024cc:	617b      	str	r3, [r7, #20]
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	dbf1      	blt.n	80024ba <_write+0x12>
	}
	return len;
 80024d6:	687b      	ldr	r3, [r7, #4]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <_close>:

int _close(int file)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
	return -1;
 80024e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr

080024f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
 80024fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002506:	605a      	str	r2, [r3, #4]
	return 0;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <_isatty>:

int _isatty(int file)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
	return 1;
 800251c:	2301      	movs	r3, #1
}
 800251e:	4618      	mov	r0, r3
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr

08002528 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
	return 0;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr

08002540 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002548:	4a14      	ldr	r2, [pc, #80]	; (800259c <_sbrk+0x5c>)
 800254a:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <_sbrk+0x60>)
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002554:	4b13      	ldr	r3, [pc, #76]	; (80025a4 <_sbrk+0x64>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d102      	bne.n	8002562 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <_sbrk+0x64>)
 800255e:	4a12      	ldr	r2, [pc, #72]	; (80025a8 <_sbrk+0x68>)
 8002560:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <_sbrk+0x64>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4413      	add	r3, r2
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	429a      	cmp	r2, r3
 800256e:	d207      	bcs.n	8002580 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002570:	f005 fcdc 	bl	8007f2c <__errno>
 8002574:	4603      	mov	r3, r0
 8002576:	220c      	movs	r2, #12
 8002578:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800257a:	f04f 33ff 	mov.w	r3, #4294967295
 800257e:	e009      	b.n	8002594 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002580:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <_sbrk+0x64>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002586:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <_sbrk+0x64>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4413      	add	r3, r2
 800258e:	4a05      	ldr	r2, [pc, #20]	; (80025a4 <_sbrk+0x64>)
 8002590:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002592:	68fb      	ldr	r3, [r7, #12]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20005000 	.word	0x20005000
 80025a0:	00000400 	.word	0x00000400
 80025a4:	20000254 	.word	0x20000254
 80025a8:	20000a60 	.word	0x20000a60

080025ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025b0:	bf00      	nop
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr

080025b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025b8:	f7ff fff8 	bl	80025ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025bc:	480b      	ldr	r0, [pc, #44]	; (80025ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80025be:	490c      	ldr	r1, [pc, #48]	; (80025f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80025c0:	4a0c      	ldr	r2, [pc, #48]	; (80025f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80025c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025c4:	e002      	b.n	80025cc <LoopCopyDataInit>

080025c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ca:	3304      	adds	r3, #4

080025cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025d0:	d3f9      	bcc.n	80025c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025d2:	4a09      	ldr	r2, [pc, #36]	; (80025f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80025d4:	4c09      	ldr	r4, [pc, #36]	; (80025fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025d8:	e001      	b.n	80025de <LoopFillZerobss>

080025da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025dc:	3204      	adds	r2, #4

080025de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025e0:	d3fb      	bcc.n	80025da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025e2:	f005 fcbb 	bl	8007f5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025e6:	f7ff f907 	bl	80017f8 <main>
  bx lr
 80025ea:	4770      	bx	lr
  ldr r0, =_sdata
 80025ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025f0:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 80025f4:	0800ccec 	.word	0x0800ccec
  ldr r2, =_sbss
 80025f8:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 80025fc:	20000a60 	.word	0x20000a60

08002600 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002600:	e7fe      	b.n	8002600 <ADC1_2_IRQHandler>
	...

08002604 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002608:	4b08      	ldr	r3, [pc, #32]	; (800262c <HAL_Init+0x28>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a07      	ldr	r2, [pc, #28]	; (800262c <HAL_Init+0x28>)
 800260e:	f043 0310 	orr.w	r3, r3, #16
 8002612:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002614:	2003      	movs	r0, #3
 8002616:	f000 f947 	bl	80028a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800261a:	200f      	movs	r0, #15
 800261c:	f000 f808 	bl	8002630 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002620:	f7ff fb68 	bl	8001cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40022000 	.word	0x40022000

08002630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002638:	4b12      	ldr	r3, [pc, #72]	; (8002684 <HAL_InitTick+0x54>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	4b12      	ldr	r3, [pc, #72]	; (8002688 <HAL_InitTick+0x58>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	4619      	mov	r1, r3
 8002642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002646:	fbb3 f3f1 	udiv	r3, r3, r1
 800264a:	fbb2 f3f3 	udiv	r3, r2, r3
 800264e:	4618      	mov	r0, r3
 8002650:	f000 f95f 	bl	8002912 <HAL_SYSTICK_Config>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e00e      	b.n	800267c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b0f      	cmp	r3, #15
 8002662:	d80a      	bhi.n	800267a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002664:	2200      	movs	r2, #0
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	f04f 30ff 	mov.w	r0, #4294967295
 800266c:	f000 f927 	bl	80028be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002670:	4a06      	ldr	r2, [pc, #24]	; (800268c <HAL_InitTick+0x5c>)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	e000      	b.n	800267c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
}
 800267c:	4618      	mov	r0, r3
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20000048 	.word	0x20000048
 8002688:	20000050 	.word	0x20000050
 800268c:	2000004c 	.word	0x2000004c

08002690 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002694:	4b05      	ldr	r3, [pc, #20]	; (80026ac <HAL_IncTick+0x1c>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	461a      	mov	r2, r3
 800269a:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <HAL_IncTick+0x20>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4413      	add	r3, r2
 80026a0:	4a03      	ldr	r2, [pc, #12]	; (80026b0 <HAL_IncTick+0x20>)
 80026a2:	6013      	str	r3, [r2, #0]
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr
 80026ac:	20000050 	.word	0x20000050
 80026b0:	20000a2c 	.word	0x20000a2c

080026b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  return uwTick;
 80026b8:	4b02      	ldr	r3, [pc, #8]	; (80026c4 <HAL_GetTick+0x10>)
 80026ba:	681b      	ldr	r3, [r3, #0]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr
 80026c4:	20000a2c 	.word	0x20000a2c

080026c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026d0:	f7ff fff0 	bl	80026b4 <HAL_GetTick>
 80026d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e0:	d005      	beq.n	80026ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026e2:	4b0a      	ldr	r3, [pc, #40]	; (800270c <HAL_Delay+0x44>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4413      	add	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026ee:	bf00      	nop
 80026f0:	f7ff ffe0 	bl	80026b4 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d8f7      	bhi.n	80026f0 <HAL_Delay+0x28>
  {
  }
}
 8002700:	bf00      	nop
 8002702:	bf00      	nop
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20000050 	.word	0x20000050

08002710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002720:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <__NVIC_SetPriorityGrouping+0x44>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800272c:	4013      	ands	r3, r2
 800272e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002738:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800273c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002742:	4a04      	ldr	r2, [pc, #16]	; (8002754 <__NVIC_SetPriorityGrouping+0x44>)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	60d3      	str	r3, [r2, #12]
}
 8002748:	bf00      	nop
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800275c:	4b04      	ldr	r3, [pc, #16]	; (8002770 <__NVIC_GetPriorityGrouping+0x18>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	0a1b      	lsrs	r3, r3, #8
 8002762:	f003 0307 	and.w	r3, r3, #7
}
 8002766:	4618      	mov	r0, r3
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002782:	2b00      	cmp	r3, #0
 8002784:	db0b      	blt.n	800279e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	f003 021f 	and.w	r2, r3, #31
 800278c:	4906      	ldr	r1, [pc, #24]	; (80027a8 <__NVIC_EnableIRQ+0x34>)
 800278e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	2001      	movs	r0, #1
 8002796:	fa00 f202 	lsl.w	r2, r0, r2
 800279a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr
 80027a8:	e000e100 	.word	0xe000e100

080027ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	6039      	str	r1, [r7, #0]
 80027b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	db0a      	blt.n	80027d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	490c      	ldr	r1, [pc, #48]	; (80027f8 <__NVIC_SetPriority+0x4c>)
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	0112      	lsls	r2, r2, #4
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	440b      	add	r3, r1
 80027d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027d4:	e00a      	b.n	80027ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	4908      	ldr	r1, [pc, #32]	; (80027fc <__NVIC_SetPriority+0x50>)
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	3b04      	subs	r3, #4
 80027e4:	0112      	lsls	r2, r2, #4
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	440b      	add	r3, r1
 80027ea:	761a      	strb	r2, [r3, #24]
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	e000e100 	.word	0xe000e100
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002800:	b480      	push	{r7}
 8002802:	b089      	sub	sp, #36	; 0x24
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f1c3 0307 	rsb	r3, r3, #7
 800281a:	2b04      	cmp	r3, #4
 800281c:	bf28      	it	cs
 800281e:	2304      	movcs	r3, #4
 8002820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3304      	adds	r3, #4
 8002826:	2b06      	cmp	r3, #6
 8002828:	d902      	bls.n	8002830 <NVIC_EncodePriority+0x30>
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3b03      	subs	r3, #3
 800282e:	e000      	b.n	8002832 <NVIC_EncodePriority+0x32>
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002834:	f04f 32ff 	mov.w	r2, #4294967295
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43da      	mvns	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	401a      	ands	r2, r3
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002848:	f04f 31ff 	mov.w	r1, #4294967295
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	fa01 f303 	lsl.w	r3, r1, r3
 8002852:	43d9      	mvns	r1, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002858:	4313      	orrs	r3, r2
         );
}
 800285a:	4618      	mov	r0, r3
 800285c:	3724      	adds	r7, #36	; 0x24
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3b01      	subs	r3, #1
 8002870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002874:	d301      	bcc.n	800287a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002876:	2301      	movs	r3, #1
 8002878:	e00f      	b.n	800289a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800287a:	4a0a      	ldr	r2, [pc, #40]	; (80028a4 <SysTick_Config+0x40>)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3b01      	subs	r3, #1
 8002880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002882:	210f      	movs	r1, #15
 8002884:	f04f 30ff 	mov.w	r0, #4294967295
 8002888:	f7ff ff90 	bl	80027ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800288c:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <SysTick_Config+0x40>)
 800288e:	2200      	movs	r2, #0
 8002890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002892:	4b04      	ldr	r3, [pc, #16]	; (80028a4 <SysTick_Config+0x40>)
 8002894:	2207      	movs	r2, #7
 8002896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	e000e010 	.word	0xe000e010

080028a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff ff2d 	bl	8002710 <__NVIC_SetPriorityGrouping>
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028be:	b580      	push	{r7, lr}
 80028c0:	b086      	sub	sp, #24
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	4603      	mov	r3, r0
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	607a      	str	r2, [r7, #4]
 80028ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028d0:	f7ff ff42 	bl	8002758 <__NVIC_GetPriorityGrouping>
 80028d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	6978      	ldr	r0, [r7, #20]
 80028dc:	f7ff ff90 	bl	8002800 <NVIC_EncodePriority>
 80028e0:	4602      	mov	r2, r0
 80028e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e6:	4611      	mov	r1, r2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff5f 	bl	80027ac <__NVIC_SetPriority>
}
 80028ee:	bf00      	nop
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	4603      	mov	r3, r0
 80028fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ff35 	bl	8002774 <__NVIC_EnableIRQ>
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7ff ffa2 	bl	8002864 <SysTick_Config>
 8002920:	4603      	mov	r3, r0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002934:	2300      	movs	r3, #0
 8002936:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e043      	b.n	80029ca <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	461a      	mov	r2, r3
 8002948:	4b22      	ldr	r3, [pc, #136]	; (80029d4 <HAL_DMA_Init+0xa8>)
 800294a:	4413      	add	r3, r2
 800294c:	4a22      	ldr	r2, [pc, #136]	; (80029d8 <HAL_DMA_Init+0xac>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	091b      	lsrs	r3, r3, #4
 8002954:	009a      	lsls	r2, r3, #2
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a1f      	ldr	r2, [pc, #124]	; (80029dc <HAL_DMA_Init+0xb0>)
 800295e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2202      	movs	r2, #2
 8002964:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002976:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800297a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002984:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002990:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800299c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr
 80029d4:	bffdfff8 	.word	0xbffdfff8
 80029d8:	cccccccd 	.word	0xcccccccd
 80029dc:	40020000 	.word	0x40020000

080029e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d005      	beq.n	8002a02 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2204      	movs	r2, #4
 80029fa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	73fb      	strb	r3, [r7, #15]
 8002a00:	e051      	b.n	8002aa6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 020e 	bic.w	r2, r2, #14
 8002a10:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0201 	bic.w	r2, r2, #1
 8002a20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a22      	ldr	r2, [pc, #136]	; (8002ab0 <HAL_DMA_Abort_IT+0xd0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d029      	beq.n	8002a80 <HAL_DMA_Abort_IT+0xa0>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a20      	ldr	r2, [pc, #128]	; (8002ab4 <HAL_DMA_Abort_IT+0xd4>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d022      	beq.n	8002a7c <HAL_DMA_Abort_IT+0x9c>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a1f      	ldr	r2, [pc, #124]	; (8002ab8 <HAL_DMA_Abort_IT+0xd8>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d01a      	beq.n	8002a76 <HAL_DMA_Abort_IT+0x96>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a1d      	ldr	r2, [pc, #116]	; (8002abc <HAL_DMA_Abort_IT+0xdc>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d012      	beq.n	8002a70 <HAL_DMA_Abort_IT+0x90>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a1c      	ldr	r2, [pc, #112]	; (8002ac0 <HAL_DMA_Abort_IT+0xe0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d00a      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x8a>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a1a      	ldr	r2, [pc, #104]	; (8002ac4 <HAL_DMA_Abort_IT+0xe4>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d102      	bne.n	8002a64 <HAL_DMA_Abort_IT+0x84>
 8002a5e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a62:	e00e      	b.n	8002a82 <HAL_DMA_Abort_IT+0xa2>
 8002a64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a68:	e00b      	b.n	8002a82 <HAL_DMA_Abort_IT+0xa2>
 8002a6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a6e:	e008      	b.n	8002a82 <HAL_DMA_Abort_IT+0xa2>
 8002a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a74:	e005      	b.n	8002a82 <HAL_DMA_Abort_IT+0xa2>
 8002a76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a7a:	e002      	b.n	8002a82 <HAL_DMA_Abort_IT+0xa2>
 8002a7c:	2310      	movs	r3, #16
 8002a7e:	e000      	b.n	8002a82 <HAL_DMA_Abort_IT+0xa2>
 8002a80:	2301      	movs	r3, #1
 8002a82:	4a11      	ldr	r2, [pc, #68]	; (8002ac8 <HAL_DMA_Abort_IT+0xe8>)
 8002a84:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	4798      	blx	r3
    } 
  }
  return status;
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40020008 	.word	0x40020008
 8002ab4:	4002001c 	.word	0x4002001c
 8002ab8:	40020030 	.word	0x40020030
 8002abc:	40020044 	.word	0x40020044
 8002ac0:	40020058 	.word	0x40020058
 8002ac4:	4002006c 	.word	0x4002006c
 8002ac8:	40020000 	.word	0x40020000

08002acc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	2204      	movs	r2, #4
 8002aea:	409a      	lsls	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4013      	ands	r3, r2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d04f      	beq.n	8002b94 <HAL_DMA_IRQHandler+0xc8>
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d04a      	beq.n	8002b94 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0320 	and.w	r3, r3, #32
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d107      	bne.n	8002b1c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0204 	bic.w	r2, r2, #4
 8002b1a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a66      	ldr	r2, [pc, #408]	; (8002cbc <HAL_DMA_IRQHandler+0x1f0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d029      	beq.n	8002b7a <HAL_DMA_IRQHandler+0xae>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a65      	ldr	r2, [pc, #404]	; (8002cc0 <HAL_DMA_IRQHandler+0x1f4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d022      	beq.n	8002b76 <HAL_DMA_IRQHandler+0xaa>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a63      	ldr	r2, [pc, #396]	; (8002cc4 <HAL_DMA_IRQHandler+0x1f8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d01a      	beq.n	8002b70 <HAL_DMA_IRQHandler+0xa4>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a62      	ldr	r2, [pc, #392]	; (8002cc8 <HAL_DMA_IRQHandler+0x1fc>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d012      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x9e>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a60      	ldr	r2, [pc, #384]	; (8002ccc <HAL_DMA_IRQHandler+0x200>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d00a      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x98>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a5f      	ldr	r2, [pc, #380]	; (8002cd0 <HAL_DMA_IRQHandler+0x204>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d102      	bne.n	8002b5e <HAL_DMA_IRQHandler+0x92>
 8002b58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b5c:	e00e      	b.n	8002b7c <HAL_DMA_IRQHandler+0xb0>
 8002b5e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002b62:	e00b      	b.n	8002b7c <HAL_DMA_IRQHandler+0xb0>
 8002b64:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b68:	e008      	b.n	8002b7c <HAL_DMA_IRQHandler+0xb0>
 8002b6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b6e:	e005      	b.n	8002b7c <HAL_DMA_IRQHandler+0xb0>
 8002b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b74:	e002      	b.n	8002b7c <HAL_DMA_IRQHandler+0xb0>
 8002b76:	2340      	movs	r3, #64	; 0x40
 8002b78:	e000      	b.n	8002b7c <HAL_DMA_IRQHandler+0xb0>
 8002b7a:	2304      	movs	r3, #4
 8002b7c:	4a55      	ldr	r2, [pc, #340]	; (8002cd4 <HAL_DMA_IRQHandler+0x208>)
 8002b7e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 8094 	beq.w	8002cb2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002b92:	e08e      	b.n	8002cb2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	2202      	movs	r2, #2
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d056      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x186>
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d051      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0320 	and.w	r3, r3, #32
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10b      	bne.n	8002bd4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 020a 	bic.w	r2, r2, #10
 8002bca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a38      	ldr	r2, [pc, #224]	; (8002cbc <HAL_DMA_IRQHandler+0x1f0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d029      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x166>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a37      	ldr	r2, [pc, #220]	; (8002cc0 <HAL_DMA_IRQHandler+0x1f4>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d022      	beq.n	8002c2e <HAL_DMA_IRQHandler+0x162>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a35      	ldr	r2, [pc, #212]	; (8002cc4 <HAL_DMA_IRQHandler+0x1f8>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d01a      	beq.n	8002c28 <HAL_DMA_IRQHandler+0x15c>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a34      	ldr	r2, [pc, #208]	; (8002cc8 <HAL_DMA_IRQHandler+0x1fc>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d012      	beq.n	8002c22 <HAL_DMA_IRQHandler+0x156>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a32      	ldr	r2, [pc, #200]	; (8002ccc <HAL_DMA_IRQHandler+0x200>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d00a      	beq.n	8002c1c <HAL_DMA_IRQHandler+0x150>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a31      	ldr	r2, [pc, #196]	; (8002cd0 <HAL_DMA_IRQHandler+0x204>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d102      	bne.n	8002c16 <HAL_DMA_IRQHandler+0x14a>
 8002c10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c14:	e00e      	b.n	8002c34 <HAL_DMA_IRQHandler+0x168>
 8002c16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c1a:	e00b      	b.n	8002c34 <HAL_DMA_IRQHandler+0x168>
 8002c1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c20:	e008      	b.n	8002c34 <HAL_DMA_IRQHandler+0x168>
 8002c22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c26:	e005      	b.n	8002c34 <HAL_DMA_IRQHandler+0x168>
 8002c28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c2c:	e002      	b.n	8002c34 <HAL_DMA_IRQHandler+0x168>
 8002c2e:	2320      	movs	r3, #32
 8002c30:	e000      	b.n	8002c34 <HAL_DMA_IRQHandler+0x168>
 8002c32:	2302      	movs	r3, #2
 8002c34:	4a27      	ldr	r2, [pc, #156]	; (8002cd4 <HAL_DMA_IRQHandler+0x208>)
 8002c36:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d034      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c50:	e02f      	b.n	8002cb2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	2208      	movs	r2, #8
 8002c58:	409a      	lsls	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d028      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x1e8>
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d023      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 020e 	bic.w	r2, r2, #14
 8002c7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c84:	2101      	movs	r1, #1
 8002c86:	fa01 f202 	lsl.w	r2, r1, r2
 8002c8a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d004      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	4798      	blx	r3
    }
  }
  return;
 8002cb2:	bf00      	nop
 8002cb4:	bf00      	nop
}
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40020008 	.word	0x40020008
 8002cc0:	4002001c 	.word	0x4002001c
 8002cc4:	40020030 	.word	0x40020030
 8002cc8:	40020044 	.word	0x40020044
 8002ccc:	40020058 	.word	0x40020058
 8002cd0:	4002006c 	.word	0x4002006c
 8002cd4:	40020000 	.word	0x40020000

08002cd8 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
    (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002ce2:	4b6d      	ldr	r3, [pc, #436]	; (8002e98 <HAL_FLASH_IRQHandler+0x1c0>)
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f003 0310 	and.w	r3, r3, #16
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d105      	bne.n	8002cfa <HAL_FLASH_IRQHandler+0x22>
 8002cee:	4b6a      	ldr	r3, [pc, #424]	; (8002e98 <HAL_FLASH_IRQHandler+0x1c0>)
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00e      	beq.n	8002d18 <HAL_FLASH_IRQHandler+0x40>
#endif /* FLASH_BANK2_END */
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 8002cfa:	4b68      	ldr	r3, [pc, #416]	; (8002e9c <HAL_FLASH_IRQHandler+0x1c4>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 8002d00:	4b66      	ldr	r3, [pc, #408]	; (8002e9c <HAL_FLASH_IRQHandler+0x1c4>)
 8002d02:	f04f 32ff 	mov.w	r2, #4294967295
 8002d06:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 8002d08:	f000 f8f8 	bl	8002efc <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f8d0 	bl	8002eb2 <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002d12:	4b62      	ldr	r3, [pc, #392]	; (8002e9c <HAL_FLASH_IRQHandler+0x1c4>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002d18:	4b5f      	ldr	r3, [pc, #380]	; (8002e98 <HAL_FLASH_IRQHandler+0x1c0>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f003 0320 	and.w	r3, r3, #32
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 80a0 	beq.w	8002e66 <HAL_FLASH_IRQHandler+0x18e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002d26:	4b5c      	ldr	r3, [pc, #368]	; (8002e98 <HAL_FLASH_IRQHandler+0x1c0>)
 8002d28:	2220      	movs	r2, #32
 8002d2a:	60da      	str	r2, [r3, #12]
#endif /* FLASH_BANK2_END */
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8002d2c:	4b5b      	ldr	r3, [pc, #364]	; (8002e9c <HAL_FLASH_IRQHandler+0x1c4>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 8097 	beq.w	8002e66 <HAL_FLASH_IRQHandler+0x18e>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8002d38:	4b58      	ldr	r3, [pc, #352]	; (8002e9c <HAL_FLASH_IRQHandler+0x1c4>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d12d      	bne.n	8002d9e <HAL_FLASH_IRQHandler+0xc6>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 8002d42:	4b56      	ldr	r3, [pc, #344]	; (8002e9c <HAL_FLASH_IRQHandler+0x1c4>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	3b01      	subs	r3, #1
 8002d48:	4a54      	ldr	r2, [pc, #336]	; (8002e9c <HAL_FLASH_IRQHandler+0x1c4>)
 8002d4a:	6053      	str	r3, [r2, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 8002d4c:	4b53      	ldr	r3, [pc, #332]	; (8002e9c <HAL_FLASH_IRQHandler+0x1c4>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d017      	beq.n	8002d84 <HAL_FLASH_IRQHandler+0xac>
        {
          addresstmp = pFlash.Address;
 8002d54:	4b51      	ldr	r3, [pc, #324]	; (8002e9c <HAL_FLASH_IRQHandler+0x1c4>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f8a0 	bl	8002ea0 <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8002d60:	4b4e      	ldr	r3, [pc, #312]	; (8002e9c <HAL_FLASH_IRQHandler+0x1c4>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d68:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 8002d6a:	4a4c      	ldr	r2, [pc, #304]	; (8002e9c <HAL_FLASH_IRQHandler+0x1c4>)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6093      	str	r3, [r2, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002d70:	4b49      	ldr	r3, [pc, #292]	; (8002e98 <HAL_FLASH_IRQHandler+0x1c0>)
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	4a48      	ldr	r2, [pc, #288]	; (8002e98 <HAL_FLASH_IRQHandler+0x1c0>)
 8002d76:	f023 0302 	bic.w	r3, r3, #2
 8002d7a:	6113      	str	r3, [r2, #16]

          FLASH_PageErase(addresstmp);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f90d 	bl	8002f9c <FLASH_PageErase>
 8002d82:	e070      	b.n	8002e66 <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 8002d84:	f04f 33ff 	mov.w	r3, #4294967295
 8002d88:	607b      	str	r3, [r7, #4]
 8002d8a:	4a44      	ldr	r2, [pc, #272]	; (8002e9c <HAL_FLASH_IRQHandler+0x1c4>)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6093      	str	r3, [r2, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002d90:	4b42      	ldr	r3, [pc, #264]	; (8002e9c <HAL_FLASH_IRQHandler+0x1c4>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f882 	bl	8002ea0 <HAL_FLASH_EndOfOperationCallback>
 8002d9c:	e063      	b.n	8002e66 <HAL_FLASH_IRQHandler+0x18e>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002d9e:	4b3f      	ldr	r3, [pc, #252]	; (8002e9c <HAL_FLASH_IRQHandler+0x1c4>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d10c      	bne.n	8002dc2 <HAL_FLASH_IRQHandler+0xea>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002da8:	4b3b      	ldr	r3, [pc, #236]	; (8002e98 <HAL_FLASH_IRQHandler+0x1c0>)
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	4a3a      	ldr	r2, [pc, #232]	; (8002e98 <HAL_FLASH_IRQHandler+0x1c0>)
 8002dae:	f023 0304 	bic.w	r3, r3, #4
 8002db2:	6113      	str	r3, [r2, #16]
        if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
        {
#endif /* FLASH_BANK2_END */
          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0U);
 8002db4:	2000      	movs	r0, #0
 8002db6:	f000 f873 	bl	8002ea0 <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002dba:	4b38      	ldr	r3, [pc, #224]	; (8002e9c <HAL_FLASH_IRQHandler+0x1c4>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	701a      	strb	r2, [r3, #0]
 8002dc0:	e051      	b.n	8002e66 <HAL_FLASH_IRQHandler+0x18e>
      }
#endif /* FLASH_BANK2_END */
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 8002dc2:	4b36      	ldr	r3, [pc, #216]	; (8002e9c <HAL_FLASH_IRQHandler+0x1c4>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	4a34      	ldr	r2, [pc, #208]	; (8002e9c <HAL_FLASH_IRQHandler+0x1c4>)
 8002dca:	6053      	str	r3, [r2, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 8002dcc:	4b33      	ldr	r3, [pc, #204]	; (8002e9c <HAL_FLASH_IRQHandler+0x1c4>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d024      	beq.n	8002e1e <HAL_FLASH_IRQHandler+0x146>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2U;
 8002dd4:	4b31      	ldr	r3, [pc, #196]	; (8002e9c <HAL_FLASH_IRQHandler+0x1c4>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	3302      	adds	r3, #2
 8002dda:	4a30      	ldr	r2, [pc, #192]	; (8002e9c <HAL_FLASH_IRQHandler+0x1c4>)
 8002ddc:	6093      	str	r3, [r2, #8]
          addresstmp = pFlash.Address;
 8002dde:	4b2f      	ldr	r3, [pc, #188]	; (8002e9c <HAL_FLASH_IRQHandler+0x1c4>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 8002de4:	4b2d      	ldr	r3, [pc, #180]	; (8002e9c <HAL_FLASH_IRQHandler+0x1c4>)
 8002de6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	0c02      	lsrs	r2, r0, #16
 8002df4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002df8:	0c0b      	lsrs	r3, r1, #16
 8002dfa:	4928      	ldr	r1, [pc, #160]	; (8002e9c <HAL_FLASH_IRQHandler+0x1c4>)
 8002dfc:	e9c1 2304 	strd	r2, r3, [r1, #16]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002e00:	4b25      	ldr	r3, [pc, #148]	; (8002e98 <HAL_FLASH_IRQHandler+0x1c0>)
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	4a24      	ldr	r2, [pc, #144]	; (8002e98 <HAL_FLASH_IRQHandler+0x1c0>)
 8002e06:	f023 0301 	bic.w	r3, r3, #1
 8002e0a:	6113      	str	r3, [r2, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8002e0c:	4b23      	ldr	r3, [pc, #140]	; (8002e9c <HAL_FLASH_IRQHandler+0x1c4>)
 8002e0e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002e12:	b293      	uxth	r3, r2
 8002e14:	4619      	mov	r1, r3
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f854 	bl	8002ec4 <FLASH_Program_HalfWord>
 8002e1c:	e023      	b.n	8002e66 <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 8002e1e:	4b1f      	ldr	r3, [pc, #124]	; (8002e9c <HAL_FLASH_IRQHandler+0x1c4>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	d105      	bne.n	8002e34 <HAL_FLASH_IRQHandler+0x15c>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8002e28:	4b1c      	ldr	r3, [pc, #112]	; (8002e9c <HAL_FLASH_IRQHandler+0x1c4>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f000 f837 	bl	8002ea0 <HAL_FLASH_EndOfOperationCallback>
 8002e32:	e011      	b.n	8002e58 <HAL_FLASH_IRQHandler+0x180>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8002e34:	4b19      	ldr	r3, [pc, #100]	; (8002e9c <HAL_FLASH_IRQHandler+0x1c4>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	d106      	bne.n	8002e4c <HAL_FLASH_IRQHandler+0x174>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8002e3e:	4b17      	ldr	r3, [pc, #92]	; (8002e9c <HAL_FLASH_IRQHandler+0x1c4>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	3b02      	subs	r3, #2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 f82b 	bl	8002ea0 <HAL_FLASH_EndOfOperationCallback>
 8002e4a:	e005      	b.n	8002e58 <HAL_FLASH_IRQHandler+0x180>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8002e4c:	4b13      	ldr	r3, [pc, #76]	; (8002e9c <HAL_FLASH_IRQHandler+0x1c4>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	3b06      	subs	r3, #6
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 f824 	bl	8002ea0 <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 8002e58:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <HAL_FLASH_IRQHandler+0x1c4>)
 8002e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e5e:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002e60:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <HAL_FLASH_IRQHandler+0x1c4>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#endif 

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002e66:	4b0d      	ldr	r3, [pc, #52]	; (8002e9c <HAL_FLASH_IRQHandler+0x1c4>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10e      	bne.n	8002e8e <HAL_FLASH_IRQHandler+0x1b6>
  
    /* Disable End of FLASH Operation and Error source interrupts for both banks */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
#else
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8002e70:	4b09      	ldr	r3, [pc, #36]	; (8002e98 <HAL_FLASH_IRQHandler+0x1c0>)
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	4a08      	ldr	r2, [pc, #32]	; (8002e98 <HAL_FLASH_IRQHandler+0x1c0>)
 8002e76:	f023 0307 	bic.w	r3, r3, #7
 8002e7a:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8002e7c:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <HAL_FLASH_IRQHandler+0x1c0>)
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	4a05      	ldr	r2, [pc, #20]	; (8002e98 <HAL_FLASH_IRQHandler+0x1c0>)
 8002e82:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 8002e86:	6113      	str	r3, [r2, #16]
#endif /* FLASH_BANK2_END */

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8002e88:	4b04      	ldr	r3, [pc, #16]	; (8002e9c <HAL_FLASH_IRQHandler+0x1c4>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	761a      	strb	r2, [r3, #24]
  }
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40022000 	.word	0x40022000
 8002e9c:	20000a30 	.word	0x20000a30

08002ea0 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr

08002eb2 <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr

08002ec4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002ed0:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <FLASH_Program_HalfWord+0x30>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002ed6:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <FLASH_Program_HalfWord+0x34>)
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	4a07      	ldr	r2, [pc, #28]	; (8002ef8 <FLASH_Program_HalfWord+0x34>)
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	887a      	ldrh	r2, [r7, #2]
 8002ee6:	801a      	strh	r2, [r3, #0]
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc80      	pop	{r7}
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	20000a30 	.word	0x20000a30
 8002ef8:	40022000 	.word	0x40022000

08002efc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002f06:	4b23      	ldr	r3, [pc, #140]	; (8002f94 <FLASH_SetErrorCode+0x98>)
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f003 0310 	and.w	r3, r3, #16
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d009      	beq.n	8002f26 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002f12:	4b21      	ldr	r3, [pc, #132]	; (8002f98 <FLASH_SetErrorCode+0x9c>)
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	f043 0302 	orr.w	r3, r3, #2
 8002f1a:	4a1f      	ldr	r2, [pc, #124]	; (8002f98 <FLASH_SetErrorCode+0x9c>)
 8002f1c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f043 0310 	orr.w	r3, r3, #16
 8002f24:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002f26:	4b1b      	ldr	r3, [pc, #108]	; (8002f94 <FLASH_SetErrorCode+0x98>)
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d009      	beq.n	8002f46 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002f32:	4b19      	ldr	r3, [pc, #100]	; (8002f98 <FLASH_SetErrorCode+0x9c>)
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	4a17      	ldr	r2, [pc, #92]	; (8002f98 <FLASH_SetErrorCode+0x9c>)
 8002f3c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f043 0304 	orr.w	r3, r3, #4
 8002f44:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002f46:	4b13      	ldr	r3, [pc, #76]	; (8002f94 <FLASH_SetErrorCode+0x98>)
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00b      	beq.n	8002f6a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002f52:	4b11      	ldr	r3, [pc, #68]	; (8002f98 <FLASH_SetErrorCode+0x9c>)
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	f043 0304 	orr.w	r3, r3, #4
 8002f5a:	4a0f      	ldr	r2, [pc, #60]	; (8002f98 <FLASH_SetErrorCode+0x9c>)
 8002f5c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002f5e:	4b0d      	ldr	r3, [pc, #52]	; (8002f94 <FLASH_SetErrorCode+0x98>)
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	4a0c      	ldr	r2, [pc, #48]	; (8002f94 <FLASH_SetErrorCode+0x98>)
 8002f64:	f023 0301 	bic.w	r3, r3, #1
 8002f68:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f240 1201 	movw	r2, #257	; 0x101
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d106      	bne.n	8002f82 <FLASH_SetErrorCode+0x86>
 8002f74:	4b07      	ldr	r3, [pc, #28]	; (8002f94 <FLASH_SetErrorCode+0x98>)
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	4a06      	ldr	r2, [pc, #24]	; (8002f94 <FLASH_SetErrorCode+0x98>)
 8002f7a:	f023 0301 	bic.w	r3, r3, #1
 8002f7e:	61d3      	str	r3, [r2, #28]
}  
 8002f80:	e002      	b.n	8002f88 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002f82:	4a04      	ldr	r2, [pc, #16]	; (8002f94 <FLASH_SetErrorCode+0x98>)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	60d3      	str	r3, [r2, #12]
}  
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	40022000 	.word	0x40022000
 8002f98:	20000a30 	.word	0x20000a30

08002f9c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <FLASH_PageErase+0x38>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002faa:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <FLASH_PageErase+0x3c>)
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	4a0a      	ldr	r2, [pc, #40]	; (8002fd8 <FLASH_PageErase+0x3c>)
 8002fb0:	f043 0302 	orr.w	r3, r3, #2
 8002fb4:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002fb6:	4a08      	ldr	r2, [pc, #32]	; (8002fd8 <FLASH_PageErase+0x3c>)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002fbc:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <FLASH_PageErase+0x3c>)
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	4a05      	ldr	r2, [pc, #20]	; (8002fd8 <FLASH_PageErase+0x3c>)
 8002fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fc6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	20000a30 	.word	0x20000a30
 8002fd8:	40022000 	.word	0x40022000

08002fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b08b      	sub	sp, #44	; 0x2c
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002fea:	2300      	movs	r3, #0
 8002fec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fee:	e169      	b.n	80032c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	69fa      	ldr	r2, [r7, #28]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	429a      	cmp	r2, r3
 800300a:	f040 8158 	bne.w	80032be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	4a9a      	ldr	r2, [pc, #616]	; (800327c <HAL_GPIO_Init+0x2a0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d05e      	beq.n	80030d6 <HAL_GPIO_Init+0xfa>
 8003018:	4a98      	ldr	r2, [pc, #608]	; (800327c <HAL_GPIO_Init+0x2a0>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d875      	bhi.n	800310a <HAL_GPIO_Init+0x12e>
 800301e:	4a98      	ldr	r2, [pc, #608]	; (8003280 <HAL_GPIO_Init+0x2a4>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d058      	beq.n	80030d6 <HAL_GPIO_Init+0xfa>
 8003024:	4a96      	ldr	r2, [pc, #600]	; (8003280 <HAL_GPIO_Init+0x2a4>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d86f      	bhi.n	800310a <HAL_GPIO_Init+0x12e>
 800302a:	4a96      	ldr	r2, [pc, #600]	; (8003284 <HAL_GPIO_Init+0x2a8>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d052      	beq.n	80030d6 <HAL_GPIO_Init+0xfa>
 8003030:	4a94      	ldr	r2, [pc, #592]	; (8003284 <HAL_GPIO_Init+0x2a8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d869      	bhi.n	800310a <HAL_GPIO_Init+0x12e>
 8003036:	4a94      	ldr	r2, [pc, #592]	; (8003288 <HAL_GPIO_Init+0x2ac>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d04c      	beq.n	80030d6 <HAL_GPIO_Init+0xfa>
 800303c:	4a92      	ldr	r2, [pc, #584]	; (8003288 <HAL_GPIO_Init+0x2ac>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d863      	bhi.n	800310a <HAL_GPIO_Init+0x12e>
 8003042:	4a92      	ldr	r2, [pc, #584]	; (800328c <HAL_GPIO_Init+0x2b0>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d046      	beq.n	80030d6 <HAL_GPIO_Init+0xfa>
 8003048:	4a90      	ldr	r2, [pc, #576]	; (800328c <HAL_GPIO_Init+0x2b0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d85d      	bhi.n	800310a <HAL_GPIO_Init+0x12e>
 800304e:	2b12      	cmp	r3, #18
 8003050:	d82a      	bhi.n	80030a8 <HAL_GPIO_Init+0xcc>
 8003052:	2b12      	cmp	r3, #18
 8003054:	d859      	bhi.n	800310a <HAL_GPIO_Init+0x12e>
 8003056:	a201      	add	r2, pc, #4	; (adr r2, 800305c <HAL_GPIO_Init+0x80>)
 8003058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305c:	080030d7 	.word	0x080030d7
 8003060:	080030b1 	.word	0x080030b1
 8003064:	080030c3 	.word	0x080030c3
 8003068:	08003105 	.word	0x08003105
 800306c:	0800310b 	.word	0x0800310b
 8003070:	0800310b 	.word	0x0800310b
 8003074:	0800310b 	.word	0x0800310b
 8003078:	0800310b 	.word	0x0800310b
 800307c:	0800310b 	.word	0x0800310b
 8003080:	0800310b 	.word	0x0800310b
 8003084:	0800310b 	.word	0x0800310b
 8003088:	0800310b 	.word	0x0800310b
 800308c:	0800310b 	.word	0x0800310b
 8003090:	0800310b 	.word	0x0800310b
 8003094:	0800310b 	.word	0x0800310b
 8003098:	0800310b 	.word	0x0800310b
 800309c:	0800310b 	.word	0x0800310b
 80030a0:	080030b9 	.word	0x080030b9
 80030a4:	080030cd 	.word	0x080030cd
 80030a8:	4a79      	ldr	r2, [pc, #484]	; (8003290 <HAL_GPIO_Init+0x2b4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d013      	beq.n	80030d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80030ae:	e02c      	b.n	800310a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	623b      	str	r3, [r7, #32]
          break;
 80030b6:	e029      	b.n	800310c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	3304      	adds	r3, #4
 80030be:	623b      	str	r3, [r7, #32]
          break;
 80030c0:	e024      	b.n	800310c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	3308      	adds	r3, #8
 80030c8:	623b      	str	r3, [r7, #32]
          break;
 80030ca:	e01f      	b.n	800310c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	330c      	adds	r3, #12
 80030d2:	623b      	str	r3, [r7, #32]
          break;
 80030d4:	e01a      	b.n	800310c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d102      	bne.n	80030e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030de:	2304      	movs	r3, #4
 80030e0:	623b      	str	r3, [r7, #32]
          break;
 80030e2:	e013      	b.n	800310c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d105      	bne.n	80030f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030ec:	2308      	movs	r3, #8
 80030ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	69fa      	ldr	r2, [r7, #28]
 80030f4:	611a      	str	r2, [r3, #16]
          break;
 80030f6:	e009      	b.n	800310c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030f8:	2308      	movs	r3, #8
 80030fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	69fa      	ldr	r2, [r7, #28]
 8003100:	615a      	str	r2, [r3, #20]
          break;
 8003102:	e003      	b.n	800310c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003104:	2300      	movs	r3, #0
 8003106:	623b      	str	r3, [r7, #32]
          break;
 8003108:	e000      	b.n	800310c <HAL_GPIO_Init+0x130>
          break;
 800310a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	2bff      	cmp	r3, #255	; 0xff
 8003110:	d801      	bhi.n	8003116 <HAL_GPIO_Init+0x13a>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	e001      	b.n	800311a <HAL_GPIO_Init+0x13e>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3304      	adds	r3, #4
 800311a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	2bff      	cmp	r3, #255	; 0xff
 8003120:	d802      	bhi.n	8003128 <HAL_GPIO_Init+0x14c>
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	e002      	b.n	800312e <HAL_GPIO_Init+0x152>
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	3b08      	subs	r3, #8
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	210f      	movs	r1, #15
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	fa01 f303 	lsl.w	r3, r1, r3
 800313c:	43db      	mvns	r3, r3
 800313e:	401a      	ands	r2, r3
 8003140:	6a39      	ldr	r1, [r7, #32]
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	fa01 f303 	lsl.w	r3, r1, r3
 8003148:	431a      	orrs	r2, r3
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	f000 80b1 	beq.w	80032be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800315c:	4b4d      	ldr	r3, [pc, #308]	; (8003294 <HAL_GPIO_Init+0x2b8>)
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	4a4c      	ldr	r2, [pc, #304]	; (8003294 <HAL_GPIO_Init+0x2b8>)
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	6193      	str	r3, [r2, #24]
 8003168:	4b4a      	ldr	r3, [pc, #296]	; (8003294 <HAL_GPIO_Init+0x2b8>)
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	60bb      	str	r3, [r7, #8]
 8003172:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003174:	4a48      	ldr	r2, [pc, #288]	; (8003298 <HAL_GPIO_Init+0x2bc>)
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	089b      	lsrs	r3, r3, #2
 800317a:	3302      	adds	r3, #2
 800317c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003180:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	f003 0303 	and.w	r3, r3, #3
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	220f      	movs	r2, #15
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	4013      	ands	r3, r2
 8003196:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a40      	ldr	r2, [pc, #256]	; (800329c <HAL_GPIO_Init+0x2c0>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d013      	beq.n	80031c8 <HAL_GPIO_Init+0x1ec>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a3f      	ldr	r2, [pc, #252]	; (80032a0 <HAL_GPIO_Init+0x2c4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d00d      	beq.n	80031c4 <HAL_GPIO_Init+0x1e8>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a3e      	ldr	r2, [pc, #248]	; (80032a4 <HAL_GPIO_Init+0x2c8>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d007      	beq.n	80031c0 <HAL_GPIO_Init+0x1e4>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a3d      	ldr	r2, [pc, #244]	; (80032a8 <HAL_GPIO_Init+0x2cc>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d101      	bne.n	80031bc <HAL_GPIO_Init+0x1e0>
 80031b8:	2303      	movs	r3, #3
 80031ba:	e006      	b.n	80031ca <HAL_GPIO_Init+0x1ee>
 80031bc:	2304      	movs	r3, #4
 80031be:	e004      	b.n	80031ca <HAL_GPIO_Init+0x1ee>
 80031c0:	2302      	movs	r3, #2
 80031c2:	e002      	b.n	80031ca <HAL_GPIO_Init+0x1ee>
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <HAL_GPIO_Init+0x1ee>
 80031c8:	2300      	movs	r3, #0
 80031ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031cc:	f002 0203 	and.w	r2, r2, #3
 80031d0:	0092      	lsls	r2, r2, #2
 80031d2:	4093      	lsls	r3, r2
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031da:	492f      	ldr	r1, [pc, #188]	; (8003298 <HAL_GPIO_Init+0x2bc>)
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	089b      	lsrs	r3, r3, #2
 80031e0:	3302      	adds	r3, #2
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d006      	beq.n	8003202 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031f4:	4b2d      	ldr	r3, [pc, #180]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	492c      	ldr	r1, [pc, #176]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	600b      	str	r3, [r1, #0]
 8003200:	e006      	b.n	8003210 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003202:	4b2a      	ldr	r3, [pc, #168]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	43db      	mvns	r3, r3
 800320a:	4928      	ldr	r1, [pc, #160]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 800320c:	4013      	ands	r3, r2
 800320e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d006      	beq.n	800322a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800321c:	4b23      	ldr	r3, [pc, #140]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	4922      	ldr	r1, [pc, #136]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	4313      	orrs	r3, r2
 8003226:	604b      	str	r3, [r1, #4]
 8003228:	e006      	b.n	8003238 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800322a:	4b20      	ldr	r3, [pc, #128]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	43db      	mvns	r3, r3
 8003232:	491e      	ldr	r1, [pc, #120]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 8003234:	4013      	ands	r3, r2
 8003236:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d006      	beq.n	8003252 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003244:	4b19      	ldr	r3, [pc, #100]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	4918      	ldr	r1, [pc, #96]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	4313      	orrs	r3, r2
 800324e:	608b      	str	r3, [r1, #8]
 8003250:	e006      	b.n	8003260 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003252:	4b16      	ldr	r3, [pc, #88]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	43db      	mvns	r3, r3
 800325a:	4914      	ldr	r1, [pc, #80]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 800325c:	4013      	ands	r3, r2
 800325e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d021      	beq.n	80032b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800326c:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	490e      	ldr	r1, [pc, #56]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	4313      	orrs	r3, r2
 8003276:	60cb      	str	r3, [r1, #12]
 8003278:	e021      	b.n	80032be <HAL_GPIO_Init+0x2e2>
 800327a:	bf00      	nop
 800327c:	10320000 	.word	0x10320000
 8003280:	10310000 	.word	0x10310000
 8003284:	10220000 	.word	0x10220000
 8003288:	10210000 	.word	0x10210000
 800328c:	10120000 	.word	0x10120000
 8003290:	10110000 	.word	0x10110000
 8003294:	40021000 	.word	0x40021000
 8003298:	40010000 	.word	0x40010000
 800329c:	40010800 	.word	0x40010800
 80032a0:	40010c00 	.word	0x40010c00
 80032a4:	40011000 	.word	0x40011000
 80032a8:	40011400 	.word	0x40011400
 80032ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032b0:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <HAL_GPIO_Init+0x304>)
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	43db      	mvns	r3, r3
 80032b8:	4909      	ldr	r1, [pc, #36]	; (80032e0 <HAL_GPIO_Init+0x304>)
 80032ba:	4013      	ands	r3, r2
 80032bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	3301      	adds	r3, #1
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	fa22 f303 	lsr.w	r3, r2, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f47f ae8e 	bne.w	8002ff0 <HAL_GPIO_Init+0x14>
  }
}
 80032d4:	bf00      	nop
 80032d6:	bf00      	nop
 80032d8:	372c      	adds	r7, #44	; 0x2c
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr
 80032e0:	40010400 	.word	0x40010400

080032e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	807b      	strh	r3, [r7, #2]
 80032f0:	4613      	mov	r3, r2
 80032f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032f4:	787b      	ldrb	r3, [r7, #1]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032fa:	887a      	ldrh	r2, [r7, #2]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003300:	e003      	b.n	800330a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003302:	887b      	ldrh	r3, [r7, #2]
 8003304:	041a      	lsls	r2, r3, #16
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	611a      	str	r2, [r3, #16]
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr

08003314 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003316:	b08b      	sub	sp, #44	; 0x2c
 8003318:	af06      	add	r7, sp, #24
 800331a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e0fd      	b.n	8003522 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d106      	bne.n	8003340 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7fe ff82 	bl	8002244 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2203      	movs	r2, #3
 8003344:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f003 fba9 	bl	8006aa4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	603b      	str	r3, [r7, #0]
 8003358:	687e      	ldr	r6, [r7, #4]
 800335a:	466d      	mov	r5, sp
 800335c:	f106 0410 	add.w	r4, r6, #16
 8003360:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003362:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003364:	6823      	ldr	r3, [r4, #0]
 8003366:	602b      	str	r3, [r5, #0]
 8003368:	1d33      	adds	r3, r6, #4
 800336a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800336c:	6838      	ldr	r0, [r7, #0]
 800336e:	f003 fb89 	bl	8006a84 <USB_CoreInit>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e0ce      	b.n	8003522 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2100      	movs	r1, #0
 800338a:	4618      	mov	r0, r3
 800338c:	f003 fba4 	bl	8006ad8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003390:	2300      	movs	r3, #0
 8003392:	73fb      	strb	r3, [r7, #15]
 8003394:	e04c      	b.n	8003430 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003396:	7bfb      	ldrb	r3, [r7, #15]
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	4613      	mov	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	440b      	add	r3, r1
 80033a6:	3301      	adds	r3, #1
 80033a8:	2201      	movs	r2, #1
 80033aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033ac:	7bfb      	ldrb	r3, [r7, #15]
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	4613      	mov	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	440b      	add	r3, r1
 80033bc:	7bfa      	ldrb	r2, [r7, #15]
 80033be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033c0:	7bfa      	ldrb	r2, [r7, #15]
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
 80033c4:	b298      	uxth	r0, r3
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	440b      	add	r3, r1
 80033d2:	3336      	adds	r3, #54	; 0x36
 80033d4:	4602      	mov	r2, r0
 80033d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	4613      	mov	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	440b      	add	r3, r1
 80033e8:	3303      	adds	r3, #3
 80033ea:	2200      	movs	r2, #0
 80033ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033ee:	7bfa      	ldrb	r2, [r7, #15]
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	440b      	add	r3, r1
 80033fc:	3338      	adds	r3, #56	; 0x38
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003402:	7bfa      	ldrb	r2, [r7, #15]
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	440b      	add	r3, r1
 8003410:	333c      	adds	r3, #60	; 0x3c
 8003412:	2200      	movs	r2, #0
 8003414:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003416:	7bfa      	ldrb	r2, [r7, #15]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	440b      	add	r3, r1
 8003424:	3340      	adds	r3, #64	; 0x40
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800342a:	7bfb      	ldrb	r3, [r7, #15]
 800342c:	3301      	adds	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
 8003430:	7bfa      	ldrb	r2, [r7, #15]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	429a      	cmp	r2, r3
 8003438:	d3ad      	bcc.n	8003396 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800343a:	2300      	movs	r3, #0
 800343c:	73fb      	strb	r3, [r7, #15]
 800343e:	e044      	b.n	80034ca <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003440:	7bfa      	ldrb	r2, [r7, #15]
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	4613      	mov	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	440b      	add	r3, r1
 800344e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003452:	2200      	movs	r2, #0
 8003454:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003456:	7bfa      	ldrb	r2, [r7, #15]
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	4613      	mov	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	440b      	add	r3, r1
 8003464:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003468:	7bfa      	ldrb	r2, [r7, #15]
 800346a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800346c:	7bfa      	ldrb	r2, [r7, #15]
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	440b      	add	r3, r1
 800347a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800347e:	2200      	movs	r2, #0
 8003480:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003482:	7bfa      	ldrb	r2, [r7, #15]
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	4613      	mov	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	440b      	add	r3, r1
 8003490:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003498:	7bfa      	ldrb	r2, [r7, #15]
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	440b      	add	r3, r1
 80034a6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034ae:	7bfa      	ldrb	r2, [r7, #15]
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	440b      	add	r3, r1
 80034bc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034c4:	7bfb      	ldrb	r3, [r7, #15]
 80034c6:	3301      	adds	r3, #1
 80034c8:	73fb      	strb	r3, [r7, #15]
 80034ca:	7bfa      	ldrb	r2, [r7, #15]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d3b5      	bcc.n	8003440 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	603b      	str	r3, [r7, #0]
 80034da:	687e      	ldr	r6, [r7, #4]
 80034dc:	466d      	mov	r5, sp
 80034de:	f106 0410 	add.w	r4, r6, #16
 80034e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034e6:	6823      	ldr	r3, [r4, #0]
 80034e8:	602b      	str	r3, [r5, #0]
 80034ea:	1d33      	adds	r3, r6, #4
 80034ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034ee:	6838      	ldr	r0, [r7, #0]
 80034f0:	f003 fafe 	bl	8006af0 <USB_DevInit>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d005      	beq.n	8003506 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2202      	movs	r2, #2
 80034fe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e00d      	b.n	8003522 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f004 fc3b 	bl	8007d96 <USB_DevDisconnect>

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800352a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b088      	sub	sp, #32
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f004 fc37 	bl	8007daa <USB_ReadInterrupts>
 800353c:	4603      	mov	r3, r0
 800353e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003546:	d102      	bne.n	800354e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f9ab 	bl	80038a4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f004 fc29 	bl	8007daa <USB_ReadInterrupts>
 8003558:	4603      	mov	r3, r0
 800355a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003562:	d112      	bne.n	800358a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800356c:	b29a      	uxth	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003576:	b292      	uxth	r2, r2
 8003578:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f951 	bl	8003824 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003582:	2100      	movs	r1, #0
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 f968 	bl	800385a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f004 fc0b 	bl	8007daa <USB_ReadInterrupts>
 8003594:	4603      	mov	r3, r0
 8003596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800359a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800359e:	d10b      	bne.n	80035b8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035b2:	b292      	uxth	r2, r2
 80035b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f004 fbf4 	bl	8007daa <USB_ReadInterrupts>
 80035c2:	4603      	mov	r3, r0
 80035c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035cc:	d10b      	bne.n	80035e6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035e0:	b292      	uxth	r2, r2
 80035e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f004 fbdd 	bl	8007daa <USB_ReadInterrupts>
 80035f0:	4603      	mov	r3, r0
 80035f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035fa:	d126      	bne.n	800364a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003604:	b29a      	uxth	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0204 	bic.w	r2, r2, #4
 800360e:	b292      	uxth	r2, r2
 8003610:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800361c:	b29a      	uxth	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0208 	bic.w	r2, r2, #8
 8003626:	b292      	uxth	r2, r2
 8003628:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f90b 	bl	8003848 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800363a:	b29a      	uxth	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003644:	b292      	uxth	r2, r2
 8003646:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f004 fbab 	bl	8007daa <USB_ReadInterrupts>
 8003654:	4603      	mov	r3, r0
 8003656:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800365a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800365e:	f040 8084 	bne.w	800376a <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8003662:	2300      	movs	r3, #0
 8003664:	77fb      	strb	r3, [r7, #31]
 8003666:	e011      	b.n	800368c <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	461a      	mov	r2, r3
 800366e:	7ffb      	ldrb	r3, [r7, #31]
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	441a      	add	r2, r3
 8003674:	7ffb      	ldrb	r3, [r7, #31]
 8003676:	8812      	ldrh	r2, [r2, #0]
 8003678:	b292      	uxth	r2, r2
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	f107 0120 	add.w	r1, r7, #32
 8003680:	440b      	add	r3, r1
 8003682:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8003686:	7ffb      	ldrb	r3, [r7, #31]
 8003688:	3301      	adds	r3, #1
 800368a:	77fb      	strb	r3, [r7, #31]
 800368c:	7ffb      	ldrb	r3, [r7, #31]
 800368e:	2b07      	cmp	r3, #7
 8003690:	d9ea      	bls.n	8003668 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800369a:	b29a      	uxth	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 0201 	orr.w	r2, r2, #1
 80036a4:	b292      	uxth	r2, r2
 80036a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0201 	bic.w	r2, r2, #1
 80036bc:	b292      	uxth	r2, r2
 80036be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80036c2:	bf00      	nop
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0f6      	beq.n	80036c4 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036de:	b29a      	uxth	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036e8:	b292      	uxth	r2, r2
 80036ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80036ee:	2300      	movs	r3, #0
 80036f0:	77fb      	strb	r3, [r7, #31]
 80036f2:	e010      	b.n	8003716 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80036f4:	7ffb      	ldrb	r3, [r7, #31]
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6812      	ldr	r2, [r2, #0]
 80036fa:	4611      	mov	r1, r2
 80036fc:	7ffa      	ldrb	r2, [r7, #31]
 80036fe:	0092      	lsls	r2, r2, #2
 8003700:	440a      	add	r2, r1
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	f107 0120 	add.w	r1, r7, #32
 8003708:	440b      	add	r3, r1
 800370a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800370e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003710:	7ffb      	ldrb	r3, [r7, #31]
 8003712:	3301      	adds	r3, #1
 8003714:	77fb      	strb	r3, [r7, #31]
 8003716:	7ffb      	ldrb	r3, [r7, #31]
 8003718:	2b07      	cmp	r3, #7
 800371a:	d9eb      	bls.n	80036f4 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003724:	b29a      	uxth	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0208 	orr.w	r2, r2, #8
 800372e:	b292      	uxth	r2, r2
 8003730:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800373c:	b29a      	uxth	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003746:	b292      	uxth	r2, r2
 8003748:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003754:	b29a      	uxth	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0204 	orr.w	r2, r2, #4
 800375e:	b292      	uxth	r2, r2
 8003760:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f866 	bl	8003836 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f004 fb1b 	bl	8007daa <USB_ReadInterrupts>
 8003774:	4603      	mov	r3, r0
 8003776:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800377a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800377e:	d10e      	bne.n	800379e <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003788:	b29a      	uxth	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003792:	b292      	uxth	r2, r2
 8003794:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f83a 	bl	8003812 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f004 fb01 	bl	8007daa <USB_ReadInterrupts>
 80037a8:	4603      	mov	r3, r0
 80037aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037b2:	d10b      	bne.n	80037cc <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037bc:	b29a      	uxth	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037c6:	b292      	uxth	r2, r2
 80037c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80037cc:	bf00      	nop
 80037ce:	3720      	adds	r7, #32
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bc80      	pop	{r7}
 80037e8:	4770      	bx	lr

080037ea <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	460b      	mov	r3, r1
 80037f4:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bc80      	pop	{r7}
 80037fe:	4770      	bx	lr

08003800 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	bc80      	pop	{r7}
 8003810:	4770      	bx	lr

08003812 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr

08003824 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr

08003836 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr

08003848 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr

0800385a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b082      	sub	sp, #8
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	460b      	mov	r3, r1
 8003864:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_PCD_SetAddress+0x1a>
 8003870:	2302      	movs	r3, #2
 8003872:	e013      	b.n	800389c <HAL_PCD_SetAddress+0x42>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	78fa      	ldrb	r2, [r7, #3]
 8003880:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	78fa      	ldrb	r2, [r7, #3]
 800388a:	4611      	mov	r1, r2
 800388c:	4618      	mov	r0, r3
 800388e:	f004 fa6f 	bl	8007d70 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08e      	sub	sp, #56	; 0x38
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80038ac:	e2df      	b.n	8003e6e <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038b6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80038b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	f003 030f 	and.w	r3, r3, #15
 80038c0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80038c4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f040 8158 	bne.w	8003b7e <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80038ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80038d0:	f003 0310 	and.w	r3, r3, #16
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d152      	bne.n	800397e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	881b      	ldrh	r3, [r3, #0]
 80038de:	b29b      	uxth	r3, r3
 80038e0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80038e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e8:	81fb      	strh	r3, [r7, #14]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	89fb      	ldrh	r3, [r7, #14]
 80038f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3328      	adds	r3, #40	; 0x28
 8003900:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800390a:	b29b      	uxth	r3, r3
 800390c:	461a      	mov	r2, r3
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	4413      	add	r3, r2
 8003916:	3302      	adds	r3, #2
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6812      	ldr	r2, [r2, #0]
 800391e:	4413      	add	r3, r2
 8003920:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	695a      	ldr	r2, [r3, #20]
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	441a      	add	r2, r3
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800393c:	2100      	movs	r1, #0
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7ff ff53 	bl	80037ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	f000 828e 	beq.w	8003e6e <PCD_EP_ISR_Handler+0x5ca>
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	2b00      	cmp	r3, #0
 8003958:	f040 8289 	bne.w	8003e6e <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003962:	b2db      	uxtb	r3, r3
 8003964:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003968:	b2da      	uxtb	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	b292      	uxth	r2, r2
 8003970:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800397c:	e277      	b.n	8003e6e <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003984:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800398e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003990:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003994:	2b00      	cmp	r3, #0
 8003996:	d034      	beq.n	8003a02 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	461a      	mov	r2, r3
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	4413      	add	r3, r2
 80039ac:	3306      	adds	r3, #6
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6812      	ldr	r2, [r2, #0]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039ba:	881b      	ldrh	r3, [r3, #0]
 80039bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6818      	ldr	r0, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	f004 fa3b 	bl	8007e52 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	881b      	ldrh	r3, [r3, #0]
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80039e8:	4013      	ands	r3, r2
 80039ea:	823b      	strh	r3, [r7, #16]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	8a3a      	ldrh	r2, [r7, #16]
 80039f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039f6:	b292      	uxth	r2, r2
 80039f8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7ff ff00 	bl	8003800 <HAL_PCD_SetupStageCallback>
 8003a00:	e235      	b.n	8003e6e <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003a02:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f280 8231 	bge.w	8003e6e <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	881b      	ldrh	r3, [r3, #0]
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003a18:	4013      	ands	r3, r2
 8003a1a:	83bb      	strh	r3, [r7, #28]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	8bba      	ldrh	r2, [r7, #28]
 8003a22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a26:	b292      	uxth	r2, r2
 8003a28:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	461a      	mov	r2, r3
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	4413      	add	r3, r2
 8003a3e:	3306      	adds	r3, #6
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6812      	ldr	r2, [r2, #0]
 8003a46:	4413      	add	r3, r2
 8003a48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a4c:	881b      	ldrh	r3, [r3, #0]
 8003a4e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d019      	beq.n	8003a92 <PCD_EP_ISR_Handler+0x1ee>
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d015      	beq.n	8003a92 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6818      	ldr	r0, [r3, #0]
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	6959      	ldr	r1, [r3, #20]
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	f004 f9eb 	bl	8007e52 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	695a      	ldr	r2, [r3, #20]
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	441a      	add	r2, r3
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7ff fea1 	bl	80037d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	61bb      	str	r3, [r7, #24]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ab0:	617b      	str	r3, [r7, #20]
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d112      	bne.n	8003ae0 <PCD_EP_ISR_Handler+0x23c>
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	801a      	strh	r2, [r3, #0]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	881b      	ldrh	r3, [r3, #0]
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ad4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	801a      	strh	r2, [r3, #0]
 8003ade:	e02f      	b.n	8003b40 <PCD_EP_ISR_Handler+0x29c>
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	2b3e      	cmp	r3, #62	; 0x3e
 8003ae6:	d813      	bhi.n	8003b10 <PCD_EP_ISR_Handler+0x26c>
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	085b      	lsrs	r3, r3, #1
 8003aee:	633b      	str	r3, [r7, #48]	; 0x30
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <PCD_EP_ISR_Handler+0x25e>
 8003afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afe:	3301      	adds	r3, #1
 8003b00:	633b      	str	r3, [r7, #48]	; 0x30
 8003b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	029b      	lsls	r3, r3, #10
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	801a      	strh	r2, [r3, #0]
 8003b0e:	e017      	b.n	8003b40 <PCD_EP_ISR_Handler+0x29c>
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	095b      	lsrs	r3, r3, #5
 8003b16:	633b      	str	r3, [r7, #48]	; 0x30
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	f003 031f 	and.w	r3, r3, #31
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d102      	bne.n	8003b2a <PCD_EP_ISR_Handler+0x286>
 8003b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b26:	3b01      	subs	r3, #1
 8003b28:	633b      	str	r3, [r7, #48]	; 0x30
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	029b      	lsls	r3, r3, #10
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	881b      	ldrh	r3, [r3, #0]
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b50:	827b      	strh	r3, [r7, #18]
 8003b52:	8a7b      	ldrh	r3, [r7, #18]
 8003b54:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003b58:	827b      	strh	r3, [r7, #18]
 8003b5a:	8a7b      	ldrh	r3, [r7, #18]
 8003b5c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b60:	827b      	strh	r3, [r7, #18]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	8a7b      	ldrh	r3, [r7, #18]
 8003b68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	8013      	strh	r3, [r2, #0]
 8003b7c:	e177      	b.n	8003e6e <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	461a      	mov	r2, r3
 8003b84:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	881b      	ldrh	r3, [r3, #0]
 8003b8e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003b90:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f280 80ea 	bge.w	8003d6e <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	853b      	strh	r3, [r7, #40]	; 0x28
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003bc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bc8:	b292      	uxth	r2, r2
 8003bca:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003bcc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	4413      	add	r3, r2
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	7b1b      	ldrb	r3, [r3, #12]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d122      	bne.n	8003c30 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3306      	adds	r3, #6
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6812      	ldr	r2, [r2, #0]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c12:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003c14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 8087 	beq.w	8003d2a <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6818      	ldr	r0, [r3, #0]
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	6959      	ldr	r1, [r3, #20]
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	88da      	ldrh	r2, [r3, #6]
 8003c28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c2a:	f004 f912 	bl	8007e52 <USB_ReadPMA>
 8003c2e:	e07c      	b.n	8003d2a <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	78db      	ldrb	r3, [r3, #3]
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d108      	bne.n	8003c4a <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003c38:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f923 	bl	8003e8a <HAL_PCD_EP_DB_Receive>
 8003c44:	4603      	mov	r3, r0
 8003c46:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003c48:	e06f      	b.n	8003d2a <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	881b      	ldrh	r3, [r3, #0]
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c64:	847b      	strh	r3, [r7, #34]	; 0x22
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	441a      	add	r2, r3
 8003c74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d021      	beq.n	8003ce8 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	461a      	mov	r2, r3
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	4413      	add	r3, r2
 8003cb8:	3302      	adds	r3, #2
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6812      	ldr	r2, [r2, #0]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ccc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003cce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d02a      	beq.n	8003d2a <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6818      	ldr	r0, [r3, #0]
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	6959      	ldr	r1, [r3, #20]
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	891a      	ldrh	r2, [r3, #8]
 8003ce0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ce2:	f004 f8b6 	bl	8007e52 <USB_ReadPMA>
 8003ce6:	e020      	b.n	8003d2a <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3306      	adds	r3, #6
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6812      	ldr	r2, [r2, #0]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d10:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003d12:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	6959      	ldr	r1, [r3, #20]
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	895a      	ldrh	r2, [r3, #10]
 8003d24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d26:	f004 f894 	bl	8007e52 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	69da      	ldr	r2, [r3, #28]
 8003d2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d30:	441a      	add	r2, r3
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d38:	695a      	ldr	r2, [r3, #20]
 8003d3a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d3c:	441a      	add	r2, r3
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d004      	beq.n	8003d54 <PCD_EP_ISR_Handler+0x4b0>
 8003d4a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d206      	bcs.n	8003d62 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	4619      	mov	r1, r3
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7ff fd3a 	bl	80037d4 <HAL_PCD_DataOutStageCallback>
 8003d60:	e005      	b.n	8003d6e <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f002 fee1 	bl	8006b30 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003d6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d07a      	beq.n	8003e6e <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8003d78:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	4613      	mov	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	4413      	add	r3, r2
 8003d8a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	461a      	mov	r2, r3
 8003d92:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da6:	843b      	strh	r3, [r7, #32]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	461a      	mov	r2, r3
 8003dae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	441a      	add	r2, r3
 8003db6:	8c3b      	ldrh	r3, [r7, #32]
 8003db8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	78db      	ldrb	r3, [r3, #3]
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d108      	bne.n	8003dde <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d146      	bne.n	8003e62 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003dd4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d141      	bne.n	8003e62 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	461a      	mov	r2, r3
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	4413      	add	r3, r2
 8003df2:	3302      	adds	r3, #2
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6812      	ldr	r2, [r2, #0]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e00:	881b      	ldrh	r3, [r3, #0]
 8003e02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e06:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	699a      	ldr	r2, [r3, #24]
 8003e0c:	8bfb      	ldrh	r3, [r7, #30]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d906      	bls.n	8003e20 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	699a      	ldr	r2, [r3, #24]
 8003e16:	8bfb      	ldrh	r3, [r7, #30]
 8003e18:	1ad2      	subs	r2, r2, r3
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1c:	619a      	str	r2, [r3, #24]
 8003e1e:	e002      	b.n	8003e26 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	2200      	movs	r2, #0
 8003e24:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d106      	bne.n	8003e3c <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	4619      	mov	r1, r3
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f7ff fcd8 	bl	80037ea <HAL_PCD_DataInStageCallback>
 8003e3a:	e018      	b.n	8003e6e <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	695a      	ldr	r2, [r3, #20]
 8003e40:	8bfb      	ldrh	r3, [r7, #30]
 8003e42:	441a      	add	r2, r3
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4a:	69da      	ldr	r2, [r3, #28]
 8003e4c:	8bfb      	ldrh	r3, [r7, #30]
 8003e4e:	441a      	add	r2, r3
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f002 fe68 	bl	8006b30 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003e60:	e005      	b.n	8003e6e <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003e62:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003e64:	461a      	mov	r2, r3
 8003e66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f91b 	bl	80040a4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	b21b      	sxth	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f6ff ad17 	blt.w	80038ae <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3738      	adds	r7, #56	; 0x38
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b088      	sub	sp, #32
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	4613      	mov	r3, r2
 8003e96:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e98:	88fb      	ldrh	r3, [r7, #6]
 8003e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d07e      	beq.n	8003fa0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	461a      	mov	r2, r3
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	4413      	add	r3, r2
 8003eb6:	3302      	adds	r3, #2
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	6812      	ldr	r2, [r2, #0]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ec4:	881b      	ldrh	r3, [r3, #0]
 8003ec6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eca:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	699a      	ldr	r2, [r3, #24]
 8003ed0:	8b7b      	ldrh	r3, [r7, #26]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d306      	bcc.n	8003ee4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	699a      	ldr	r2, [r3, #24]
 8003eda:	8b7b      	ldrh	r3, [r7, #26]
 8003edc:	1ad2      	subs	r2, r2, r3
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	619a      	str	r2, [r3, #24]
 8003ee2:	e002      	b.n	8003eea <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d123      	bne.n	8003f3a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0c:	833b      	strh	r3, [r7, #24]
 8003f0e:	8b3b      	ldrh	r3, [r7, #24]
 8003f10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003f14:	833b      	strh	r3, [r7, #24]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	441a      	add	r2, r3
 8003f24:	8b3b      	ldrh	r3, [r7, #24]
 8003f26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003f3a:	88fb      	ldrh	r3, [r7, #6]
 8003f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d01f      	beq.n	8003f84 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5e:	82fb      	strh	r3, [r7, #22]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	461a      	mov	r2, r3
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	441a      	add	r2, r3
 8003f6e:	8afb      	ldrh	r3, [r7, #22]
 8003f70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003f84:	8b7b      	ldrh	r3, [r7, #26]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 8087 	beq.w	800409a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6818      	ldr	r0, [r3, #0]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	6959      	ldr	r1, [r3, #20]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	891a      	ldrh	r2, [r3, #8]
 8003f98:	8b7b      	ldrh	r3, [r7, #26]
 8003f9a:	f003 ff5a 	bl	8007e52 <USB_ReadPMA>
 8003f9e:	e07c      	b.n	800409a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	461a      	mov	r2, r3
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	4413      	add	r3, r2
 8003fb4:	3306      	adds	r3, #6
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	6812      	ldr	r2, [r2, #0]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fc8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	699a      	ldr	r2, [r3, #24]
 8003fce:	8b7b      	ldrh	r3, [r7, #26]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d306      	bcc.n	8003fe2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	699a      	ldr	r2, [r3, #24]
 8003fd8:	8b7b      	ldrh	r3, [r7, #26]
 8003fda:	1ad2      	subs	r2, r2, r3
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	619a      	str	r2, [r3, #24]
 8003fe0:	e002      	b.n	8003fe8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d123      	bne.n	8004038 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	b29b      	uxth	r3, r3
 8004002:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400a:	83fb      	strh	r3, [r7, #30]
 800400c:	8bfb      	ldrh	r3, [r7, #30]
 800400e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004012:	83fb      	strh	r3, [r7, #30]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	461a      	mov	r2, r3
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	441a      	add	r2, r3
 8004022:	8bfb      	ldrh	r3, [r7, #30]
 8004024:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004028:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800402c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004034:	b29b      	uxth	r3, r3
 8004036:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004038:	88fb      	ldrh	r3, [r7, #6]
 800403a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403e:	2b00      	cmp	r3, #0
 8004040:	d11f      	bne.n	8004082 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	461a      	mov	r2, r3
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	b29b      	uxth	r3, r3
 8004054:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800405c:	83bb      	strh	r3, [r7, #28]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	441a      	add	r2, r3
 800406c:	8bbb      	ldrh	r3, [r7, #28]
 800406e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800407a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800407e:	b29b      	uxth	r3, r3
 8004080:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004082:	8b7b      	ldrh	r3, [r7, #26]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d008      	beq.n	800409a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6818      	ldr	r0, [r3, #0]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	6959      	ldr	r1, [r3, #20]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	895a      	ldrh	r2, [r3, #10]
 8004094:	8b7b      	ldrh	r3, [r7, #26]
 8004096:	f003 fedc 	bl	8007e52 <USB_ReadPMA>
    }
  }

  return count;
 800409a:	8b7b      	ldrh	r3, [r7, #26]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3720      	adds	r7, #32
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b094      	sub	sp, #80	; 0x50
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	4613      	mov	r3, r2
 80040b0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80040b2:	88fb      	ldrh	r3, [r7, #6]
 80040b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 8138 	beq.w	800432e <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	461a      	mov	r2, r3
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	4413      	add	r3, r2
 80040d2:	3302      	adds	r3, #2
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	6812      	ldr	r2, [r2, #0]
 80040da:	4413      	add	r3, r2
 80040dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040e6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	699a      	ldr	r2, [r3, #24]
 80040ee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d907      	bls.n	8004106 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	699a      	ldr	r2, [r3, #24]
 80040fa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80040fe:	1ad2      	subs	r2, r2, r3
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	619a      	str	r2, [r3, #24]
 8004104:	e002      	b.n	800410c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	2200      	movs	r2, #0
 800410a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d12c      	bne.n	800416e <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	4619      	mov	r1, r3
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f7ff fb65 	bl	80037ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004120:	88fb      	ldrh	r3, [r7, #6]
 8004122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 823a 	beq.w	80045a0 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	461a      	mov	r2, r3
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	b29b      	uxth	r3, r3
 800413e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004146:	82fb      	strh	r3, [r7, #22]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	461a      	mov	r2, r3
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	441a      	add	r2, r3
 8004156:	8afb      	ldrh	r3, [r7, #22]
 8004158:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800415c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004160:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004168:	b29b      	uxth	r3, r3
 800416a:	8013      	strh	r3, [r2, #0]
 800416c:	e218      	b.n	80045a0 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d01f      	beq.n	80041b8 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	461a      	mov	r2, r3
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	b29b      	uxth	r3, r3
 800418a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800418e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004192:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	461a      	mov	r2, r3
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	441a      	add	r2, r3
 80041a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80041a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041be:	2b01      	cmp	r3, #1
 80041c0:	f040 81ee 	bne.w	80045a0 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	695a      	ldr	r2, [r3, #20]
 80041c8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80041cc:	441a      	add	r2, r3
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	69da      	ldr	r2, [r3, #28]
 80041d6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80041da:	441a      	add	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	6a1a      	ldr	r2, [r3, #32]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d309      	bcc.n	8004200 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	6a1a      	ldr	r2, [r3, #32]
 80041f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041f8:	1ad2      	subs	r2, r2, r3
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	621a      	str	r2, [r3, #32]
 80041fe:	e015      	b.n	800422c <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d107      	bne.n	8004218 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8004208:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800420c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004216:	e009      	b.n	800422c <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2200      	movs	r2, #0
 800422a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	785b      	ldrb	r3, [r3, #1]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d155      	bne.n	80042e0 <HAL_PCD_EP_DB_Transmit+0x23c>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	61fb      	str	r3, [r7, #28]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004242:	b29b      	uxth	r3, r3
 8004244:	461a      	mov	r2, r3
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	4413      	add	r3, r2
 800424a:	61fb      	str	r3, [r7, #28]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	011a      	lsls	r2, r3, #4
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	4413      	add	r3, r2
 8004256:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800425a:	61bb      	str	r3, [r7, #24]
 800425c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800425e:	2b00      	cmp	r3, #0
 8004260:	d112      	bne.n	8004288 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	b29b      	uxth	r3, r3
 8004268:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800426c:	b29a      	uxth	r2, r3
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	801a      	strh	r2, [r3, #0]
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	b29b      	uxth	r3, r3
 8004278:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800427c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004280:	b29a      	uxth	r2, r3
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	801a      	strh	r2, [r3, #0]
 8004286:	e047      	b.n	8004318 <HAL_PCD_EP_DB_Transmit+0x274>
 8004288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800428a:	2b3e      	cmp	r3, #62	; 0x3e
 800428c:	d811      	bhi.n	80042b2 <HAL_PCD_EP_DB_Transmit+0x20e>
 800428e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004290:	085b      	lsrs	r3, r3, #1
 8004292:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <HAL_PCD_EP_DB_Transmit+0x200>
 800429e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a0:	3301      	adds	r3, #1
 80042a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	029b      	lsls	r3, r3, #10
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	801a      	strh	r2, [r3, #0]
 80042b0:	e032      	b.n	8004318 <HAL_PCD_EP_DB_Transmit+0x274>
 80042b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042b4:	095b      	lsrs	r3, r3, #5
 80042b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ba:	f003 031f 	and.w	r3, r3, #31
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d102      	bne.n	80042c8 <HAL_PCD_EP_DB_Transmit+0x224>
 80042c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c4:	3b01      	subs	r3, #1
 80042c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	029b      	lsls	r3, r3, #10
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042d8:	b29a      	uxth	r2, r3
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	801a      	strh	r2, [r3, #0]
 80042de:	e01b      	b.n	8004318 <HAL_PCD_EP_DB_Transmit+0x274>
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	785b      	ldrb	r3, [r3, #1]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d117      	bne.n	8004318 <HAL_PCD_EP_DB_Transmit+0x274>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	627b      	str	r3, [r7, #36]	; 0x24
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	461a      	mov	r2, r3
 80042fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fc:	4413      	add	r3, r2
 80042fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	011a      	lsls	r2, r3, #4
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	4413      	add	r3, r2
 800430a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800430e:	623b      	str	r3, [r7, #32]
 8004310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004312:	b29a      	uxth	r2, r3
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6818      	ldr	r0, [r3, #0]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	6959      	ldr	r1, [r3, #20]
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	891a      	ldrh	r2, [r3, #8]
 8004324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004326:	b29b      	uxth	r3, r3
 8004328:	f003 fd4e 	bl	8007dc8 <USB_WritePMA>
 800432c:	e138      	b.n	80045a0 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004336:	b29b      	uxth	r3, r3
 8004338:	461a      	mov	r2, r3
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	4413      	add	r3, r2
 8004342:	3306      	adds	r3, #6
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	6812      	ldr	r2, [r2, #0]
 800434a:	4413      	add	r3, r2
 800434c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004356:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	699a      	ldr	r2, [r3, #24]
 800435e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004362:	429a      	cmp	r2, r3
 8004364:	d307      	bcc.n	8004376 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	699a      	ldr	r2, [r3, #24]
 800436a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800436e:	1ad2      	subs	r2, r2, r3
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	619a      	str	r2, [r3, #24]
 8004374:	e002      	b.n	800437c <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2200      	movs	r2, #0
 800437a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d12e      	bne.n	80043e2 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	4619      	mov	r1, r3
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f7ff fa2d 	bl	80037ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004390:	88fb      	ldrh	r3, [r7, #6]
 8004392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004396:	2b00      	cmp	r3, #0
 8004398:	f040 8102 	bne.w	80045a0 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	461a      	mov	r2, r3
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	461a      	mov	r2, r3
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	441a      	add	r2, r3
 80043c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80043cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043dc:	b29b      	uxth	r3, r3
 80043de:	8013      	strh	r3, [r2, #0]
 80043e0:	e0de      	b.n	80045a0 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80043e2:	88fb      	ldrh	r3, [r7, #6]
 80043e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d11f      	bne.n	800442c <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	461a      	mov	r2, r3
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004406:	867b      	strh	r3, [r7, #50]	; 0x32
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	461a      	mov	r2, r3
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	441a      	add	r2, r3
 8004416:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004418:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800441c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004420:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004428:	b29b      	uxth	r3, r3
 800442a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004432:	2b01      	cmp	r3, #1
 8004434:	f040 80b4 	bne.w	80045a0 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	695a      	ldr	r2, [r3, #20]
 800443c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004440:	441a      	add	r2, r3
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	69da      	ldr	r2, [r3, #28]
 800444a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800444e:	441a      	add	r2, r3
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	6a1a      	ldr	r2, [r3, #32]
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	429a      	cmp	r2, r3
 800445e:	d309      	bcc.n	8004474 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	6a1a      	ldr	r2, [r3, #32]
 800446a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800446c:	1ad2      	subs	r2, r2, r3
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	621a      	str	r2, [r3, #32]
 8004472:	e015      	b.n	80044a0 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d107      	bne.n	800448c <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 800447c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004480:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800448a:	e009      	b.n	80044a0 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2200      	movs	r2, #0
 8004496:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	643b      	str	r3, [r7, #64]	; 0x40
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	785b      	ldrb	r3, [r3, #1]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d155      	bne.n	800455a <HAL_PCD_EP_DB_Transmit+0x4b6>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044bc:	b29b      	uxth	r3, r3
 80044be:	461a      	mov	r2, r3
 80044c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c2:	4413      	add	r3, r2
 80044c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	011a      	lsls	r2, r3, #4
 80044cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ce:	4413      	add	r3, r2
 80044d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044d4:	637b      	str	r3, [r7, #52]	; 0x34
 80044d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d112      	bne.n	8004502 <HAL_PCD_EP_DB_Transmit+0x45e>
 80044dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044de:	881b      	ldrh	r3, [r3, #0]
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ea:	801a      	strh	r2, [r3, #0]
 80044ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ee:	881b      	ldrh	r3, [r3, #0]
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044fe:	801a      	strh	r2, [r3, #0]
 8004500:	e044      	b.n	800458c <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004502:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004504:	2b3e      	cmp	r3, #62	; 0x3e
 8004506:	d811      	bhi.n	800452c <HAL_PCD_EP_DB_Transmit+0x488>
 8004508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800450a:	085b      	lsrs	r3, r3, #1
 800450c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800450e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b00      	cmp	r3, #0
 8004516:	d002      	beq.n	800451e <HAL_PCD_EP_DB_Transmit+0x47a>
 8004518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800451a:	3301      	adds	r3, #1
 800451c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800451e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004520:	b29b      	uxth	r3, r3
 8004522:	029b      	lsls	r3, r3, #10
 8004524:	b29a      	uxth	r2, r3
 8004526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004528:	801a      	strh	r2, [r3, #0]
 800452a:	e02f      	b.n	800458c <HAL_PCD_EP_DB_Transmit+0x4e8>
 800452c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004534:	f003 031f 	and.w	r3, r3, #31
 8004538:	2b00      	cmp	r3, #0
 800453a:	d102      	bne.n	8004542 <HAL_PCD_EP_DB_Transmit+0x49e>
 800453c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800453e:	3b01      	subs	r3, #1
 8004540:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004544:	b29b      	uxth	r3, r3
 8004546:	029b      	lsls	r3, r3, #10
 8004548:	b29b      	uxth	r3, r3
 800454a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800454e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004552:	b29a      	uxth	r2, r3
 8004554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004556:	801a      	strh	r2, [r3, #0]
 8004558:	e018      	b.n	800458c <HAL_PCD_EP_DB_Transmit+0x4e8>
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	785b      	ldrb	r3, [r3, #1]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d114      	bne.n	800458c <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800456a:	b29b      	uxth	r3, r3
 800456c:	461a      	mov	r2, r3
 800456e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004570:	4413      	add	r3, r2
 8004572:	643b      	str	r3, [r7, #64]	; 0x40
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	011a      	lsls	r2, r3, #4
 800457a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800457c:	4413      	add	r3, r2
 800457e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004582:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004586:	b29a      	uxth	r2, r3
 8004588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800458a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6818      	ldr	r0, [r3, #0]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	6959      	ldr	r1, [r3, #20]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	895a      	ldrh	r2, [r3, #10]
 8004598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800459a:	b29b      	uxth	r3, r3
 800459c:	f003 fc14 	bl	8007dc8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	461a      	mov	r2, r3
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4413      	add	r3, r2
 80045ae:	881b      	ldrh	r3, [r3, #0]
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ba:	82bb      	strh	r3, [r7, #20]
 80045bc:	8abb      	ldrh	r3, [r7, #20]
 80045be:	f083 0310 	eor.w	r3, r3, #16
 80045c2:	82bb      	strh	r3, [r7, #20]
 80045c4:	8abb      	ldrh	r3, [r7, #20]
 80045c6:	f083 0320 	eor.w	r3, r3, #32
 80045ca:	82bb      	strh	r3, [r7, #20]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	461a      	mov	r2, r3
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	441a      	add	r2, r3
 80045da:	8abb      	ldrh	r3, [r7, #20]
 80045dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3750      	adds	r7, #80	; 0x50
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
	...

080045fc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004600:	4b03      	ldr	r3, [pc, #12]	; (8004610 <HAL_PWR_EnableBkUpAccess+0x14>)
 8004602:	2201      	movs	r2, #1
 8004604:	601a      	str	r2, [r3, #0]
}
 8004606:	bf00      	nop
 8004608:	46bd      	mov	sp, r7
 800460a:	bc80      	pop	{r7}
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	420e0020 	.word	0x420e0020

08004614 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8004618:	4b06      	ldr	r3, [pc, #24]	; (8004634 <HAL_PWR_PVD_IRQHandler+0x20>)
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d005      	beq.n	8004630 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8004624:	f000 f808 	bl	8004638 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8004628:	4b02      	ldr	r3, [pc, #8]	; (8004634 <HAL_PWR_PVD_IRQHandler+0x20>)
 800462a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800462e:	615a      	str	r2, [r3, #20]
  }
}
 8004630:	bf00      	nop
 8004632:	bd80      	pop	{r7, pc}
 8004634:	40010400 	.word	0x40010400

08004638 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 800463c:	bf00      	nop
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr

08004644 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e26c      	b.n	8004b30 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 8087 	beq.w	8004772 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004664:	4b92      	ldr	r3, [pc, #584]	; (80048b0 <HAL_RCC_OscConfig+0x26c>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f003 030c 	and.w	r3, r3, #12
 800466c:	2b04      	cmp	r3, #4
 800466e:	d00c      	beq.n	800468a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004670:	4b8f      	ldr	r3, [pc, #572]	; (80048b0 <HAL_RCC_OscConfig+0x26c>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f003 030c 	and.w	r3, r3, #12
 8004678:	2b08      	cmp	r3, #8
 800467a:	d112      	bne.n	80046a2 <HAL_RCC_OscConfig+0x5e>
 800467c:	4b8c      	ldr	r3, [pc, #560]	; (80048b0 <HAL_RCC_OscConfig+0x26c>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004688:	d10b      	bne.n	80046a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800468a:	4b89      	ldr	r3, [pc, #548]	; (80048b0 <HAL_RCC_OscConfig+0x26c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d06c      	beq.n	8004770 <HAL_RCC_OscConfig+0x12c>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d168      	bne.n	8004770 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e246      	b.n	8004b30 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046aa:	d106      	bne.n	80046ba <HAL_RCC_OscConfig+0x76>
 80046ac:	4b80      	ldr	r3, [pc, #512]	; (80048b0 <HAL_RCC_OscConfig+0x26c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a7f      	ldr	r2, [pc, #508]	; (80048b0 <HAL_RCC_OscConfig+0x26c>)
 80046b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b6:	6013      	str	r3, [r2, #0]
 80046b8:	e02e      	b.n	8004718 <HAL_RCC_OscConfig+0xd4>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10c      	bne.n	80046dc <HAL_RCC_OscConfig+0x98>
 80046c2:	4b7b      	ldr	r3, [pc, #492]	; (80048b0 <HAL_RCC_OscConfig+0x26c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a7a      	ldr	r2, [pc, #488]	; (80048b0 <HAL_RCC_OscConfig+0x26c>)
 80046c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046cc:	6013      	str	r3, [r2, #0]
 80046ce:	4b78      	ldr	r3, [pc, #480]	; (80048b0 <HAL_RCC_OscConfig+0x26c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a77      	ldr	r2, [pc, #476]	; (80048b0 <HAL_RCC_OscConfig+0x26c>)
 80046d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	e01d      	b.n	8004718 <HAL_RCC_OscConfig+0xd4>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046e4:	d10c      	bne.n	8004700 <HAL_RCC_OscConfig+0xbc>
 80046e6:	4b72      	ldr	r3, [pc, #456]	; (80048b0 <HAL_RCC_OscConfig+0x26c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a71      	ldr	r2, [pc, #452]	; (80048b0 <HAL_RCC_OscConfig+0x26c>)
 80046ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046f0:	6013      	str	r3, [r2, #0]
 80046f2:	4b6f      	ldr	r3, [pc, #444]	; (80048b0 <HAL_RCC_OscConfig+0x26c>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a6e      	ldr	r2, [pc, #440]	; (80048b0 <HAL_RCC_OscConfig+0x26c>)
 80046f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046fc:	6013      	str	r3, [r2, #0]
 80046fe:	e00b      	b.n	8004718 <HAL_RCC_OscConfig+0xd4>
 8004700:	4b6b      	ldr	r3, [pc, #428]	; (80048b0 <HAL_RCC_OscConfig+0x26c>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a6a      	ldr	r2, [pc, #424]	; (80048b0 <HAL_RCC_OscConfig+0x26c>)
 8004706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800470a:	6013      	str	r3, [r2, #0]
 800470c:	4b68      	ldr	r3, [pc, #416]	; (80048b0 <HAL_RCC_OscConfig+0x26c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a67      	ldr	r2, [pc, #412]	; (80048b0 <HAL_RCC_OscConfig+0x26c>)
 8004712:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004716:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d013      	beq.n	8004748 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004720:	f7fd ffc8 	bl	80026b4 <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004728:	f7fd ffc4 	bl	80026b4 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b64      	cmp	r3, #100	; 0x64
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e1fa      	b.n	8004b30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800473a:	4b5d      	ldr	r3, [pc, #372]	; (80048b0 <HAL_RCC_OscConfig+0x26c>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0f0      	beq.n	8004728 <HAL_RCC_OscConfig+0xe4>
 8004746:	e014      	b.n	8004772 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004748:	f7fd ffb4 	bl	80026b4 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004750:	f7fd ffb0 	bl	80026b4 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b64      	cmp	r3, #100	; 0x64
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e1e6      	b.n	8004b30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004762:	4b53      	ldr	r3, [pc, #332]	; (80048b0 <HAL_RCC_OscConfig+0x26c>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1f0      	bne.n	8004750 <HAL_RCC_OscConfig+0x10c>
 800476e:	e000      	b.n	8004772 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d063      	beq.n	8004846 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800477e:	4b4c      	ldr	r3, [pc, #304]	; (80048b0 <HAL_RCC_OscConfig+0x26c>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f003 030c 	and.w	r3, r3, #12
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00b      	beq.n	80047a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800478a:	4b49      	ldr	r3, [pc, #292]	; (80048b0 <HAL_RCC_OscConfig+0x26c>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f003 030c 	and.w	r3, r3, #12
 8004792:	2b08      	cmp	r3, #8
 8004794:	d11c      	bne.n	80047d0 <HAL_RCC_OscConfig+0x18c>
 8004796:	4b46      	ldr	r3, [pc, #280]	; (80048b0 <HAL_RCC_OscConfig+0x26c>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d116      	bne.n	80047d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047a2:	4b43      	ldr	r3, [pc, #268]	; (80048b0 <HAL_RCC_OscConfig+0x26c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d005      	beq.n	80047ba <HAL_RCC_OscConfig+0x176>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d001      	beq.n	80047ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e1ba      	b.n	8004b30 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ba:	4b3d      	ldr	r3, [pc, #244]	; (80048b0 <HAL_RCC_OscConfig+0x26c>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	00db      	lsls	r3, r3, #3
 80047c8:	4939      	ldr	r1, [pc, #228]	; (80048b0 <HAL_RCC_OscConfig+0x26c>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ce:	e03a      	b.n	8004846 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d020      	beq.n	800481a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047d8:	4b36      	ldr	r3, [pc, #216]	; (80048b4 <HAL_RCC_OscConfig+0x270>)
 80047da:	2201      	movs	r2, #1
 80047dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047de:	f7fd ff69 	bl	80026b4 <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e4:	e008      	b.n	80047f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047e6:	f7fd ff65 	bl	80026b4 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e19b      	b.n	8004b30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f8:	4b2d      	ldr	r3, [pc, #180]	; (80048b0 <HAL_RCC_OscConfig+0x26c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0f0      	beq.n	80047e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004804:	4b2a      	ldr	r3, [pc, #168]	; (80048b0 <HAL_RCC_OscConfig+0x26c>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	4927      	ldr	r1, [pc, #156]	; (80048b0 <HAL_RCC_OscConfig+0x26c>)
 8004814:	4313      	orrs	r3, r2
 8004816:	600b      	str	r3, [r1, #0]
 8004818:	e015      	b.n	8004846 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800481a:	4b26      	ldr	r3, [pc, #152]	; (80048b4 <HAL_RCC_OscConfig+0x270>)
 800481c:	2200      	movs	r2, #0
 800481e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004820:	f7fd ff48 	bl	80026b4 <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004828:	f7fd ff44 	bl	80026b4 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e17a      	b.n	8004b30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800483a:	4b1d      	ldr	r3, [pc, #116]	; (80048b0 <HAL_RCC_OscConfig+0x26c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1f0      	bne.n	8004828 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0308 	and.w	r3, r3, #8
 800484e:	2b00      	cmp	r3, #0
 8004850:	d03a      	beq.n	80048c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d019      	beq.n	800488e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800485a:	4b17      	ldr	r3, [pc, #92]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 800485c:	2201      	movs	r2, #1
 800485e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004860:	f7fd ff28 	bl	80026b4 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004868:	f7fd ff24 	bl	80026b4 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e15a      	b.n	8004b30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800487a:	4b0d      	ldr	r3, [pc, #52]	; (80048b0 <HAL_RCC_OscConfig+0x26c>)
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0f0      	beq.n	8004868 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004886:	2001      	movs	r0, #1
 8004888:	f000 fad8 	bl	8004e3c <RCC_Delay>
 800488c:	e01c      	b.n	80048c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800488e:	4b0a      	ldr	r3, [pc, #40]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 8004890:	2200      	movs	r2, #0
 8004892:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004894:	f7fd ff0e 	bl	80026b4 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800489a:	e00f      	b.n	80048bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800489c:	f7fd ff0a 	bl	80026b4 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d908      	bls.n	80048bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e140      	b.n	8004b30 <HAL_RCC_OscConfig+0x4ec>
 80048ae:	bf00      	nop
 80048b0:	40021000 	.word	0x40021000
 80048b4:	42420000 	.word	0x42420000
 80048b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048bc:	4b9e      	ldr	r3, [pc, #632]	; (8004b38 <HAL_RCC_OscConfig+0x4f4>)
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1e9      	bne.n	800489c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 80a6 	beq.w	8004a22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048d6:	2300      	movs	r3, #0
 80048d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048da:	4b97      	ldr	r3, [pc, #604]	; (8004b38 <HAL_RCC_OscConfig+0x4f4>)
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10d      	bne.n	8004902 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048e6:	4b94      	ldr	r3, [pc, #592]	; (8004b38 <HAL_RCC_OscConfig+0x4f4>)
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	4a93      	ldr	r2, [pc, #588]	; (8004b38 <HAL_RCC_OscConfig+0x4f4>)
 80048ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048f0:	61d3      	str	r3, [r2, #28]
 80048f2:	4b91      	ldr	r3, [pc, #580]	; (8004b38 <HAL_RCC_OscConfig+0x4f4>)
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048fa:	60bb      	str	r3, [r7, #8]
 80048fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048fe:	2301      	movs	r3, #1
 8004900:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004902:	4b8e      	ldr	r3, [pc, #568]	; (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490a:	2b00      	cmp	r3, #0
 800490c:	d118      	bne.n	8004940 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800490e:	4b8b      	ldr	r3, [pc, #556]	; (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a8a      	ldr	r2, [pc, #552]	; (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 8004914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800491a:	f7fd fecb 	bl	80026b4 <HAL_GetTick>
 800491e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004920:	e008      	b.n	8004934 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004922:	f7fd fec7 	bl	80026b4 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b64      	cmp	r3, #100	; 0x64
 800492e:	d901      	bls.n	8004934 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e0fd      	b.n	8004b30 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004934:	4b81      	ldr	r3, [pc, #516]	; (8004b3c <HAL_RCC_OscConfig+0x4f8>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493c:	2b00      	cmp	r3, #0
 800493e:	d0f0      	beq.n	8004922 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d106      	bne.n	8004956 <HAL_RCC_OscConfig+0x312>
 8004948:	4b7b      	ldr	r3, [pc, #492]	; (8004b38 <HAL_RCC_OscConfig+0x4f4>)
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	4a7a      	ldr	r2, [pc, #488]	; (8004b38 <HAL_RCC_OscConfig+0x4f4>)
 800494e:	f043 0301 	orr.w	r3, r3, #1
 8004952:	6213      	str	r3, [r2, #32]
 8004954:	e02d      	b.n	80049b2 <HAL_RCC_OscConfig+0x36e>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10c      	bne.n	8004978 <HAL_RCC_OscConfig+0x334>
 800495e:	4b76      	ldr	r3, [pc, #472]	; (8004b38 <HAL_RCC_OscConfig+0x4f4>)
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	4a75      	ldr	r2, [pc, #468]	; (8004b38 <HAL_RCC_OscConfig+0x4f4>)
 8004964:	f023 0301 	bic.w	r3, r3, #1
 8004968:	6213      	str	r3, [r2, #32]
 800496a:	4b73      	ldr	r3, [pc, #460]	; (8004b38 <HAL_RCC_OscConfig+0x4f4>)
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	4a72      	ldr	r2, [pc, #456]	; (8004b38 <HAL_RCC_OscConfig+0x4f4>)
 8004970:	f023 0304 	bic.w	r3, r3, #4
 8004974:	6213      	str	r3, [r2, #32]
 8004976:	e01c      	b.n	80049b2 <HAL_RCC_OscConfig+0x36e>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	2b05      	cmp	r3, #5
 800497e:	d10c      	bne.n	800499a <HAL_RCC_OscConfig+0x356>
 8004980:	4b6d      	ldr	r3, [pc, #436]	; (8004b38 <HAL_RCC_OscConfig+0x4f4>)
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	4a6c      	ldr	r2, [pc, #432]	; (8004b38 <HAL_RCC_OscConfig+0x4f4>)
 8004986:	f043 0304 	orr.w	r3, r3, #4
 800498a:	6213      	str	r3, [r2, #32]
 800498c:	4b6a      	ldr	r3, [pc, #424]	; (8004b38 <HAL_RCC_OscConfig+0x4f4>)
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	4a69      	ldr	r2, [pc, #420]	; (8004b38 <HAL_RCC_OscConfig+0x4f4>)
 8004992:	f043 0301 	orr.w	r3, r3, #1
 8004996:	6213      	str	r3, [r2, #32]
 8004998:	e00b      	b.n	80049b2 <HAL_RCC_OscConfig+0x36e>
 800499a:	4b67      	ldr	r3, [pc, #412]	; (8004b38 <HAL_RCC_OscConfig+0x4f4>)
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	4a66      	ldr	r2, [pc, #408]	; (8004b38 <HAL_RCC_OscConfig+0x4f4>)
 80049a0:	f023 0301 	bic.w	r3, r3, #1
 80049a4:	6213      	str	r3, [r2, #32]
 80049a6:	4b64      	ldr	r3, [pc, #400]	; (8004b38 <HAL_RCC_OscConfig+0x4f4>)
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	4a63      	ldr	r2, [pc, #396]	; (8004b38 <HAL_RCC_OscConfig+0x4f4>)
 80049ac:	f023 0304 	bic.w	r3, r3, #4
 80049b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d015      	beq.n	80049e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ba:	f7fd fe7b 	bl	80026b4 <HAL_GetTick>
 80049be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049c0:	e00a      	b.n	80049d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049c2:	f7fd fe77 	bl	80026b4 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d901      	bls.n	80049d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e0ab      	b.n	8004b30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d8:	4b57      	ldr	r3, [pc, #348]	; (8004b38 <HAL_RCC_OscConfig+0x4f4>)
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0ee      	beq.n	80049c2 <HAL_RCC_OscConfig+0x37e>
 80049e4:	e014      	b.n	8004a10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049e6:	f7fd fe65 	bl	80026b4 <HAL_GetTick>
 80049ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ec:	e00a      	b.n	8004a04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ee:	f7fd fe61 	bl	80026b4 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d901      	bls.n	8004a04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e095      	b.n	8004b30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a04:	4b4c      	ldr	r3, [pc, #304]	; (8004b38 <HAL_RCC_OscConfig+0x4f4>)
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1ee      	bne.n	80049ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a10:	7dfb      	ldrb	r3, [r7, #23]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d105      	bne.n	8004a22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a16:	4b48      	ldr	r3, [pc, #288]	; (8004b38 <HAL_RCC_OscConfig+0x4f4>)
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	4a47      	ldr	r2, [pc, #284]	; (8004b38 <HAL_RCC_OscConfig+0x4f4>)
 8004a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 8081 	beq.w	8004b2e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a2c:	4b42      	ldr	r3, [pc, #264]	; (8004b38 <HAL_RCC_OscConfig+0x4f4>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f003 030c 	and.w	r3, r3, #12
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d061      	beq.n	8004afc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d146      	bne.n	8004ace <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a40:	4b3f      	ldr	r3, [pc, #252]	; (8004b40 <HAL_RCC_OscConfig+0x4fc>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a46:	f7fd fe35 	bl	80026b4 <HAL_GetTick>
 8004a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a4c:	e008      	b.n	8004a60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a4e:	f7fd fe31 	bl	80026b4 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e067      	b.n	8004b30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a60:	4b35      	ldr	r3, [pc, #212]	; (8004b38 <HAL_RCC_OscConfig+0x4f4>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1f0      	bne.n	8004a4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a74:	d108      	bne.n	8004a88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a76:	4b30      	ldr	r3, [pc, #192]	; (8004b38 <HAL_RCC_OscConfig+0x4f4>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	492d      	ldr	r1, [pc, #180]	; (8004b38 <HAL_RCC_OscConfig+0x4f4>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a88:	4b2b      	ldr	r3, [pc, #172]	; (8004b38 <HAL_RCC_OscConfig+0x4f4>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a19      	ldr	r1, [r3, #32]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a98:	430b      	orrs	r3, r1
 8004a9a:	4927      	ldr	r1, [pc, #156]	; (8004b38 <HAL_RCC_OscConfig+0x4f4>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004aa0:	4b27      	ldr	r3, [pc, #156]	; (8004b40 <HAL_RCC_OscConfig+0x4fc>)
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa6:	f7fd fe05 	bl	80026b4 <HAL_GetTick>
 8004aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004aac:	e008      	b.n	8004ac0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aae:	f7fd fe01 	bl	80026b4 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e037      	b.n	8004b30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ac0:	4b1d      	ldr	r3, [pc, #116]	; (8004b38 <HAL_RCC_OscConfig+0x4f4>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d0f0      	beq.n	8004aae <HAL_RCC_OscConfig+0x46a>
 8004acc:	e02f      	b.n	8004b2e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ace:	4b1c      	ldr	r3, [pc, #112]	; (8004b40 <HAL_RCC_OscConfig+0x4fc>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad4:	f7fd fdee 	bl	80026b4 <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004adc:	f7fd fdea 	bl	80026b4 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e020      	b.n	8004b30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aee:	4b12      	ldr	r3, [pc, #72]	; (8004b38 <HAL_RCC_OscConfig+0x4f4>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1f0      	bne.n	8004adc <HAL_RCC_OscConfig+0x498>
 8004afa:	e018      	b.n	8004b2e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d101      	bne.n	8004b08 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e013      	b.n	8004b30 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b08:	4b0b      	ldr	r3, [pc, #44]	; (8004b38 <HAL_RCC_OscConfig+0x4f4>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d106      	bne.n	8004b2a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d001      	beq.n	8004b2e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e000      	b.n	8004b30 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3718      	adds	r7, #24
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	40021000 	.word	0x40021000
 8004b3c:	40007000 	.word	0x40007000
 8004b40:	42420060 	.word	0x42420060

08004b44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e0d0      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b58:	4b6a      	ldr	r3, [pc, #424]	; (8004d04 <HAL_RCC_ClockConfig+0x1c0>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0307 	and.w	r3, r3, #7
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d910      	bls.n	8004b88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b66:	4b67      	ldr	r3, [pc, #412]	; (8004d04 <HAL_RCC_ClockConfig+0x1c0>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f023 0207 	bic.w	r2, r3, #7
 8004b6e:	4965      	ldr	r1, [pc, #404]	; (8004d04 <HAL_RCC_ClockConfig+0x1c0>)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b76:	4b63      	ldr	r3, [pc, #396]	; (8004d04 <HAL_RCC_ClockConfig+0x1c0>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d001      	beq.n	8004b88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e0b8      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d020      	beq.n	8004bd6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d005      	beq.n	8004bac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ba0:	4b59      	ldr	r3, [pc, #356]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	4a58      	ldr	r2, [pc, #352]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004baa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0308 	and.w	r3, r3, #8
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d005      	beq.n	8004bc4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bb8:	4b53      	ldr	r3, [pc, #332]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	4a52      	ldr	r2, [pc, #328]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004bbe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004bc2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bc4:	4b50      	ldr	r3, [pc, #320]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	494d      	ldr	r1, [pc, #308]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d040      	beq.n	8004c64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d107      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bea:	4b47      	ldr	r3, [pc, #284]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d115      	bne.n	8004c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e07f      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d107      	bne.n	8004c12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c02:	4b41      	ldr	r3, [pc, #260]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d109      	bne.n	8004c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e073      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c12:	4b3d      	ldr	r3, [pc, #244]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e06b      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c22:	4b39      	ldr	r3, [pc, #228]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f023 0203 	bic.w	r2, r3, #3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	4936      	ldr	r1, [pc, #216]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c34:	f7fd fd3e 	bl	80026b4 <HAL_GetTick>
 8004c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c3a:	e00a      	b.n	8004c52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c3c:	f7fd fd3a 	bl	80026b4 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e053      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c52:	4b2d      	ldr	r3, [pc, #180]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f003 020c 	and.w	r2, r3, #12
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d1eb      	bne.n	8004c3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c64:	4b27      	ldr	r3, [pc, #156]	; (8004d04 <HAL_RCC_ClockConfig+0x1c0>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d210      	bcs.n	8004c94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c72:	4b24      	ldr	r3, [pc, #144]	; (8004d04 <HAL_RCC_ClockConfig+0x1c0>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f023 0207 	bic.w	r2, r3, #7
 8004c7a:	4922      	ldr	r1, [pc, #136]	; (8004d04 <HAL_RCC_ClockConfig+0x1c0>)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c82:	4b20      	ldr	r3, [pc, #128]	; (8004d04 <HAL_RCC_ClockConfig+0x1c0>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0307 	and.w	r3, r3, #7
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d001      	beq.n	8004c94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e032      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d008      	beq.n	8004cb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ca0:	4b19      	ldr	r3, [pc, #100]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	4916      	ldr	r1, [pc, #88]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0308 	and.w	r3, r3, #8
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d009      	beq.n	8004cd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004cbe:	4b12      	ldr	r3, [pc, #72]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	490e      	ldr	r1, [pc, #56]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004cd2:	f000 f821 	bl	8004d18 <HAL_RCC_GetSysClockFreq>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	4b0b      	ldr	r3, [pc, #44]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	091b      	lsrs	r3, r3, #4
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	490a      	ldr	r1, [pc, #40]	; (8004d0c <HAL_RCC_ClockConfig+0x1c8>)
 8004ce4:	5ccb      	ldrb	r3, [r1, r3]
 8004ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cea:	4a09      	ldr	r2, [pc, #36]	; (8004d10 <HAL_RCC_ClockConfig+0x1cc>)
 8004cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004cee:	4b09      	ldr	r3, [pc, #36]	; (8004d14 <HAL_RCC_ClockConfig+0x1d0>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7fd fc9c 	bl	8002630 <HAL_InitTick>

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	40022000 	.word	0x40022000
 8004d08:	40021000 	.word	0x40021000
 8004d0c:	0800c818 	.word	0x0800c818
 8004d10:	20000048 	.word	0x20000048
 8004d14:	2000004c 	.word	0x2000004c

08004d18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d18:	b490      	push	{r4, r7}
 8004d1a:	b08a      	sub	sp, #40	; 0x28
 8004d1c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004d1e:	4b2a      	ldr	r3, [pc, #168]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004d20:	1d3c      	adds	r4, r7, #4
 8004d22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004d28:	f240 2301 	movw	r3, #513	; 0x201
 8004d2c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	61fb      	str	r3, [r7, #28]
 8004d32:	2300      	movs	r3, #0
 8004d34:	61bb      	str	r3, [r7, #24]
 8004d36:	2300      	movs	r3, #0
 8004d38:	627b      	str	r3, [r7, #36]	; 0x24
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004d42:	4b22      	ldr	r3, [pc, #136]	; (8004dcc <HAL_RCC_GetSysClockFreq+0xb4>)
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	f003 030c 	and.w	r3, r3, #12
 8004d4e:	2b04      	cmp	r3, #4
 8004d50:	d002      	beq.n	8004d58 <HAL_RCC_GetSysClockFreq+0x40>
 8004d52:	2b08      	cmp	r3, #8
 8004d54:	d003      	beq.n	8004d5e <HAL_RCC_GetSysClockFreq+0x46>
 8004d56:	e02d      	b.n	8004db4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d58:	4b1d      	ldr	r3, [pc, #116]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d5a:	623b      	str	r3, [r7, #32]
      break;
 8004d5c:	e02d      	b.n	8004dba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	0c9b      	lsrs	r3, r3, #18
 8004d62:	f003 030f 	and.w	r3, r3, #15
 8004d66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004d70:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d013      	beq.n	8004da4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d7c:	4b13      	ldr	r3, [pc, #76]	; (8004dcc <HAL_RCC_GetSysClockFreq+0xb4>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	0c5b      	lsrs	r3, r3, #17
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004d90:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	4a0e      	ldr	r2, [pc, #56]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d96:	fb02 f203 	mul.w	r2, r2, r3
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da0:	627b      	str	r3, [r7, #36]	; 0x24
 8004da2:	e004      	b.n	8004dae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	4a0b      	ldr	r2, [pc, #44]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004da8:	fb02 f303 	mul.w	r3, r2, r3
 8004dac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	623b      	str	r3, [r7, #32]
      break;
 8004db2:	e002      	b.n	8004dba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004db4:	4b06      	ldr	r3, [pc, #24]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004db6:	623b      	str	r3, [r7, #32]
      break;
 8004db8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dba:	6a3b      	ldr	r3, [r7, #32]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3728      	adds	r7, #40	; 0x28
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bc90      	pop	{r4, r7}
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	0800c7f8 	.word	0x0800c7f8
 8004dcc:	40021000 	.word	0x40021000
 8004dd0:	007a1200 	.word	0x007a1200
 8004dd4:	003d0900 	.word	0x003d0900

08004dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ddc:	4b02      	ldr	r3, [pc, #8]	; (8004de8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004dde:	681b      	ldr	r3, [r3, #0]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bc80      	pop	{r7}
 8004de6:	4770      	bx	lr
 8004de8:	20000048 	.word	0x20000048

08004dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004df0:	f7ff fff2 	bl	8004dd8 <HAL_RCC_GetHCLKFreq>
 8004df4:	4602      	mov	r2, r0
 8004df6:	4b05      	ldr	r3, [pc, #20]	; (8004e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	0a1b      	lsrs	r3, r3, #8
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	4903      	ldr	r1, [pc, #12]	; (8004e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e02:	5ccb      	ldrb	r3, [r1, r3]
 8004e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	40021000 	.word	0x40021000
 8004e10:	0800c828 	.word	0x0800c828

08004e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e18:	f7ff ffde 	bl	8004dd8 <HAL_RCC_GetHCLKFreq>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	4b05      	ldr	r3, [pc, #20]	; (8004e34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	0adb      	lsrs	r3, r3, #11
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	4903      	ldr	r1, [pc, #12]	; (8004e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e2a:	5ccb      	ldrb	r3, [r1, r3]
 8004e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	40021000 	.word	0x40021000
 8004e38:	0800c828 	.word	0x0800c828

08004e3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004e44:	4b0a      	ldr	r3, [pc, #40]	; (8004e70 <RCC_Delay+0x34>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a0a      	ldr	r2, [pc, #40]	; (8004e74 <RCC_Delay+0x38>)
 8004e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4e:	0a5b      	lsrs	r3, r3, #9
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	fb02 f303 	mul.w	r3, r2, r3
 8004e56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004e58:	bf00      	nop
  }
  while (Delay --);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	1e5a      	subs	r2, r3, #1
 8004e5e:	60fa      	str	r2, [r7, #12]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1f9      	bne.n	8004e58 <RCC_Delay+0x1c>
}
 8004e64:	bf00      	nop
 8004e66:	bf00      	nop
 8004e68:	3714      	adds	r7, #20
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bc80      	pop	{r7}
 8004e6e:	4770      	bx	lr
 8004e70:	20000048 	.word	0x20000048
 8004e74:	10624dd3 	.word	0x10624dd3

08004e78 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	613b      	str	r3, [r7, #16]
 8004e84:	2300      	movs	r3, #0
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d07d      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004e94:	2300      	movs	r3, #0
 8004e96:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e98:	4b4f      	ldr	r3, [pc, #316]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10d      	bne.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ea4:	4b4c      	ldr	r3, [pc, #304]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ea6:	69db      	ldr	r3, [r3, #28]
 8004ea8:	4a4b      	ldr	r2, [pc, #300]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eae:	61d3      	str	r3, [r2, #28]
 8004eb0:	4b49      	ldr	r3, [pc, #292]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eb2:	69db      	ldr	r3, [r3, #28]
 8004eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb8:	60bb      	str	r3, [r7, #8]
 8004eba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec0:	4b46      	ldr	r3, [pc, #280]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d118      	bne.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ecc:	4b43      	ldr	r3, [pc, #268]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a42      	ldr	r2, [pc, #264]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ed6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ed8:	f7fd fbec 	bl	80026b4 <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ede:	e008      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ee0:	f7fd fbe8 	bl	80026b4 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b64      	cmp	r3, #100	; 0x64
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e06d      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef2:	4b3a      	ldr	r3, [pc, #232]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d0f0      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004efe:	4b36      	ldr	r3, [pc, #216]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f06:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d02e      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d027      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f1c:	4b2e      	ldr	r3, [pc, #184]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f24:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f26:	4b2e      	ldr	r3, [pc, #184]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f28:	2201      	movs	r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f2c:	4b2c      	ldr	r3, [pc, #176]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004f32:	4a29      	ldr	r2, [pc, #164]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d014      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f42:	f7fd fbb7 	bl	80026b4 <HAL_GetTick>
 8004f46:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f48:	e00a      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f4a:	f7fd fbb3 	bl	80026b4 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e036      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f60:	4b1d      	ldr	r3, [pc, #116]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d0ee      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f6c:	4b1a      	ldr	r3, [pc, #104]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	4917      	ldr	r1, [pc, #92]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f7e:	7dfb      	ldrb	r3, [r7, #23]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d105      	bne.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f84:	4b14      	ldr	r3, [pc, #80]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f86:	69db      	ldr	r3, [r3, #28]
 8004f88:	4a13      	ldr	r2, [pc, #76]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f8e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d008      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f9c:	4b0e      	ldr	r3, [pc, #56]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	490b      	ldr	r1, [pc, #44]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0310 	and.w	r3, r3, #16
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d008      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fba:	4b07      	ldr	r3, [pc, #28]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	4904      	ldr	r1, [pc, #16]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3718      	adds	r7, #24
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	40021000 	.word	0x40021000
 8004fdc:	40007000 	.word	0x40007000
 8004fe0:	42420440 	.word	0x42420440

08004fe4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004fe4:	b590      	push	{r4, r7, lr}
 8004fe6:	b08d      	sub	sp, #52	; 0x34
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004fec:	4b5a      	ldr	r3, [pc, #360]	; (8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004fee:	f107 040c 	add.w	r4, r7, #12
 8004ff2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ff4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004ff8:	f240 2301 	movw	r3, #513	; 0x201
 8004ffc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004ffe:	2300      	movs	r3, #0
 8005000:	627b      	str	r3, [r7, #36]	; 0x24
 8005002:	2300      	movs	r3, #0
 8005004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005006:	2300      	movs	r3, #0
 8005008:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800500a:	2300      	movs	r3, #0
 800500c:	61fb      	str	r3, [r7, #28]
 800500e:	2300      	movs	r3, #0
 8005010:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b10      	cmp	r3, #16
 8005016:	d00a      	beq.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b10      	cmp	r3, #16
 800501c:	f200 8091 	bhi.w	8005142 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d04c      	beq.n	80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2b02      	cmp	r3, #2
 800502a:	d07c      	beq.n	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800502c:	e089      	b.n	8005142 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 800502e:	4b4b      	ldr	r3, [pc, #300]	; (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005034:	4b49      	ldr	r3, [pc, #292]	; (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	f000 8082 	beq.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	0c9b      	lsrs	r3, r3, #18
 8005046:	f003 030f 	and.w	r3, r3, #15
 800504a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800504e:	4413      	add	r3, r2
 8005050:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005054:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d018      	beq.n	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005060:	4b3e      	ldr	r3, [pc, #248]	; (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	0c5b      	lsrs	r3, r3, #17
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800506e:	4413      	add	r3, r2
 8005070:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005074:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00d      	beq.n	800509c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005080:	4a37      	ldr	r2, [pc, #220]	; (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8005082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005084:	fbb2 f2f3 	udiv	r2, r2, r3
 8005088:	6a3b      	ldr	r3, [r7, #32]
 800508a:	fb02 f303 	mul.w	r3, r2, r3
 800508e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005090:	e004      	b.n	800509c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	4a33      	ldr	r2, [pc, #204]	; (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8005096:	fb02 f303 	mul.w	r3, r2, r3
 800509a:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800509c:	4b2f      	ldr	r3, [pc, #188]	; (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050a8:	d102      	bne.n	80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 80050aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ac:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80050ae:	e04a      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 80050b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b2:	005b      	lsls	r3, r3, #1
 80050b4:	4a2c      	ldr	r2, [pc, #176]	; (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 80050b6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ba:	085b      	lsrs	r3, r3, #1
 80050bc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80050be:	e042      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 80050c0:	4b26      	ldr	r3, [pc, #152]	; (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d0:	d108      	bne.n	80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d003      	beq.n	80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 80050dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80050e2:	e01f      	b.n	8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050ee:	d109      	bne.n	8005104 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80050f0:	4b1a      	ldr	r3, [pc, #104]	; (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d003      	beq.n	8005104 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80050fc:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005100:	62bb      	str	r3, [r7, #40]	; 0x28
 8005102:	e00f      	b.n	8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800510a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800510e:	d11c      	bne.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8005110:	4b12      	ldr	r3, [pc, #72]	; (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d016      	beq.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 800511c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005120:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005122:	e012      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8005124:	e011      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005126:	f7ff fe75 	bl	8004e14 <HAL_RCC_GetPCLK2Freq>
 800512a:	4602      	mov	r2, r0
 800512c:	4b0b      	ldr	r3, [pc, #44]	; (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	0b9b      	lsrs	r3, r3, #14
 8005132:	f003 0303 	and.w	r3, r3, #3
 8005136:	3301      	adds	r3, #1
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	fbb2 f3f3 	udiv	r3, r2, r3
 800513e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005140:	e004      	b.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8005142:	bf00      	nop
 8005144:	e002      	b.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8005146:	bf00      	nop
 8005148:	e000      	b.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800514a:	bf00      	nop
    }
  }
  return (frequency);
 800514c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800514e:	4618      	mov	r0, r3
 8005150:	3734      	adds	r7, #52	; 0x34
 8005152:	46bd      	mov	sp, r7
 8005154:	bd90      	pop	{r4, r7, pc}
 8005156:	bf00      	nop
 8005158:	0800c808 	.word	0x0800c808
 800515c:	40021000 	.word	0x40021000
 8005160:	007a1200 	.word	0x007a1200
 8005164:	003d0900 	.word	0x003d0900
 8005168:	aaaaaaab 	.word	0xaaaaaaab

0800516c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8005174:	2300      	movs	r3, #0
 8005176:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e084      	b.n	800528c <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	7c5b      	ldrb	r3, [r3, #17]
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	d105      	bne.n	8005198 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7fc fdf8 	bl	8001d88 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f8ab 	bl	80052fa <HAL_RTC_WaitForSynchro>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d004      	beq.n	80051b4 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2204      	movs	r2, #4
 80051ae:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e06b      	b.n	800528c <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f8cd 	bl	8005354 <RTC_EnterInitMode>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d004      	beq.n	80051ca <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2204      	movs	r2, #4
 80051c4:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e060      	b.n	800528c <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 0207 	bic.w	r2, r2, #7
 80051d8:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d005      	beq.n	80051ee <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80051e2:	4b2c      	ldr	r3, [pc, #176]	; (8005294 <HAL_RTC_Init+0x128>)
 80051e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e6:	4a2b      	ldr	r2, [pc, #172]	; (8005294 <HAL_RTC_Init+0x128>)
 80051e8:	f023 0301 	bic.w	r3, r3, #1
 80051ec:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80051ee:	4b29      	ldr	r3, [pc, #164]	; (8005294 <HAL_RTC_Init+0x128>)
 80051f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f2:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	4926      	ldr	r1, [pc, #152]	; (8005294 <HAL_RTC_Init+0x128>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005208:	d003      	beq.n	8005212 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	60fb      	str	r3, [r7, #12]
 8005210:	e00e      	b.n	8005230 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8005212:	2001      	movs	r0, #1
 8005214:	f7ff fee6 	bl	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005218:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d104      	bne.n	800522a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2204      	movs	r2, #4
 8005224:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e030      	b.n	800528c <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	3b01      	subs	r3, #1
 800522e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f023 010f 	bic.w	r1, r3, #15
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	0c1a      	lsrs	r2, r3, #16
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	0c1b      	lsrs	r3, r3, #16
 800524e:	041b      	lsls	r3, r3, #16
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	b291      	uxth	r1, r2
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6812      	ldr	r2, [r2, #0]
 8005258:	430b      	orrs	r3, r1
 800525a:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f8a1 	bl	80053a4 <RTC_ExitInitMode>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d004      	beq.n	8005272 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2204      	movs	r2, #4
 800526c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e00c      	b.n	800528c <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800528a:	2300      	movs	r3, #0
  }
}
 800528c:	4618      	mov	r0, r3
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40006c00 	.word	0x40006c00

08005298 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00e      	beq.n	80052cc <HAL_RTC_AlarmIRQHandler+0x34>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d007      	beq.n	80052cc <HAL_RTC_AlarmIRQHandler+0x34>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f813 	bl	80052e8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f06f 0202 	mvn.w	r2, #2
 80052ca:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80052cc:	4b05      	ldr	r3, [pc, #20]	; (80052e4 <HAL_RTC_AlarmIRQHandler+0x4c>)
 80052ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80052d2:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	745a      	strb	r2, [r3, #17]
}
 80052da:	bf00      	nop
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	40010400 	.word	0x40010400

080052e8 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bc80      	pop	{r7}
 80052f8:	4770      	bx	lr

080052fa <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b084      	sub	sp, #16
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005302:	2300      	movs	r3, #0
 8005304:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e01d      	b.n	800534c <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 0208 	bic.w	r2, r2, #8
 800531e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005320:	f7fd f9c8 	bl	80026b4 <HAL_GetTick>
 8005324:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005326:	e009      	b.n	800533c <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005328:	f7fd f9c4 	bl	80026b4 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005336:	d901      	bls.n	800533c <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e007      	b.n	800534c <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f003 0308 	and.w	r3, r3, #8
 8005346:	2b00      	cmp	r3, #0
 8005348:	d0ee      	beq.n	8005328 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005360:	f7fd f9a8 	bl	80026b4 <HAL_GetTick>
 8005364:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005366:	e009      	b.n	800537c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005368:	f7fd f9a4 	bl	80026b4 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005376:	d901      	bls.n	800537c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e00f      	b.n	800539c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f003 0320 	and.w	r3, r3, #32
 8005386:	2b00      	cmp	r3, #0
 8005388:	d0ee      	beq.n	8005368 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f042 0210 	orr.w	r2, r2, #16
 8005398:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f022 0210 	bic.w	r2, r2, #16
 80053be:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80053c0:	f7fd f978 	bl	80026b4 <HAL_GetTick>
 80053c4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80053c6:	e009      	b.n	80053dc <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80053c8:	f7fd f974 	bl	80026b4 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053d6:	d901      	bls.n	80053dc <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e007      	b.n	80053ec <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f003 0320 	and.w	r3, r3, #32
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d0ee      	beq.n	80053c8 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d024      	beq.n	8005454 <HAL_RTCEx_RTCIRQHandler+0x60>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	2b00      	cmp	r3, #0
 8005416:	d01d      	beq.n	8005454 <HAL_RTCEx_RTCIRQHandler+0x60>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f003 0304 	and.w	r3, r3, #4
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00b      	beq.n	800543e <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f821 	bl	800546e <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f06f 0204 	mvn.w	r2, #4
 8005434:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2204      	movs	r2, #4
 800543a:	745a      	strb	r2, [r3, #17]
 800543c:	e005      	b.n	800544a <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f80c 	bl	800545c <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f06f 0201 	mvn.w	r2, #1
 8005452:	605a      	str	r2, [r3, #4]
    }
  }
}
 8005454:	bf00      	nop
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	bc80      	pop	{r7}
 800546c:	4770      	bx	lr

0800546e <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 800546e:	b480      	push	{r7}
 8005470:	b083      	sub	sp, #12
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8005476:	bf00      	nop
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	bc80      	pop	{r7}
 800547e:	4770      	bx	lr

08005480 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e053      	b.n	800553a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d106      	bne.n	80054b2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7fc fc9f 	bl	8001df0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2202      	movs	r2, #2
 80054b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054c8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	431a      	orrs	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	431a      	orrs	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	431a      	orrs	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	431a      	orrs	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054ee:	431a      	orrs	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	69db      	ldr	r3, [r3, #28]
 80054f4:	431a      	orrs	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	ea42 0103 	orr.w	r1, r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	0c1a      	lsrs	r2, r3, #16
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f002 0204 	and.w	r2, r2, #4
 8005518:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	69da      	ldr	r2, [r3, #28]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005528:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3708      	adds	r7, #8
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b088      	sub	sp, #32
 8005546:	af00      	add	r7, sp, #0
 8005548:	60f8      	str	r0, [r7, #12]
 800554a:	60b9      	str	r1, [r7, #8]
 800554c:	603b      	str	r3, [r7, #0]
 800554e:	4613      	mov	r3, r2
 8005550:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005552:	2300      	movs	r3, #0
 8005554:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800555c:	2b01      	cmp	r3, #1
 800555e:	d101      	bne.n	8005564 <HAL_SPI_Transmit+0x22>
 8005560:	2302      	movs	r3, #2
 8005562:	e11e      	b.n	80057a2 <HAL_SPI_Transmit+0x260>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800556c:	f7fd f8a2 	bl	80026b4 <HAL_GetTick>
 8005570:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005572:	88fb      	ldrh	r3, [r7, #6]
 8005574:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b01      	cmp	r3, #1
 8005580:	d002      	beq.n	8005588 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005582:	2302      	movs	r3, #2
 8005584:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005586:	e103      	b.n	8005790 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <HAL_SPI_Transmit+0x52>
 800558e:	88fb      	ldrh	r3, [r7, #6]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d102      	bne.n	800559a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005598:	e0fa      	b.n	8005790 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2203      	movs	r2, #3
 800559e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	88fa      	ldrh	r2, [r7, #6]
 80055b2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	88fa      	ldrh	r2, [r7, #6]
 80055b8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055e0:	d107      	bne.n	80055f2 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055fc:	2b40      	cmp	r3, #64	; 0x40
 80055fe:	d007      	beq.n	8005610 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800560e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005618:	d14b      	bne.n	80056b2 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <HAL_SPI_Transmit+0xe6>
 8005622:	8afb      	ldrh	r3, [r7, #22]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d13e      	bne.n	80056a6 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562c:	881a      	ldrh	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005638:	1c9a      	adds	r2, r3, #2
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005642:	b29b      	uxth	r3, r3
 8005644:	3b01      	subs	r3, #1
 8005646:	b29a      	uxth	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800564c:	e02b      	b.n	80056a6 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	2b02      	cmp	r3, #2
 800565a:	d112      	bne.n	8005682 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005660:	881a      	ldrh	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566c:	1c9a      	adds	r2, r3, #2
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005676:	b29b      	uxth	r3, r3
 8005678:	3b01      	subs	r3, #1
 800567a:	b29a      	uxth	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005680:	e011      	b.n	80056a6 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005682:	f7fd f817 	bl	80026b4 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	429a      	cmp	r2, r3
 8005690:	d803      	bhi.n	800569a <HAL_SPI_Transmit+0x158>
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005698:	d102      	bne.n	80056a0 <HAL_SPI_Transmit+0x15e>
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d102      	bne.n	80056a6 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056a4:	e074      	b.n	8005790 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1ce      	bne.n	800564e <HAL_SPI_Transmit+0x10c>
 80056b0:	e04c      	b.n	800574c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d002      	beq.n	80056c0 <HAL_SPI_Transmit+0x17e>
 80056ba:	8afb      	ldrh	r3, [r7, #22]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d140      	bne.n	8005742 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	330c      	adds	r3, #12
 80056ca:	7812      	ldrb	r2, [r2, #0]
 80056cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056dc:	b29b      	uxth	r3, r3
 80056de:	3b01      	subs	r3, #1
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80056e6:	e02c      	b.n	8005742 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d113      	bne.n	800571e <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	330c      	adds	r3, #12
 8005700:	7812      	ldrb	r2, [r2, #0]
 8005702:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005708:	1c5a      	adds	r2, r3, #1
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005712:	b29b      	uxth	r3, r3
 8005714:	3b01      	subs	r3, #1
 8005716:	b29a      	uxth	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	86da      	strh	r2, [r3, #54]	; 0x36
 800571c:	e011      	b.n	8005742 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800571e:	f7fc ffc9 	bl	80026b4 <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	429a      	cmp	r2, r3
 800572c:	d803      	bhi.n	8005736 <HAL_SPI_Transmit+0x1f4>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005734:	d102      	bne.n	800573c <HAL_SPI_Transmit+0x1fa>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d102      	bne.n	8005742 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005740:	e026      	b.n	8005790 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005746:	b29b      	uxth	r3, r3
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1cd      	bne.n	80056e8 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	6839      	ldr	r1, [r7, #0]
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 fc94 	bl	800607e <SPI_EndRxTxTransaction>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d002      	beq.n	8005762 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2220      	movs	r2, #32
 8005760:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10a      	bne.n	8005780 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800576a:	2300      	movs	r3, #0
 800576c:	613b      	str	r3, [r7, #16]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	613b      	str	r3, [r7, #16]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	613b      	str	r3, [r7, #16]
 800577e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005784:	2b00      	cmp	r3, #0
 8005786:	d002      	beq.n	800578e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	77fb      	strb	r3, [r7, #31]
 800578c:	e000      	b.n	8005790 <HAL_SPI_Transmit+0x24e>
  }

error:
 800578e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3720      	adds	r7, #32
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b088      	sub	sp, #32
 80057ae:	af02      	add	r7, sp, #8
 80057b0:	60f8      	str	r0, [r7, #12]
 80057b2:	60b9      	str	r1, [r7, #8]
 80057b4:	603b      	str	r3, [r7, #0]
 80057b6:	4613      	mov	r3, r2
 80057b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057ba:	2300      	movs	r3, #0
 80057bc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057c6:	d112      	bne.n	80057ee <HAL_SPI_Receive+0x44>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10e      	bne.n	80057ee <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2204      	movs	r2, #4
 80057d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80057d8:	88fa      	ldrh	r2, [r7, #6]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	4613      	mov	r3, r2
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	68b9      	ldr	r1, [r7, #8]
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 f8e9 	bl	80059bc <HAL_SPI_TransmitReceive>
 80057ea:	4603      	mov	r3, r0
 80057ec:	e0e2      	b.n	80059b4 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d101      	bne.n	80057fc <HAL_SPI_Receive+0x52>
 80057f8:	2302      	movs	r3, #2
 80057fa:	e0db      	b.n	80059b4 <HAL_SPI_Receive+0x20a>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005804:	f7fc ff56 	bl	80026b4 <HAL_GetTick>
 8005808:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b01      	cmp	r3, #1
 8005814:	d002      	beq.n	800581c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005816:	2302      	movs	r3, #2
 8005818:	75fb      	strb	r3, [r7, #23]
    goto error;
 800581a:	e0c2      	b.n	80059a2 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d002      	beq.n	8005828 <HAL_SPI_Receive+0x7e>
 8005822:	88fb      	ldrh	r3, [r7, #6]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d102      	bne.n	800582e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800582c:	e0b9      	b.n	80059a2 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2204      	movs	r2, #4
 8005832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	88fa      	ldrh	r2, [r7, #6]
 8005846:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	88fa      	ldrh	r2, [r7, #6]
 800584c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005874:	d107      	bne.n	8005886 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005884:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005890:	2b40      	cmp	r3, #64	; 0x40
 8005892:	d007      	beq.n	80058a4 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058a2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d162      	bne.n	8005972 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80058ac:	e02e      	b.n	800590c <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d115      	bne.n	80058e8 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f103 020c 	add.w	r2, r3, #12
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c8:	7812      	ldrb	r2, [r2, #0]
 80058ca:	b2d2      	uxtb	r2, r2
 80058cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058dc:	b29b      	uxth	r3, r3
 80058de:	3b01      	subs	r3, #1
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058e6:	e011      	b.n	800590c <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058e8:	f7fc fee4 	bl	80026b4 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d803      	bhi.n	8005900 <HAL_SPI_Receive+0x156>
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fe:	d102      	bne.n	8005906 <HAL_SPI_Receive+0x15c>
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d102      	bne.n	800590c <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	75fb      	strb	r3, [r7, #23]
          goto error;
 800590a:	e04a      	b.n	80059a2 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005910:	b29b      	uxth	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1cb      	bne.n	80058ae <HAL_SPI_Receive+0x104>
 8005916:	e031      	b.n	800597c <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b01      	cmp	r3, #1
 8005924:	d113      	bne.n	800594e <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68da      	ldr	r2, [r3, #12]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005930:	b292      	uxth	r2, r2
 8005932:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005938:	1c9a      	adds	r2, r3, #2
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005942:	b29b      	uxth	r3, r3
 8005944:	3b01      	subs	r3, #1
 8005946:	b29a      	uxth	r2, r3
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800594c:	e011      	b.n	8005972 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800594e:	f7fc feb1 	bl	80026b4 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	429a      	cmp	r2, r3
 800595c:	d803      	bhi.n	8005966 <HAL_SPI_Receive+0x1bc>
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005964:	d102      	bne.n	800596c <HAL_SPI_Receive+0x1c2>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d102      	bne.n	8005972 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005970:	e017      	b.n	80059a2 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005976:	b29b      	uxth	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1cd      	bne.n	8005918 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	6839      	ldr	r1, [r7, #0]
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f000 fb2a 	bl	8005fda <SPI_EndRxTransaction>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d002      	beq.n	8005992 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2220      	movs	r2, #32
 8005990:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005996:	2b00      	cmp	r3, #0
 8005998:	d002      	beq.n	80059a0 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	75fb      	strb	r3, [r7, #23]
 800599e:	e000      	b.n	80059a2 <HAL_SPI_Receive+0x1f8>
  }

error :
 80059a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80059b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3718      	adds	r7, #24
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b08c      	sub	sp, #48	; 0x30
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80059ca:	2301      	movs	r3, #1
 80059cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d101      	bne.n	80059e2 <HAL_SPI_TransmitReceive+0x26>
 80059de:	2302      	movs	r3, #2
 80059e0:	e18a      	b.n	8005cf8 <HAL_SPI_TransmitReceive+0x33c>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059ea:	f7fc fe63 	bl	80026b4 <HAL_GetTick>
 80059ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005a00:	887b      	ldrh	r3, [r7, #2]
 8005a02:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d00f      	beq.n	8005a2c <HAL_SPI_TransmitReceive+0x70>
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a12:	d107      	bne.n	8005a24 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d103      	bne.n	8005a24 <HAL_SPI_TransmitReceive+0x68>
 8005a1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d003      	beq.n	8005a2c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005a24:	2302      	movs	r3, #2
 8005a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005a2a:	e15b      	b.n	8005ce4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d005      	beq.n	8005a3e <HAL_SPI_TransmitReceive+0x82>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d002      	beq.n	8005a3e <HAL_SPI_TransmitReceive+0x82>
 8005a38:	887b      	ldrh	r3, [r7, #2]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d103      	bne.n	8005a46 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005a44:	e14e      	b.n	8005ce4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	d003      	beq.n	8005a5a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2205      	movs	r2, #5
 8005a56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	887a      	ldrh	r2, [r7, #2]
 8005a6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	887a      	ldrh	r2, [r7, #2]
 8005a70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	887a      	ldrh	r2, [r7, #2]
 8005a7c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	887a      	ldrh	r2, [r7, #2]
 8005a82:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9a:	2b40      	cmp	r3, #64	; 0x40
 8005a9c:	d007      	beq.n	8005aae <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005aac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ab6:	d178      	bne.n	8005baa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <HAL_SPI_TransmitReceive+0x10a>
 8005ac0:	8b7b      	ldrh	r3, [r7, #26]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d166      	bne.n	8005b94 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aca:	881a      	ldrh	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad6:	1c9a      	adds	r2, r3, #2
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005aea:	e053      	b.n	8005b94 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d11b      	bne.n	8005b32 <HAL_SPI_TransmitReceive+0x176>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d016      	beq.n	8005b32 <HAL_SPI_TransmitReceive+0x176>
 8005b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d113      	bne.n	8005b32 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0e:	881a      	ldrh	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1a:	1c9a      	adds	r2, r3, #2
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	3b01      	subs	r3, #1
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f003 0301 	and.w	r3, r3, #1
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d119      	bne.n	8005b74 <HAL_SPI_TransmitReceive+0x1b8>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d014      	beq.n	8005b74 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68da      	ldr	r2, [r3, #12]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b54:	b292      	uxth	r2, r2
 8005b56:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5c:	1c9a      	adds	r2, r3, #2
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b70:	2301      	movs	r3, #1
 8005b72:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005b74:	f7fc fd9e 	bl	80026b4 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d807      	bhi.n	8005b94 <HAL_SPI_TransmitReceive+0x1d8>
 8005b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8a:	d003      	beq.n	8005b94 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005b92:	e0a7      	b.n	8005ce4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1a6      	bne.n	8005aec <HAL_SPI_TransmitReceive+0x130>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1a1      	bne.n	8005aec <HAL_SPI_TransmitReceive+0x130>
 8005ba8:	e07c      	b.n	8005ca4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d002      	beq.n	8005bb8 <HAL_SPI_TransmitReceive+0x1fc>
 8005bb2:	8b7b      	ldrh	r3, [r7, #26]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d16b      	bne.n	8005c90 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	330c      	adds	r3, #12
 8005bc2:	7812      	ldrb	r2, [r2, #0]
 8005bc4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bca:	1c5a      	adds	r2, r3, #1
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bde:	e057      	b.n	8005c90 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d11c      	bne.n	8005c28 <HAL_SPI_TransmitReceive+0x26c>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d017      	beq.n	8005c28 <HAL_SPI_TransmitReceive+0x26c>
 8005bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d114      	bne.n	8005c28 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	330c      	adds	r3, #12
 8005c08:	7812      	ldrb	r2, [r2, #0]
 8005c0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c10:	1c5a      	adds	r2, r3, #1
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c24:	2300      	movs	r3, #0
 8005c26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d119      	bne.n	8005c6a <HAL_SPI_TransmitReceive+0x2ae>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d014      	beq.n	8005c6a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68da      	ldr	r2, [r3, #12]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4a:	b2d2      	uxtb	r2, r2
 8005c4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c52:	1c5a      	adds	r2, r3, #1
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c66:	2301      	movs	r3, #1
 8005c68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005c6a:	f7fc fd23 	bl	80026b4 <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d803      	bhi.n	8005c82 <HAL_SPI_TransmitReceive+0x2c6>
 8005c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c80:	d102      	bne.n	8005c88 <HAL_SPI_TransmitReceive+0x2cc>
 8005c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d103      	bne.n	8005c90 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c8e:	e029      	b.n	8005ce4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1a2      	bne.n	8005be0 <HAL_SPI_TransmitReceive+0x224>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d19d      	bne.n	8005be0 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ca6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 f9e8 	bl	800607e <SPI_EndRxTxTransaction>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d006      	beq.n	8005cc2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005cc0:	e010      	b.n	8005ce4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10b      	bne.n	8005ce2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cca:	2300      	movs	r3, #0
 8005ccc:	617b      	str	r3, [r7, #20]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	617b      	str	r3, [r7, #20]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	617b      	str	r3, [r7, #20]
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	e000      	b.n	8005ce4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005ce2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005cf4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3730      	adds	r7, #48	; 0x30
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b088      	sub	sp, #32
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	099b      	lsrs	r3, r3, #6
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10f      	bne.n	8005d44 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00a      	beq.n	8005d44 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	099b      	lsrs	r3, r3, #6
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d004      	beq.n	8005d44 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	4798      	blx	r3
    return;
 8005d42:	e0be      	b.n	8005ec2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	085b      	lsrs	r3, r3, #1
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00a      	beq.n	8005d66 <HAL_SPI_IRQHandler+0x66>
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	09db      	lsrs	r3, r3, #7
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d004      	beq.n	8005d66 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	4798      	blx	r3
    return;
 8005d64:	e0ad      	b.n	8005ec2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	095b      	lsrs	r3, r3, #5
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d106      	bne.n	8005d80 <HAL_SPI_IRQHandler+0x80>
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	099b      	lsrs	r3, r3, #6
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f000 80a1 	beq.w	8005ec2 <HAL_SPI_IRQHandler+0x1c2>
       && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	095b      	lsrs	r3, r3, #5
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f000 809a 	beq.w	8005ec2 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	099b      	lsrs	r3, r3, #6
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d023      	beq.n	8005de2 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b03      	cmp	r3, #3
 8005da4:	d011      	beq.n	8005dca <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005daa:	f043 0204 	orr.w	r2, r3, #4
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005db2:	2300      	movs	r3, #0
 8005db4:	617b      	str	r3, [r7, #20]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	617b      	str	r3, [r7, #20]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	617b      	str	r3, [r7, #20]
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	e00b      	b.n	8005de2 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dca:	2300      	movs	r3, #0
 8005dcc:	613b      	str	r3, [r7, #16]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	613b      	str	r3, [r7, #16]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	613b      	str	r3, [r7, #16]
 8005dde:	693b      	ldr	r3, [r7, #16]
        return;
 8005de0:	e06f      	b.n	8005ec2 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	095b      	lsrs	r3, r3, #5
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d014      	beq.n	8005e18 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df2:	f043 0201 	orr.w	r2, r3, #1
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	60fb      	str	r3, [r7, #12]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	60fb      	str	r3, [r7, #12]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d04f      	beq.n	8005ec0 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e2e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	f003 0302 	and.w	r3, r3, #2
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d104      	bne.n	8005e4c <HAL_SPI_IRQHandler+0x14c>
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d034      	beq.n	8005eb6 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685a      	ldr	r2, [r3, #4]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 0203 	bic.w	r2, r2, #3
 8005e5a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d011      	beq.n	8005e88 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e68:	4a17      	ldr	r2, [pc, #92]	; (8005ec8 <HAL_SPI_IRQHandler+0x1c8>)
 8005e6a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7fc fdb5 	bl	80029e0 <HAL_DMA_Abort_IT>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d005      	beq.n	8005e88 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d016      	beq.n	8005ebe <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e94:	4a0c      	ldr	r2, [pc, #48]	; (8005ec8 <HAL_SPI_IRQHandler+0x1c8>)
 8005e96:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7fc fd9f 	bl	80029e0 <HAL_DMA_Abort_IT>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00a      	beq.n	8005ebe <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005eb4:	e003      	b.n	8005ebe <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 f808 	bl	8005ecc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005ebc:	e000      	b.n	8005ec0 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8005ebe:	bf00      	nop
    return;
 8005ec0:	bf00      	nop
  }
}
 8005ec2:	3720      	adds	r7, #32
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	08005edf 	.word	0x08005edf

08005ecc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bc80      	pop	{r7}
 8005edc:	4770      	bx	lr

08005ede <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b084      	sub	sp, #16
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f7ff ffe7 	bl	8005ecc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005efe:	bf00      	nop
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b084      	sub	sp, #16
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	60f8      	str	r0, [r7, #12]
 8005f0e:	60b9      	str	r1, [r7, #8]
 8005f10:	603b      	str	r3, [r7, #0]
 8005f12:	4613      	mov	r3, r2
 8005f14:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f16:	e04c      	b.n	8005fb2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1e:	d048      	beq.n	8005fb2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005f20:	f7fc fbc8 	bl	80026b4 <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d902      	bls.n	8005f36 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d13d      	bne.n	8005fb2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f4e:	d111      	bne.n	8005f74 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f58:	d004      	beq.n	8005f64 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f62:	d107      	bne.n	8005f74 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f7c:	d10f      	bne.n	8005f9e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f8c:	601a      	str	r2, [r3, #0]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e00f      	b.n	8005fd2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689a      	ldr	r2, [r3, #8]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	4013      	ands	r3, r2
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	bf0c      	ite	eq
 8005fc2:	2301      	moveq	r3, #1
 8005fc4:	2300      	movne	r3, #0
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	461a      	mov	r2, r3
 8005fca:	79fb      	ldrb	r3, [r7, #7]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d1a3      	bne.n	8005f18 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b086      	sub	sp, #24
 8005fde:	af02      	add	r7, sp, #8
 8005fe0:	60f8      	str	r0, [r7, #12]
 8005fe2:	60b9      	str	r1, [r7, #8]
 8005fe4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fee:	d111      	bne.n	8006014 <SPI_EndRxTransaction+0x3a>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ff8:	d004      	beq.n	8006004 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006002:	d107      	bne.n	8006014 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006012:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800601c:	d117      	bne.n	800604e <SPI_EndRxTransaction+0x74>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006026:	d112      	bne.n	800604e <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	2200      	movs	r2, #0
 8006030:	2101      	movs	r1, #1
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f7ff ff67 	bl	8005f06 <SPI_WaitFlagStateUntilTimeout>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d01a      	beq.n	8006074 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006042:	f043 0220 	orr.w	r2, r3, #32
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e013      	b.n	8006076 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	2200      	movs	r2, #0
 8006056:	2180      	movs	r1, #128	; 0x80
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f7ff ff54 	bl	8005f06 <SPI_WaitFlagStateUntilTimeout>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d007      	beq.n	8006074 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006068:	f043 0220 	orr.w	r2, r3, #32
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e000      	b.n	8006076 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b086      	sub	sp, #24
 8006082:	af02      	add	r7, sp, #8
 8006084:	60f8      	str	r0, [r7, #12]
 8006086:	60b9      	str	r1, [r7, #8]
 8006088:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	2200      	movs	r2, #0
 8006092:	2180      	movs	r1, #128	; 0x80
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f7ff ff36 	bl	8005f06 <SPI_WaitFlagStateUntilTimeout>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d007      	beq.n	80060b0 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060a4:	f043 0220 	orr.w	r2, r3, #32
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e000      	b.n	80060b2 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b082      	sub	sp, #8
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e03f      	b.n	800614c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d106      	bne.n	80060e6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f7fb ff71 	bl	8001fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2224      	movs	r2, #36	; 0x24
 80060ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68da      	ldr	r2, [r3, #12]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060fc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 fbe6 	bl	80068d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	691a      	ldr	r2, [r3, #16]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006112:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	695a      	ldr	r2, [r3, #20]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006122:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68da      	ldr	r2, [r3, #12]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006132:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2220      	movs	r2, #32
 800613e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2220      	movs	r2, #32
 8006146:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b088      	sub	sp, #32
 8006158:	af02      	add	r7, sp, #8
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	603b      	str	r3, [r7, #0]
 8006160:	4613      	mov	r3, r2
 8006162:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006164:	2300      	movs	r3, #0
 8006166:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800616e:	b2db      	uxtb	r3, r3
 8006170:	2b20      	cmp	r3, #32
 8006172:	f040 8083 	bne.w	800627c <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d002      	beq.n	8006182 <HAL_UART_Transmit+0x2e>
 800617c:	88fb      	ldrh	r3, [r7, #6]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e07b      	b.n	800627e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800618c:	2b01      	cmp	r3, #1
 800618e:	d101      	bne.n	8006194 <HAL_UART_Transmit+0x40>
 8006190:	2302      	movs	r3, #2
 8006192:	e074      	b.n	800627e <HAL_UART_Transmit+0x12a>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2221      	movs	r2, #33	; 0x21
 80061a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80061aa:	f7fc fa83 	bl	80026b4 <HAL_GetTick>
 80061ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	88fa      	ldrh	r2, [r7, #6]
 80061b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	88fa      	ldrh	r2, [r7, #6]
 80061ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80061bc:	e042      	b.n	8006244 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	3b01      	subs	r3, #1
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061d4:	d122      	bne.n	800621c <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2200      	movs	r2, #0
 80061de:	2180      	movs	r1, #128	; 0x80
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 fa0c 	bl	80065fe <UART_WaitOnFlagUntilTimeout>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d001      	beq.n	80061f0 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e046      	b.n	800627e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	881b      	ldrh	r3, [r3, #0]
 80061f8:	461a      	mov	r2, r3
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006202:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d103      	bne.n	8006214 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	3302      	adds	r3, #2
 8006210:	60bb      	str	r3, [r7, #8]
 8006212:	e017      	b.n	8006244 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	3301      	adds	r3, #1
 8006218:	60bb      	str	r3, [r7, #8]
 800621a:	e013      	b.n	8006244 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	2200      	movs	r2, #0
 8006224:	2180      	movs	r1, #128	; 0x80
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f000 f9e9 	bl	80065fe <UART_WaitOnFlagUntilTimeout>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d001      	beq.n	8006236 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e023      	b.n	800627e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	1c5a      	adds	r2, r3, #1
 800623a:	60ba      	str	r2, [r7, #8]
 800623c:	781a      	ldrb	r2, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006248:	b29b      	uxth	r3, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1b7      	bne.n	80061be <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	9300      	str	r3, [sp, #0]
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2200      	movs	r2, #0
 8006256:	2140      	movs	r1, #64	; 0x40
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f000 f9d0 	bl	80065fe <UART_WaitOnFlagUntilTimeout>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d001      	beq.n	8006268 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e00a      	b.n	800627e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2220      	movs	r2, #32
 800626c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8006278:	2300      	movs	r3, #0
 800627a:	e000      	b.n	800627e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800627c:	2302      	movs	r3, #2
  }
}
 800627e:	4618      	mov	r0, r3
 8006280:	3718      	adds	r7, #24
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b088      	sub	sp, #32
 800628a:	af02      	add	r7, sp, #8
 800628c:	60f8      	str	r0, [r7, #12]
 800628e:	60b9      	str	r1, [r7, #8]
 8006290:	603b      	str	r3, [r7, #0]
 8006292:	4613      	mov	r3, r2
 8006294:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006296:	2300      	movs	r3, #0
 8006298:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b20      	cmp	r3, #32
 80062a4:	f040 8090 	bne.w	80063c8 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d002      	beq.n	80062b4 <HAL_UART_Receive+0x2e>
 80062ae:	88fb      	ldrh	r3, [r7, #6]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d101      	bne.n	80062b8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e088      	b.n	80063ca <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d101      	bne.n	80062c6 <HAL_UART_Receive+0x40>
 80062c2:	2302      	movs	r3, #2
 80062c4:	e081      	b.n	80063ca <HAL_UART_Receive+0x144>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2222      	movs	r2, #34	; 0x22
 80062d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80062dc:	f7fc f9ea 	bl	80026b4 <HAL_GetTick>
 80062e0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	88fa      	ldrh	r2, [r7, #6]
 80062e6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	88fa      	ldrh	r2, [r7, #6]
 80062ec:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80062ee:	e05c      	b.n	80063aa <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	3b01      	subs	r3, #1
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006306:	d12b      	bne.n	8006360 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	2200      	movs	r2, #0
 8006310:	2120      	movs	r1, #32
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f000 f973 	bl	80065fe <UART_WaitOnFlagUntilTimeout>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e053      	b.n	80063ca <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10c      	bne.n	8006348 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	b29b      	uxth	r3, r3
 8006336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800633a:	b29a      	uxth	r2, r3
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	3302      	adds	r3, #2
 8006344:	60bb      	str	r3, [r7, #8]
 8006346:	e030      	b.n	80063aa <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	b29b      	uxth	r3, r3
 8006350:	b2db      	uxtb	r3, r3
 8006352:	b29a      	uxth	r2, r3
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	3301      	adds	r3, #1
 800635c:	60bb      	str	r3, [r7, #8]
 800635e:	e024      	b.n	80063aa <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	2200      	movs	r2, #0
 8006368:	2120      	movs	r1, #32
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f000 f947 	bl	80065fe <UART_WaitOnFlagUntilTimeout>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d001      	beq.n	800637a <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e027      	b.n	80063ca <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d108      	bne.n	8006394 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6859      	ldr	r1, [r3, #4]
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	60ba      	str	r2, [r7, #8]
 800638e:	b2ca      	uxtb	r2, r1
 8006390:	701a      	strb	r2, [r3, #0]
 8006392:	e00a      	b.n	80063aa <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	b2da      	uxtb	r2, r3
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	1c59      	adds	r1, r3, #1
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80063a6:	b2d2      	uxtb	r2, r2
 80063a8:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d19d      	bne.n	80062f0 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80063c4:	2300      	movs	r3, #0
 80063c6:	e000      	b.n	80063ca <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80063c8:	2302      	movs	r3, #2
  }
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3718      	adds	r7, #24
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
	...

080063d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b088      	sub	sp, #32
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80063f4:	2300      	movs	r3, #0
 80063f6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80063f8:	2300      	movs	r3, #0
 80063fa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	f003 030f 	and.w	r3, r3, #15
 8006402:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10d      	bne.n	8006426 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	f003 0320 	and.w	r3, r3, #32
 8006410:	2b00      	cmp	r3, #0
 8006412:	d008      	beq.n	8006426 <HAL_UART_IRQHandler+0x52>
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	f003 0320 	and.w	r3, r3, #32
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f9d5 	bl	80067ce <UART_Receive_IT>
      return;
 8006424:	e0cb      	b.n	80065be <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 80ab 	beq.w	8006584 <HAL_UART_IRQHandler+0x1b0>
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f003 0301 	and.w	r3, r3, #1
 8006434:	2b00      	cmp	r3, #0
 8006436:	d105      	bne.n	8006444 <HAL_UART_IRQHandler+0x70>
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800643e:	2b00      	cmp	r3, #0
 8006440:	f000 80a0 	beq.w	8006584 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	f003 0301 	and.w	r3, r3, #1
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00a      	beq.n	8006464 <HAL_UART_IRQHandler+0x90>
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006454:	2b00      	cmp	r3, #0
 8006456:	d005      	beq.n	8006464 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800645c:	f043 0201 	orr.w	r2, r3, #1
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	f003 0304 	and.w	r3, r3, #4
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00a      	beq.n	8006484 <HAL_UART_IRQHandler+0xb0>
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	2b00      	cmp	r3, #0
 8006476:	d005      	beq.n	8006484 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647c:	f043 0202 	orr.w	r2, r3, #2
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	f003 0302 	and.w	r3, r3, #2
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00a      	beq.n	80064a4 <HAL_UART_IRQHandler+0xd0>
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	2b00      	cmp	r3, #0
 8006496:	d005      	beq.n	80064a4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800649c:	f043 0204 	orr.w	r2, r3, #4
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	f003 0308 	and.w	r3, r3, #8
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00a      	beq.n	80064c4 <HAL_UART_IRQHandler+0xf0>
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d005      	beq.n	80064c4 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064bc:	f043 0208 	orr.w	r2, r3, #8
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d077      	beq.n	80065bc <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	f003 0320 	and.w	r3, r3, #32
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d007      	beq.n	80064e6 <HAL_UART_IRQHandler+0x112>
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	f003 0320 	and.w	r3, r3, #32
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d002      	beq.n	80064e6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 f974 	bl	80067ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	695b      	ldr	r3, [r3, #20]
 80064ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	bf14      	ite	ne
 80064f4:	2301      	movne	r3, #1
 80064f6:	2300      	moveq	r3, #0
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006500:	f003 0308 	and.w	r3, r3, #8
 8006504:	2b00      	cmp	r3, #0
 8006506:	d102      	bne.n	800650e <HAL_UART_IRQHandler+0x13a>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d031      	beq.n	8006572 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f8bf 	bl	8006692 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651e:	2b00      	cmp	r3, #0
 8006520:	d023      	beq.n	800656a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	695a      	ldr	r2, [r3, #20]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006530:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006536:	2b00      	cmp	r3, #0
 8006538:	d013      	beq.n	8006562 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800653e:	4a21      	ldr	r2, [pc, #132]	; (80065c4 <HAL_UART_IRQHandler+0x1f0>)
 8006540:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006546:	4618      	mov	r0, r3
 8006548:	f7fc fa4a 	bl	80029e0 <HAL_DMA_Abort_IT>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d016      	beq.n	8006580 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800655c:	4610      	mov	r0, r2
 800655e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006560:	e00e      	b.n	8006580 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f842 	bl	80065ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006568:	e00a      	b.n	8006580 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f83e 	bl	80065ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006570:	e006      	b.n	8006580 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f83a 	bl	80065ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800657e:	e01d      	b.n	80065bc <HAL_UART_IRQHandler+0x1e8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006580:	bf00      	nop
    return;
 8006582:	e01b      	b.n	80065bc <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800658a:	2b00      	cmp	r3, #0
 800658c:	d008      	beq.n	80065a0 <HAL_UART_IRQHandler+0x1cc>
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006594:	2b00      	cmp	r3, #0
 8006596:	d003      	beq.n	80065a0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 f8ab 	bl	80066f4 <UART_Transmit_IT>
    return;
 800659e:	e00e      	b.n	80065be <HAL_UART_IRQHandler+0x1ea>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d009      	beq.n	80065be <HAL_UART_IRQHandler+0x1ea>
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d004      	beq.n	80065be <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 f8f2 	bl	800679e <UART_EndTransmit_IT>
    return;
 80065ba:	e000      	b.n	80065be <HAL_UART_IRQHandler+0x1ea>
    return;
 80065bc:	bf00      	nop
  }
}
 80065be:	3720      	adds	r7, #32
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	080066cd 	.word	0x080066cd

080065c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bc80      	pop	{r7}
 80065d8:	4770      	bx	lr

080065da <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80065da:	b480      	push	{r7}
 80065dc:	b083      	sub	sp, #12
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80065e2:	bf00      	nop
 80065e4:	370c      	adds	r7, #12
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bc80      	pop	{r7}
 80065ea:	4770      	bx	lr

080065ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bc80      	pop	{r7}
 80065fc:	4770      	bx	lr

080065fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b084      	sub	sp, #16
 8006602:	af00      	add	r7, sp, #0
 8006604:	60f8      	str	r0, [r7, #12]
 8006606:	60b9      	str	r1, [r7, #8]
 8006608:	603b      	str	r3, [r7, #0]
 800660a:	4613      	mov	r3, r2
 800660c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800660e:	e02c      	b.n	800666a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006616:	d028      	beq.n	800666a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d007      	beq.n	800662e <UART_WaitOnFlagUntilTimeout+0x30>
 800661e:	f7fc f849 	bl	80026b4 <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	69ba      	ldr	r2, [r7, #24]
 800662a:	429a      	cmp	r2, r3
 800662c:	d21d      	bcs.n	800666a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68da      	ldr	r2, [r3, #12]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800663c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	695a      	ldr	r2, [r3, #20]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 0201 	bic.w	r2, r2, #1
 800664c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2220      	movs	r2, #32
 8006652:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2220      	movs	r2, #32
 800665a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e00f      	b.n	800668a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	4013      	ands	r3, r2
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	429a      	cmp	r2, r3
 8006678:	bf0c      	ite	eq
 800667a:	2301      	moveq	r3, #1
 800667c:	2300      	movne	r3, #0
 800667e:	b2db      	uxtb	r3, r3
 8006680:	461a      	mov	r2, r3
 8006682:	79fb      	ldrb	r3, [r7, #7]
 8006684:	429a      	cmp	r2, r3
 8006686:	d0c3      	beq.n	8006610 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006692:	b480      	push	{r7}
 8006694:	b083      	sub	sp, #12
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68da      	ldr	r2, [r3, #12]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80066a8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	695a      	ldr	r2, [r3, #20]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 0201 	bic.w	r2, r2, #1
 80066b8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2220      	movs	r2, #32
 80066be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80066c2:	bf00      	nop
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bc80      	pop	{r7}
 80066ca:	4770      	bx	lr

080066cc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f7ff ff80 	bl	80065ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066ec:	bf00      	nop
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2b21      	cmp	r3, #33	; 0x21
 8006706:	d144      	bne.n	8006792 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006710:	d11a      	bne.n	8006748 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	881b      	ldrh	r3, [r3, #0]
 800671c:	461a      	mov	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006726:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d105      	bne.n	800673c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	1c9a      	adds	r2, r3, #2
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	621a      	str	r2, [r3, #32]
 800673a:	e00e      	b.n	800675a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	621a      	str	r2, [r3, #32]
 8006746:	e008      	b.n	800675a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a1b      	ldr	r3, [r3, #32]
 800674c:	1c59      	adds	r1, r3, #1
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	6211      	str	r1, [r2, #32]
 8006752:	781a      	ldrb	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800675e:	b29b      	uxth	r3, r3
 8006760:	3b01      	subs	r3, #1
 8006762:	b29b      	uxth	r3, r3
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	4619      	mov	r1, r3
 8006768:	84d1      	strh	r1, [r2, #38]	; 0x26
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10f      	bne.n	800678e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68da      	ldr	r2, [r3, #12]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800677c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68da      	ldr	r2, [r3, #12]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800678c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	e000      	b.n	8006794 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006792:	2302      	movs	r3, #2
  }
}
 8006794:	4618      	mov	r0, r3
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	bc80      	pop	{r7}
 800679c:	4770      	bx	lr

0800679e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b082      	sub	sp, #8
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68da      	ldr	r2, [r3, #12]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2220      	movs	r2, #32
 80067ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f7ff ff02 	bl	80065c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3708      	adds	r7, #8
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b084      	sub	sp, #16
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b22      	cmp	r3, #34	; 0x22
 80067e0:	d171      	bne.n	80068c6 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ea:	d123      	bne.n	8006834 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f0:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10e      	bne.n	8006818 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	b29b      	uxth	r3, r3
 8006802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006806:	b29a      	uxth	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006810:	1c9a      	adds	r2, r3, #2
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	629a      	str	r2, [r3, #40]	; 0x28
 8006816:	e029      	b.n	800686c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	b29b      	uxth	r3, r3
 8006820:	b2db      	uxtb	r3, r3
 8006822:	b29a      	uxth	r2, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800682c:	1c5a      	adds	r2, r3, #1
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	629a      	str	r2, [r3, #40]	; 0x28
 8006832:	e01b      	b.n	800686c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10a      	bne.n	8006852 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6858      	ldr	r0, [r3, #4]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006846:	1c59      	adds	r1, r3, #1
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	6291      	str	r1, [r2, #40]	; 0x28
 800684c:	b2c2      	uxtb	r2, r0
 800684e:	701a      	strb	r2, [r3, #0]
 8006850:	e00c      	b.n	800686c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	b2da      	uxtb	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685e:	1c58      	adds	r0, r3, #1
 8006860:	6879      	ldr	r1, [r7, #4]
 8006862:	6288      	str	r0, [r1, #40]	; 0x28
 8006864:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006868:	b2d2      	uxtb	r2, r2
 800686a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006870:	b29b      	uxth	r3, r3
 8006872:	3b01      	subs	r3, #1
 8006874:	b29b      	uxth	r3, r3
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	4619      	mov	r1, r3
 800687a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800687c:	2b00      	cmp	r3, #0
 800687e:	d120      	bne.n	80068c2 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68da      	ldr	r2, [r3, #12]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f022 0220 	bic.w	r2, r2, #32
 800688e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68da      	ldr	r2, [r3, #12]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800689e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	695a      	ldr	r2, [r3, #20]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f022 0201 	bic.w	r2, r2, #1
 80068ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2220      	movs	r2, #32
 80068b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f7ff fe8e 	bl	80065da <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80068be:	2300      	movs	r3, #0
 80068c0:	e002      	b.n	80068c8 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	e000      	b.n	80068c8 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80068c6:	2302      	movs	r3, #2
  }
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68da      	ldr	r2, [r3, #12]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	689a      	ldr	r2, [r3, #8]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	431a      	orrs	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	695b      	ldr	r3, [r3, #20]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800690a:	f023 030c 	bic.w	r3, r3, #12
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	6812      	ldr	r2, [r2, #0]
 8006912:	68f9      	ldr	r1, [r7, #12]
 8006914:	430b      	orrs	r3, r1
 8006916:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	699a      	ldr	r2, [r3, #24]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	430a      	orrs	r2, r1
 800692c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a52      	ldr	r2, [pc, #328]	; (8006a7c <UART_SetConfig+0x1ac>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d14e      	bne.n	80069d6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006938:	f7fe fa6c 	bl	8004e14 <HAL_RCC_GetPCLK2Freq>
 800693c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	4613      	mov	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	009a      	lsls	r2, r3, #2
 8006948:	441a      	add	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	fbb2 f3f3 	udiv	r3, r2, r3
 8006954:	4a4a      	ldr	r2, [pc, #296]	; (8006a80 <UART_SetConfig+0x1b0>)
 8006956:	fba2 2303 	umull	r2, r3, r2, r3
 800695a:	095b      	lsrs	r3, r3, #5
 800695c:	0119      	lsls	r1, r3, #4
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	4613      	mov	r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	009a      	lsls	r2, r3, #2
 8006968:	441a      	add	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	fbb2 f2f3 	udiv	r2, r2, r3
 8006974:	4b42      	ldr	r3, [pc, #264]	; (8006a80 <UART_SetConfig+0x1b0>)
 8006976:	fba3 0302 	umull	r0, r3, r3, r2
 800697a:	095b      	lsrs	r3, r3, #5
 800697c:	2064      	movs	r0, #100	; 0x64
 800697e:	fb00 f303 	mul.w	r3, r0, r3
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	011b      	lsls	r3, r3, #4
 8006986:	3332      	adds	r3, #50	; 0x32
 8006988:	4a3d      	ldr	r2, [pc, #244]	; (8006a80 <UART_SetConfig+0x1b0>)
 800698a:	fba2 2303 	umull	r2, r3, r2, r3
 800698e:	095b      	lsrs	r3, r3, #5
 8006990:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006994:	4419      	add	r1, r3
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	4613      	mov	r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4413      	add	r3, r2
 800699e:	009a      	lsls	r2, r3, #2
 80069a0:	441a      	add	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80069ac:	4b34      	ldr	r3, [pc, #208]	; (8006a80 <UART_SetConfig+0x1b0>)
 80069ae:	fba3 0302 	umull	r0, r3, r3, r2
 80069b2:	095b      	lsrs	r3, r3, #5
 80069b4:	2064      	movs	r0, #100	; 0x64
 80069b6:	fb00 f303 	mul.w	r3, r0, r3
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	011b      	lsls	r3, r3, #4
 80069be:	3332      	adds	r3, #50	; 0x32
 80069c0:	4a2f      	ldr	r2, [pc, #188]	; (8006a80 <UART_SetConfig+0x1b0>)
 80069c2:	fba2 2303 	umull	r2, r3, r2, r3
 80069c6:	095b      	lsrs	r3, r3, #5
 80069c8:	f003 020f 	and.w	r2, r3, #15
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	440a      	add	r2, r1
 80069d2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80069d4:	e04d      	b.n	8006a72 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80069d6:	f7fe fa09 	bl	8004dec <HAL_RCC_GetPCLK1Freq>
 80069da:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	4613      	mov	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4413      	add	r3, r2
 80069e4:	009a      	lsls	r2, r3, #2
 80069e6:	441a      	add	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80069f2:	4a23      	ldr	r2, [pc, #140]	; (8006a80 <UART_SetConfig+0x1b0>)
 80069f4:	fba2 2303 	umull	r2, r3, r2, r3
 80069f8:	095b      	lsrs	r3, r3, #5
 80069fa:	0119      	lsls	r1, r3, #4
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	4613      	mov	r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	4413      	add	r3, r2
 8006a04:	009a      	lsls	r2, r3, #2
 8006a06:	441a      	add	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a12:	4b1b      	ldr	r3, [pc, #108]	; (8006a80 <UART_SetConfig+0x1b0>)
 8006a14:	fba3 0302 	umull	r0, r3, r3, r2
 8006a18:	095b      	lsrs	r3, r3, #5
 8006a1a:	2064      	movs	r0, #100	; 0x64
 8006a1c:	fb00 f303 	mul.w	r3, r0, r3
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	011b      	lsls	r3, r3, #4
 8006a24:	3332      	adds	r3, #50	; 0x32
 8006a26:	4a16      	ldr	r2, [pc, #88]	; (8006a80 <UART_SetConfig+0x1b0>)
 8006a28:	fba2 2303 	umull	r2, r3, r2, r3
 8006a2c:	095b      	lsrs	r3, r3, #5
 8006a2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a32:	4419      	add	r1, r3
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	4613      	mov	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4413      	add	r3, r2
 8006a3c:	009a      	lsls	r2, r3, #2
 8006a3e:	441a      	add	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a4a:	4b0d      	ldr	r3, [pc, #52]	; (8006a80 <UART_SetConfig+0x1b0>)
 8006a4c:	fba3 0302 	umull	r0, r3, r3, r2
 8006a50:	095b      	lsrs	r3, r3, #5
 8006a52:	2064      	movs	r0, #100	; 0x64
 8006a54:	fb00 f303 	mul.w	r3, r0, r3
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	011b      	lsls	r3, r3, #4
 8006a5c:	3332      	adds	r3, #50	; 0x32
 8006a5e:	4a08      	ldr	r2, [pc, #32]	; (8006a80 <UART_SetConfig+0x1b0>)
 8006a60:	fba2 2303 	umull	r2, r3, r2, r3
 8006a64:	095b      	lsrs	r3, r3, #5
 8006a66:	f003 020f 	and.w	r2, r3, #15
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	440a      	add	r2, r1
 8006a70:	609a      	str	r2, [r3, #8]
}
 8006a72:	bf00      	nop
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	40013800 	.word	0x40013800
 8006a80:	51eb851f 	.word	0x51eb851f

08006a84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006a84:	b084      	sub	sp, #16
 8006a86:	b480      	push	{r7}
 8006a88:	b083      	sub	sp, #12
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	f107 0014 	add.w	r0, r7, #20
 8006a92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bc80      	pop	{r7}
 8006aa0:	b004      	add	sp, #16
 8006aa2:	4770      	bx	lr

08006aa4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006aac:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006ab0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	43db      	mvns	r3, r3
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3714      	adds	r7, #20
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bc80      	pop	{r7}
 8006ad6:	4770      	bx	lr

08006ad8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bc80      	pop	{r7}
 8006aee:	4770      	bx	lr

08006af0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006af0:	b084      	sub	sp, #16
 8006af2:	b480      	push	{r7}
 8006af4:	b083      	sub	sp, #12
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
 8006afa:	f107 0014 	add.w	r0, r7, #20
 8006afe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bc80      	pop	{r7}
 8006b2c:	b004      	add	sp, #16
 8006b2e:	4770      	bx	lr

08006b30 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b0c4      	sub	sp, #272	; 0x110
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	1d3b      	adds	r3, r7, #4
 8006b38:	6018      	str	r0, [r3, #0]
 8006b3a:	463b      	mov	r3, r7
 8006b3c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b3e:	463b      	mov	r3, r7
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	785b      	ldrb	r3, [r3, #1]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	f040 8557 	bne.w	80075f8 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006b4a:	463b      	mov	r3, r7
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	699a      	ldr	r2, [r3, #24]
 8006b50:	463b      	mov	r3, r7
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d905      	bls.n	8006b66 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006b5a:	463b      	mov	r3, r7
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006b64:	e004      	b.n	8006b70 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006b66:	463b      	mov	r3, r7
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006b70:	463b      	mov	r3, r7
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	7b1b      	ldrb	r3, [r3, #12]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d12c      	bne.n	8006bd4 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006b7a:	463b      	mov	r3, r7
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	6959      	ldr	r1, [r3, #20]
 8006b80:	463b      	mov	r3, r7
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	88da      	ldrh	r2, [r3, #6]
 8006b86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	1d38      	adds	r0, r7, #4
 8006b8e:	6800      	ldr	r0, [r0, #0]
 8006b90:	f001 f91a 	bl	8007dc8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006b94:	1d3b      	adds	r3, r7, #4
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	617b      	str	r3, [r7, #20]
 8006b9a:	1d3b      	adds	r3, r7, #4
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	4413      	add	r3, r2
 8006baa:	617b      	str	r3, [r7, #20]
 8006bac:	463b      	mov	r3, r7
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	011a      	lsls	r2, r3, #4
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006bbc:	f107 0310 	add.w	r3, r7, #16
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	f107 0310 	add.w	r3, r7, #16
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	801a      	strh	r2, [r3, #0]
 8006bd0:	f000 bcdd 	b.w	800758e <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006bd4:	463b      	mov	r3, r7
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	78db      	ldrb	r3, [r3, #3]
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	f040 8347 	bne.w	800726e <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006be0:	463b      	mov	r3, r7
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6a1a      	ldr	r2, [r3, #32]
 8006be6:	463b      	mov	r3, r7
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	f240 82eb 	bls.w	80071c8 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006bf2:	1d3b      	adds	r3, r7, #4
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	463b      	mov	r3, r7
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	4413      	add	r3, r2
 8006c00:	881b      	ldrh	r3, [r3, #0]
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c0c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8006c10:	1d3b      	adds	r3, r7, #4
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	463b      	mov	r3, r7
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	441a      	add	r2, r3
 8006c1e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006c22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c2a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006c36:	463b      	mov	r3, r7
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	6a1a      	ldr	r2, [r3, #32]
 8006c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c40:	1ad2      	subs	r2, r2, r3
 8006c42:	463b      	mov	r3, r7
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006c48:	1d3b      	adds	r3, r7, #4
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	463b      	mov	r3, r7
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	4413      	add	r3, r2
 8006c56:	881b      	ldrh	r3, [r3, #0]
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f000 8159 	beq.w	8006f16 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006c64:	1d3b      	adds	r3, r7, #4
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	637b      	str	r3, [r7, #52]	; 0x34
 8006c6a:	463b      	mov	r3, r7
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	785b      	ldrb	r3, [r3, #1]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d164      	bne.n	8006d3e <USB_EPStartXfer+0x20e>
 8006c74:	1d3b      	adds	r3, r7, #4
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c7a:	1d3b      	adds	r3, r7, #4
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	461a      	mov	r2, r3
 8006c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c88:	4413      	add	r3, r2
 8006c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c8c:	463b      	mov	r3, r7
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	011a      	lsls	r2, r3, #4
 8006c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c96:	4413      	add	r3, r2
 8006c98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d112      	bne.n	8006ccc <USB_EPStartXfer+0x19c>
 8006ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb4:	801a      	strh	r2, [r3, #0]
 8006cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb8:	881b      	ldrh	r3, [r3, #0]
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc8:	801a      	strh	r2, [r3, #0]
 8006cca:	e054      	b.n	8006d76 <USB_EPStartXfer+0x246>
 8006ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cd0:	2b3e      	cmp	r3, #62	; 0x3e
 8006cd2:	d817      	bhi.n	8006d04 <USB_EPStartXfer+0x1d4>
 8006cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cd8:	085b      	lsrs	r3, r3, #1
 8006cda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006cde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d004      	beq.n	8006cf4 <USB_EPStartXfer+0x1c4>
 8006cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cee:	3301      	adds	r3, #1
 8006cf0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	029b      	lsls	r3, r3, #10
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d00:	801a      	strh	r2, [r3, #0]
 8006d02:	e038      	b.n	8006d76 <USB_EPStartXfer+0x246>
 8006d04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d08:	095b      	lsrs	r3, r3, #5
 8006d0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006d0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d12:	f003 031f 	and.w	r3, r3, #31
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d104      	bne.n	8006d24 <USB_EPStartXfer+0x1f4>
 8006d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	029b      	lsls	r3, r3, #10
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3a:	801a      	strh	r2, [r3, #0]
 8006d3c:	e01b      	b.n	8006d76 <USB_EPStartXfer+0x246>
 8006d3e:	463b      	mov	r3, r7
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	785b      	ldrb	r3, [r3, #1]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d116      	bne.n	8006d76 <USB_EPStartXfer+0x246>
 8006d48:	1d3b      	adds	r3, r7, #4
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	461a      	mov	r2, r3
 8006d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d56:	4413      	add	r3, r2
 8006d58:	637b      	str	r3, [r7, #52]	; 0x34
 8006d5a:	463b      	mov	r3, r7
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	011a      	lsls	r2, r3, #4
 8006d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d64:	4413      	add	r3, r2
 8006d66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d6a:	633b      	str	r3, [r7, #48]	; 0x30
 8006d6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d74:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006d76:	463b      	mov	r3, r7
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	895b      	ldrh	r3, [r3, #10]
 8006d7c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d80:	463b      	mov	r3, r7
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6959      	ldr	r1, [r3, #20]
 8006d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006d90:	1d38      	adds	r0, r7, #4
 8006d92:	6800      	ldr	r0, [r0, #0]
 8006d94:	f001 f818 	bl	8007dc8 <USB_WritePMA>
            ep->xfer_buff += len;
 8006d98:	463b      	mov	r3, r7
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	695a      	ldr	r2, [r3, #20]
 8006d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006da2:	441a      	add	r2, r3
 8006da4:	463b      	mov	r3, r7
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006daa:	463b      	mov	r3, r7
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6a1a      	ldr	r2, [r3, #32]
 8006db0:	463b      	mov	r3, r7
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d909      	bls.n	8006dce <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8006dba:	463b      	mov	r3, r7
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	6a1a      	ldr	r2, [r3, #32]
 8006dc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dc4:	1ad2      	subs	r2, r2, r3
 8006dc6:	463b      	mov	r3, r7
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	621a      	str	r2, [r3, #32]
 8006dcc:	e008      	b.n	8006de0 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006dce:	463b      	mov	r3, r7
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8006dd8:	463b      	mov	r3, r7
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006de0:	463b      	mov	r3, r7
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	785b      	ldrb	r3, [r3, #1]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d164      	bne.n	8006eb4 <USB_EPStartXfer+0x384>
 8006dea:	1d3b      	adds	r3, r7, #4
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	61fb      	str	r3, [r7, #28]
 8006df0:	1d3b      	adds	r3, r7, #4
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	4413      	add	r3, r2
 8006e00:	61fb      	str	r3, [r7, #28]
 8006e02:	463b      	mov	r3, r7
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	011a      	lsls	r2, r3, #4
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e12:	61bb      	str	r3, [r7, #24]
 8006e14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d112      	bne.n	8006e42 <USB_EPStartXfer+0x312>
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	881b      	ldrh	r3, [r3, #0]
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	801a      	strh	r2, [r3, #0]
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	881b      	ldrh	r3, [r3, #0]
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	801a      	strh	r2, [r3, #0]
 8006e40:	e057      	b.n	8006ef2 <USB_EPStartXfer+0x3c2>
 8006e42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e46:	2b3e      	cmp	r3, #62	; 0x3e
 8006e48:	d817      	bhi.n	8006e7a <USB_EPStartXfer+0x34a>
 8006e4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e4e:	085b      	lsrs	r3, r3, #1
 8006e50:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e58:	f003 0301 	and.w	r3, r3, #1
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d004      	beq.n	8006e6a <USB_EPStartXfer+0x33a>
 8006e60:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e64:	3301      	adds	r3, #1
 8006e66:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e6a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	029b      	lsls	r3, r3, #10
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	801a      	strh	r2, [r3, #0]
 8006e78:	e03b      	b.n	8006ef2 <USB_EPStartXfer+0x3c2>
 8006e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e7e:	095b      	lsrs	r3, r3, #5
 8006e80:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e88:	f003 031f 	and.w	r3, r3, #31
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d104      	bne.n	8006e9a <USB_EPStartXfer+0x36a>
 8006e90:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e94:	3b01      	subs	r3, #1
 8006e96:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e9a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	029b      	lsls	r3, r3, #10
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ea8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	801a      	strh	r2, [r3, #0]
 8006eb2:	e01e      	b.n	8006ef2 <USB_EPStartXfer+0x3c2>
 8006eb4:	463b      	mov	r3, r7
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	785b      	ldrb	r3, [r3, #1]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d119      	bne.n	8006ef2 <USB_EPStartXfer+0x3c2>
 8006ebe:	1d3b      	adds	r3, r7, #4
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ec4:	1d3b      	adds	r3, r7, #4
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	461a      	mov	r2, r3
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed2:	4413      	add	r3, r2
 8006ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ed6:	463b      	mov	r3, r7
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	011a      	lsls	r2, r3, #4
 8006ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ee6:	623b      	str	r3, [r7, #32]
 8006ee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	6a3b      	ldr	r3, [r7, #32]
 8006ef0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006ef2:	463b      	mov	r3, r7
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	891b      	ldrh	r3, [r3, #8]
 8006ef8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006efc:	463b      	mov	r3, r7
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6959      	ldr	r1, [r3, #20]
 8006f02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006f0c:	1d38      	adds	r0, r7, #4
 8006f0e:	6800      	ldr	r0, [r0, #0]
 8006f10:	f000 ff5a 	bl	8007dc8 <USB_WritePMA>
 8006f14:	e33b      	b.n	800758e <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f16:	463b      	mov	r3, r7
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	785b      	ldrb	r3, [r3, #1]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d164      	bne.n	8006fea <USB_EPStartXfer+0x4ba>
 8006f20:	1d3b      	adds	r3, r7, #4
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f26:	1d3b      	adds	r3, r7, #4
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	461a      	mov	r2, r3
 8006f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f34:	4413      	add	r3, r2
 8006f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f38:	463b      	mov	r3, r7
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	011a      	lsls	r2, r3, #4
 8006f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f42:	4413      	add	r3, r2
 8006f44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f48:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d112      	bne.n	8006f78 <USB_EPStartXfer+0x448>
 8006f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f54:	881b      	ldrh	r3, [r3, #0]
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f60:	801a      	strh	r2, [r3, #0]
 8006f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f74:	801a      	strh	r2, [r3, #0]
 8006f76:	e057      	b.n	8007028 <USB_EPStartXfer+0x4f8>
 8006f78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f7c:	2b3e      	cmp	r3, #62	; 0x3e
 8006f7e:	d817      	bhi.n	8006fb0 <USB_EPStartXfer+0x480>
 8006f80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f84:	085b      	lsrs	r3, r3, #1
 8006f86:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006f8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d004      	beq.n	8006fa0 <USB_EPStartXfer+0x470>
 8006f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006fa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	029b      	lsls	r3, r3, #10
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fac:	801a      	strh	r2, [r3, #0]
 8006fae:	e03b      	b.n	8007028 <USB_EPStartXfer+0x4f8>
 8006fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fb4:	095b      	lsrs	r3, r3, #5
 8006fb6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006fba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fbe:	f003 031f 	and.w	r3, r3, #31
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d104      	bne.n	8006fd0 <USB_EPStartXfer+0x4a0>
 8006fc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006fd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	029b      	lsls	r3, r3, #10
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fe6:	801a      	strh	r2, [r3, #0]
 8006fe8:	e01e      	b.n	8007028 <USB_EPStartXfer+0x4f8>
 8006fea:	463b      	mov	r3, r7
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	785b      	ldrb	r3, [r3, #1]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d119      	bne.n	8007028 <USB_EPStartXfer+0x4f8>
 8006ff4:	1d3b      	adds	r3, r7, #4
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	657b      	str	r3, [r7, #84]	; 0x54
 8006ffa:	1d3b      	adds	r3, r7, #4
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007002:	b29b      	uxth	r3, r3
 8007004:	461a      	mov	r2, r3
 8007006:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007008:	4413      	add	r3, r2
 800700a:	657b      	str	r3, [r7, #84]	; 0x54
 800700c:	463b      	mov	r3, r7
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	011a      	lsls	r2, r3, #4
 8007014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007016:	4413      	add	r3, r2
 8007018:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800701c:	653b      	str	r3, [r7, #80]	; 0x50
 800701e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007022:	b29a      	uxth	r2, r3
 8007024:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007026:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007028:	463b      	mov	r3, r7
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	891b      	ldrh	r3, [r3, #8]
 800702e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007032:	463b      	mov	r3, r7
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	6959      	ldr	r1, [r3, #20]
 8007038:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800703c:	b29b      	uxth	r3, r3
 800703e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007042:	1d38      	adds	r0, r7, #4
 8007044:	6800      	ldr	r0, [r0, #0]
 8007046:	f000 febf 	bl	8007dc8 <USB_WritePMA>
            ep->xfer_buff += len;
 800704a:	463b      	mov	r3, r7
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	695a      	ldr	r2, [r3, #20]
 8007050:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007054:	441a      	add	r2, r3
 8007056:	463b      	mov	r3, r7
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800705c:	463b      	mov	r3, r7
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	6a1a      	ldr	r2, [r3, #32]
 8007062:	463b      	mov	r3, r7
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	429a      	cmp	r2, r3
 800706a:	d909      	bls.n	8007080 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 800706c:	463b      	mov	r3, r7
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	6a1a      	ldr	r2, [r3, #32]
 8007072:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007076:	1ad2      	subs	r2, r2, r3
 8007078:	463b      	mov	r3, r7
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	621a      	str	r2, [r3, #32]
 800707e:	e008      	b.n	8007092 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8007080:	463b      	mov	r3, r7
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800708a:	463b      	mov	r3, r7
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2200      	movs	r2, #0
 8007090:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007092:	1d3b      	adds	r3, r7, #4
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	647b      	str	r3, [r7, #68]	; 0x44
 8007098:	463b      	mov	r3, r7
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	785b      	ldrb	r3, [r3, #1]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d164      	bne.n	800716c <USB_EPStartXfer+0x63c>
 80070a2:	1d3b      	adds	r3, r7, #4
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070a8:	1d3b      	adds	r3, r7, #4
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	461a      	mov	r2, r3
 80070b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070b6:	4413      	add	r3, r2
 80070b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070ba:	463b      	mov	r3, r7
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	011a      	lsls	r2, r3, #4
 80070c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070c4:	4413      	add	r3, r2
 80070c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80070ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80070cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d112      	bne.n	80070fa <USB_EPStartXfer+0x5ca>
 80070d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d6:	881b      	ldrh	r3, [r3, #0]
 80070d8:	b29b      	uxth	r3, r3
 80070da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070de:	b29a      	uxth	r2, r3
 80070e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e2:	801a      	strh	r2, [r3, #0]
 80070e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e6:	881b      	ldrh	r3, [r3, #0]
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f6:	801a      	strh	r2, [r3, #0]
 80070f8:	e054      	b.n	80071a4 <USB_EPStartXfer+0x674>
 80070fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070fe:	2b3e      	cmp	r3, #62	; 0x3e
 8007100:	d817      	bhi.n	8007132 <USB_EPStartXfer+0x602>
 8007102:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007106:	085b      	lsrs	r3, r3, #1
 8007108:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800710c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007110:	f003 0301 	and.w	r3, r3, #1
 8007114:	2b00      	cmp	r3, #0
 8007116:	d004      	beq.n	8007122 <USB_EPStartXfer+0x5f2>
 8007118:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800711c:	3301      	adds	r3, #1
 800711e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007122:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007126:	b29b      	uxth	r3, r3
 8007128:	029b      	lsls	r3, r3, #10
 800712a:	b29a      	uxth	r2, r3
 800712c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712e:	801a      	strh	r2, [r3, #0]
 8007130:	e038      	b.n	80071a4 <USB_EPStartXfer+0x674>
 8007132:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007136:	095b      	lsrs	r3, r3, #5
 8007138:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800713c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007140:	f003 031f 	and.w	r3, r3, #31
 8007144:	2b00      	cmp	r3, #0
 8007146:	d104      	bne.n	8007152 <USB_EPStartXfer+0x622>
 8007148:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800714c:	3b01      	subs	r3, #1
 800714e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007152:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007156:	b29b      	uxth	r3, r3
 8007158:	029b      	lsls	r3, r3, #10
 800715a:	b29b      	uxth	r3, r3
 800715c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007160:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007164:	b29a      	uxth	r2, r3
 8007166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007168:	801a      	strh	r2, [r3, #0]
 800716a:	e01b      	b.n	80071a4 <USB_EPStartXfer+0x674>
 800716c:	463b      	mov	r3, r7
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	785b      	ldrb	r3, [r3, #1]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d116      	bne.n	80071a4 <USB_EPStartXfer+0x674>
 8007176:	1d3b      	adds	r3, r7, #4
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800717e:	b29b      	uxth	r3, r3
 8007180:	461a      	mov	r2, r3
 8007182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007184:	4413      	add	r3, r2
 8007186:	647b      	str	r3, [r7, #68]	; 0x44
 8007188:	463b      	mov	r3, r7
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	011a      	lsls	r2, r3, #4
 8007190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007192:	4413      	add	r3, r2
 8007194:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007198:	643b      	str	r3, [r7, #64]	; 0x40
 800719a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800719e:	b29a      	uxth	r2, r3
 80071a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071a2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80071a4:	463b      	mov	r3, r7
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	895b      	ldrh	r3, [r3, #10]
 80071aa:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071ae:	463b      	mov	r3, r7
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	6959      	ldr	r1, [r3, #20]
 80071b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80071be:	1d38      	adds	r0, r7, #4
 80071c0:	6800      	ldr	r0, [r0, #0]
 80071c2:	f000 fe01 	bl	8007dc8 <USB_WritePMA>
 80071c6:	e1e2      	b.n	800758e <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80071c8:	463b      	mov	r3, r7
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80071d2:	1d3b      	adds	r3, r7, #4
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	463b      	mov	r3, r7
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4413      	add	r3, r2
 80071e0:	881b      	ldrh	r3, [r3, #0]
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80071e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ec:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80071f0:	1d3b      	adds	r3, r7, #4
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	463b      	mov	r3, r7
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	441a      	add	r2, r3
 80071fe:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800720a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800720e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007212:	b29b      	uxth	r3, r3
 8007214:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007216:	1d3b      	adds	r3, r7, #4
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	663b      	str	r3, [r7, #96]	; 0x60
 800721c:	1d3b      	adds	r3, r7, #4
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007224:	b29b      	uxth	r3, r3
 8007226:	461a      	mov	r2, r3
 8007228:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800722a:	4413      	add	r3, r2
 800722c:	663b      	str	r3, [r7, #96]	; 0x60
 800722e:	463b      	mov	r3, r7
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	011a      	lsls	r2, r3, #4
 8007236:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007238:	4413      	add	r3, r2
 800723a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800723e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007240:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007244:	b29a      	uxth	r2, r3
 8007246:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007248:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800724a:	463b      	mov	r3, r7
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	891b      	ldrh	r3, [r3, #8]
 8007250:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007254:	463b      	mov	r3, r7
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6959      	ldr	r1, [r3, #20]
 800725a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800725e:	b29b      	uxth	r3, r3
 8007260:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007264:	1d38      	adds	r0, r7, #4
 8007266:	6800      	ldr	r0, [r0, #0]
 8007268:	f000 fdae 	bl	8007dc8 <USB_WritePMA>
 800726c:	e18f      	b.n	800758e <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800726e:	1d3b      	adds	r3, r7, #4
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	463b      	mov	r3, r7
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4413      	add	r3, r2
 800727c:	881b      	ldrh	r3, [r3, #0]
 800727e:	b29b      	uxth	r3, r3
 8007280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007284:	2b00      	cmp	r3, #0
 8007286:	f000 808f 	beq.w	80073a8 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800728a:	1d3b      	adds	r3, r7, #4
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007290:	463b      	mov	r3, r7
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	785b      	ldrb	r3, [r3, #1]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d164      	bne.n	8007364 <USB_EPStartXfer+0x834>
 800729a:	1d3b      	adds	r3, r7, #4
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	673b      	str	r3, [r7, #112]	; 0x70
 80072a0:	1d3b      	adds	r3, r7, #4
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	461a      	mov	r2, r3
 80072ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072ae:	4413      	add	r3, r2
 80072b0:	673b      	str	r3, [r7, #112]	; 0x70
 80072b2:	463b      	mov	r3, r7
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	011a      	lsls	r2, r3, #4
 80072ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072bc:	4413      	add	r3, r2
 80072be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d112      	bne.n	80072f2 <USB_EPStartXfer+0x7c2>
 80072cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ce:	881b      	ldrh	r3, [r3, #0]
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072da:	801a      	strh	r2, [r3, #0]
 80072dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072de:	881b      	ldrh	r3, [r3, #0]
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ee:	801a      	strh	r2, [r3, #0]
 80072f0:	e054      	b.n	800739c <USB_EPStartXfer+0x86c>
 80072f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072f6:	2b3e      	cmp	r3, #62	; 0x3e
 80072f8:	d817      	bhi.n	800732a <USB_EPStartXfer+0x7fa>
 80072fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072fe:	085b      	lsrs	r3, r3, #1
 8007300:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007304:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007308:	f003 0301 	and.w	r3, r3, #1
 800730c:	2b00      	cmp	r3, #0
 800730e:	d004      	beq.n	800731a <USB_EPStartXfer+0x7ea>
 8007310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007314:	3301      	adds	r3, #1
 8007316:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800731a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800731e:	b29b      	uxth	r3, r3
 8007320:	029b      	lsls	r3, r3, #10
 8007322:	b29a      	uxth	r2, r3
 8007324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007326:	801a      	strh	r2, [r3, #0]
 8007328:	e038      	b.n	800739c <USB_EPStartXfer+0x86c>
 800732a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800732e:	095b      	lsrs	r3, r3, #5
 8007330:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007334:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007338:	f003 031f 	and.w	r3, r3, #31
 800733c:	2b00      	cmp	r3, #0
 800733e:	d104      	bne.n	800734a <USB_EPStartXfer+0x81a>
 8007340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007344:	3b01      	subs	r3, #1
 8007346:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800734a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800734e:	b29b      	uxth	r3, r3
 8007350:	029b      	lsls	r3, r3, #10
 8007352:	b29b      	uxth	r3, r3
 8007354:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007358:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800735c:	b29a      	uxth	r2, r3
 800735e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007360:	801a      	strh	r2, [r3, #0]
 8007362:	e01b      	b.n	800739c <USB_EPStartXfer+0x86c>
 8007364:	463b      	mov	r3, r7
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	785b      	ldrb	r3, [r3, #1]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d116      	bne.n	800739c <USB_EPStartXfer+0x86c>
 800736e:	1d3b      	adds	r3, r7, #4
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007376:	b29b      	uxth	r3, r3
 8007378:	461a      	mov	r2, r3
 800737a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800737c:	4413      	add	r3, r2
 800737e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007380:	463b      	mov	r3, r7
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	011a      	lsls	r2, r3, #4
 8007388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800738a:	4413      	add	r3, r2
 800738c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007390:	677b      	str	r3, [r7, #116]	; 0x74
 8007392:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007396:	b29a      	uxth	r2, r3
 8007398:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800739a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800739c:	463b      	mov	r3, r7
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	895b      	ldrh	r3, [r3, #10]
 80073a2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 80073a6:	e097      	b.n	80074d8 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80073a8:	463b      	mov	r3, r7
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	785b      	ldrb	r3, [r3, #1]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d168      	bne.n	8007484 <USB_EPStartXfer+0x954>
 80073b2:	1d3b      	adds	r3, r7, #4
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80073ba:	1d3b      	adds	r3, r7, #4
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	461a      	mov	r2, r3
 80073c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80073ca:	4413      	add	r3, r2
 80073cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80073d0:	463b      	mov	r3, r7
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	011a      	lsls	r2, r3, #4
 80073d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80073dc:	4413      	add	r3, r2
 80073de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80073e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80073e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d112      	bne.n	8007412 <USB_EPStartXfer+0x8e2>
 80073ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80073fa:	801a      	strh	r2, [r3, #0]
 80073fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80073fe:	881b      	ldrh	r3, [r3, #0]
 8007400:	b29b      	uxth	r3, r3
 8007402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800740a:	b29a      	uxth	r2, r3
 800740c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800740e:	801a      	strh	r2, [r3, #0]
 8007410:	e05d      	b.n	80074ce <USB_EPStartXfer+0x99e>
 8007412:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007416:	2b3e      	cmp	r3, #62	; 0x3e
 8007418:	d817      	bhi.n	800744a <USB_EPStartXfer+0x91a>
 800741a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800741e:	085b      	lsrs	r3, r3, #1
 8007420:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007424:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007428:	f003 0301 	and.w	r3, r3, #1
 800742c:	2b00      	cmp	r3, #0
 800742e:	d004      	beq.n	800743a <USB_EPStartXfer+0x90a>
 8007430:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007434:	3301      	adds	r3, #1
 8007436:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800743a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800743e:	b29b      	uxth	r3, r3
 8007440:	029b      	lsls	r3, r3, #10
 8007442:	b29a      	uxth	r2, r3
 8007444:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007446:	801a      	strh	r2, [r3, #0]
 8007448:	e041      	b.n	80074ce <USB_EPStartXfer+0x99e>
 800744a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800744e:	095b      	lsrs	r3, r3, #5
 8007450:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007454:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007458:	f003 031f 	and.w	r3, r3, #31
 800745c:	2b00      	cmp	r3, #0
 800745e:	d104      	bne.n	800746a <USB_EPStartXfer+0x93a>
 8007460:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007464:	3b01      	subs	r3, #1
 8007466:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800746a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800746e:	b29b      	uxth	r3, r3
 8007470:	029b      	lsls	r3, r3, #10
 8007472:	b29b      	uxth	r3, r3
 8007474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800747c:	b29a      	uxth	r2, r3
 800747e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007480:	801a      	strh	r2, [r3, #0]
 8007482:	e024      	b.n	80074ce <USB_EPStartXfer+0x99e>
 8007484:	463b      	mov	r3, r7
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	785b      	ldrb	r3, [r3, #1]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d11f      	bne.n	80074ce <USB_EPStartXfer+0x99e>
 800748e:	1d3b      	adds	r3, r7, #4
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007496:	1d3b      	adds	r3, r7, #4
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800749e:	b29b      	uxth	r3, r3
 80074a0:	461a      	mov	r2, r3
 80074a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074a6:	4413      	add	r3, r2
 80074a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80074ac:	463b      	mov	r3, r7
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	011a      	lsls	r2, r3, #4
 80074b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074b8:	4413      	add	r3, r2
 80074ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80074be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074cc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80074ce:	463b      	mov	r3, r7
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	891b      	ldrh	r3, [r3, #8]
 80074d4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074d8:	463b      	mov	r3, r7
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6959      	ldr	r1, [r3, #20]
 80074de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80074e8:	1d38      	adds	r0, r7, #4
 80074ea:	6800      	ldr	r0, [r0, #0]
 80074ec:	f000 fc6c 	bl	8007dc8 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80074f0:	463b      	mov	r3, r7
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	785b      	ldrb	r3, [r3, #1]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d122      	bne.n	8007540 <USB_EPStartXfer+0xa10>
 80074fa:	1d3b      	adds	r3, r7, #4
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	463b      	mov	r3, r7
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	881b      	ldrh	r3, [r3, #0]
 800750a:	b29b      	uxth	r3, r3
 800750c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007514:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8007518:	1d3b      	adds	r3, r7, #4
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	463b      	mov	r3, r7
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	441a      	add	r2, r3
 8007526:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800752a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800752e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007536:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800753a:	b29b      	uxth	r3, r3
 800753c:	8013      	strh	r3, [r2, #0]
 800753e:	e026      	b.n	800758e <USB_EPStartXfer+0xa5e>
 8007540:	463b      	mov	r3, r7
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	785b      	ldrb	r3, [r3, #1]
 8007546:	2b01      	cmp	r3, #1
 8007548:	d121      	bne.n	800758e <USB_EPStartXfer+0xa5e>
 800754a:	1d3b      	adds	r3, r7, #4
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	463b      	mov	r3, r7
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4413      	add	r3, r2
 8007558:	881b      	ldrh	r3, [r3, #0]
 800755a:	b29b      	uxth	r3, r3
 800755c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007564:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8007568:	1d3b      	adds	r3, r7, #4
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	463b      	mov	r3, r7
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	441a      	add	r2, r3
 8007576:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800757a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800757e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007582:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800758a:	b29b      	uxth	r3, r3
 800758c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800758e:	1d3b      	adds	r3, r7, #4
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	463b      	mov	r3, r7
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	4413      	add	r3, r2
 800759c:	881b      	ldrh	r3, [r3, #0]
 800759e:	b29b      	uxth	r3, r3
 80075a0:	f107 020e 	add.w	r2, r7, #14
 80075a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075ac:	8013      	strh	r3, [r2, #0]
 80075ae:	f107 030e 	add.w	r3, r7, #14
 80075b2:	f107 020e 	add.w	r2, r7, #14
 80075b6:	8812      	ldrh	r2, [r2, #0]
 80075b8:	f082 0210 	eor.w	r2, r2, #16
 80075bc:	801a      	strh	r2, [r3, #0]
 80075be:	f107 030e 	add.w	r3, r7, #14
 80075c2:	f107 020e 	add.w	r2, r7, #14
 80075c6:	8812      	ldrh	r2, [r2, #0]
 80075c8:	f082 0220 	eor.w	r2, r2, #32
 80075cc:	801a      	strh	r2, [r3, #0]
 80075ce:	1d3b      	adds	r3, r7, #4
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	463b      	mov	r3, r7
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	441a      	add	r2, r3
 80075dc:	f107 030e 	add.w	r3, r7, #14
 80075e0:	881b      	ldrh	r3, [r3, #0]
 80075e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	8013      	strh	r3, [r2, #0]
 80075f6:	e3b5      	b.n	8007d64 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80075f8:	463b      	mov	r3, r7
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	7b1b      	ldrb	r3, [r3, #12]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f040 8090 	bne.w	8007724 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007604:	463b      	mov	r3, r7
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	699a      	ldr	r2, [r3, #24]
 800760a:	463b      	mov	r3, r7
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	429a      	cmp	r2, r3
 8007612:	d90e      	bls.n	8007632 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8007614:	463b      	mov	r3, r7
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800761e:	463b      	mov	r3, r7
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	699a      	ldr	r2, [r3, #24]
 8007624:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007628:	1ad2      	subs	r2, r2, r3
 800762a:	463b      	mov	r3, r7
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	619a      	str	r2, [r3, #24]
 8007630:	e008      	b.n	8007644 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8007632:	463b      	mov	r3, r7
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 800763c:	463b      	mov	r3, r7
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2200      	movs	r2, #0
 8007642:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007644:	1d3b      	adds	r3, r7, #4
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800764c:	1d3b      	adds	r3, r7, #4
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007654:	b29b      	uxth	r3, r3
 8007656:	461a      	mov	r2, r3
 8007658:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800765c:	4413      	add	r3, r2
 800765e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007662:	463b      	mov	r3, r7
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	011a      	lsls	r2, r3, #4
 800766a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800766e:	4413      	add	r3, r2
 8007670:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007674:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007678:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800767c:	2b00      	cmp	r3, #0
 800767e:	d116      	bne.n	80076ae <USB_EPStartXfer+0xb7e>
 8007680:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007684:	881b      	ldrh	r3, [r3, #0]
 8007686:	b29b      	uxth	r3, r3
 8007688:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800768c:	b29a      	uxth	r2, r3
 800768e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007692:	801a      	strh	r2, [r3, #0]
 8007694:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007698:	881b      	ldrh	r3, [r3, #0]
 800769a:	b29b      	uxth	r3, r3
 800769c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80076aa:	801a      	strh	r2, [r3, #0]
 80076ac:	e32c      	b.n	8007d08 <USB_EPStartXfer+0x11d8>
 80076ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076b2:	2b3e      	cmp	r3, #62	; 0x3e
 80076b4:	d818      	bhi.n	80076e8 <USB_EPStartXfer+0xbb8>
 80076b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076ba:	085b      	lsrs	r3, r3, #1
 80076bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80076c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076c4:	f003 0301 	and.w	r3, r3, #1
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d004      	beq.n	80076d6 <USB_EPStartXfer+0xba6>
 80076cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80076d0:	3301      	adds	r3, #1
 80076d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80076d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80076da:	b29b      	uxth	r3, r3
 80076dc:	029b      	lsls	r3, r3, #10
 80076de:	b29a      	uxth	r2, r3
 80076e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80076e4:	801a      	strh	r2, [r3, #0]
 80076e6:	e30f      	b.n	8007d08 <USB_EPStartXfer+0x11d8>
 80076e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076ec:	095b      	lsrs	r3, r3, #5
 80076ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80076f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076f6:	f003 031f 	and.w	r3, r3, #31
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d104      	bne.n	8007708 <USB_EPStartXfer+0xbd8>
 80076fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007702:	3b01      	subs	r3, #1
 8007704:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007708:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800770c:	b29b      	uxth	r3, r3
 800770e:	029b      	lsls	r3, r3, #10
 8007710:	b29b      	uxth	r3, r3
 8007712:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007716:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800771a:	b29a      	uxth	r2, r3
 800771c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007720:	801a      	strh	r2, [r3, #0]
 8007722:	e2f1      	b.n	8007d08 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007724:	463b      	mov	r3, r7
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	78db      	ldrb	r3, [r3, #3]
 800772a:	2b02      	cmp	r3, #2
 800772c:	f040 818f 	bne.w	8007a4e <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007730:	463b      	mov	r3, r7
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	785b      	ldrb	r3, [r3, #1]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d175      	bne.n	8007826 <USB_EPStartXfer+0xcf6>
 800773a:	1d3b      	adds	r3, r7, #4
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007742:	1d3b      	adds	r3, r7, #4
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800774a:	b29b      	uxth	r3, r3
 800774c:	461a      	mov	r2, r3
 800774e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007752:	4413      	add	r3, r2
 8007754:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007758:	463b      	mov	r3, r7
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	011a      	lsls	r2, r3, #4
 8007760:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007764:	4413      	add	r3, r2
 8007766:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800776a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800776e:	463b      	mov	r3, r7
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d116      	bne.n	80077a6 <USB_EPStartXfer+0xc76>
 8007778:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800777c:	881b      	ldrh	r3, [r3, #0]
 800777e:	b29b      	uxth	r3, r3
 8007780:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007784:	b29a      	uxth	r2, r3
 8007786:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800778a:	801a      	strh	r2, [r3, #0]
 800778c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007790:	881b      	ldrh	r3, [r3, #0]
 8007792:	b29b      	uxth	r3, r3
 8007794:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007798:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800779c:	b29a      	uxth	r2, r3
 800779e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077a2:	801a      	strh	r2, [r3, #0]
 80077a4:	e065      	b.n	8007872 <USB_EPStartXfer+0xd42>
 80077a6:	463b      	mov	r3, r7
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	2b3e      	cmp	r3, #62	; 0x3e
 80077ae:	d81a      	bhi.n	80077e6 <USB_EPStartXfer+0xcb6>
 80077b0:	463b      	mov	r3, r7
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	085b      	lsrs	r3, r3, #1
 80077b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80077bc:	463b      	mov	r3, r7
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	f003 0301 	and.w	r3, r3, #1
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d004      	beq.n	80077d4 <USB_EPStartXfer+0xca4>
 80077ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80077ce:	3301      	adds	r3, #1
 80077d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80077d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80077d8:	b29b      	uxth	r3, r3
 80077da:	029b      	lsls	r3, r3, #10
 80077dc:	b29a      	uxth	r2, r3
 80077de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077e2:	801a      	strh	r2, [r3, #0]
 80077e4:	e045      	b.n	8007872 <USB_EPStartXfer+0xd42>
 80077e6:	463b      	mov	r3, r7
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	095b      	lsrs	r3, r3, #5
 80077ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80077f2:	463b      	mov	r3, r7
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	691b      	ldr	r3, [r3, #16]
 80077f8:	f003 031f 	and.w	r3, r3, #31
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d104      	bne.n	800780a <USB_EPStartXfer+0xcda>
 8007800:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007804:	3b01      	subs	r3, #1
 8007806:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800780a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800780e:	b29b      	uxth	r3, r3
 8007810:	029b      	lsls	r3, r3, #10
 8007812:	b29b      	uxth	r3, r3
 8007814:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007818:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800781c:	b29a      	uxth	r2, r3
 800781e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007822:	801a      	strh	r2, [r3, #0]
 8007824:	e025      	b.n	8007872 <USB_EPStartXfer+0xd42>
 8007826:	463b      	mov	r3, r7
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	785b      	ldrb	r3, [r3, #1]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d120      	bne.n	8007872 <USB_EPStartXfer+0xd42>
 8007830:	1d3b      	adds	r3, r7, #4
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007838:	1d3b      	adds	r3, r7, #4
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007840:	b29b      	uxth	r3, r3
 8007842:	461a      	mov	r2, r3
 8007844:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007848:	4413      	add	r3, r2
 800784a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800784e:	463b      	mov	r3, r7
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	011a      	lsls	r2, r3, #4
 8007856:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800785a:	4413      	add	r3, r2
 800785c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007860:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007864:	463b      	mov	r3, r7
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	b29a      	uxth	r2, r3
 800786c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007870:	801a      	strh	r2, [r3, #0]
 8007872:	1d3b      	adds	r3, r7, #4
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800787a:	463b      	mov	r3, r7
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	785b      	ldrb	r3, [r3, #1]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d175      	bne.n	8007970 <USB_EPStartXfer+0xe40>
 8007884:	1d3b      	adds	r3, r7, #4
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800788c:	1d3b      	adds	r3, r7, #4
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007894:	b29b      	uxth	r3, r3
 8007896:	461a      	mov	r2, r3
 8007898:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800789c:	4413      	add	r3, r2
 800789e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80078a2:	463b      	mov	r3, r7
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	011a      	lsls	r2, r3, #4
 80078aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078ae:	4413      	add	r3, r2
 80078b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80078b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80078b8:	463b      	mov	r3, r7
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d116      	bne.n	80078f0 <USB_EPStartXfer+0xdc0>
 80078c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078c6:	881b      	ldrh	r3, [r3, #0]
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078d4:	801a      	strh	r2, [r3, #0]
 80078d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078da:	881b      	ldrh	r3, [r3, #0]
 80078dc:	b29b      	uxth	r3, r3
 80078de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078ec:	801a      	strh	r2, [r3, #0]
 80078ee:	e061      	b.n	80079b4 <USB_EPStartXfer+0xe84>
 80078f0:	463b      	mov	r3, r7
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	2b3e      	cmp	r3, #62	; 0x3e
 80078f8:	d81a      	bhi.n	8007930 <USB_EPStartXfer+0xe00>
 80078fa:	463b      	mov	r3, r7
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	085b      	lsrs	r3, r3, #1
 8007902:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007906:	463b      	mov	r3, r7
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	f003 0301 	and.w	r3, r3, #1
 8007910:	2b00      	cmp	r3, #0
 8007912:	d004      	beq.n	800791e <USB_EPStartXfer+0xdee>
 8007914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007918:	3301      	adds	r3, #1
 800791a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800791e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007922:	b29b      	uxth	r3, r3
 8007924:	029b      	lsls	r3, r3, #10
 8007926:	b29a      	uxth	r2, r3
 8007928:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800792c:	801a      	strh	r2, [r3, #0]
 800792e:	e041      	b.n	80079b4 <USB_EPStartXfer+0xe84>
 8007930:	463b      	mov	r3, r7
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	095b      	lsrs	r3, r3, #5
 8007938:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800793c:	463b      	mov	r3, r7
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	f003 031f 	and.w	r3, r3, #31
 8007946:	2b00      	cmp	r3, #0
 8007948:	d104      	bne.n	8007954 <USB_EPStartXfer+0xe24>
 800794a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800794e:	3b01      	subs	r3, #1
 8007950:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007958:	b29b      	uxth	r3, r3
 800795a:	029b      	lsls	r3, r3, #10
 800795c:	b29b      	uxth	r3, r3
 800795e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007962:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007966:	b29a      	uxth	r2, r3
 8007968:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800796c:	801a      	strh	r2, [r3, #0]
 800796e:	e021      	b.n	80079b4 <USB_EPStartXfer+0xe84>
 8007970:	463b      	mov	r3, r7
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	785b      	ldrb	r3, [r3, #1]
 8007976:	2b01      	cmp	r3, #1
 8007978:	d11c      	bne.n	80079b4 <USB_EPStartXfer+0xe84>
 800797a:	1d3b      	adds	r3, r7, #4
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007982:	b29b      	uxth	r3, r3
 8007984:	461a      	mov	r2, r3
 8007986:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800798a:	4413      	add	r3, r2
 800798c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007990:	463b      	mov	r3, r7
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	011a      	lsls	r2, r3, #4
 8007998:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800799c:	4413      	add	r3, r2
 800799e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80079a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80079a6:	463b      	mov	r3, r7
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80079b2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80079b4:	463b      	mov	r3, r7
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	69db      	ldr	r3, [r3, #28]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f000 81a4 	beq.w	8007d08 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80079c0:	1d3b      	adds	r3, r7, #4
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	463b      	mov	r3, r7
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	4413      	add	r3, r2
 80079ce:	881b      	ldrh	r3, [r3, #0]
 80079d0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80079d4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80079d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d005      	beq.n	80079ec <USB_EPStartXfer+0xebc>
 80079e0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80079e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d10d      	bne.n	8007a08 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80079ec:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80079f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f040 8187 	bne.w	8007d08 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80079fa:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80079fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f040 8180 	bne.w	8007d08 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007a08:	1d3b      	adds	r3, r7, #4
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	463b      	mov	r3, r7
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	4413      	add	r3, r2
 8007a16:	881b      	ldrh	r3, [r3, #0]
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a22:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8007a26:	1d3b      	adds	r3, r7, #4
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	463b      	mov	r3, r7
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	441a      	add	r2, r3
 8007a34:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8007a38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	8013      	strh	r3, [r2, #0]
 8007a4c:	e15c      	b.n	8007d08 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007a4e:	463b      	mov	r3, r7
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	78db      	ldrb	r3, [r3, #3]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	f040 8155 	bne.w	8007d04 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007a5a:	463b      	mov	r3, r7
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	699a      	ldr	r2, [r3, #24]
 8007a60:	463b      	mov	r3, r7
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d90e      	bls.n	8007a88 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8007a6a:	463b      	mov	r3, r7
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8007a74:	463b      	mov	r3, r7
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	699a      	ldr	r2, [r3, #24]
 8007a7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a7e:	1ad2      	subs	r2, r2, r3
 8007a80:	463b      	mov	r3, r7
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	619a      	str	r2, [r3, #24]
 8007a86:	e008      	b.n	8007a9a <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8007a88:	463b      	mov	r3, r7
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8007a92:	463b      	mov	r3, r7
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2200      	movs	r2, #0
 8007a98:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007a9a:	463b      	mov	r3, r7
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	785b      	ldrb	r3, [r3, #1]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d16f      	bne.n	8007b84 <USB_EPStartXfer+0x1054>
 8007aa4:	1d3b      	adds	r3, r7, #4
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007aac:	1d3b      	adds	r3, r7, #4
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007abc:	4413      	add	r3, r2
 8007abe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ac2:	463b      	mov	r3, r7
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	011a      	lsls	r2, r3, #4
 8007aca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007ace:	4413      	add	r3, r2
 8007ad0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ad4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d116      	bne.n	8007b0e <USB_EPStartXfer+0xfde>
 8007ae0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007ae4:	881b      	ldrh	r3, [r3, #0]
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007aec:	b29a      	uxth	r2, r3
 8007aee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007af2:	801a      	strh	r2, [r3, #0]
 8007af4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007af8:	881b      	ldrh	r3, [r3, #0]
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b04:	b29a      	uxth	r2, r3
 8007b06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007b0a:	801a      	strh	r2, [r3, #0]
 8007b0c:	e05f      	b.n	8007bce <USB_EPStartXfer+0x109e>
 8007b0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b12:	2b3e      	cmp	r3, #62	; 0x3e
 8007b14:	d818      	bhi.n	8007b48 <USB_EPStartXfer+0x1018>
 8007b16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b1a:	085b      	lsrs	r3, r3, #1
 8007b1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b24:	f003 0301 	and.w	r3, r3, #1
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d004      	beq.n	8007b36 <USB_EPStartXfer+0x1006>
 8007b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b30:	3301      	adds	r3, #1
 8007b32:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	029b      	lsls	r3, r3, #10
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007b44:	801a      	strh	r2, [r3, #0]
 8007b46:	e042      	b.n	8007bce <USB_EPStartXfer+0x109e>
 8007b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b4c:	095b      	lsrs	r3, r3, #5
 8007b4e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b56:	f003 031f 	and.w	r3, r3, #31
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d104      	bne.n	8007b68 <USB_EPStartXfer+0x1038>
 8007b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b62:	3b01      	subs	r3, #1
 8007b64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	029b      	lsls	r3, r3, #10
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007b80:	801a      	strh	r2, [r3, #0]
 8007b82:	e024      	b.n	8007bce <USB_EPStartXfer+0x109e>
 8007b84:	463b      	mov	r3, r7
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	785b      	ldrb	r3, [r3, #1]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d11f      	bne.n	8007bce <USB_EPStartXfer+0x109e>
 8007b8e:	1d3b      	adds	r3, r7, #4
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b96:	1d3b      	adds	r3, r7, #4
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007bac:	463b      	mov	r3, r7
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	011a      	lsls	r2, r3, #4
 8007bb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007bb8:	4413      	add	r3, r2
 8007bba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007bbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007bcc:	801a      	strh	r2, [r3, #0]
 8007bce:	1d3b      	adds	r3, r7, #4
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007bd6:	463b      	mov	r3, r7
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	785b      	ldrb	r3, [r3, #1]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d16f      	bne.n	8007cc0 <USB_EPStartXfer+0x1190>
 8007be0:	1d3b      	adds	r3, r7, #4
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007be8:	1d3b      	adds	r3, r7, #4
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007bf8:	4413      	add	r3, r2
 8007bfa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007bfe:	463b      	mov	r3, r7
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	011a      	lsls	r2, r3, #4
 8007c06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007c14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d116      	bne.n	8007c4a <USB_EPStartXfer+0x111a>
 8007c1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007c20:	881b      	ldrh	r3, [r3, #0]
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007c2e:	801a      	strh	r2, [r3, #0]
 8007c30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007c34:	881b      	ldrh	r3, [r3, #0]
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c40:	b29a      	uxth	r2, r3
 8007c42:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007c46:	801a      	strh	r2, [r3, #0]
 8007c48:	e05e      	b.n	8007d08 <USB_EPStartXfer+0x11d8>
 8007c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c4e:	2b3e      	cmp	r3, #62	; 0x3e
 8007c50:	d818      	bhi.n	8007c84 <USB_EPStartXfer+0x1154>
 8007c52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c56:	085b      	lsrs	r3, r3, #1
 8007c58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c60:	f003 0301 	and.w	r3, r3, #1
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d004      	beq.n	8007c72 <USB_EPStartXfer+0x1142>
 8007c68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007c72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	029b      	lsls	r3, r3, #10
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007c80:	801a      	strh	r2, [r3, #0]
 8007c82:	e041      	b.n	8007d08 <USB_EPStartXfer+0x11d8>
 8007c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c88:	095b      	lsrs	r3, r3, #5
 8007c8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007c8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c92:	f003 031f 	and.w	r3, r3, #31
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d104      	bne.n	8007ca4 <USB_EPStartXfer+0x1174>
 8007c9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007ca4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	029b      	lsls	r3, r3, #10
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007cbc:	801a      	strh	r2, [r3, #0]
 8007cbe:	e023      	b.n	8007d08 <USB_EPStartXfer+0x11d8>
 8007cc0:	463b      	mov	r3, r7
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	785b      	ldrb	r3, [r3, #1]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d11e      	bne.n	8007d08 <USB_EPStartXfer+0x11d8>
 8007cca:	1d3b      	adds	r3, r7, #4
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007cda:	4413      	add	r3, r2
 8007cdc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ce0:	463b      	mov	r3, r7
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	011a      	lsls	r2, r3, #4
 8007ce8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007cec:	4413      	add	r3, r2
 8007cee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007cf2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007cf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cfa:	b29a      	uxth	r2, r3
 8007cfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007d00:	801a      	strh	r2, [r3, #0]
 8007d02:	e001      	b.n	8007d08 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	e02e      	b.n	8007d66 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d08:	1d3b      	adds	r3, r7, #4
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	463b      	mov	r3, r7
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	4413      	add	r3, r2
 8007d16:	881b      	ldrh	r3, [r3, #0]
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d22:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007d26:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007d2a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007d2e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007d32:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007d36:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007d3a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007d3e:	1d3b      	adds	r3, r7, #4
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	463b      	mov	r3, r7
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	441a      	add	r2, r3
 8007d4c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007d50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	460b      	mov	r3, r1
 8007d7a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007d7c:	78fb      	ldrb	r3, [r7, #3]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d103      	bne.n	8007d8a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2280      	movs	r2, #128	; 0x80
 8007d86:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bc80      	pop	{r7}
 8007d94:	4770      	bx	lr

08007d96 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007d96:	b480      	push	{r7}
 8007d98:	b083      	sub	sp, #12
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bc80      	pop	{r7}
 8007da8:	4770      	bx	lr

08007daa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007daa:	b480      	push	{r7}
 8007dac:	b085      	sub	sp, #20
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3714      	adds	r7, #20
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bc80      	pop	{r7}
 8007dc6:	4770      	bx	lr

08007dc8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b08d      	sub	sp, #52	; 0x34
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	4611      	mov	r1, r2
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	80fb      	strh	r3, [r7, #6]
 8007dda:	4613      	mov	r3, r2
 8007ddc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007dde:	88bb      	ldrh	r3, [r7, #4]
 8007de0:	3301      	adds	r3, #1
 8007de2:	085b      	lsrs	r3, r3, #1
 8007de4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007dee:	88fb      	ldrh	r3, [r7, #6]
 8007df0:	005a      	lsls	r2, r3, #1
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	4413      	add	r3, r2
 8007df6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dfa:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007dfc:	6a3b      	ldr	r3, [r7, #32]
 8007dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e00:	e01e      	b.n	8007e40 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	021b      	lsls	r3, r3, #8
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	461a      	mov	r2, r3
 8007e1a:	69bb      	ldr	r3, [r7, #24]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e26:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2a:	3302      	adds	r3, #2
 8007e2c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e30:	3302      	adds	r3, #2
 8007e32:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e36:	3301      	adds	r3, #1
 8007e38:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1dd      	bne.n	8007e02 <USB_WritePMA+0x3a>
  }
}
 8007e46:	bf00      	nop
 8007e48:	bf00      	nop
 8007e4a:	3734      	adds	r7, #52	; 0x34
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bc80      	pop	{r7}
 8007e50:	4770      	bx	lr

08007e52 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007e52:	b480      	push	{r7}
 8007e54:	b08b      	sub	sp, #44	; 0x2c
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	60f8      	str	r0, [r7, #12]
 8007e5a:	60b9      	str	r1, [r7, #8]
 8007e5c:	4611      	mov	r1, r2
 8007e5e:	461a      	mov	r2, r3
 8007e60:	460b      	mov	r3, r1
 8007e62:	80fb      	strh	r3, [r7, #6]
 8007e64:	4613      	mov	r3, r2
 8007e66:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007e68:	88bb      	ldrh	r3, [r7, #4]
 8007e6a:	085b      	lsrs	r3, r3, #1
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e78:	88fb      	ldrh	r3, [r7, #6]
 8007e7a:	005a      	lsls	r2, r3, #1
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	4413      	add	r3, r2
 8007e80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e84:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	627b      	str	r3, [r7, #36]	; 0x24
 8007e8a:	e01b      	b.n	8007ec4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007e8c:	6a3b      	ldr	r3, [r7, #32]
 8007e8e:	881b      	ldrh	r3, [r3, #0]
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007e94:	6a3b      	ldr	r3, [r7, #32]
 8007e96:	3302      	adds	r3, #2
 8007e98:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	b2da      	uxtb	r2, r3
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	0a1b      	lsrs	r3, r3, #8
 8007eac:	b2da      	uxtb	r2, r3
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007eb8:	6a3b      	ldr	r3, [r7, #32]
 8007eba:	3302      	adds	r3, #2
 8007ebc:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec0:	3b01      	subs	r3, #1
 8007ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8007ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1e0      	bne.n	8007e8c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007eca:	88bb      	ldrh	r3, [r7, #4]
 8007ecc:	f003 0301 	and.w	r3, r3, #1
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d007      	beq.n	8007ee6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007ed6:	6a3b      	ldr	r3, [r7, #32]
 8007ed8:	881b      	ldrh	r3, [r3, #0]
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	b2da      	uxtb	r2, r3
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	701a      	strb	r2, [r3, #0]
  }
}
 8007ee6:	bf00      	nop
 8007ee8:	372c      	adds	r7, #44	; 0x2c
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bc80      	pop	{r7}
 8007eee:	4770      	bx	lr

08007ef0 <__assert_func>:
 8007ef0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ef2:	4614      	mov	r4, r2
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	4b09      	ldr	r3, [pc, #36]	; (8007f1c <__assert_func+0x2c>)
 8007ef8:	4605      	mov	r5, r0
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68d8      	ldr	r0, [r3, #12]
 8007efe:	b14c      	cbz	r4, 8007f14 <__assert_func+0x24>
 8007f00:	4b07      	ldr	r3, [pc, #28]	; (8007f20 <__assert_func+0x30>)
 8007f02:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f06:	9100      	str	r1, [sp, #0]
 8007f08:	462b      	mov	r3, r5
 8007f0a:	4906      	ldr	r1, [pc, #24]	; (8007f24 <__assert_func+0x34>)
 8007f0c:	f000 f814 	bl	8007f38 <fiprintf>
 8007f10:	f002 f870 	bl	8009ff4 <abort>
 8007f14:	4b04      	ldr	r3, [pc, #16]	; (8007f28 <__assert_func+0x38>)
 8007f16:	461c      	mov	r4, r3
 8007f18:	e7f3      	b.n	8007f02 <__assert_func+0x12>
 8007f1a:	bf00      	nop
 8007f1c:	20000054 	.word	0x20000054
 8007f20:	0800c830 	.word	0x0800c830
 8007f24:	0800c83d 	.word	0x0800c83d
 8007f28:	0800c86b 	.word	0x0800c86b

08007f2c <__errno>:
 8007f2c:	4b01      	ldr	r3, [pc, #4]	; (8007f34 <__errno+0x8>)
 8007f2e:	6818      	ldr	r0, [r3, #0]
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	20000054 	.word	0x20000054

08007f38 <fiprintf>:
 8007f38:	b40e      	push	{r1, r2, r3}
 8007f3a:	b503      	push	{r0, r1, lr}
 8007f3c:	4601      	mov	r1, r0
 8007f3e:	ab03      	add	r3, sp, #12
 8007f40:	4805      	ldr	r0, [pc, #20]	; (8007f58 <fiprintf+0x20>)
 8007f42:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f46:	6800      	ldr	r0, [r0, #0]
 8007f48:	9301      	str	r3, [sp, #4]
 8007f4a:	f000 f917 	bl	800817c <_vfiprintf_r>
 8007f4e:	b002      	add	sp, #8
 8007f50:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f54:	b003      	add	sp, #12
 8007f56:	4770      	bx	lr
 8007f58:	20000054 	.word	0x20000054

08007f5c <__libc_init_array>:
 8007f5c:	b570      	push	{r4, r5, r6, lr}
 8007f5e:	2600      	movs	r6, #0
 8007f60:	4d0c      	ldr	r5, [pc, #48]	; (8007f94 <__libc_init_array+0x38>)
 8007f62:	4c0d      	ldr	r4, [pc, #52]	; (8007f98 <__libc_init_array+0x3c>)
 8007f64:	1b64      	subs	r4, r4, r5
 8007f66:	10a4      	asrs	r4, r4, #2
 8007f68:	42a6      	cmp	r6, r4
 8007f6a:	d109      	bne.n	8007f80 <__libc_init_array+0x24>
 8007f6c:	f004 fbfa 	bl	800c764 <_init>
 8007f70:	2600      	movs	r6, #0
 8007f72:	4d0a      	ldr	r5, [pc, #40]	; (8007f9c <__libc_init_array+0x40>)
 8007f74:	4c0a      	ldr	r4, [pc, #40]	; (8007fa0 <__libc_init_array+0x44>)
 8007f76:	1b64      	subs	r4, r4, r5
 8007f78:	10a4      	asrs	r4, r4, #2
 8007f7a:	42a6      	cmp	r6, r4
 8007f7c:	d105      	bne.n	8007f8a <__libc_init_array+0x2e>
 8007f7e:	bd70      	pop	{r4, r5, r6, pc}
 8007f80:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f84:	4798      	blx	r3
 8007f86:	3601      	adds	r6, #1
 8007f88:	e7ee      	b.n	8007f68 <__libc_init_array+0xc>
 8007f8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f8e:	4798      	blx	r3
 8007f90:	3601      	adds	r6, #1
 8007f92:	e7f2      	b.n	8007f7a <__libc_init_array+0x1e>
 8007f94:	0800cce4 	.word	0x0800cce4
 8007f98:	0800cce4 	.word	0x0800cce4
 8007f9c:	0800cce4 	.word	0x0800cce4
 8007fa0:	0800cce8 	.word	0x0800cce8

08007fa4 <malloc>:
 8007fa4:	4b02      	ldr	r3, [pc, #8]	; (8007fb0 <malloc+0xc>)
 8007fa6:	4601      	mov	r1, r0
 8007fa8:	6818      	ldr	r0, [r3, #0]
 8007faa:	f000 b865 	b.w	8008078 <_malloc_r>
 8007fae:	bf00      	nop
 8007fb0:	20000054 	.word	0x20000054

08007fb4 <memcpy>:
 8007fb4:	440a      	add	r2, r1
 8007fb6:	4291      	cmp	r1, r2
 8007fb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fbc:	d100      	bne.n	8007fc0 <memcpy+0xc>
 8007fbe:	4770      	bx	lr
 8007fc0:	b510      	push	{r4, lr}
 8007fc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fc6:	4291      	cmp	r1, r2
 8007fc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fcc:	d1f9      	bne.n	8007fc2 <memcpy+0xe>
 8007fce:	bd10      	pop	{r4, pc}

08007fd0 <memset>:
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	4402      	add	r2, r0
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d100      	bne.n	8007fda <memset+0xa>
 8007fd8:	4770      	bx	lr
 8007fda:	f803 1b01 	strb.w	r1, [r3], #1
 8007fde:	e7f9      	b.n	8007fd4 <memset+0x4>

08007fe0 <_free_r>:
 8007fe0:	b538      	push	{r3, r4, r5, lr}
 8007fe2:	4605      	mov	r5, r0
 8007fe4:	2900      	cmp	r1, #0
 8007fe6:	d043      	beq.n	8008070 <_free_r+0x90>
 8007fe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fec:	1f0c      	subs	r4, r1, #4
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	bfb8      	it	lt
 8007ff2:	18e4      	addlt	r4, r4, r3
 8007ff4:	f003 fc46 	bl	800b884 <__malloc_lock>
 8007ff8:	4a1e      	ldr	r2, [pc, #120]	; (8008074 <_free_r+0x94>)
 8007ffa:	6813      	ldr	r3, [r2, #0]
 8007ffc:	4610      	mov	r0, r2
 8007ffe:	b933      	cbnz	r3, 800800e <_free_r+0x2e>
 8008000:	6063      	str	r3, [r4, #4]
 8008002:	6014      	str	r4, [r2, #0]
 8008004:	4628      	mov	r0, r5
 8008006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800800a:	f003 bc41 	b.w	800b890 <__malloc_unlock>
 800800e:	42a3      	cmp	r3, r4
 8008010:	d90a      	bls.n	8008028 <_free_r+0x48>
 8008012:	6821      	ldr	r1, [r4, #0]
 8008014:	1862      	adds	r2, r4, r1
 8008016:	4293      	cmp	r3, r2
 8008018:	bf01      	itttt	eq
 800801a:	681a      	ldreq	r2, [r3, #0]
 800801c:	685b      	ldreq	r3, [r3, #4]
 800801e:	1852      	addeq	r2, r2, r1
 8008020:	6022      	streq	r2, [r4, #0]
 8008022:	6063      	str	r3, [r4, #4]
 8008024:	6004      	str	r4, [r0, #0]
 8008026:	e7ed      	b.n	8008004 <_free_r+0x24>
 8008028:	461a      	mov	r2, r3
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	b10b      	cbz	r3, 8008032 <_free_r+0x52>
 800802e:	42a3      	cmp	r3, r4
 8008030:	d9fa      	bls.n	8008028 <_free_r+0x48>
 8008032:	6811      	ldr	r1, [r2, #0]
 8008034:	1850      	adds	r0, r2, r1
 8008036:	42a0      	cmp	r0, r4
 8008038:	d10b      	bne.n	8008052 <_free_r+0x72>
 800803a:	6820      	ldr	r0, [r4, #0]
 800803c:	4401      	add	r1, r0
 800803e:	1850      	adds	r0, r2, r1
 8008040:	4283      	cmp	r3, r0
 8008042:	6011      	str	r1, [r2, #0]
 8008044:	d1de      	bne.n	8008004 <_free_r+0x24>
 8008046:	6818      	ldr	r0, [r3, #0]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	4401      	add	r1, r0
 800804c:	6011      	str	r1, [r2, #0]
 800804e:	6053      	str	r3, [r2, #4]
 8008050:	e7d8      	b.n	8008004 <_free_r+0x24>
 8008052:	d902      	bls.n	800805a <_free_r+0x7a>
 8008054:	230c      	movs	r3, #12
 8008056:	602b      	str	r3, [r5, #0]
 8008058:	e7d4      	b.n	8008004 <_free_r+0x24>
 800805a:	6820      	ldr	r0, [r4, #0]
 800805c:	1821      	adds	r1, r4, r0
 800805e:	428b      	cmp	r3, r1
 8008060:	bf01      	itttt	eq
 8008062:	6819      	ldreq	r1, [r3, #0]
 8008064:	685b      	ldreq	r3, [r3, #4]
 8008066:	1809      	addeq	r1, r1, r0
 8008068:	6021      	streq	r1, [r4, #0]
 800806a:	6063      	str	r3, [r4, #4]
 800806c:	6054      	str	r4, [r2, #4]
 800806e:	e7c9      	b.n	8008004 <_free_r+0x24>
 8008070:	bd38      	pop	{r3, r4, r5, pc}
 8008072:	bf00      	nop
 8008074:	20000258 	.word	0x20000258

08008078 <_malloc_r>:
 8008078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800807a:	1ccd      	adds	r5, r1, #3
 800807c:	f025 0503 	bic.w	r5, r5, #3
 8008080:	3508      	adds	r5, #8
 8008082:	2d0c      	cmp	r5, #12
 8008084:	bf38      	it	cc
 8008086:	250c      	movcc	r5, #12
 8008088:	2d00      	cmp	r5, #0
 800808a:	4606      	mov	r6, r0
 800808c:	db01      	blt.n	8008092 <_malloc_r+0x1a>
 800808e:	42a9      	cmp	r1, r5
 8008090:	d903      	bls.n	800809a <_malloc_r+0x22>
 8008092:	230c      	movs	r3, #12
 8008094:	6033      	str	r3, [r6, #0]
 8008096:	2000      	movs	r0, #0
 8008098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800809a:	f003 fbf3 	bl	800b884 <__malloc_lock>
 800809e:	4921      	ldr	r1, [pc, #132]	; (8008124 <_malloc_r+0xac>)
 80080a0:	680a      	ldr	r2, [r1, #0]
 80080a2:	4614      	mov	r4, r2
 80080a4:	b99c      	cbnz	r4, 80080ce <_malloc_r+0x56>
 80080a6:	4f20      	ldr	r7, [pc, #128]	; (8008128 <_malloc_r+0xb0>)
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	b923      	cbnz	r3, 80080b6 <_malloc_r+0x3e>
 80080ac:	4621      	mov	r1, r4
 80080ae:	4630      	mov	r0, r6
 80080b0:	f001 f806 	bl	80090c0 <_sbrk_r>
 80080b4:	6038      	str	r0, [r7, #0]
 80080b6:	4629      	mov	r1, r5
 80080b8:	4630      	mov	r0, r6
 80080ba:	f001 f801 	bl	80090c0 <_sbrk_r>
 80080be:	1c43      	adds	r3, r0, #1
 80080c0:	d123      	bne.n	800810a <_malloc_r+0x92>
 80080c2:	230c      	movs	r3, #12
 80080c4:	4630      	mov	r0, r6
 80080c6:	6033      	str	r3, [r6, #0]
 80080c8:	f003 fbe2 	bl	800b890 <__malloc_unlock>
 80080cc:	e7e3      	b.n	8008096 <_malloc_r+0x1e>
 80080ce:	6823      	ldr	r3, [r4, #0]
 80080d0:	1b5b      	subs	r3, r3, r5
 80080d2:	d417      	bmi.n	8008104 <_malloc_r+0x8c>
 80080d4:	2b0b      	cmp	r3, #11
 80080d6:	d903      	bls.n	80080e0 <_malloc_r+0x68>
 80080d8:	6023      	str	r3, [r4, #0]
 80080da:	441c      	add	r4, r3
 80080dc:	6025      	str	r5, [r4, #0]
 80080de:	e004      	b.n	80080ea <_malloc_r+0x72>
 80080e0:	6863      	ldr	r3, [r4, #4]
 80080e2:	42a2      	cmp	r2, r4
 80080e4:	bf0c      	ite	eq
 80080e6:	600b      	streq	r3, [r1, #0]
 80080e8:	6053      	strne	r3, [r2, #4]
 80080ea:	4630      	mov	r0, r6
 80080ec:	f003 fbd0 	bl	800b890 <__malloc_unlock>
 80080f0:	f104 000b 	add.w	r0, r4, #11
 80080f4:	1d23      	adds	r3, r4, #4
 80080f6:	f020 0007 	bic.w	r0, r0, #7
 80080fa:	1ac2      	subs	r2, r0, r3
 80080fc:	d0cc      	beq.n	8008098 <_malloc_r+0x20>
 80080fe:	1a1b      	subs	r3, r3, r0
 8008100:	50a3      	str	r3, [r4, r2]
 8008102:	e7c9      	b.n	8008098 <_malloc_r+0x20>
 8008104:	4622      	mov	r2, r4
 8008106:	6864      	ldr	r4, [r4, #4]
 8008108:	e7cc      	b.n	80080a4 <_malloc_r+0x2c>
 800810a:	1cc4      	adds	r4, r0, #3
 800810c:	f024 0403 	bic.w	r4, r4, #3
 8008110:	42a0      	cmp	r0, r4
 8008112:	d0e3      	beq.n	80080dc <_malloc_r+0x64>
 8008114:	1a21      	subs	r1, r4, r0
 8008116:	4630      	mov	r0, r6
 8008118:	f000 ffd2 	bl	80090c0 <_sbrk_r>
 800811c:	3001      	adds	r0, #1
 800811e:	d1dd      	bne.n	80080dc <_malloc_r+0x64>
 8008120:	e7cf      	b.n	80080c2 <_malloc_r+0x4a>
 8008122:	bf00      	nop
 8008124:	20000258 	.word	0x20000258
 8008128:	2000025c 	.word	0x2000025c

0800812c <__sfputc_r>:
 800812c:	6893      	ldr	r3, [r2, #8]
 800812e:	b410      	push	{r4}
 8008130:	3b01      	subs	r3, #1
 8008132:	2b00      	cmp	r3, #0
 8008134:	6093      	str	r3, [r2, #8]
 8008136:	da07      	bge.n	8008148 <__sfputc_r+0x1c>
 8008138:	6994      	ldr	r4, [r2, #24]
 800813a:	42a3      	cmp	r3, r4
 800813c:	db01      	blt.n	8008142 <__sfputc_r+0x16>
 800813e:	290a      	cmp	r1, #10
 8008140:	d102      	bne.n	8008148 <__sfputc_r+0x1c>
 8008142:	bc10      	pop	{r4}
 8008144:	f001 be96 	b.w	8009e74 <__swbuf_r>
 8008148:	6813      	ldr	r3, [r2, #0]
 800814a:	1c58      	adds	r0, r3, #1
 800814c:	6010      	str	r0, [r2, #0]
 800814e:	7019      	strb	r1, [r3, #0]
 8008150:	4608      	mov	r0, r1
 8008152:	bc10      	pop	{r4}
 8008154:	4770      	bx	lr

08008156 <__sfputs_r>:
 8008156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008158:	4606      	mov	r6, r0
 800815a:	460f      	mov	r7, r1
 800815c:	4614      	mov	r4, r2
 800815e:	18d5      	adds	r5, r2, r3
 8008160:	42ac      	cmp	r4, r5
 8008162:	d101      	bne.n	8008168 <__sfputs_r+0x12>
 8008164:	2000      	movs	r0, #0
 8008166:	e007      	b.n	8008178 <__sfputs_r+0x22>
 8008168:	463a      	mov	r2, r7
 800816a:	4630      	mov	r0, r6
 800816c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008170:	f7ff ffdc 	bl	800812c <__sfputc_r>
 8008174:	1c43      	adds	r3, r0, #1
 8008176:	d1f3      	bne.n	8008160 <__sfputs_r+0xa>
 8008178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800817c <_vfiprintf_r>:
 800817c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008180:	460d      	mov	r5, r1
 8008182:	4614      	mov	r4, r2
 8008184:	4698      	mov	r8, r3
 8008186:	4606      	mov	r6, r0
 8008188:	b09d      	sub	sp, #116	; 0x74
 800818a:	b118      	cbz	r0, 8008194 <_vfiprintf_r+0x18>
 800818c:	6983      	ldr	r3, [r0, #24]
 800818e:	b90b      	cbnz	r3, 8008194 <_vfiprintf_r+0x18>
 8008190:	f002 fece 	bl	800af30 <__sinit>
 8008194:	4b89      	ldr	r3, [pc, #548]	; (80083bc <_vfiprintf_r+0x240>)
 8008196:	429d      	cmp	r5, r3
 8008198:	d11b      	bne.n	80081d2 <_vfiprintf_r+0x56>
 800819a:	6875      	ldr	r5, [r6, #4]
 800819c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800819e:	07d9      	lsls	r1, r3, #31
 80081a0:	d405      	bmi.n	80081ae <_vfiprintf_r+0x32>
 80081a2:	89ab      	ldrh	r3, [r5, #12]
 80081a4:	059a      	lsls	r2, r3, #22
 80081a6:	d402      	bmi.n	80081ae <_vfiprintf_r+0x32>
 80081a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081aa:	f003 faca 	bl	800b742 <__retarget_lock_acquire_recursive>
 80081ae:	89ab      	ldrh	r3, [r5, #12]
 80081b0:	071b      	lsls	r3, r3, #28
 80081b2:	d501      	bpl.n	80081b8 <_vfiprintf_r+0x3c>
 80081b4:	692b      	ldr	r3, [r5, #16]
 80081b6:	b9eb      	cbnz	r3, 80081f4 <_vfiprintf_r+0x78>
 80081b8:	4629      	mov	r1, r5
 80081ba:	4630      	mov	r0, r6
 80081bc:	f001 feac 	bl	8009f18 <__swsetup_r>
 80081c0:	b1c0      	cbz	r0, 80081f4 <_vfiprintf_r+0x78>
 80081c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081c4:	07dc      	lsls	r4, r3, #31
 80081c6:	d50e      	bpl.n	80081e6 <_vfiprintf_r+0x6a>
 80081c8:	f04f 30ff 	mov.w	r0, #4294967295
 80081cc:	b01d      	add	sp, #116	; 0x74
 80081ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081d2:	4b7b      	ldr	r3, [pc, #492]	; (80083c0 <_vfiprintf_r+0x244>)
 80081d4:	429d      	cmp	r5, r3
 80081d6:	d101      	bne.n	80081dc <_vfiprintf_r+0x60>
 80081d8:	68b5      	ldr	r5, [r6, #8]
 80081da:	e7df      	b.n	800819c <_vfiprintf_r+0x20>
 80081dc:	4b79      	ldr	r3, [pc, #484]	; (80083c4 <_vfiprintf_r+0x248>)
 80081de:	429d      	cmp	r5, r3
 80081e0:	bf08      	it	eq
 80081e2:	68f5      	ldreq	r5, [r6, #12]
 80081e4:	e7da      	b.n	800819c <_vfiprintf_r+0x20>
 80081e6:	89ab      	ldrh	r3, [r5, #12]
 80081e8:	0598      	lsls	r0, r3, #22
 80081ea:	d4ed      	bmi.n	80081c8 <_vfiprintf_r+0x4c>
 80081ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081ee:	f003 faa9 	bl	800b744 <__retarget_lock_release_recursive>
 80081f2:	e7e9      	b.n	80081c8 <_vfiprintf_r+0x4c>
 80081f4:	2300      	movs	r3, #0
 80081f6:	9309      	str	r3, [sp, #36]	; 0x24
 80081f8:	2320      	movs	r3, #32
 80081fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081fe:	2330      	movs	r3, #48	; 0x30
 8008200:	f04f 0901 	mov.w	r9, #1
 8008204:	f8cd 800c 	str.w	r8, [sp, #12]
 8008208:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80083c8 <_vfiprintf_r+0x24c>
 800820c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008210:	4623      	mov	r3, r4
 8008212:	469a      	mov	sl, r3
 8008214:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008218:	b10a      	cbz	r2, 800821e <_vfiprintf_r+0xa2>
 800821a:	2a25      	cmp	r2, #37	; 0x25
 800821c:	d1f9      	bne.n	8008212 <_vfiprintf_r+0x96>
 800821e:	ebba 0b04 	subs.w	fp, sl, r4
 8008222:	d00b      	beq.n	800823c <_vfiprintf_r+0xc0>
 8008224:	465b      	mov	r3, fp
 8008226:	4622      	mov	r2, r4
 8008228:	4629      	mov	r1, r5
 800822a:	4630      	mov	r0, r6
 800822c:	f7ff ff93 	bl	8008156 <__sfputs_r>
 8008230:	3001      	adds	r0, #1
 8008232:	f000 80aa 	beq.w	800838a <_vfiprintf_r+0x20e>
 8008236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008238:	445a      	add	r2, fp
 800823a:	9209      	str	r2, [sp, #36]	; 0x24
 800823c:	f89a 3000 	ldrb.w	r3, [sl]
 8008240:	2b00      	cmp	r3, #0
 8008242:	f000 80a2 	beq.w	800838a <_vfiprintf_r+0x20e>
 8008246:	2300      	movs	r3, #0
 8008248:	f04f 32ff 	mov.w	r2, #4294967295
 800824c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008250:	f10a 0a01 	add.w	sl, sl, #1
 8008254:	9304      	str	r3, [sp, #16]
 8008256:	9307      	str	r3, [sp, #28]
 8008258:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800825c:	931a      	str	r3, [sp, #104]	; 0x68
 800825e:	4654      	mov	r4, sl
 8008260:	2205      	movs	r2, #5
 8008262:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008266:	4858      	ldr	r0, [pc, #352]	; (80083c8 <_vfiprintf_r+0x24c>)
 8008268:	f003 fae4 	bl	800b834 <memchr>
 800826c:	9a04      	ldr	r2, [sp, #16]
 800826e:	b9d8      	cbnz	r0, 80082a8 <_vfiprintf_r+0x12c>
 8008270:	06d1      	lsls	r1, r2, #27
 8008272:	bf44      	itt	mi
 8008274:	2320      	movmi	r3, #32
 8008276:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800827a:	0713      	lsls	r3, r2, #28
 800827c:	bf44      	itt	mi
 800827e:	232b      	movmi	r3, #43	; 0x2b
 8008280:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008284:	f89a 3000 	ldrb.w	r3, [sl]
 8008288:	2b2a      	cmp	r3, #42	; 0x2a
 800828a:	d015      	beq.n	80082b8 <_vfiprintf_r+0x13c>
 800828c:	4654      	mov	r4, sl
 800828e:	2000      	movs	r0, #0
 8008290:	f04f 0c0a 	mov.w	ip, #10
 8008294:	9a07      	ldr	r2, [sp, #28]
 8008296:	4621      	mov	r1, r4
 8008298:	f811 3b01 	ldrb.w	r3, [r1], #1
 800829c:	3b30      	subs	r3, #48	; 0x30
 800829e:	2b09      	cmp	r3, #9
 80082a0:	d94e      	bls.n	8008340 <_vfiprintf_r+0x1c4>
 80082a2:	b1b0      	cbz	r0, 80082d2 <_vfiprintf_r+0x156>
 80082a4:	9207      	str	r2, [sp, #28]
 80082a6:	e014      	b.n	80082d2 <_vfiprintf_r+0x156>
 80082a8:	eba0 0308 	sub.w	r3, r0, r8
 80082ac:	fa09 f303 	lsl.w	r3, r9, r3
 80082b0:	4313      	orrs	r3, r2
 80082b2:	46a2      	mov	sl, r4
 80082b4:	9304      	str	r3, [sp, #16]
 80082b6:	e7d2      	b.n	800825e <_vfiprintf_r+0xe2>
 80082b8:	9b03      	ldr	r3, [sp, #12]
 80082ba:	1d19      	adds	r1, r3, #4
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	9103      	str	r1, [sp, #12]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	bfbb      	ittet	lt
 80082c4:	425b      	neglt	r3, r3
 80082c6:	f042 0202 	orrlt.w	r2, r2, #2
 80082ca:	9307      	strge	r3, [sp, #28]
 80082cc:	9307      	strlt	r3, [sp, #28]
 80082ce:	bfb8      	it	lt
 80082d0:	9204      	strlt	r2, [sp, #16]
 80082d2:	7823      	ldrb	r3, [r4, #0]
 80082d4:	2b2e      	cmp	r3, #46	; 0x2e
 80082d6:	d10c      	bne.n	80082f2 <_vfiprintf_r+0x176>
 80082d8:	7863      	ldrb	r3, [r4, #1]
 80082da:	2b2a      	cmp	r3, #42	; 0x2a
 80082dc:	d135      	bne.n	800834a <_vfiprintf_r+0x1ce>
 80082de:	9b03      	ldr	r3, [sp, #12]
 80082e0:	3402      	adds	r4, #2
 80082e2:	1d1a      	adds	r2, r3, #4
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	9203      	str	r2, [sp, #12]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	bfb8      	it	lt
 80082ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80082f0:	9305      	str	r3, [sp, #20]
 80082f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80083d8 <_vfiprintf_r+0x25c>
 80082f6:	2203      	movs	r2, #3
 80082f8:	4650      	mov	r0, sl
 80082fa:	7821      	ldrb	r1, [r4, #0]
 80082fc:	f003 fa9a 	bl	800b834 <memchr>
 8008300:	b140      	cbz	r0, 8008314 <_vfiprintf_r+0x198>
 8008302:	2340      	movs	r3, #64	; 0x40
 8008304:	eba0 000a 	sub.w	r0, r0, sl
 8008308:	fa03 f000 	lsl.w	r0, r3, r0
 800830c:	9b04      	ldr	r3, [sp, #16]
 800830e:	3401      	adds	r4, #1
 8008310:	4303      	orrs	r3, r0
 8008312:	9304      	str	r3, [sp, #16]
 8008314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008318:	2206      	movs	r2, #6
 800831a:	482c      	ldr	r0, [pc, #176]	; (80083cc <_vfiprintf_r+0x250>)
 800831c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008320:	f003 fa88 	bl	800b834 <memchr>
 8008324:	2800      	cmp	r0, #0
 8008326:	d03f      	beq.n	80083a8 <_vfiprintf_r+0x22c>
 8008328:	4b29      	ldr	r3, [pc, #164]	; (80083d0 <_vfiprintf_r+0x254>)
 800832a:	bb1b      	cbnz	r3, 8008374 <_vfiprintf_r+0x1f8>
 800832c:	9b03      	ldr	r3, [sp, #12]
 800832e:	3307      	adds	r3, #7
 8008330:	f023 0307 	bic.w	r3, r3, #7
 8008334:	3308      	adds	r3, #8
 8008336:	9303      	str	r3, [sp, #12]
 8008338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800833a:	443b      	add	r3, r7
 800833c:	9309      	str	r3, [sp, #36]	; 0x24
 800833e:	e767      	b.n	8008210 <_vfiprintf_r+0x94>
 8008340:	460c      	mov	r4, r1
 8008342:	2001      	movs	r0, #1
 8008344:	fb0c 3202 	mla	r2, ip, r2, r3
 8008348:	e7a5      	b.n	8008296 <_vfiprintf_r+0x11a>
 800834a:	2300      	movs	r3, #0
 800834c:	f04f 0c0a 	mov.w	ip, #10
 8008350:	4619      	mov	r1, r3
 8008352:	3401      	adds	r4, #1
 8008354:	9305      	str	r3, [sp, #20]
 8008356:	4620      	mov	r0, r4
 8008358:	f810 2b01 	ldrb.w	r2, [r0], #1
 800835c:	3a30      	subs	r2, #48	; 0x30
 800835e:	2a09      	cmp	r2, #9
 8008360:	d903      	bls.n	800836a <_vfiprintf_r+0x1ee>
 8008362:	2b00      	cmp	r3, #0
 8008364:	d0c5      	beq.n	80082f2 <_vfiprintf_r+0x176>
 8008366:	9105      	str	r1, [sp, #20]
 8008368:	e7c3      	b.n	80082f2 <_vfiprintf_r+0x176>
 800836a:	4604      	mov	r4, r0
 800836c:	2301      	movs	r3, #1
 800836e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008372:	e7f0      	b.n	8008356 <_vfiprintf_r+0x1da>
 8008374:	ab03      	add	r3, sp, #12
 8008376:	9300      	str	r3, [sp, #0]
 8008378:	462a      	mov	r2, r5
 800837a:	4630      	mov	r0, r6
 800837c:	4b15      	ldr	r3, [pc, #84]	; (80083d4 <_vfiprintf_r+0x258>)
 800837e:	a904      	add	r1, sp, #16
 8008380:	f000 f8ca 	bl	8008518 <_printf_float>
 8008384:	4607      	mov	r7, r0
 8008386:	1c78      	adds	r0, r7, #1
 8008388:	d1d6      	bne.n	8008338 <_vfiprintf_r+0x1bc>
 800838a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800838c:	07d9      	lsls	r1, r3, #31
 800838e:	d405      	bmi.n	800839c <_vfiprintf_r+0x220>
 8008390:	89ab      	ldrh	r3, [r5, #12]
 8008392:	059a      	lsls	r2, r3, #22
 8008394:	d402      	bmi.n	800839c <_vfiprintf_r+0x220>
 8008396:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008398:	f003 f9d4 	bl	800b744 <__retarget_lock_release_recursive>
 800839c:	89ab      	ldrh	r3, [r5, #12]
 800839e:	065b      	lsls	r3, r3, #25
 80083a0:	f53f af12 	bmi.w	80081c8 <_vfiprintf_r+0x4c>
 80083a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083a6:	e711      	b.n	80081cc <_vfiprintf_r+0x50>
 80083a8:	ab03      	add	r3, sp, #12
 80083aa:	9300      	str	r3, [sp, #0]
 80083ac:	462a      	mov	r2, r5
 80083ae:	4630      	mov	r0, r6
 80083b0:	4b08      	ldr	r3, [pc, #32]	; (80083d4 <_vfiprintf_r+0x258>)
 80083b2:	a904      	add	r1, sp, #16
 80083b4:	f000 fb4c 	bl	8008a50 <_printf_i>
 80083b8:	e7e4      	b.n	8008384 <_vfiprintf_r+0x208>
 80083ba:	bf00      	nop
 80083bc:	0800cac8 	.word	0x0800cac8
 80083c0:	0800cae8 	.word	0x0800cae8
 80083c4:	0800caa8 	.word	0x0800caa8
 80083c8:	0800c870 	.word	0x0800c870
 80083cc:	0800c87a 	.word	0x0800c87a
 80083d0:	08008519 	.word	0x08008519
 80083d4:	08008157 	.word	0x08008157
 80083d8:	0800c876 	.word	0x0800c876

080083dc <__cvt>:
 80083dc:	2b00      	cmp	r3, #0
 80083de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083e2:	461f      	mov	r7, r3
 80083e4:	bfbb      	ittet	lt
 80083e6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80083ea:	461f      	movlt	r7, r3
 80083ec:	2300      	movge	r3, #0
 80083ee:	232d      	movlt	r3, #45	; 0x2d
 80083f0:	b088      	sub	sp, #32
 80083f2:	4614      	mov	r4, r2
 80083f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80083f6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80083f8:	7013      	strb	r3, [r2, #0]
 80083fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80083fc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008400:	f023 0820 	bic.w	r8, r3, #32
 8008404:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008408:	d005      	beq.n	8008416 <__cvt+0x3a>
 800840a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800840e:	d100      	bne.n	8008412 <__cvt+0x36>
 8008410:	3501      	adds	r5, #1
 8008412:	2302      	movs	r3, #2
 8008414:	e000      	b.n	8008418 <__cvt+0x3c>
 8008416:	2303      	movs	r3, #3
 8008418:	aa07      	add	r2, sp, #28
 800841a:	9204      	str	r2, [sp, #16]
 800841c:	aa06      	add	r2, sp, #24
 800841e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008422:	e9cd 3500 	strd	r3, r5, [sp]
 8008426:	4622      	mov	r2, r4
 8008428:	463b      	mov	r3, r7
 800842a:	f001 fe79 	bl	800a120 <_dtoa_r>
 800842e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008432:	4606      	mov	r6, r0
 8008434:	d102      	bne.n	800843c <__cvt+0x60>
 8008436:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008438:	07db      	lsls	r3, r3, #31
 800843a:	d522      	bpl.n	8008482 <__cvt+0xa6>
 800843c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008440:	eb06 0905 	add.w	r9, r6, r5
 8008444:	d110      	bne.n	8008468 <__cvt+0x8c>
 8008446:	7833      	ldrb	r3, [r6, #0]
 8008448:	2b30      	cmp	r3, #48	; 0x30
 800844a:	d10a      	bne.n	8008462 <__cvt+0x86>
 800844c:	2200      	movs	r2, #0
 800844e:	2300      	movs	r3, #0
 8008450:	4620      	mov	r0, r4
 8008452:	4639      	mov	r1, r7
 8008454:	f7f8 faa8 	bl	80009a8 <__aeabi_dcmpeq>
 8008458:	b918      	cbnz	r0, 8008462 <__cvt+0x86>
 800845a:	f1c5 0501 	rsb	r5, r5, #1
 800845e:	f8ca 5000 	str.w	r5, [sl]
 8008462:	f8da 3000 	ldr.w	r3, [sl]
 8008466:	4499      	add	r9, r3
 8008468:	2200      	movs	r2, #0
 800846a:	2300      	movs	r3, #0
 800846c:	4620      	mov	r0, r4
 800846e:	4639      	mov	r1, r7
 8008470:	f7f8 fa9a 	bl	80009a8 <__aeabi_dcmpeq>
 8008474:	b108      	cbz	r0, 800847a <__cvt+0x9e>
 8008476:	f8cd 901c 	str.w	r9, [sp, #28]
 800847a:	2230      	movs	r2, #48	; 0x30
 800847c:	9b07      	ldr	r3, [sp, #28]
 800847e:	454b      	cmp	r3, r9
 8008480:	d307      	bcc.n	8008492 <__cvt+0xb6>
 8008482:	4630      	mov	r0, r6
 8008484:	9b07      	ldr	r3, [sp, #28]
 8008486:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008488:	1b9b      	subs	r3, r3, r6
 800848a:	6013      	str	r3, [r2, #0]
 800848c:	b008      	add	sp, #32
 800848e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008492:	1c59      	adds	r1, r3, #1
 8008494:	9107      	str	r1, [sp, #28]
 8008496:	701a      	strb	r2, [r3, #0]
 8008498:	e7f0      	b.n	800847c <__cvt+0xa0>

0800849a <__exponent>:
 800849a:	4603      	mov	r3, r0
 800849c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800849e:	2900      	cmp	r1, #0
 80084a0:	f803 2b02 	strb.w	r2, [r3], #2
 80084a4:	bfb6      	itet	lt
 80084a6:	222d      	movlt	r2, #45	; 0x2d
 80084a8:	222b      	movge	r2, #43	; 0x2b
 80084aa:	4249      	neglt	r1, r1
 80084ac:	2909      	cmp	r1, #9
 80084ae:	7042      	strb	r2, [r0, #1]
 80084b0:	dd2b      	ble.n	800850a <__exponent+0x70>
 80084b2:	f10d 0407 	add.w	r4, sp, #7
 80084b6:	46a4      	mov	ip, r4
 80084b8:	270a      	movs	r7, #10
 80084ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80084be:	460a      	mov	r2, r1
 80084c0:	46a6      	mov	lr, r4
 80084c2:	fb07 1516 	mls	r5, r7, r6, r1
 80084c6:	2a63      	cmp	r2, #99	; 0x63
 80084c8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80084cc:	4631      	mov	r1, r6
 80084ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80084d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80084d6:	dcf0      	bgt.n	80084ba <__exponent+0x20>
 80084d8:	3130      	adds	r1, #48	; 0x30
 80084da:	f1ae 0502 	sub.w	r5, lr, #2
 80084de:	f804 1c01 	strb.w	r1, [r4, #-1]
 80084e2:	4629      	mov	r1, r5
 80084e4:	1c44      	adds	r4, r0, #1
 80084e6:	4561      	cmp	r1, ip
 80084e8:	d30a      	bcc.n	8008500 <__exponent+0x66>
 80084ea:	f10d 0209 	add.w	r2, sp, #9
 80084ee:	eba2 020e 	sub.w	r2, r2, lr
 80084f2:	4565      	cmp	r5, ip
 80084f4:	bf88      	it	hi
 80084f6:	2200      	movhi	r2, #0
 80084f8:	4413      	add	r3, r2
 80084fa:	1a18      	subs	r0, r3, r0
 80084fc:	b003      	add	sp, #12
 80084fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008500:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008504:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008508:	e7ed      	b.n	80084e6 <__exponent+0x4c>
 800850a:	2330      	movs	r3, #48	; 0x30
 800850c:	3130      	adds	r1, #48	; 0x30
 800850e:	7083      	strb	r3, [r0, #2]
 8008510:	70c1      	strb	r1, [r0, #3]
 8008512:	1d03      	adds	r3, r0, #4
 8008514:	e7f1      	b.n	80084fa <__exponent+0x60>
	...

08008518 <_printf_float>:
 8008518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800851c:	b091      	sub	sp, #68	; 0x44
 800851e:	460c      	mov	r4, r1
 8008520:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008524:	4616      	mov	r6, r2
 8008526:	461f      	mov	r7, r3
 8008528:	4605      	mov	r5, r0
 800852a:	f003 f905 	bl	800b738 <_localeconv_r>
 800852e:	6803      	ldr	r3, [r0, #0]
 8008530:	4618      	mov	r0, r3
 8008532:	9309      	str	r3, [sp, #36]	; 0x24
 8008534:	f7f7 fe0c 	bl	8000150 <strlen>
 8008538:	2300      	movs	r3, #0
 800853a:	930e      	str	r3, [sp, #56]	; 0x38
 800853c:	f8d8 3000 	ldr.w	r3, [r8]
 8008540:	900a      	str	r0, [sp, #40]	; 0x28
 8008542:	3307      	adds	r3, #7
 8008544:	f023 0307 	bic.w	r3, r3, #7
 8008548:	f103 0208 	add.w	r2, r3, #8
 800854c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008550:	f8d4 b000 	ldr.w	fp, [r4]
 8008554:	f8c8 2000 	str.w	r2, [r8]
 8008558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008560:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008564:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008568:	930b      	str	r3, [sp, #44]	; 0x2c
 800856a:	f04f 32ff 	mov.w	r2, #4294967295
 800856e:	4640      	mov	r0, r8
 8008570:	4b9c      	ldr	r3, [pc, #624]	; (80087e4 <_printf_float+0x2cc>)
 8008572:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008574:	f7f8 fa4a 	bl	8000a0c <__aeabi_dcmpun>
 8008578:	bb70      	cbnz	r0, 80085d8 <_printf_float+0xc0>
 800857a:	f04f 32ff 	mov.w	r2, #4294967295
 800857e:	4640      	mov	r0, r8
 8008580:	4b98      	ldr	r3, [pc, #608]	; (80087e4 <_printf_float+0x2cc>)
 8008582:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008584:	f7f8 fa24 	bl	80009d0 <__aeabi_dcmple>
 8008588:	bb30      	cbnz	r0, 80085d8 <_printf_float+0xc0>
 800858a:	2200      	movs	r2, #0
 800858c:	2300      	movs	r3, #0
 800858e:	4640      	mov	r0, r8
 8008590:	4651      	mov	r1, sl
 8008592:	f7f8 fa13 	bl	80009bc <__aeabi_dcmplt>
 8008596:	b110      	cbz	r0, 800859e <_printf_float+0x86>
 8008598:	232d      	movs	r3, #45	; 0x2d
 800859a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800859e:	4b92      	ldr	r3, [pc, #584]	; (80087e8 <_printf_float+0x2d0>)
 80085a0:	4892      	ldr	r0, [pc, #584]	; (80087ec <_printf_float+0x2d4>)
 80085a2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80085a6:	bf94      	ite	ls
 80085a8:	4698      	movls	r8, r3
 80085aa:	4680      	movhi	r8, r0
 80085ac:	2303      	movs	r3, #3
 80085ae:	f04f 0a00 	mov.w	sl, #0
 80085b2:	6123      	str	r3, [r4, #16]
 80085b4:	f02b 0304 	bic.w	r3, fp, #4
 80085b8:	6023      	str	r3, [r4, #0]
 80085ba:	4633      	mov	r3, r6
 80085bc:	4621      	mov	r1, r4
 80085be:	4628      	mov	r0, r5
 80085c0:	9700      	str	r7, [sp, #0]
 80085c2:	aa0f      	add	r2, sp, #60	; 0x3c
 80085c4:	f000 f9d4 	bl	8008970 <_printf_common>
 80085c8:	3001      	adds	r0, #1
 80085ca:	f040 8090 	bne.w	80086ee <_printf_float+0x1d6>
 80085ce:	f04f 30ff 	mov.w	r0, #4294967295
 80085d2:	b011      	add	sp, #68	; 0x44
 80085d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085d8:	4642      	mov	r2, r8
 80085da:	4653      	mov	r3, sl
 80085dc:	4640      	mov	r0, r8
 80085de:	4651      	mov	r1, sl
 80085e0:	f7f8 fa14 	bl	8000a0c <__aeabi_dcmpun>
 80085e4:	b148      	cbz	r0, 80085fa <_printf_float+0xe2>
 80085e6:	f1ba 0f00 	cmp.w	sl, #0
 80085ea:	bfb8      	it	lt
 80085ec:	232d      	movlt	r3, #45	; 0x2d
 80085ee:	4880      	ldr	r0, [pc, #512]	; (80087f0 <_printf_float+0x2d8>)
 80085f0:	bfb8      	it	lt
 80085f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80085f6:	4b7f      	ldr	r3, [pc, #508]	; (80087f4 <_printf_float+0x2dc>)
 80085f8:	e7d3      	b.n	80085a2 <_printf_float+0x8a>
 80085fa:	6863      	ldr	r3, [r4, #4]
 80085fc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008600:	1c5a      	adds	r2, r3, #1
 8008602:	d142      	bne.n	800868a <_printf_float+0x172>
 8008604:	2306      	movs	r3, #6
 8008606:	6063      	str	r3, [r4, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	9206      	str	r2, [sp, #24]
 800860c:	aa0e      	add	r2, sp, #56	; 0x38
 800860e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008612:	aa0d      	add	r2, sp, #52	; 0x34
 8008614:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008618:	9203      	str	r2, [sp, #12]
 800861a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800861e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008622:	6023      	str	r3, [r4, #0]
 8008624:	6863      	ldr	r3, [r4, #4]
 8008626:	4642      	mov	r2, r8
 8008628:	9300      	str	r3, [sp, #0]
 800862a:	4628      	mov	r0, r5
 800862c:	4653      	mov	r3, sl
 800862e:	910b      	str	r1, [sp, #44]	; 0x2c
 8008630:	f7ff fed4 	bl	80083dc <__cvt>
 8008634:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008636:	4680      	mov	r8, r0
 8008638:	2947      	cmp	r1, #71	; 0x47
 800863a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800863c:	d108      	bne.n	8008650 <_printf_float+0x138>
 800863e:	1cc8      	adds	r0, r1, #3
 8008640:	db02      	blt.n	8008648 <_printf_float+0x130>
 8008642:	6863      	ldr	r3, [r4, #4]
 8008644:	4299      	cmp	r1, r3
 8008646:	dd40      	ble.n	80086ca <_printf_float+0x1b2>
 8008648:	f1a9 0902 	sub.w	r9, r9, #2
 800864c:	fa5f f989 	uxtb.w	r9, r9
 8008650:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008654:	d81f      	bhi.n	8008696 <_printf_float+0x17e>
 8008656:	464a      	mov	r2, r9
 8008658:	3901      	subs	r1, #1
 800865a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800865e:	910d      	str	r1, [sp, #52]	; 0x34
 8008660:	f7ff ff1b 	bl	800849a <__exponent>
 8008664:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008666:	4682      	mov	sl, r0
 8008668:	1813      	adds	r3, r2, r0
 800866a:	2a01      	cmp	r2, #1
 800866c:	6123      	str	r3, [r4, #16]
 800866e:	dc02      	bgt.n	8008676 <_printf_float+0x15e>
 8008670:	6822      	ldr	r2, [r4, #0]
 8008672:	07d2      	lsls	r2, r2, #31
 8008674:	d501      	bpl.n	800867a <_printf_float+0x162>
 8008676:	3301      	adds	r3, #1
 8008678:	6123      	str	r3, [r4, #16]
 800867a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800867e:	2b00      	cmp	r3, #0
 8008680:	d09b      	beq.n	80085ba <_printf_float+0xa2>
 8008682:	232d      	movs	r3, #45	; 0x2d
 8008684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008688:	e797      	b.n	80085ba <_printf_float+0xa2>
 800868a:	2947      	cmp	r1, #71	; 0x47
 800868c:	d1bc      	bne.n	8008608 <_printf_float+0xf0>
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1ba      	bne.n	8008608 <_printf_float+0xf0>
 8008692:	2301      	movs	r3, #1
 8008694:	e7b7      	b.n	8008606 <_printf_float+0xee>
 8008696:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800869a:	d118      	bne.n	80086ce <_printf_float+0x1b6>
 800869c:	2900      	cmp	r1, #0
 800869e:	6863      	ldr	r3, [r4, #4]
 80086a0:	dd0b      	ble.n	80086ba <_printf_float+0x1a2>
 80086a2:	6121      	str	r1, [r4, #16]
 80086a4:	b913      	cbnz	r3, 80086ac <_printf_float+0x194>
 80086a6:	6822      	ldr	r2, [r4, #0]
 80086a8:	07d0      	lsls	r0, r2, #31
 80086aa:	d502      	bpl.n	80086b2 <_printf_float+0x19a>
 80086ac:	3301      	adds	r3, #1
 80086ae:	440b      	add	r3, r1
 80086b0:	6123      	str	r3, [r4, #16]
 80086b2:	f04f 0a00 	mov.w	sl, #0
 80086b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80086b8:	e7df      	b.n	800867a <_printf_float+0x162>
 80086ba:	b913      	cbnz	r3, 80086c2 <_printf_float+0x1aa>
 80086bc:	6822      	ldr	r2, [r4, #0]
 80086be:	07d2      	lsls	r2, r2, #31
 80086c0:	d501      	bpl.n	80086c6 <_printf_float+0x1ae>
 80086c2:	3302      	adds	r3, #2
 80086c4:	e7f4      	b.n	80086b0 <_printf_float+0x198>
 80086c6:	2301      	movs	r3, #1
 80086c8:	e7f2      	b.n	80086b0 <_printf_float+0x198>
 80086ca:	f04f 0967 	mov.w	r9, #103	; 0x67
 80086ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086d0:	4299      	cmp	r1, r3
 80086d2:	db05      	blt.n	80086e0 <_printf_float+0x1c8>
 80086d4:	6823      	ldr	r3, [r4, #0]
 80086d6:	6121      	str	r1, [r4, #16]
 80086d8:	07d8      	lsls	r0, r3, #31
 80086da:	d5ea      	bpl.n	80086b2 <_printf_float+0x19a>
 80086dc:	1c4b      	adds	r3, r1, #1
 80086de:	e7e7      	b.n	80086b0 <_printf_float+0x198>
 80086e0:	2900      	cmp	r1, #0
 80086e2:	bfcc      	ite	gt
 80086e4:	2201      	movgt	r2, #1
 80086e6:	f1c1 0202 	rsble	r2, r1, #2
 80086ea:	4413      	add	r3, r2
 80086ec:	e7e0      	b.n	80086b0 <_printf_float+0x198>
 80086ee:	6823      	ldr	r3, [r4, #0]
 80086f0:	055a      	lsls	r2, r3, #21
 80086f2:	d407      	bmi.n	8008704 <_printf_float+0x1ec>
 80086f4:	6923      	ldr	r3, [r4, #16]
 80086f6:	4642      	mov	r2, r8
 80086f8:	4631      	mov	r1, r6
 80086fa:	4628      	mov	r0, r5
 80086fc:	47b8      	blx	r7
 80086fe:	3001      	adds	r0, #1
 8008700:	d12b      	bne.n	800875a <_printf_float+0x242>
 8008702:	e764      	b.n	80085ce <_printf_float+0xb6>
 8008704:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008708:	f240 80dd 	bls.w	80088c6 <_printf_float+0x3ae>
 800870c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008710:	2200      	movs	r2, #0
 8008712:	2300      	movs	r3, #0
 8008714:	f7f8 f948 	bl	80009a8 <__aeabi_dcmpeq>
 8008718:	2800      	cmp	r0, #0
 800871a:	d033      	beq.n	8008784 <_printf_float+0x26c>
 800871c:	2301      	movs	r3, #1
 800871e:	4631      	mov	r1, r6
 8008720:	4628      	mov	r0, r5
 8008722:	4a35      	ldr	r2, [pc, #212]	; (80087f8 <_printf_float+0x2e0>)
 8008724:	47b8      	blx	r7
 8008726:	3001      	adds	r0, #1
 8008728:	f43f af51 	beq.w	80085ce <_printf_float+0xb6>
 800872c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008730:	429a      	cmp	r2, r3
 8008732:	db02      	blt.n	800873a <_printf_float+0x222>
 8008734:	6823      	ldr	r3, [r4, #0]
 8008736:	07d8      	lsls	r0, r3, #31
 8008738:	d50f      	bpl.n	800875a <_printf_float+0x242>
 800873a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800873e:	4631      	mov	r1, r6
 8008740:	4628      	mov	r0, r5
 8008742:	47b8      	blx	r7
 8008744:	3001      	adds	r0, #1
 8008746:	f43f af42 	beq.w	80085ce <_printf_float+0xb6>
 800874a:	f04f 0800 	mov.w	r8, #0
 800874e:	f104 091a 	add.w	r9, r4, #26
 8008752:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008754:	3b01      	subs	r3, #1
 8008756:	4543      	cmp	r3, r8
 8008758:	dc09      	bgt.n	800876e <_printf_float+0x256>
 800875a:	6823      	ldr	r3, [r4, #0]
 800875c:	079b      	lsls	r3, r3, #30
 800875e:	f100 8102 	bmi.w	8008966 <_printf_float+0x44e>
 8008762:	68e0      	ldr	r0, [r4, #12]
 8008764:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008766:	4298      	cmp	r0, r3
 8008768:	bfb8      	it	lt
 800876a:	4618      	movlt	r0, r3
 800876c:	e731      	b.n	80085d2 <_printf_float+0xba>
 800876e:	2301      	movs	r3, #1
 8008770:	464a      	mov	r2, r9
 8008772:	4631      	mov	r1, r6
 8008774:	4628      	mov	r0, r5
 8008776:	47b8      	blx	r7
 8008778:	3001      	adds	r0, #1
 800877a:	f43f af28 	beq.w	80085ce <_printf_float+0xb6>
 800877e:	f108 0801 	add.w	r8, r8, #1
 8008782:	e7e6      	b.n	8008752 <_printf_float+0x23a>
 8008784:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008786:	2b00      	cmp	r3, #0
 8008788:	dc38      	bgt.n	80087fc <_printf_float+0x2e4>
 800878a:	2301      	movs	r3, #1
 800878c:	4631      	mov	r1, r6
 800878e:	4628      	mov	r0, r5
 8008790:	4a19      	ldr	r2, [pc, #100]	; (80087f8 <_printf_float+0x2e0>)
 8008792:	47b8      	blx	r7
 8008794:	3001      	adds	r0, #1
 8008796:	f43f af1a 	beq.w	80085ce <_printf_float+0xb6>
 800879a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800879e:	4313      	orrs	r3, r2
 80087a0:	d102      	bne.n	80087a8 <_printf_float+0x290>
 80087a2:	6823      	ldr	r3, [r4, #0]
 80087a4:	07d9      	lsls	r1, r3, #31
 80087a6:	d5d8      	bpl.n	800875a <_printf_float+0x242>
 80087a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087ac:	4631      	mov	r1, r6
 80087ae:	4628      	mov	r0, r5
 80087b0:	47b8      	blx	r7
 80087b2:	3001      	adds	r0, #1
 80087b4:	f43f af0b 	beq.w	80085ce <_printf_float+0xb6>
 80087b8:	f04f 0900 	mov.w	r9, #0
 80087bc:	f104 0a1a 	add.w	sl, r4, #26
 80087c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087c2:	425b      	negs	r3, r3
 80087c4:	454b      	cmp	r3, r9
 80087c6:	dc01      	bgt.n	80087cc <_printf_float+0x2b4>
 80087c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087ca:	e794      	b.n	80086f6 <_printf_float+0x1de>
 80087cc:	2301      	movs	r3, #1
 80087ce:	4652      	mov	r2, sl
 80087d0:	4631      	mov	r1, r6
 80087d2:	4628      	mov	r0, r5
 80087d4:	47b8      	blx	r7
 80087d6:	3001      	adds	r0, #1
 80087d8:	f43f aef9 	beq.w	80085ce <_printf_float+0xb6>
 80087dc:	f109 0901 	add.w	r9, r9, #1
 80087e0:	e7ee      	b.n	80087c0 <_printf_float+0x2a8>
 80087e2:	bf00      	nop
 80087e4:	7fefffff 	.word	0x7fefffff
 80087e8:	0800c881 	.word	0x0800c881
 80087ec:	0800c885 	.word	0x0800c885
 80087f0:	0800c88d 	.word	0x0800c88d
 80087f4:	0800c889 	.word	0x0800c889
 80087f8:	0800c891 	.word	0x0800c891
 80087fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008800:	429a      	cmp	r2, r3
 8008802:	bfa8      	it	ge
 8008804:	461a      	movge	r2, r3
 8008806:	2a00      	cmp	r2, #0
 8008808:	4691      	mov	r9, r2
 800880a:	dc37      	bgt.n	800887c <_printf_float+0x364>
 800880c:	f04f 0b00 	mov.w	fp, #0
 8008810:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008814:	f104 021a 	add.w	r2, r4, #26
 8008818:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800881c:	ebaa 0309 	sub.w	r3, sl, r9
 8008820:	455b      	cmp	r3, fp
 8008822:	dc33      	bgt.n	800888c <_printf_float+0x374>
 8008824:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008828:	429a      	cmp	r2, r3
 800882a:	db3b      	blt.n	80088a4 <_printf_float+0x38c>
 800882c:	6823      	ldr	r3, [r4, #0]
 800882e:	07da      	lsls	r2, r3, #31
 8008830:	d438      	bmi.n	80088a4 <_printf_float+0x38c>
 8008832:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008834:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008836:	eba2 030a 	sub.w	r3, r2, sl
 800883a:	eba2 0901 	sub.w	r9, r2, r1
 800883e:	4599      	cmp	r9, r3
 8008840:	bfa8      	it	ge
 8008842:	4699      	movge	r9, r3
 8008844:	f1b9 0f00 	cmp.w	r9, #0
 8008848:	dc34      	bgt.n	80088b4 <_printf_float+0x39c>
 800884a:	f04f 0800 	mov.w	r8, #0
 800884e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008852:	f104 0a1a 	add.w	sl, r4, #26
 8008856:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800885a:	1a9b      	subs	r3, r3, r2
 800885c:	eba3 0309 	sub.w	r3, r3, r9
 8008860:	4543      	cmp	r3, r8
 8008862:	f77f af7a 	ble.w	800875a <_printf_float+0x242>
 8008866:	2301      	movs	r3, #1
 8008868:	4652      	mov	r2, sl
 800886a:	4631      	mov	r1, r6
 800886c:	4628      	mov	r0, r5
 800886e:	47b8      	blx	r7
 8008870:	3001      	adds	r0, #1
 8008872:	f43f aeac 	beq.w	80085ce <_printf_float+0xb6>
 8008876:	f108 0801 	add.w	r8, r8, #1
 800887a:	e7ec      	b.n	8008856 <_printf_float+0x33e>
 800887c:	4613      	mov	r3, r2
 800887e:	4631      	mov	r1, r6
 8008880:	4642      	mov	r2, r8
 8008882:	4628      	mov	r0, r5
 8008884:	47b8      	blx	r7
 8008886:	3001      	adds	r0, #1
 8008888:	d1c0      	bne.n	800880c <_printf_float+0x2f4>
 800888a:	e6a0      	b.n	80085ce <_printf_float+0xb6>
 800888c:	2301      	movs	r3, #1
 800888e:	4631      	mov	r1, r6
 8008890:	4628      	mov	r0, r5
 8008892:	920b      	str	r2, [sp, #44]	; 0x2c
 8008894:	47b8      	blx	r7
 8008896:	3001      	adds	r0, #1
 8008898:	f43f ae99 	beq.w	80085ce <_printf_float+0xb6>
 800889c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800889e:	f10b 0b01 	add.w	fp, fp, #1
 80088a2:	e7b9      	b.n	8008818 <_printf_float+0x300>
 80088a4:	4631      	mov	r1, r6
 80088a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088aa:	4628      	mov	r0, r5
 80088ac:	47b8      	blx	r7
 80088ae:	3001      	adds	r0, #1
 80088b0:	d1bf      	bne.n	8008832 <_printf_float+0x31a>
 80088b2:	e68c      	b.n	80085ce <_printf_float+0xb6>
 80088b4:	464b      	mov	r3, r9
 80088b6:	4631      	mov	r1, r6
 80088b8:	4628      	mov	r0, r5
 80088ba:	eb08 020a 	add.w	r2, r8, sl
 80088be:	47b8      	blx	r7
 80088c0:	3001      	adds	r0, #1
 80088c2:	d1c2      	bne.n	800884a <_printf_float+0x332>
 80088c4:	e683      	b.n	80085ce <_printf_float+0xb6>
 80088c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088c8:	2a01      	cmp	r2, #1
 80088ca:	dc01      	bgt.n	80088d0 <_printf_float+0x3b8>
 80088cc:	07db      	lsls	r3, r3, #31
 80088ce:	d537      	bpl.n	8008940 <_printf_float+0x428>
 80088d0:	2301      	movs	r3, #1
 80088d2:	4642      	mov	r2, r8
 80088d4:	4631      	mov	r1, r6
 80088d6:	4628      	mov	r0, r5
 80088d8:	47b8      	blx	r7
 80088da:	3001      	adds	r0, #1
 80088dc:	f43f ae77 	beq.w	80085ce <_printf_float+0xb6>
 80088e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088e4:	4631      	mov	r1, r6
 80088e6:	4628      	mov	r0, r5
 80088e8:	47b8      	blx	r7
 80088ea:	3001      	adds	r0, #1
 80088ec:	f43f ae6f 	beq.w	80085ce <_printf_float+0xb6>
 80088f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088f4:	2200      	movs	r2, #0
 80088f6:	2300      	movs	r3, #0
 80088f8:	f7f8 f856 	bl	80009a8 <__aeabi_dcmpeq>
 80088fc:	b9d8      	cbnz	r0, 8008936 <_printf_float+0x41e>
 80088fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008900:	f108 0201 	add.w	r2, r8, #1
 8008904:	3b01      	subs	r3, #1
 8008906:	4631      	mov	r1, r6
 8008908:	4628      	mov	r0, r5
 800890a:	47b8      	blx	r7
 800890c:	3001      	adds	r0, #1
 800890e:	d10e      	bne.n	800892e <_printf_float+0x416>
 8008910:	e65d      	b.n	80085ce <_printf_float+0xb6>
 8008912:	2301      	movs	r3, #1
 8008914:	464a      	mov	r2, r9
 8008916:	4631      	mov	r1, r6
 8008918:	4628      	mov	r0, r5
 800891a:	47b8      	blx	r7
 800891c:	3001      	adds	r0, #1
 800891e:	f43f ae56 	beq.w	80085ce <_printf_float+0xb6>
 8008922:	f108 0801 	add.w	r8, r8, #1
 8008926:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008928:	3b01      	subs	r3, #1
 800892a:	4543      	cmp	r3, r8
 800892c:	dcf1      	bgt.n	8008912 <_printf_float+0x3fa>
 800892e:	4653      	mov	r3, sl
 8008930:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008934:	e6e0      	b.n	80086f8 <_printf_float+0x1e0>
 8008936:	f04f 0800 	mov.w	r8, #0
 800893a:	f104 091a 	add.w	r9, r4, #26
 800893e:	e7f2      	b.n	8008926 <_printf_float+0x40e>
 8008940:	2301      	movs	r3, #1
 8008942:	4642      	mov	r2, r8
 8008944:	e7df      	b.n	8008906 <_printf_float+0x3ee>
 8008946:	2301      	movs	r3, #1
 8008948:	464a      	mov	r2, r9
 800894a:	4631      	mov	r1, r6
 800894c:	4628      	mov	r0, r5
 800894e:	47b8      	blx	r7
 8008950:	3001      	adds	r0, #1
 8008952:	f43f ae3c 	beq.w	80085ce <_printf_float+0xb6>
 8008956:	f108 0801 	add.w	r8, r8, #1
 800895a:	68e3      	ldr	r3, [r4, #12]
 800895c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800895e:	1a5b      	subs	r3, r3, r1
 8008960:	4543      	cmp	r3, r8
 8008962:	dcf0      	bgt.n	8008946 <_printf_float+0x42e>
 8008964:	e6fd      	b.n	8008762 <_printf_float+0x24a>
 8008966:	f04f 0800 	mov.w	r8, #0
 800896a:	f104 0919 	add.w	r9, r4, #25
 800896e:	e7f4      	b.n	800895a <_printf_float+0x442>

08008970 <_printf_common>:
 8008970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008974:	4616      	mov	r6, r2
 8008976:	4699      	mov	r9, r3
 8008978:	688a      	ldr	r2, [r1, #8]
 800897a:	690b      	ldr	r3, [r1, #16]
 800897c:	4607      	mov	r7, r0
 800897e:	4293      	cmp	r3, r2
 8008980:	bfb8      	it	lt
 8008982:	4613      	movlt	r3, r2
 8008984:	6033      	str	r3, [r6, #0]
 8008986:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800898a:	460c      	mov	r4, r1
 800898c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008990:	b10a      	cbz	r2, 8008996 <_printf_common+0x26>
 8008992:	3301      	adds	r3, #1
 8008994:	6033      	str	r3, [r6, #0]
 8008996:	6823      	ldr	r3, [r4, #0]
 8008998:	0699      	lsls	r1, r3, #26
 800899a:	bf42      	ittt	mi
 800899c:	6833      	ldrmi	r3, [r6, #0]
 800899e:	3302      	addmi	r3, #2
 80089a0:	6033      	strmi	r3, [r6, #0]
 80089a2:	6825      	ldr	r5, [r4, #0]
 80089a4:	f015 0506 	ands.w	r5, r5, #6
 80089a8:	d106      	bne.n	80089b8 <_printf_common+0x48>
 80089aa:	f104 0a19 	add.w	sl, r4, #25
 80089ae:	68e3      	ldr	r3, [r4, #12]
 80089b0:	6832      	ldr	r2, [r6, #0]
 80089b2:	1a9b      	subs	r3, r3, r2
 80089b4:	42ab      	cmp	r3, r5
 80089b6:	dc28      	bgt.n	8008a0a <_printf_common+0x9a>
 80089b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80089bc:	1e13      	subs	r3, r2, #0
 80089be:	6822      	ldr	r2, [r4, #0]
 80089c0:	bf18      	it	ne
 80089c2:	2301      	movne	r3, #1
 80089c4:	0692      	lsls	r2, r2, #26
 80089c6:	d42d      	bmi.n	8008a24 <_printf_common+0xb4>
 80089c8:	4649      	mov	r1, r9
 80089ca:	4638      	mov	r0, r7
 80089cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089d0:	47c0      	blx	r8
 80089d2:	3001      	adds	r0, #1
 80089d4:	d020      	beq.n	8008a18 <_printf_common+0xa8>
 80089d6:	6823      	ldr	r3, [r4, #0]
 80089d8:	68e5      	ldr	r5, [r4, #12]
 80089da:	f003 0306 	and.w	r3, r3, #6
 80089de:	2b04      	cmp	r3, #4
 80089e0:	bf18      	it	ne
 80089e2:	2500      	movne	r5, #0
 80089e4:	6832      	ldr	r2, [r6, #0]
 80089e6:	f04f 0600 	mov.w	r6, #0
 80089ea:	68a3      	ldr	r3, [r4, #8]
 80089ec:	bf08      	it	eq
 80089ee:	1aad      	subeq	r5, r5, r2
 80089f0:	6922      	ldr	r2, [r4, #16]
 80089f2:	bf08      	it	eq
 80089f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089f8:	4293      	cmp	r3, r2
 80089fa:	bfc4      	itt	gt
 80089fc:	1a9b      	subgt	r3, r3, r2
 80089fe:	18ed      	addgt	r5, r5, r3
 8008a00:	341a      	adds	r4, #26
 8008a02:	42b5      	cmp	r5, r6
 8008a04:	d11a      	bne.n	8008a3c <_printf_common+0xcc>
 8008a06:	2000      	movs	r0, #0
 8008a08:	e008      	b.n	8008a1c <_printf_common+0xac>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	4652      	mov	r2, sl
 8008a0e:	4649      	mov	r1, r9
 8008a10:	4638      	mov	r0, r7
 8008a12:	47c0      	blx	r8
 8008a14:	3001      	adds	r0, #1
 8008a16:	d103      	bne.n	8008a20 <_printf_common+0xb0>
 8008a18:	f04f 30ff 	mov.w	r0, #4294967295
 8008a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a20:	3501      	adds	r5, #1
 8008a22:	e7c4      	b.n	80089ae <_printf_common+0x3e>
 8008a24:	2030      	movs	r0, #48	; 0x30
 8008a26:	18e1      	adds	r1, r4, r3
 8008a28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a2c:	1c5a      	adds	r2, r3, #1
 8008a2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a32:	4422      	add	r2, r4
 8008a34:	3302      	adds	r3, #2
 8008a36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a3a:	e7c5      	b.n	80089c8 <_printf_common+0x58>
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	4622      	mov	r2, r4
 8008a40:	4649      	mov	r1, r9
 8008a42:	4638      	mov	r0, r7
 8008a44:	47c0      	blx	r8
 8008a46:	3001      	adds	r0, #1
 8008a48:	d0e6      	beq.n	8008a18 <_printf_common+0xa8>
 8008a4a:	3601      	adds	r6, #1
 8008a4c:	e7d9      	b.n	8008a02 <_printf_common+0x92>
	...

08008a50 <_printf_i>:
 8008a50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a54:	460c      	mov	r4, r1
 8008a56:	7e27      	ldrb	r7, [r4, #24]
 8008a58:	4691      	mov	r9, r2
 8008a5a:	2f78      	cmp	r7, #120	; 0x78
 8008a5c:	4680      	mov	r8, r0
 8008a5e:	469a      	mov	sl, r3
 8008a60:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008a62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a66:	d807      	bhi.n	8008a78 <_printf_i+0x28>
 8008a68:	2f62      	cmp	r7, #98	; 0x62
 8008a6a:	d80a      	bhi.n	8008a82 <_printf_i+0x32>
 8008a6c:	2f00      	cmp	r7, #0
 8008a6e:	f000 80d9 	beq.w	8008c24 <_printf_i+0x1d4>
 8008a72:	2f58      	cmp	r7, #88	; 0x58
 8008a74:	f000 80a4 	beq.w	8008bc0 <_printf_i+0x170>
 8008a78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008a7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a80:	e03a      	b.n	8008af8 <_printf_i+0xa8>
 8008a82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a86:	2b15      	cmp	r3, #21
 8008a88:	d8f6      	bhi.n	8008a78 <_printf_i+0x28>
 8008a8a:	a001      	add	r0, pc, #4	; (adr r0, 8008a90 <_printf_i+0x40>)
 8008a8c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008a90:	08008ae9 	.word	0x08008ae9
 8008a94:	08008afd 	.word	0x08008afd
 8008a98:	08008a79 	.word	0x08008a79
 8008a9c:	08008a79 	.word	0x08008a79
 8008aa0:	08008a79 	.word	0x08008a79
 8008aa4:	08008a79 	.word	0x08008a79
 8008aa8:	08008afd 	.word	0x08008afd
 8008aac:	08008a79 	.word	0x08008a79
 8008ab0:	08008a79 	.word	0x08008a79
 8008ab4:	08008a79 	.word	0x08008a79
 8008ab8:	08008a79 	.word	0x08008a79
 8008abc:	08008c0b 	.word	0x08008c0b
 8008ac0:	08008b2d 	.word	0x08008b2d
 8008ac4:	08008bed 	.word	0x08008bed
 8008ac8:	08008a79 	.word	0x08008a79
 8008acc:	08008a79 	.word	0x08008a79
 8008ad0:	08008c2d 	.word	0x08008c2d
 8008ad4:	08008a79 	.word	0x08008a79
 8008ad8:	08008b2d 	.word	0x08008b2d
 8008adc:	08008a79 	.word	0x08008a79
 8008ae0:	08008a79 	.word	0x08008a79
 8008ae4:	08008bf5 	.word	0x08008bf5
 8008ae8:	680b      	ldr	r3, [r1, #0]
 8008aea:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008aee:	1d1a      	adds	r2, r3, #4
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	600a      	str	r2, [r1, #0]
 8008af4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008af8:	2301      	movs	r3, #1
 8008afa:	e0a4      	b.n	8008c46 <_printf_i+0x1f6>
 8008afc:	6825      	ldr	r5, [r4, #0]
 8008afe:	6808      	ldr	r0, [r1, #0]
 8008b00:	062e      	lsls	r6, r5, #24
 8008b02:	f100 0304 	add.w	r3, r0, #4
 8008b06:	d50a      	bpl.n	8008b1e <_printf_i+0xce>
 8008b08:	6805      	ldr	r5, [r0, #0]
 8008b0a:	600b      	str	r3, [r1, #0]
 8008b0c:	2d00      	cmp	r5, #0
 8008b0e:	da03      	bge.n	8008b18 <_printf_i+0xc8>
 8008b10:	232d      	movs	r3, #45	; 0x2d
 8008b12:	426d      	negs	r5, r5
 8008b14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b18:	230a      	movs	r3, #10
 8008b1a:	485e      	ldr	r0, [pc, #376]	; (8008c94 <_printf_i+0x244>)
 8008b1c:	e019      	b.n	8008b52 <_printf_i+0x102>
 8008b1e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008b22:	6805      	ldr	r5, [r0, #0]
 8008b24:	600b      	str	r3, [r1, #0]
 8008b26:	bf18      	it	ne
 8008b28:	b22d      	sxthne	r5, r5
 8008b2a:	e7ef      	b.n	8008b0c <_printf_i+0xbc>
 8008b2c:	680b      	ldr	r3, [r1, #0]
 8008b2e:	6825      	ldr	r5, [r4, #0]
 8008b30:	1d18      	adds	r0, r3, #4
 8008b32:	6008      	str	r0, [r1, #0]
 8008b34:	0628      	lsls	r0, r5, #24
 8008b36:	d501      	bpl.n	8008b3c <_printf_i+0xec>
 8008b38:	681d      	ldr	r5, [r3, #0]
 8008b3a:	e002      	b.n	8008b42 <_printf_i+0xf2>
 8008b3c:	0669      	lsls	r1, r5, #25
 8008b3e:	d5fb      	bpl.n	8008b38 <_printf_i+0xe8>
 8008b40:	881d      	ldrh	r5, [r3, #0]
 8008b42:	2f6f      	cmp	r7, #111	; 0x6f
 8008b44:	bf0c      	ite	eq
 8008b46:	2308      	moveq	r3, #8
 8008b48:	230a      	movne	r3, #10
 8008b4a:	4852      	ldr	r0, [pc, #328]	; (8008c94 <_printf_i+0x244>)
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b52:	6866      	ldr	r6, [r4, #4]
 8008b54:	2e00      	cmp	r6, #0
 8008b56:	bfa8      	it	ge
 8008b58:	6821      	ldrge	r1, [r4, #0]
 8008b5a:	60a6      	str	r6, [r4, #8]
 8008b5c:	bfa4      	itt	ge
 8008b5e:	f021 0104 	bicge.w	r1, r1, #4
 8008b62:	6021      	strge	r1, [r4, #0]
 8008b64:	b90d      	cbnz	r5, 8008b6a <_printf_i+0x11a>
 8008b66:	2e00      	cmp	r6, #0
 8008b68:	d04d      	beq.n	8008c06 <_printf_i+0x1b6>
 8008b6a:	4616      	mov	r6, r2
 8008b6c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b70:	fb03 5711 	mls	r7, r3, r1, r5
 8008b74:	5dc7      	ldrb	r7, [r0, r7]
 8008b76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b7a:	462f      	mov	r7, r5
 8008b7c:	42bb      	cmp	r3, r7
 8008b7e:	460d      	mov	r5, r1
 8008b80:	d9f4      	bls.n	8008b6c <_printf_i+0x11c>
 8008b82:	2b08      	cmp	r3, #8
 8008b84:	d10b      	bne.n	8008b9e <_printf_i+0x14e>
 8008b86:	6823      	ldr	r3, [r4, #0]
 8008b88:	07df      	lsls	r7, r3, #31
 8008b8a:	d508      	bpl.n	8008b9e <_printf_i+0x14e>
 8008b8c:	6923      	ldr	r3, [r4, #16]
 8008b8e:	6861      	ldr	r1, [r4, #4]
 8008b90:	4299      	cmp	r1, r3
 8008b92:	bfde      	ittt	le
 8008b94:	2330      	movle	r3, #48	; 0x30
 8008b96:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b9a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b9e:	1b92      	subs	r2, r2, r6
 8008ba0:	6122      	str	r2, [r4, #16]
 8008ba2:	464b      	mov	r3, r9
 8008ba4:	4621      	mov	r1, r4
 8008ba6:	4640      	mov	r0, r8
 8008ba8:	f8cd a000 	str.w	sl, [sp]
 8008bac:	aa03      	add	r2, sp, #12
 8008bae:	f7ff fedf 	bl	8008970 <_printf_common>
 8008bb2:	3001      	adds	r0, #1
 8008bb4:	d14c      	bne.n	8008c50 <_printf_i+0x200>
 8008bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8008bba:	b004      	add	sp, #16
 8008bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bc0:	4834      	ldr	r0, [pc, #208]	; (8008c94 <_printf_i+0x244>)
 8008bc2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008bc6:	680e      	ldr	r6, [r1, #0]
 8008bc8:	6823      	ldr	r3, [r4, #0]
 8008bca:	f856 5b04 	ldr.w	r5, [r6], #4
 8008bce:	061f      	lsls	r7, r3, #24
 8008bd0:	600e      	str	r6, [r1, #0]
 8008bd2:	d514      	bpl.n	8008bfe <_printf_i+0x1ae>
 8008bd4:	07d9      	lsls	r1, r3, #31
 8008bd6:	bf44      	itt	mi
 8008bd8:	f043 0320 	orrmi.w	r3, r3, #32
 8008bdc:	6023      	strmi	r3, [r4, #0]
 8008bde:	b91d      	cbnz	r5, 8008be8 <_printf_i+0x198>
 8008be0:	6823      	ldr	r3, [r4, #0]
 8008be2:	f023 0320 	bic.w	r3, r3, #32
 8008be6:	6023      	str	r3, [r4, #0]
 8008be8:	2310      	movs	r3, #16
 8008bea:	e7af      	b.n	8008b4c <_printf_i+0xfc>
 8008bec:	6823      	ldr	r3, [r4, #0]
 8008bee:	f043 0320 	orr.w	r3, r3, #32
 8008bf2:	6023      	str	r3, [r4, #0]
 8008bf4:	2378      	movs	r3, #120	; 0x78
 8008bf6:	4828      	ldr	r0, [pc, #160]	; (8008c98 <_printf_i+0x248>)
 8008bf8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008bfc:	e7e3      	b.n	8008bc6 <_printf_i+0x176>
 8008bfe:	065e      	lsls	r6, r3, #25
 8008c00:	bf48      	it	mi
 8008c02:	b2ad      	uxthmi	r5, r5
 8008c04:	e7e6      	b.n	8008bd4 <_printf_i+0x184>
 8008c06:	4616      	mov	r6, r2
 8008c08:	e7bb      	b.n	8008b82 <_printf_i+0x132>
 8008c0a:	680b      	ldr	r3, [r1, #0]
 8008c0c:	6826      	ldr	r6, [r4, #0]
 8008c0e:	1d1d      	adds	r5, r3, #4
 8008c10:	6960      	ldr	r0, [r4, #20]
 8008c12:	600d      	str	r5, [r1, #0]
 8008c14:	0635      	lsls	r5, r6, #24
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	d501      	bpl.n	8008c1e <_printf_i+0x1ce>
 8008c1a:	6018      	str	r0, [r3, #0]
 8008c1c:	e002      	b.n	8008c24 <_printf_i+0x1d4>
 8008c1e:	0671      	lsls	r1, r6, #25
 8008c20:	d5fb      	bpl.n	8008c1a <_printf_i+0x1ca>
 8008c22:	8018      	strh	r0, [r3, #0]
 8008c24:	2300      	movs	r3, #0
 8008c26:	4616      	mov	r6, r2
 8008c28:	6123      	str	r3, [r4, #16]
 8008c2a:	e7ba      	b.n	8008ba2 <_printf_i+0x152>
 8008c2c:	680b      	ldr	r3, [r1, #0]
 8008c2e:	1d1a      	adds	r2, r3, #4
 8008c30:	600a      	str	r2, [r1, #0]
 8008c32:	681e      	ldr	r6, [r3, #0]
 8008c34:	2100      	movs	r1, #0
 8008c36:	4630      	mov	r0, r6
 8008c38:	6862      	ldr	r2, [r4, #4]
 8008c3a:	f002 fdfb 	bl	800b834 <memchr>
 8008c3e:	b108      	cbz	r0, 8008c44 <_printf_i+0x1f4>
 8008c40:	1b80      	subs	r0, r0, r6
 8008c42:	6060      	str	r0, [r4, #4]
 8008c44:	6863      	ldr	r3, [r4, #4]
 8008c46:	6123      	str	r3, [r4, #16]
 8008c48:	2300      	movs	r3, #0
 8008c4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c4e:	e7a8      	b.n	8008ba2 <_printf_i+0x152>
 8008c50:	4632      	mov	r2, r6
 8008c52:	4649      	mov	r1, r9
 8008c54:	4640      	mov	r0, r8
 8008c56:	6923      	ldr	r3, [r4, #16]
 8008c58:	47d0      	blx	sl
 8008c5a:	3001      	adds	r0, #1
 8008c5c:	d0ab      	beq.n	8008bb6 <_printf_i+0x166>
 8008c5e:	6823      	ldr	r3, [r4, #0]
 8008c60:	079b      	lsls	r3, r3, #30
 8008c62:	d413      	bmi.n	8008c8c <_printf_i+0x23c>
 8008c64:	68e0      	ldr	r0, [r4, #12]
 8008c66:	9b03      	ldr	r3, [sp, #12]
 8008c68:	4298      	cmp	r0, r3
 8008c6a:	bfb8      	it	lt
 8008c6c:	4618      	movlt	r0, r3
 8008c6e:	e7a4      	b.n	8008bba <_printf_i+0x16a>
 8008c70:	2301      	movs	r3, #1
 8008c72:	4632      	mov	r2, r6
 8008c74:	4649      	mov	r1, r9
 8008c76:	4640      	mov	r0, r8
 8008c78:	47d0      	blx	sl
 8008c7a:	3001      	adds	r0, #1
 8008c7c:	d09b      	beq.n	8008bb6 <_printf_i+0x166>
 8008c7e:	3501      	adds	r5, #1
 8008c80:	68e3      	ldr	r3, [r4, #12]
 8008c82:	9903      	ldr	r1, [sp, #12]
 8008c84:	1a5b      	subs	r3, r3, r1
 8008c86:	42ab      	cmp	r3, r5
 8008c88:	dcf2      	bgt.n	8008c70 <_printf_i+0x220>
 8008c8a:	e7eb      	b.n	8008c64 <_printf_i+0x214>
 8008c8c:	2500      	movs	r5, #0
 8008c8e:	f104 0619 	add.w	r6, r4, #25
 8008c92:	e7f5      	b.n	8008c80 <_printf_i+0x230>
 8008c94:	0800c893 	.word	0x0800c893
 8008c98:	0800c8a4 	.word	0x0800c8a4

08008c9c <_scanf_float>:
 8008c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca0:	b087      	sub	sp, #28
 8008ca2:	9303      	str	r3, [sp, #12]
 8008ca4:	688b      	ldr	r3, [r1, #8]
 8008ca6:	4617      	mov	r7, r2
 8008ca8:	1e5a      	subs	r2, r3, #1
 8008caa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008cae:	bf85      	ittet	hi
 8008cb0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008cb4:	195b      	addhi	r3, r3, r5
 8008cb6:	2300      	movls	r3, #0
 8008cb8:	9302      	strhi	r3, [sp, #8]
 8008cba:	bf88      	it	hi
 8008cbc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008cc0:	468b      	mov	fp, r1
 8008cc2:	f04f 0500 	mov.w	r5, #0
 8008cc6:	bf8c      	ite	hi
 8008cc8:	608b      	strhi	r3, [r1, #8]
 8008cca:	9302      	strls	r3, [sp, #8]
 8008ccc:	680b      	ldr	r3, [r1, #0]
 8008cce:	4680      	mov	r8, r0
 8008cd0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008cd4:	f84b 3b1c 	str.w	r3, [fp], #28
 8008cd8:	460c      	mov	r4, r1
 8008cda:	465e      	mov	r6, fp
 8008cdc:	46aa      	mov	sl, r5
 8008cde:	46a9      	mov	r9, r5
 8008ce0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008ce4:	9501      	str	r5, [sp, #4]
 8008ce6:	68a2      	ldr	r2, [r4, #8]
 8008ce8:	b152      	cbz	r2, 8008d00 <_scanf_float+0x64>
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	2b4e      	cmp	r3, #78	; 0x4e
 8008cf0:	d864      	bhi.n	8008dbc <_scanf_float+0x120>
 8008cf2:	2b40      	cmp	r3, #64	; 0x40
 8008cf4:	d83c      	bhi.n	8008d70 <_scanf_float+0xd4>
 8008cf6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008cfa:	b2c8      	uxtb	r0, r1
 8008cfc:	280e      	cmp	r0, #14
 8008cfe:	d93a      	bls.n	8008d76 <_scanf_float+0xda>
 8008d00:	f1b9 0f00 	cmp.w	r9, #0
 8008d04:	d003      	beq.n	8008d0e <_scanf_float+0x72>
 8008d06:	6823      	ldr	r3, [r4, #0]
 8008d08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d0c:	6023      	str	r3, [r4, #0]
 8008d0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d12:	f1ba 0f01 	cmp.w	sl, #1
 8008d16:	f200 8113 	bhi.w	8008f40 <_scanf_float+0x2a4>
 8008d1a:	455e      	cmp	r6, fp
 8008d1c:	f200 8105 	bhi.w	8008f2a <_scanf_float+0x28e>
 8008d20:	2501      	movs	r5, #1
 8008d22:	4628      	mov	r0, r5
 8008d24:	b007      	add	sp, #28
 8008d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d2a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008d2e:	2a0d      	cmp	r2, #13
 8008d30:	d8e6      	bhi.n	8008d00 <_scanf_float+0x64>
 8008d32:	a101      	add	r1, pc, #4	; (adr r1, 8008d38 <_scanf_float+0x9c>)
 8008d34:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008d38:	08008e77 	.word	0x08008e77
 8008d3c:	08008d01 	.word	0x08008d01
 8008d40:	08008d01 	.word	0x08008d01
 8008d44:	08008d01 	.word	0x08008d01
 8008d48:	08008ed7 	.word	0x08008ed7
 8008d4c:	08008eaf 	.word	0x08008eaf
 8008d50:	08008d01 	.word	0x08008d01
 8008d54:	08008d01 	.word	0x08008d01
 8008d58:	08008e85 	.word	0x08008e85
 8008d5c:	08008d01 	.word	0x08008d01
 8008d60:	08008d01 	.word	0x08008d01
 8008d64:	08008d01 	.word	0x08008d01
 8008d68:	08008d01 	.word	0x08008d01
 8008d6c:	08008e3d 	.word	0x08008e3d
 8008d70:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008d74:	e7db      	b.n	8008d2e <_scanf_float+0x92>
 8008d76:	290e      	cmp	r1, #14
 8008d78:	d8c2      	bhi.n	8008d00 <_scanf_float+0x64>
 8008d7a:	a001      	add	r0, pc, #4	; (adr r0, 8008d80 <_scanf_float+0xe4>)
 8008d7c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008d80:	08008e2f 	.word	0x08008e2f
 8008d84:	08008d01 	.word	0x08008d01
 8008d88:	08008e2f 	.word	0x08008e2f
 8008d8c:	08008ec3 	.word	0x08008ec3
 8008d90:	08008d01 	.word	0x08008d01
 8008d94:	08008ddd 	.word	0x08008ddd
 8008d98:	08008e19 	.word	0x08008e19
 8008d9c:	08008e19 	.word	0x08008e19
 8008da0:	08008e19 	.word	0x08008e19
 8008da4:	08008e19 	.word	0x08008e19
 8008da8:	08008e19 	.word	0x08008e19
 8008dac:	08008e19 	.word	0x08008e19
 8008db0:	08008e19 	.word	0x08008e19
 8008db4:	08008e19 	.word	0x08008e19
 8008db8:	08008e19 	.word	0x08008e19
 8008dbc:	2b6e      	cmp	r3, #110	; 0x6e
 8008dbe:	d809      	bhi.n	8008dd4 <_scanf_float+0x138>
 8008dc0:	2b60      	cmp	r3, #96	; 0x60
 8008dc2:	d8b2      	bhi.n	8008d2a <_scanf_float+0x8e>
 8008dc4:	2b54      	cmp	r3, #84	; 0x54
 8008dc6:	d077      	beq.n	8008eb8 <_scanf_float+0x21c>
 8008dc8:	2b59      	cmp	r3, #89	; 0x59
 8008dca:	d199      	bne.n	8008d00 <_scanf_float+0x64>
 8008dcc:	2d07      	cmp	r5, #7
 8008dce:	d197      	bne.n	8008d00 <_scanf_float+0x64>
 8008dd0:	2508      	movs	r5, #8
 8008dd2:	e029      	b.n	8008e28 <_scanf_float+0x18c>
 8008dd4:	2b74      	cmp	r3, #116	; 0x74
 8008dd6:	d06f      	beq.n	8008eb8 <_scanf_float+0x21c>
 8008dd8:	2b79      	cmp	r3, #121	; 0x79
 8008dda:	e7f6      	b.n	8008dca <_scanf_float+0x12e>
 8008ddc:	6821      	ldr	r1, [r4, #0]
 8008dde:	05c8      	lsls	r0, r1, #23
 8008de0:	d51a      	bpl.n	8008e18 <_scanf_float+0x17c>
 8008de2:	9b02      	ldr	r3, [sp, #8]
 8008de4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008de8:	6021      	str	r1, [r4, #0]
 8008dea:	f109 0901 	add.w	r9, r9, #1
 8008dee:	b11b      	cbz	r3, 8008df8 <_scanf_float+0x15c>
 8008df0:	3b01      	subs	r3, #1
 8008df2:	3201      	adds	r2, #1
 8008df4:	9302      	str	r3, [sp, #8]
 8008df6:	60a2      	str	r2, [r4, #8]
 8008df8:	68a3      	ldr	r3, [r4, #8]
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	60a3      	str	r3, [r4, #8]
 8008dfe:	6923      	ldr	r3, [r4, #16]
 8008e00:	3301      	adds	r3, #1
 8008e02:	6123      	str	r3, [r4, #16]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	3b01      	subs	r3, #1
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	607b      	str	r3, [r7, #4]
 8008e0c:	f340 8084 	ble.w	8008f18 <_scanf_float+0x27c>
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	3301      	adds	r3, #1
 8008e14:	603b      	str	r3, [r7, #0]
 8008e16:	e766      	b.n	8008ce6 <_scanf_float+0x4a>
 8008e18:	eb1a 0f05 	cmn.w	sl, r5
 8008e1c:	f47f af70 	bne.w	8008d00 <_scanf_float+0x64>
 8008e20:	6822      	ldr	r2, [r4, #0]
 8008e22:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008e26:	6022      	str	r2, [r4, #0]
 8008e28:	f806 3b01 	strb.w	r3, [r6], #1
 8008e2c:	e7e4      	b.n	8008df8 <_scanf_float+0x15c>
 8008e2e:	6822      	ldr	r2, [r4, #0]
 8008e30:	0610      	lsls	r0, r2, #24
 8008e32:	f57f af65 	bpl.w	8008d00 <_scanf_float+0x64>
 8008e36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e3a:	e7f4      	b.n	8008e26 <_scanf_float+0x18a>
 8008e3c:	f1ba 0f00 	cmp.w	sl, #0
 8008e40:	d10e      	bne.n	8008e60 <_scanf_float+0x1c4>
 8008e42:	f1b9 0f00 	cmp.w	r9, #0
 8008e46:	d10e      	bne.n	8008e66 <_scanf_float+0x1ca>
 8008e48:	6822      	ldr	r2, [r4, #0]
 8008e4a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008e4e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008e52:	d108      	bne.n	8008e66 <_scanf_float+0x1ca>
 8008e54:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008e58:	f04f 0a01 	mov.w	sl, #1
 8008e5c:	6022      	str	r2, [r4, #0]
 8008e5e:	e7e3      	b.n	8008e28 <_scanf_float+0x18c>
 8008e60:	f1ba 0f02 	cmp.w	sl, #2
 8008e64:	d055      	beq.n	8008f12 <_scanf_float+0x276>
 8008e66:	2d01      	cmp	r5, #1
 8008e68:	d002      	beq.n	8008e70 <_scanf_float+0x1d4>
 8008e6a:	2d04      	cmp	r5, #4
 8008e6c:	f47f af48 	bne.w	8008d00 <_scanf_float+0x64>
 8008e70:	3501      	adds	r5, #1
 8008e72:	b2ed      	uxtb	r5, r5
 8008e74:	e7d8      	b.n	8008e28 <_scanf_float+0x18c>
 8008e76:	f1ba 0f01 	cmp.w	sl, #1
 8008e7a:	f47f af41 	bne.w	8008d00 <_scanf_float+0x64>
 8008e7e:	f04f 0a02 	mov.w	sl, #2
 8008e82:	e7d1      	b.n	8008e28 <_scanf_float+0x18c>
 8008e84:	b97d      	cbnz	r5, 8008ea6 <_scanf_float+0x20a>
 8008e86:	f1b9 0f00 	cmp.w	r9, #0
 8008e8a:	f47f af3c 	bne.w	8008d06 <_scanf_float+0x6a>
 8008e8e:	6822      	ldr	r2, [r4, #0]
 8008e90:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008e94:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008e98:	f47f af39 	bne.w	8008d0e <_scanf_float+0x72>
 8008e9c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008ea0:	2501      	movs	r5, #1
 8008ea2:	6022      	str	r2, [r4, #0]
 8008ea4:	e7c0      	b.n	8008e28 <_scanf_float+0x18c>
 8008ea6:	2d03      	cmp	r5, #3
 8008ea8:	d0e2      	beq.n	8008e70 <_scanf_float+0x1d4>
 8008eaa:	2d05      	cmp	r5, #5
 8008eac:	e7de      	b.n	8008e6c <_scanf_float+0x1d0>
 8008eae:	2d02      	cmp	r5, #2
 8008eb0:	f47f af26 	bne.w	8008d00 <_scanf_float+0x64>
 8008eb4:	2503      	movs	r5, #3
 8008eb6:	e7b7      	b.n	8008e28 <_scanf_float+0x18c>
 8008eb8:	2d06      	cmp	r5, #6
 8008eba:	f47f af21 	bne.w	8008d00 <_scanf_float+0x64>
 8008ebe:	2507      	movs	r5, #7
 8008ec0:	e7b2      	b.n	8008e28 <_scanf_float+0x18c>
 8008ec2:	6822      	ldr	r2, [r4, #0]
 8008ec4:	0591      	lsls	r1, r2, #22
 8008ec6:	f57f af1b 	bpl.w	8008d00 <_scanf_float+0x64>
 8008eca:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008ece:	6022      	str	r2, [r4, #0]
 8008ed0:	f8cd 9004 	str.w	r9, [sp, #4]
 8008ed4:	e7a8      	b.n	8008e28 <_scanf_float+0x18c>
 8008ed6:	6822      	ldr	r2, [r4, #0]
 8008ed8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008edc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008ee0:	d006      	beq.n	8008ef0 <_scanf_float+0x254>
 8008ee2:	0550      	lsls	r0, r2, #21
 8008ee4:	f57f af0c 	bpl.w	8008d00 <_scanf_float+0x64>
 8008ee8:	f1b9 0f00 	cmp.w	r9, #0
 8008eec:	f43f af0f 	beq.w	8008d0e <_scanf_float+0x72>
 8008ef0:	0591      	lsls	r1, r2, #22
 8008ef2:	bf58      	it	pl
 8008ef4:	9901      	ldrpl	r1, [sp, #4]
 8008ef6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008efa:	bf58      	it	pl
 8008efc:	eba9 0101 	subpl.w	r1, r9, r1
 8008f00:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008f04:	f04f 0900 	mov.w	r9, #0
 8008f08:	bf58      	it	pl
 8008f0a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008f0e:	6022      	str	r2, [r4, #0]
 8008f10:	e78a      	b.n	8008e28 <_scanf_float+0x18c>
 8008f12:	f04f 0a03 	mov.w	sl, #3
 8008f16:	e787      	b.n	8008e28 <_scanf_float+0x18c>
 8008f18:	4639      	mov	r1, r7
 8008f1a:	4640      	mov	r0, r8
 8008f1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008f20:	4798      	blx	r3
 8008f22:	2800      	cmp	r0, #0
 8008f24:	f43f aedf 	beq.w	8008ce6 <_scanf_float+0x4a>
 8008f28:	e6ea      	b.n	8008d00 <_scanf_float+0x64>
 8008f2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f2e:	463a      	mov	r2, r7
 8008f30:	4640      	mov	r0, r8
 8008f32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f36:	4798      	blx	r3
 8008f38:	6923      	ldr	r3, [r4, #16]
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	6123      	str	r3, [r4, #16]
 8008f3e:	e6ec      	b.n	8008d1a <_scanf_float+0x7e>
 8008f40:	1e6b      	subs	r3, r5, #1
 8008f42:	2b06      	cmp	r3, #6
 8008f44:	d825      	bhi.n	8008f92 <_scanf_float+0x2f6>
 8008f46:	2d02      	cmp	r5, #2
 8008f48:	d836      	bhi.n	8008fb8 <_scanf_float+0x31c>
 8008f4a:	455e      	cmp	r6, fp
 8008f4c:	f67f aee8 	bls.w	8008d20 <_scanf_float+0x84>
 8008f50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f54:	463a      	mov	r2, r7
 8008f56:	4640      	mov	r0, r8
 8008f58:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f5c:	4798      	blx	r3
 8008f5e:	6923      	ldr	r3, [r4, #16]
 8008f60:	3b01      	subs	r3, #1
 8008f62:	6123      	str	r3, [r4, #16]
 8008f64:	e7f1      	b.n	8008f4a <_scanf_float+0x2ae>
 8008f66:	9802      	ldr	r0, [sp, #8]
 8008f68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f6c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008f70:	463a      	mov	r2, r7
 8008f72:	9002      	str	r0, [sp, #8]
 8008f74:	4640      	mov	r0, r8
 8008f76:	4798      	blx	r3
 8008f78:	6923      	ldr	r3, [r4, #16]
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	6123      	str	r3, [r4, #16]
 8008f7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f82:	fa5f fa8a 	uxtb.w	sl, sl
 8008f86:	f1ba 0f02 	cmp.w	sl, #2
 8008f8a:	d1ec      	bne.n	8008f66 <_scanf_float+0x2ca>
 8008f8c:	3d03      	subs	r5, #3
 8008f8e:	b2ed      	uxtb	r5, r5
 8008f90:	1b76      	subs	r6, r6, r5
 8008f92:	6823      	ldr	r3, [r4, #0]
 8008f94:	05da      	lsls	r2, r3, #23
 8008f96:	d52f      	bpl.n	8008ff8 <_scanf_float+0x35c>
 8008f98:	055b      	lsls	r3, r3, #21
 8008f9a:	d510      	bpl.n	8008fbe <_scanf_float+0x322>
 8008f9c:	455e      	cmp	r6, fp
 8008f9e:	f67f aebf 	bls.w	8008d20 <_scanf_float+0x84>
 8008fa2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008fa6:	463a      	mov	r2, r7
 8008fa8:	4640      	mov	r0, r8
 8008faa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008fae:	4798      	blx	r3
 8008fb0:	6923      	ldr	r3, [r4, #16]
 8008fb2:	3b01      	subs	r3, #1
 8008fb4:	6123      	str	r3, [r4, #16]
 8008fb6:	e7f1      	b.n	8008f9c <_scanf_float+0x300>
 8008fb8:	46aa      	mov	sl, r5
 8008fba:	9602      	str	r6, [sp, #8]
 8008fbc:	e7df      	b.n	8008f7e <_scanf_float+0x2e2>
 8008fbe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008fc2:	6923      	ldr	r3, [r4, #16]
 8008fc4:	2965      	cmp	r1, #101	; 0x65
 8008fc6:	f103 33ff 	add.w	r3, r3, #4294967295
 8008fca:	f106 35ff 	add.w	r5, r6, #4294967295
 8008fce:	6123      	str	r3, [r4, #16]
 8008fd0:	d00c      	beq.n	8008fec <_scanf_float+0x350>
 8008fd2:	2945      	cmp	r1, #69	; 0x45
 8008fd4:	d00a      	beq.n	8008fec <_scanf_float+0x350>
 8008fd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008fda:	463a      	mov	r2, r7
 8008fdc:	4640      	mov	r0, r8
 8008fde:	4798      	blx	r3
 8008fe0:	6923      	ldr	r3, [r4, #16]
 8008fe2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	1eb5      	subs	r5, r6, #2
 8008fea:	6123      	str	r3, [r4, #16]
 8008fec:	463a      	mov	r2, r7
 8008fee:	4640      	mov	r0, r8
 8008ff0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ff4:	4798      	blx	r3
 8008ff6:	462e      	mov	r6, r5
 8008ff8:	6825      	ldr	r5, [r4, #0]
 8008ffa:	f015 0510 	ands.w	r5, r5, #16
 8008ffe:	d159      	bne.n	80090b4 <_scanf_float+0x418>
 8009000:	7035      	strb	r5, [r6, #0]
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800900c:	d11c      	bne.n	8009048 <_scanf_float+0x3ac>
 800900e:	9b01      	ldr	r3, [sp, #4]
 8009010:	454b      	cmp	r3, r9
 8009012:	eba3 0209 	sub.w	r2, r3, r9
 8009016:	d124      	bne.n	8009062 <_scanf_float+0x3c6>
 8009018:	2200      	movs	r2, #0
 800901a:	4659      	mov	r1, fp
 800901c:	4640      	mov	r0, r8
 800901e:	f000 fe9b 	bl	8009d58 <_strtod_r>
 8009022:	f8d4 c000 	ldr.w	ip, [r4]
 8009026:	9b03      	ldr	r3, [sp, #12]
 8009028:	f01c 0f02 	tst.w	ip, #2
 800902c:	4606      	mov	r6, r0
 800902e:	460f      	mov	r7, r1
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	d021      	beq.n	8009078 <_scanf_float+0x3dc>
 8009034:	9903      	ldr	r1, [sp, #12]
 8009036:	1d1a      	adds	r2, r3, #4
 8009038:	600a      	str	r2, [r1, #0]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	e9c3 6700 	strd	r6, r7, [r3]
 8009040:	68e3      	ldr	r3, [r4, #12]
 8009042:	3301      	adds	r3, #1
 8009044:	60e3      	str	r3, [r4, #12]
 8009046:	e66c      	b.n	8008d22 <_scanf_float+0x86>
 8009048:	9b04      	ldr	r3, [sp, #16]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d0e4      	beq.n	8009018 <_scanf_float+0x37c>
 800904e:	9905      	ldr	r1, [sp, #20]
 8009050:	230a      	movs	r3, #10
 8009052:	462a      	mov	r2, r5
 8009054:	4640      	mov	r0, r8
 8009056:	3101      	adds	r1, #1
 8009058:	f000 ff0a 	bl	8009e70 <_strtol_r>
 800905c:	9b04      	ldr	r3, [sp, #16]
 800905e:	9e05      	ldr	r6, [sp, #20]
 8009060:	1ac2      	subs	r2, r0, r3
 8009062:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009066:	429e      	cmp	r6, r3
 8009068:	bf28      	it	cs
 800906a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800906e:	4630      	mov	r0, r6
 8009070:	4911      	ldr	r1, [pc, #68]	; (80090b8 <_scanf_float+0x41c>)
 8009072:	f000 f839 	bl	80090e8 <siprintf>
 8009076:	e7cf      	b.n	8009018 <_scanf_float+0x37c>
 8009078:	f01c 0f04 	tst.w	ip, #4
 800907c:	f103 0e04 	add.w	lr, r3, #4
 8009080:	d003      	beq.n	800908a <_scanf_float+0x3ee>
 8009082:	9903      	ldr	r1, [sp, #12]
 8009084:	f8c1 e000 	str.w	lr, [r1]
 8009088:	e7d7      	b.n	800903a <_scanf_float+0x39e>
 800908a:	9a03      	ldr	r2, [sp, #12]
 800908c:	f8c2 e000 	str.w	lr, [r2]
 8009090:	f8d3 8000 	ldr.w	r8, [r3]
 8009094:	4602      	mov	r2, r0
 8009096:	460b      	mov	r3, r1
 8009098:	f7f7 fcb8 	bl	8000a0c <__aeabi_dcmpun>
 800909c:	b128      	cbz	r0, 80090aa <_scanf_float+0x40e>
 800909e:	4807      	ldr	r0, [pc, #28]	; (80090bc <_scanf_float+0x420>)
 80090a0:	f000 f81e 	bl	80090e0 <nanf>
 80090a4:	f8c8 0000 	str.w	r0, [r8]
 80090a8:	e7ca      	b.n	8009040 <_scanf_float+0x3a4>
 80090aa:	4630      	mov	r0, r6
 80090ac:	4639      	mov	r1, r7
 80090ae:	f7f7 fd0b 	bl	8000ac8 <__aeabi_d2f>
 80090b2:	e7f7      	b.n	80090a4 <_scanf_float+0x408>
 80090b4:	2500      	movs	r5, #0
 80090b6:	e634      	b.n	8008d22 <_scanf_float+0x86>
 80090b8:	0800c8b5 	.word	0x0800c8b5
 80090bc:	0800c86b 	.word	0x0800c86b

080090c0 <_sbrk_r>:
 80090c0:	b538      	push	{r3, r4, r5, lr}
 80090c2:	2300      	movs	r3, #0
 80090c4:	4d05      	ldr	r5, [pc, #20]	; (80090dc <_sbrk_r+0x1c>)
 80090c6:	4604      	mov	r4, r0
 80090c8:	4608      	mov	r0, r1
 80090ca:	602b      	str	r3, [r5, #0]
 80090cc:	f7f9 fa38 	bl	8002540 <_sbrk>
 80090d0:	1c43      	adds	r3, r0, #1
 80090d2:	d102      	bne.n	80090da <_sbrk_r+0x1a>
 80090d4:	682b      	ldr	r3, [r5, #0]
 80090d6:	b103      	cbz	r3, 80090da <_sbrk_r+0x1a>
 80090d8:	6023      	str	r3, [r4, #0]
 80090da:	bd38      	pop	{r3, r4, r5, pc}
 80090dc:	20000a5c 	.word	0x20000a5c

080090e0 <nanf>:
 80090e0:	4800      	ldr	r0, [pc, #0]	; (80090e4 <nanf+0x4>)
 80090e2:	4770      	bx	lr
 80090e4:	7fc00000 	.word	0x7fc00000

080090e8 <siprintf>:
 80090e8:	b40e      	push	{r1, r2, r3}
 80090ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80090ee:	b500      	push	{lr}
 80090f0:	b09c      	sub	sp, #112	; 0x70
 80090f2:	ab1d      	add	r3, sp, #116	; 0x74
 80090f4:	9002      	str	r0, [sp, #8]
 80090f6:	9006      	str	r0, [sp, #24]
 80090f8:	9107      	str	r1, [sp, #28]
 80090fa:	9104      	str	r1, [sp, #16]
 80090fc:	4808      	ldr	r0, [pc, #32]	; (8009120 <siprintf+0x38>)
 80090fe:	4909      	ldr	r1, [pc, #36]	; (8009124 <siprintf+0x3c>)
 8009100:	f853 2b04 	ldr.w	r2, [r3], #4
 8009104:	9105      	str	r1, [sp, #20]
 8009106:	6800      	ldr	r0, [r0, #0]
 8009108:	a902      	add	r1, sp, #8
 800910a:	9301      	str	r3, [sp, #4]
 800910c:	f003 f90e 	bl	800c32c <_svfiprintf_r>
 8009110:	2200      	movs	r2, #0
 8009112:	9b02      	ldr	r3, [sp, #8]
 8009114:	701a      	strb	r2, [r3, #0]
 8009116:	b01c      	add	sp, #112	; 0x70
 8009118:	f85d eb04 	ldr.w	lr, [sp], #4
 800911c:	b003      	add	sp, #12
 800911e:	4770      	bx	lr
 8009120:	20000054 	.word	0x20000054
 8009124:	ffff0208 	.word	0xffff0208

08009128 <sulp>:
 8009128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800912c:	460f      	mov	r7, r1
 800912e:	4690      	mov	r8, r2
 8009130:	f002 ff24 	bl	800bf7c <__ulp>
 8009134:	4604      	mov	r4, r0
 8009136:	460d      	mov	r5, r1
 8009138:	f1b8 0f00 	cmp.w	r8, #0
 800913c:	d011      	beq.n	8009162 <sulp+0x3a>
 800913e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009142:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009146:	2b00      	cmp	r3, #0
 8009148:	dd0b      	ble.n	8009162 <sulp+0x3a>
 800914a:	2400      	movs	r4, #0
 800914c:	051b      	lsls	r3, r3, #20
 800914e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009152:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009156:	4622      	mov	r2, r4
 8009158:	462b      	mov	r3, r5
 800915a:	f7f7 f9bd 	bl	80004d8 <__aeabi_dmul>
 800915e:	4604      	mov	r4, r0
 8009160:	460d      	mov	r5, r1
 8009162:	4620      	mov	r0, r4
 8009164:	4629      	mov	r1, r5
 8009166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800916a:	0000      	movs	r0, r0
 800916c:	0000      	movs	r0, r0
	...

08009170 <_strtod_l>:
 8009170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009174:	469b      	mov	fp, r3
 8009176:	2300      	movs	r3, #0
 8009178:	b0a1      	sub	sp, #132	; 0x84
 800917a:	931c      	str	r3, [sp, #112]	; 0x70
 800917c:	4ba1      	ldr	r3, [pc, #644]	; (8009404 <_strtod_l+0x294>)
 800917e:	4682      	mov	sl, r0
 8009180:	681f      	ldr	r7, [r3, #0]
 8009182:	460e      	mov	r6, r1
 8009184:	4638      	mov	r0, r7
 8009186:	9217      	str	r2, [sp, #92]	; 0x5c
 8009188:	f7f6 ffe2 	bl	8000150 <strlen>
 800918c:	f04f 0800 	mov.w	r8, #0
 8009190:	4604      	mov	r4, r0
 8009192:	f04f 0900 	mov.w	r9, #0
 8009196:	961b      	str	r6, [sp, #108]	; 0x6c
 8009198:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800919a:	781a      	ldrb	r2, [r3, #0]
 800919c:	2a2b      	cmp	r2, #43	; 0x2b
 800919e:	d04c      	beq.n	800923a <_strtod_l+0xca>
 80091a0:	d83a      	bhi.n	8009218 <_strtod_l+0xa8>
 80091a2:	2a0d      	cmp	r2, #13
 80091a4:	d833      	bhi.n	800920e <_strtod_l+0x9e>
 80091a6:	2a08      	cmp	r2, #8
 80091a8:	d833      	bhi.n	8009212 <_strtod_l+0xa2>
 80091aa:	2a00      	cmp	r2, #0
 80091ac:	d03d      	beq.n	800922a <_strtod_l+0xba>
 80091ae:	2300      	movs	r3, #0
 80091b0:	930c      	str	r3, [sp, #48]	; 0x30
 80091b2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80091b4:	782b      	ldrb	r3, [r5, #0]
 80091b6:	2b30      	cmp	r3, #48	; 0x30
 80091b8:	f040 80af 	bne.w	800931a <_strtod_l+0x1aa>
 80091bc:	786b      	ldrb	r3, [r5, #1]
 80091be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80091c2:	2b58      	cmp	r3, #88	; 0x58
 80091c4:	d16c      	bne.n	80092a0 <_strtod_l+0x130>
 80091c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091c8:	4650      	mov	r0, sl
 80091ca:	9301      	str	r3, [sp, #4]
 80091cc:	ab1c      	add	r3, sp, #112	; 0x70
 80091ce:	9300      	str	r3, [sp, #0]
 80091d0:	4a8d      	ldr	r2, [pc, #564]	; (8009408 <_strtod_l+0x298>)
 80091d2:	f8cd b008 	str.w	fp, [sp, #8]
 80091d6:	ab1d      	add	r3, sp, #116	; 0x74
 80091d8:	a91b      	add	r1, sp, #108	; 0x6c
 80091da:	f001 ffaf 	bl	800b13c <__gethex>
 80091de:	f010 0607 	ands.w	r6, r0, #7
 80091e2:	4604      	mov	r4, r0
 80091e4:	d005      	beq.n	80091f2 <_strtod_l+0x82>
 80091e6:	2e06      	cmp	r6, #6
 80091e8:	d129      	bne.n	800923e <_strtod_l+0xce>
 80091ea:	2300      	movs	r3, #0
 80091ec:	3501      	adds	r5, #1
 80091ee:	951b      	str	r5, [sp, #108]	; 0x6c
 80091f0:	930c      	str	r3, [sp, #48]	; 0x30
 80091f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f040 8596 	bne.w	8009d26 <_strtod_l+0xbb6>
 80091fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091fc:	b1d3      	cbz	r3, 8009234 <_strtod_l+0xc4>
 80091fe:	4642      	mov	r2, r8
 8009200:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009204:	4610      	mov	r0, r2
 8009206:	4619      	mov	r1, r3
 8009208:	b021      	add	sp, #132	; 0x84
 800920a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800920e:	2a20      	cmp	r2, #32
 8009210:	d1cd      	bne.n	80091ae <_strtod_l+0x3e>
 8009212:	3301      	adds	r3, #1
 8009214:	931b      	str	r3, [sp, #108]	; 0x6c
 8009216:	e7bf      	b.n	8009198 <_strtod_l+0x28>
 8009218:	2a2d      	cmp	r2, #45	; 0x2d
 800921a:	d1c8      	bne.n	80091ae <_strtod_l+0x3e>
 800921c:	2201      	movs	r2, #1
 800921e:	920c      	str	r2, [sp, #48]	; 0x30
 8009220:	1c5a      	adds	r2, r3, #1
 8009222:	921b      	str	r2, [sp, #108]	; 0x6c
 8009224:	785b      	ldrb	r3, [r3, #1]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1c3      	bne.n	80091b2 <_strtod_l+0x42>
 800922a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800922c:	961b      	str	r6, [sp, #108]	; 0x6c
 800922e:	2b00      	cmp	r3, #0
 8009230:	f040 8577 	bne.w	8009d22 <_strtod_l+0xbb2>
 8009234:	4642      	mov	r2, r8
 8009236:	464b      	mov	r3, r9
 8009238:	e7e4      	b.n	8009204 <_strtod_l+0x94>
 800923a:	2200      	movs	r2, #0
 800923c:	e7ef      	b.n	800921e <_strtod_l+0xae>
 800923e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009240:	b13a      	cbz	r2, 8009252 <_strtod_l+0xe2>
 8009242:	2135      	movs	r1, #53	; 0x35
 8009244:	a81e      	add	r0, sp, #120	; 0x78
 8009246:	f002 ff9d 	bl	800c184 <__copybits>
 800924a:	4650      	mov	r0, sl
 800924c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800924e:	f002 fb65 	bl	800b91c <_Bfree>
 8009252:	3e01      	subs	r6, #1
 8009254:	2e05      	cmp	r6, #5
 8009256:	d807      	bhi.n	8009268 <_strtod_l+0xf8>
 8009258:	e8df f006 	tbb	[pc, r6]
 800925c:	1d180b0e 	.word	0x1d180b0e
 8009260:	030e      	.short	0x030e
 8009262:	f04f 0900 	mov.w	r9, #0
 8009266:	46c8      	mov	r8, r9
 8009268:	0721      	lsls	r1, r4, #28
 800926a:	d5c2      	bpl.n	80091f2 <_strtod_l+0x82>
 800926c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009270:	e7bf      	b.n	80091f2 <_strtod_l+0x82>
 8009272:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8009276:	e7f7      	b.n	8009268 <_strtod_l+0xf8>
 8009278:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800927a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800927e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009282:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009286:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800928a:	e7ed      	b.n	8009268 <_strtod_l+0xf8>
 800928c:	f04f 0800 	mov.w	r8, #0
 8009290:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800940c <_strtod_l+0x29c>
 8009294:	e7e8      	b.n	8009268 <_strtod_l+0xf8>
 8009296:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800929a:	f04f 38ff 	mov.w	r8, #4294967295
 800929e:	e7e3      	b.n	8009268 <_strtod_l+0xf8>
 80092a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80092a2:	1c5a      	adds	r2, r3, #1
 80092a4:	921b      	str	r2, [sp, #108]	; 0x6c
 80092a6:	785b      	ldrb	r3, [r3, #1]
 80092a8:	2b30      	cmp	r3, #48	; 0x30
 80092aa:	d0f9      	beq.n	80092a0 <_strtod_l+0x130>
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d0a0      	beq.n	80091f2 <_strtod_l+0x82>
 80092b0:	2301      	movs	r3, #1
 80092b2:	9307      	str	r3, [sp, #28]
 80092b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80092b6:	220a      	movs	r2, #10
 80092b8:	9308      	str	r3, [sp, #32]
 80092ba:	2300      	movs	r3, #0
 80092bc:	469b      	mov	fp, r3
 80092be:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80092c2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80092c4:	7805      	ldrb	r5, [r0, #0]
 80092c6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80092ca:	b2d9      	uxtb	r1, r3
 80092cc:	2909      	cmp	r1, #9
 80092ce:	d926      	bls.n	800931e <_strtod_l+0x1ae>
 80092d0:	4622      	mov	r2, r4
 80092d2:	4639      	mov	r1, r7
 80092d4:	f003 f9b7 	bl	800c646 <strncmp>
 80092d8:	2800      	cmp	r0, #0
 80092da:	d032      	beq.n	8009342 <_strtod_l+0x1d2>
 80092dc:	2000      	movs	r0, #0
 80092de:	462b      	mov	r3, r5
 80092e0:	465c      	mov	r4, fp
 80092e2:	4602      	mov	r2, r0
 80092e4:	9004      	str	r0, [sp, #16]
 80092e6:	2b65      	cmp	r3, #101	; 0x65
 80092e8:	d001      	beq.n	80092ee <_strtod_l+0x17e>
 80092ea:	2b45      	cmp	r3, #69	; 0x45
 80092ec:	d113      	bne.n	8009316 <_strtod_l+0x1a6>
 80092ee:	b91c      	cbnz	r4, 80092f8 <_strtod_l+0x188>
 80092f0:	9b07      	ldr	r3, [sp, #28]
 80092f2:	4303      	orrs	r3, r0
 80092f4:	d099      	beq.n	800922a <_strtod_l+0xba>
 80092f6:	2400      	movs	r4, #0
 80092f8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80092fa:	1c73      	adds	r3, r6, #1
 80092fc:	931b      	str	r3, [sp, #108]	; 0x6c
 80092fe:	7873      	ldrb	r3, [r6, #1]
 8009300:	2b2b      	cmp	r3, #43	; 0x2b
 8009302:	d078      	beq.n	80093f6 <_strtod_l+0x286>
 8009304:	2b2d      	cmp	r3, #45	; 0x2d
 8009306:	d07b      	beq.n	8009400 <_strtod_l+0x290>
 8009308:	2700      	movs	r7, #0
 800930a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800930e:	2909      	cmp	r1, #9
 8009310:	f240 8082 	bls.w	8009418 <_strtod_l+0x2a8>
 8009314:	961b      	str	r6, [sp, #108]	; 0x6c
 8009316:	2500      	movs	r5, #0
 8009318:	e09e      	b.n	8009458 <_strtod_l+0x2e8>
 800931a:	2300      	movs	r3, #0
 800931c:	e7c9      	b.n	80092b2 <_strtod_l+0x142>
 800931e:	f1bb 0f08 	cmp.w	fp, #8
 8009322:	bfd5      	itete	le
 8009324:	9906      	ldrle	r1, [sp, #24]
 8009326:	9905      	ldrgt	r1, [sp, #20]
 8009328:	fb02 3301 	mlale	r3, r2, r1, r3
 800932c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009330:	f100 0001 	add.w	r0, r0, #1
 8009334:	bfd4      	ite	le
 8009336:	9306      	strle	r3, [sp, #24]
 8009338:	9305      	strgt	r3, [sp, #20]
 800933a:	f10b 0b01 	add.w	fp, fp, #1
 800933e:	901b      	str	r0, [sp, #108]	; 0x6c
 8009340:	e7bf      	b.n	80092c2 <_strtod_l+0x152>
 8009342:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009344:	191a      	adds	r2, r3, r4
 8009346:	921b      	str	r2, [sp, #108]	; 0x6c
 8009348:	5d1b      	ldrb	r3, [r3, r4]
 800934a:	f1bb 0f00 	cmp.w	fp, #0
 800934e:	d036      	beq.n	80093be <_strtod_l+0x24e>
 8009350:	465c      	mov	r4, fp
 8009352:	9004      	str	r0, [sp, #16]
 8009354:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009358:	2a09      	cmp	r2, #9
 800935a:	d912      	bls.n	8009382 <_strtod_l+0x212>
 800935c:	2201      	movs	r2, #1
 800935e:	e7c2      	b.n	80092e6 <_strtod_l+0x176>
 8009360:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009362:	3001      	adds	r0, #1
 8009364:	1c5a      	adds	r2, r3, #1
 8009366:	921b      	str	r2, [sp, #108]	; 0x6c
 8009368:	785b      	ldrb	r3, [r3, #1]
 800936a:	2b30      	cmp	r3, #48	; 0x30
 800936c:	d0f8      	beq.n	8009360 <_strtod_l+0x1f0>
 800936e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009372:	2a08      	cmp	r2, #8
 8009374:	f200 84dc 	bhi.w	8009d30 <_strtod_l+0xbc0>
 8009378:	9004      	str	r0, [sp, #16]
 800937a:	2000      	movs	r0, #0
 800937c:	4604      	mov	r4, r0
 800937e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009380:	9208      	str	r2, [sp, #32]
 8009382:	3b30      	subs	r3, #48	; 0x30
 8009384:	f100 0201 	add.w	r2, r0, #1
 8009388:	d013      	beq.n	80093b2 <_strtod_l+0x242>
 800938a:	9904      	ldr	r1, [sp, #16]
 800938c:	1905      	adds	r5, r0, r4
 800938e:	4411      	add	r1, r2
 8009390:	9104      	str	r1, [sp, #16]
 8009392:	4622      	mov	r2, r4
 8009394:	210a      	movs	r1, #10
 8009396:	42aa      	cmp	r2, r5
 8009398:	d113      	bne.n	80093c2 <_strtod_l+0x252>
 800939a:	1822      	adds	r2, r4, r0
 800939c:	2a08      	cmp	r2, #8
 800939e:	f104 0401 	add.w	r4, r4, #1
 80093a2:	4404      	add	r4, r0
 80093a4:	dc1b      	bgt.n	80093de <_strtod_l+0x26e>
 80093a6:	220a      	movs	r2, #10
 80093a8:	9906      	ldr	r1, [sp, #24]
 80093aa:	fb02 3301 	mla	r3, r2, r1, r3
 80093ae:	9306      	str	r3, [sp, #24]
 80093b0:	2200      	movs	r2, #0
 80093b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80093b4:	4610      	mov	r0, r2
 80093b6:	1c59      	adds	r1, r3, #1
 80093b8:	911b      	str	r1, [sp, #108]	; 0x6c
 80093ba:	785b      	ldrb	r3, [r3, #1]
 80093bc:	e7ca      	b.n	8009354 <_strtod_l+0x1e4>
 80093be:	4658      	mov	r0, fp
 80093c0:	e7d3      	b.n	800936a <_strtod_l+0x1fa>
 80093c2:	2a08      	cmp	r2, #8
 80093c4:	dc04      	bgt.n	80093d0 <_strtod_l+0x260>
 80093c6:	9f06      	ldr	r7, [sp, #24]
 80093c8:	434f      	muls	r7, r1
 80093ca:	9706      	str	r7, [sp, #24]
 80093cc:	3201      	adds	r2, #1
 80093ce:	e7e2      	b.n	8009396 <_strtod_l+0x226>
 80093d0:	1c57      	adds	r7, r2, #1
 80093d2:	2f10      	cmp	r7, #16
 80093d4:	bfde      	ittt	le
 80093d6:	9f05      	ldrle	r7, [sp, #20]
 80093d8:	434f      	mulle	r7, r1
 80093da:	9705      	strle	r7, [sp, #20]
 80093dc:	e7f6      	b.n	80093cc <_strtod_l+0x25c>
 80093de:	2c10      	cmp	r4, #16
 80093e0:	bfdf      	itttt	le
 80093e2:	220a      	movle	r2, #10
 80093e4:	9905      	ldrle	r1, [sp, #20]
 80093e6:	fb02 3301 	mlale	r3, r2, r1, r3
 80093ea:	9305      	strle	r3, [sp, #20]
 80093ec:	e7e0      	b.n	80093b0 <_strtod_l+0x240>
 80093ee:	2300      	movs	r3, #0
 80093f0:	2201      	movs	r2, #1
 80093f2:	9304      	str	r3, [sp, #16]
 80093f4:	e77c      	b.n	80092f0 <_strtod_l+0x180>
 80093f6:	2700      	movs	r7, #0
 80093f8:	1cb3      	adds	r3, r6, #2
 80093fa:	931b      	str	r3, [sp, #108]	; 0x6c
 80093fc:	78b3      	ldrb	r3, [r6, #2]
 80093fe:	e784      	b.n	800930a <_strtod_l+0x19a>
 8009400:	2701      	movs	r7, #1
 8009402:	e7f9      	b.n	80093f8 <_strtod_l+0x288>
 8009404:	0800cb74 	.word	0x0800cb74
 8009408:	0800c8bc 	.word	0x0800c8bc
 800940c:	7ff00000 	.word	0x7ff00000
 8009410:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009412:	1c59      	adds	r1, r3, #1
 8009414:	911b      	str	r1, [sp, #108]	; 0x6c
 8009416:	785b      	ldrb	r3, [r3, #1]
 8009418:	2b30      	cmp	r3, #48	; 0x30
 800941a:	d0f9      	beq.n	8009410 <_strtod_l+0x2a0>
 800941c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8009420:	2908      	cmp	r1, #8
 8009422:	f63f af78 	bhi.w	8009316 <_strtod_l+0x1a6>
 8009426:	f04f 0e0a 	mov.w	lr, #10
 800942a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800942e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009430:	9309      	str	r3, [sp, #36]	; 0x24
 8009432:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009434:	1c59      	adds	r1, r3, #1
 8009436:	911b      	str	r1, [sp, #108]	; 0x6c
 8009438:	785b      	ldrb	r3, [r3, #1]
 800943a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800943e:	2d09      	cmp	r5, #9
 8009440:	d935      	bls.n	80094ae <_strtod_l+0x33e>
 8009442:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009444:	1b49      	subs	r1, r1, r5
 8009446:	2908      	cmp	r1, #8
 8009448:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800944c:	dc02      	bgt.n	8009454 <_strtod_l+0x2e4>
 800944e:	4565      	cmp	r5, ip
 8009450:	bfa8      	it	ge
 8009452:	4665      	movge	r5, ip
 8009454:	b107      	cbz	r7, 8009458 <_strtod_l+0x2e8>
 8009456:	426d      	negs	r5, r5
 8009458:	2c00      	cmp	r4, #0
 800945a:	d14c      	bne.n	80094f6 <_strtod_l+0x386>
 800945c:	9907      	ldr	r1, [sp, #28]
 800945e:	4301      	orrs	r1, r0
 8009460:	f47f aec7 	bne.w	80091f2 <_strtod_l+0x82>
 8009464:	2a00      	cmp	r2, #0
 8009466:	f47f aee0 	bne.w	800922a <_strtod_l+0xba>
 800946a:	2b69      	cmp	r3, #105	; 0x69
 800946c:	d026      	beq.n	80094bc <_strtod_l+0x34c>
 800946e:	dc23      	bgt.n	80094b8 <_strtod_l+0x348>
 8009470:	2b49      	cmp	r3, #73	; 0x49
 8009472:	d023      	beq.n	80094bc <_strtod_l+0x34c>
 8009474:	2b4e      	cmp	r3, #78	; 0x4e
 8009476:	f47f aed8 	bne.w	800922a <_strtod_l+0xba>
 800947a:	499c      	ldr	r1, [pc, #624]	; (80096ec <_strtod_l+0x57c>)
 800947c:	a81b      	add	r0, sp, #108	; 0x6c
 800947e:	f002 f8ab 	bl	800b5d8 <__match>
 8009482:	2800      	cmp	r0, #0
 8009484:	f43f aed1 	beq.w	800922a <_strtod_l+0xba>
 8009488:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	2b28      	cmp	r3, #40	; 0x28
 800948e:	d12c      	bne.n	80094ea <_strtod_l+0x37a>
 8009490:	4997      	ldr	r1, [pc, #604]	; (80096f0 <_strtod_l+0x580>)
 8009492:	aa1e      	add	r2, sp, #120	; 0x78
 8009494:	a81b      	add	r0, sp, #108	; 0x6c
 8009496:	f002 f8b3 	bl	800b600 <__hexnan>
 800949a:	2805      	cmp	r0, #5
 800949c:	d125      	bne.n	80094ea <_strtod_l+0x37a>
 800949e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80094a0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80094a4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80094a8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80094ac:	e6a1      	b.n	80091f2 <_strtod_l+0x82>
 80094ae:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80094b2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80094b6:	e7bc      	b.n	8009432 <_strtod_l+0x2c2>
 80094b8:	2b6e      	cmp	r3, #110	; 0x6e
 80094ba:	e7dc      	b.n	8009476 <_strtod_l+0x306>
 80094bc:	498d      	ldr	r1, [pc, #564]	; (80096f4 <_strtod_l+0x584>)
 80094be:	a81b      	add	r0, sp, #108	; 0x6c
 80094c0:	f002 f88a 	bl	800b5d8 <__match>
 80094c4:	2800      	cmp	r0, #0
 80094c6:	f43f aeb0 	beq.w	800922a <_strtod_l+0xba>
 80094ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094cc:	498a      	ldr	r1, [pc, #552]	; (80096f8 <_strtod_l+0x588>)
 80094ce:	3b01      	subs	r3, #1
 80094d0:	a81b      	add	r0, sp, #108	; 0x6c
 80094d2:	931b      	str	r3, [sp, #108]	; 0x6c
 80094d4:	f002 f880 	bl	800b5d8 <__match>
 80094d8:	b910      	cbnz	r0, 80094e0 <_strtod_l+0x370>
 80094da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094dc:	3301      	adds	r3, #1
 80094de:	931b      	str	r3, [sp, #108]	; 0x6c
 80094e0:	f04f 0800 	mov.w	r8, #0
 80094e4:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8009708 <_strtod_l+0x598>
 80094e8:	e683      	b.n	80091f2 <_strtod_l+0x82>
 80094ea:	4884      	ldr	r0, [pc, #528]	; (80096fc <_strtod_l+0x58c>)
 80094ec:	f003 f81e 	bl	800c52c <nan>
 80094f0:	4680      	mov	r8, r0
 80094f2:	4689      	mov	r9, r1
 80094f4:	e67d      	b.n	80091f2 <_strtod_l+0x82>
 80094f6:	9b04      	ldr	r3, [sp, #16]
 80094f8:	f1bb 0f00 	cmp.w	fp, #0
 80094fc:	bf08      	it	eq
 80094fe:	46a3      	moveq	fp, r4
 8009500:	1aeb      	subs	r3, r5, r3
 8009502:	2c10      	cmp	r4, #16
 8009504:	9806      	ldr	r0, [sp, #24]
 8009506:	4626      	mov	r6, r4
 8009508:	9307      	str	r3, [sp, #28]
 800950a:	bfa8      	it	ge
 800950c:	2610      	movge	r6, #16
 800950e:	f7f6 ff69 	bl	80003e4 <__aeabi_ui2d>
 8009512:	2c09      	cmp	r4, #9
 8009514:	4680      	mov	r8, r0
 8009516:	4689      	mov	r9, r1
 8009518:	dd13      	ble.n	8009542 <_strtod_l+0x3d2>
 800951a:	4b79      	ldr	r3, [pc, #484]	; (8009700 <_strtod_l+0x590>)
 800951c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009520:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009524:	f7f6 ffd8 	bl	80004d8 <__aeabi_dmul>
 8009528:	4680      	mov	r8, r0
 800952a:	9805      	ldr	r0, [sp, #20]
 800952c:	4689      	mov	r9, r1
 800952e:	f7f6 ff59 	bl	80003e4 <__aeabi_ui2d>
 8009532:	4602      	mov	r2, r0
 8009534:	460b      	mov	r3, r1
 8009536:	4640      	mov	r0, r8
 8009538:	4649      	mov	r1, r9
 800953a:	f7f6 fe17 	bl	800016c <__adddf3>
 800953e:	4680      	mov	r8, r0
 8009540:	4689      	mov	r9, r1
 8009542:	2c0f      	cmp	r4, #15
 8009544:	dc36      	bgt.n	80095b4 <_strtod_l+0x444>
 8009546:	9b07      	ldr	r3, [sp, #28]
 8009548:	2b00      	cmp	r3, #0
 800954a:	f43f ae52 	beq.w	80091f2 <_strtod_l+0x82>
 800954e:	dd22      	ble.n	8009596 <_strtod_l+0x426>
 8009550:	2b16      	cmp	r3, #22
 8009552:	dc09      	bgt.n	8009568 <_strtod_l+0x3f8>
 8009554:	4c6a      	ldr	r4, [pc, #424]	; (8009700 <_strtod_l+0x590>)
 8009556:	4642      	mov	r2, r8
 8009558:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800955c:	464b      	mov	r3, r9
 800955e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009562:	f7f6 ffb9 	bl	80004d8 <__aeabi_dmul>
 8009566:	e7c3      	b.n	80094f0 <_strtod_l+0x380>
 8009568:	9a07      	ldr	r2, [sp, #28]
 800956a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800956e:	4293      	cmp	r3, r2
 8009570:	db20      	blt.n	80095b4 <_strtod_l+0x444>
 8009572:	4d63      	ldr	r5, [pc, #396]	; (8009700 <_strtod_l+0x590>)
 8009574:	f1c4 040f 	rsb	r4, r4, #15
 8009578:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800957c:	4642      	mov	r2, r8
 800957e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009582:	464b      	mov	r3, r9
 8009584:	f7f6 ffa8 	bl	80004d8 <__aeabi_dmul>
 8009588:	9b07      	ldr	r3, [sp, #28]
 800958a:	1b1c      	subs	r4, r3, r4
 800958c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009590:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009594:	e7e5      	b.n	8009562 <_strtod_l+0x3f2>
 8009596:	9b07      	ldr	r3, [sp, #28]
 8009598:	3316      	adds	r3, #22
 800959a:	db0b      	blt.n	80095b4 <_strtod_l+0x444>
 800959c:	9b04      	ldr	r3, [sp, #16]
 800959e:	4a58      	ldr	r2, [pc, #352]	; (8009700 <_strtod_l+0x590>)
 80095a0:	1b5d      	subs	r5, r3, r5
 80095a2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80095a6:	4640      	mov	r0, r8
 80095a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80095ac:	4649      	mov	r1, r9
 80095ae:	f7f7 f8bd 	bl	800072c <__aeabi_ddiv>
 80095b2:	e79d      	b.n	80094f0 <_strtod_l+0x380>
 80095b4:	9b07      	ldr	r3, [sp, #28]
 80095b6:	1ba6      	subs	r6, r4, r6
 80095b8:	441e      	add	r6, r3
 80095ba:	2e00      	cmp	r6, #0
 80095bc:	dd71      	ble.n	80096a2 <_strtod_l+0x532>
 80095be:	f016 030f 	ands.w	r3, r6, #15
 80095c2:	d00a      	beq.n	80095da <_strtod_l+0x46a>
 80095c4:	494e      	ldr	r1, [pc, #312]	; (8009700 <_strtod_l+0x590>)
 80095c6:	4642      	mov	r2, r8
 80095c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80095cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095d0:	464b      	mov	r3, r9
 80095d2:	f7f6 ff81 	bl	80004d8 <__aeabi_dmul>
 80095d6:	4680      	mov	r8, r0
 80095d8:	4689      	mov	r9, r1
 80095da:	f036 060f 	bics.w	r6, r6, #15
 80095de:	d050      	beq.n	8009682 <_strtod_l+0x512>
 80095e0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80095e4:	dd27      	ble.n	8009636 <_strtod_l+0x4c6>
 80095e6:	f04f 0b00 	mov.w	fp, #0
 80095ea:	f8cd b010 	str.w	fp, [sp, #16]
 80095ee:	f8cd b020 	str.w	fp, [sp, #32]
 80095f2:	f8cd b018 	str.w	fp, [sp, #24]
 80095f6:	2322      	movs	r3, #34	; 0x22
 80095f8:	f04f 0800 	mov.w	r8, #0
 80095fc:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009708 <_strtod_l+0x598>
 8009600:	f8ca 3000 	str.w	r3, [sl]
 8009604:	9b08      	ldr	r3, [sp, #32]
 8009606:	2b00      	cmp	r3, #0
 8009608:	f43f adf3 	beq.w	80091f2 <_strtod_l+0x82>
 800960c:	4650      	mov	r0, sl
 800960e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009610:	f002 f984 	bl	800b91c <_Bfree>
 8009614:	4650      	mov	r0, sl
 8009616:	9906      	ldr	r1, [sp, #24]
 8009618:	f002 f980 	bl	800b91c <_Bfree>
 800961c:	4650      	mov	r0, sl
 800961e:	9904      	ldr	r1, [sp, #16]
 8009620:	f002 f97c 	bl	800b91c <_Bfree>
 8009624:	4650      	mov	r0, sl
 8009626:	9908      	ldr	r1, [sp, #32]
 8009628:	f002 f978 	bl	800b91c <_Bfree>
 800962c:	4659      	mov	r1, fp
 800962e:	4650      	mov	r0, sl
 8009630:	f002 f974 	bl	800b91c <_Bfree>
 8009634:	e5dd      	b.n	80091f2 <_strtod_l+0x82>
 8009636:	2300      	movs	r3, #0
 8009638:	4640      	mov	r0, r8
 800963a:	4649      	mov	r1, r9
 800963c:	461f      	mov	r7, r3
 800963e:	1136      	asrs	r6, r6, #4
 8009640:	2e01      	cmp	r6, #1
 8009642:	dc21      	bgt.n	8009688 <_strtod_l+0x518>
 8009644:	b10b      	cbz	r3, 800964a <_strtod_l+0x4da>
 8009646:	4680      	mov	r8, r0
 8009648:	4689      	mov	r9, r1
 800964a:	4b2e      	ldr	r3, [pc, #184]	; (8009704 <_strtod_l+0x594>)
 800964c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009650:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009654:	4642      	mov	r2, r8
 8009656:	e9d7 0100 	ldrd	r0, r1, [r7]
 800965a:	464b      	mov	r3, r9
 800965c:	f7f6 ff3c 	bl	80004d8 <__aeabi_dmul>
 8009660:	4b29      	ldr	r3, [pc, #164]	; (8009708 <_strtod_l+0x598>)
 8009662:	460a      	mov	r2, r1
 8009664:	400b      	ands	r3, r1
 8009666:	4929      	ldr	r1, [pc, #164]	; (800970c <_strtod_l+0x59c>)
 8009668:	4680      	mov	r8, r0
 800966a:	428b      	cmp	r3, r1
 800966c:	d8bb      	bhi.n	80095e6 <_strtod_l+0x476>
 800966e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009672:	428b      	cmp	r3, r1
 8009674:	bf86      	itte	hi
 8009676:	f04f 38ff 	movhi.w	r8, #4294967295
 800967a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009710 <_strtod_l+0x5a0>
 800967e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009682:	2300      	movs	r3, #0
 8009684:	9305      	str	r3, [sp, #20]
 8009686:	e07e      	b.n	8009786 <_strtod_l+0x616>
 8009688:	07f2      	lsls	r2, r6, #31
 800968a:	d507      	bpl.n	800969c <_strtod_l+0x52c>
 800968c:	4b1d      	ldr	r3, [pc, #116]	; (8009704 <_strtod_l+0x594>)
 800968e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009696:	f7f6 ff1f 	bl	80004d8 <__aeabi_dmul>
 800969a:	2301      	movs	r3, #1
 800969c:	3701      	adds	r7, #1
 800969e:	1076      	asrs	r6, r6, #1
 80096a0:	e7ce      	b.n	8009640 <_strtod_l+0x4d0>
 80096a2:	d0ee      	beq.n	8009682 <_strtod_l+0x512>
 80096a4:	4276      	negs	r6, r6
 80096a6:	f016 020f 	ands.w	r2, r6, #15
 80096aa:	d00a      	beq.n	80096c2 <_strtod_l+0x552>
 80096ac:	4b14      	ldr	r3, [pc, #80]	; (8009700 <_strtod_l+0x590>)
 80096ae:	4640      	mov	r0, r8
 80096b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096b4:	4649      	mov	r1, r9
 80096b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ba:	f7f7 f837 	bl	800072c <__aeabi_ddiv>
 80096be:	4680      	mov	r8, r0
 80096c0:	4689      	mov	r9, r1
 80096c2:	1136      	asrs	r6, r6, #4
 80096c4:	d0dd      	beq.n	8009682 <_strtod_l+0x512>
 80096c6:	2e1f      	cmp	r6, #31
 80096c8:	dd24      	ble.n	8009714 <_strtod_l+0x5a4>
 80096ca:	f04f 0b00 	mov.w	fp, #0
 80096ce:	f8cd b010 	str.w	fp, [sp, #16]
 80096d2:	f8cd b020 	str.w	fp, [sp, #32]
 80096d6:	f8cd b018 	str.w	fp, [sp, #24]
 80096da:	2322      	movs	r3, #34	; 0x22
 80096dc:	f04f 0800 	mov.w	r8, #0
 80096e0:	f04f 0900 	mov.w	r9, #0
 80096e4:	f8ca 3000 	str.w	r3, [sl]
 80096e8:	e78c      	b.n	8009604 <_strtod_l+0x494>
 80096ea:	bf00      	nop
 80096ec:	0800c88e 	.word	0x0800c88e
 80096f0:	0800c8d0 	.word	0x0800c8d0
 80096f4:	0800c886 	.word	0x0800c886
 80096f8:	0800ca14 	.word	0x0800ca14
 80096fc:	0800c86b 	.word	0x0800c86b
 8009700:	0800cc10 	.word	0x0800cc10
 8009704:	0800cbe8 	.word	0x0800cbe8
 8009708:	7ff00000 	.word	0x7ff00000
 800970c:	7ca00000 	.word	0x7ca00000
 8009710:	7fefffff 	.word	0x7fefffff
 8009714:	f016 0310 	ands.w	r3, r6, #16
 8009718:	bf18      	it	ne
 800971a:	236a      	movne	r3, #106	; 0x6a
 800971c:	4640      	mov	r0, r8
 800971e:	9305      	str	r3, [sp, #20]
 8009720:	4649      	mov	r1, r9
 8009722:	2300      	movs	r3, #0
 8009724:	4fb2      	ldr	r7, [pc, #712]	; (80099f0 <_strtod_l+0x880>)
 8009726:	07f2      	lsls	r2, r6, #31
 8009728:	d504      	bpl.n	8009734 <_strtod_l+0x5c4>
 800972a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800972e:	f7f6 fed3 	bl	80004d8 <__aeabi_dmul>
 8009732:	2301      	movs	r3, #1
 8009734:	1076      	asrs	r6, r6, #1
 8009736:	f107 0708 	add.w	r7, r7, #8
 800973a:	d1f4      	bne.n	8009726 <_strtod_l+0x5b6>
 800973c:	b10b      	cbz	r3, 8009742 <_strtod_l+0x5d2>
 800973e:	4680      	mov	r8, r0
 8009740:	4689      	mov	r9, r1
 8009742:	9b05      	ldr	r3, [sp, #20]
 8009744:	b1bb      	cbz	r3, 8009776 <_strtod_l+0x606>
 8009746:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800974a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800974e:	2b00      	cmp	r3, #0
 8009750:	4649      	mov	r1, r9
 8009752:	dd10      	ble.n	8009776 <_strtod_l+0x606>
 8009754:	2b1f      	cmp	r3, #31
 8009756:	f340 812b 	ble.w	80099b0 <_strtod_l+0x840>
 800975a:	2b34      	cmp	r3, #52	; 0x34
 800975c:	bfd8      	it	le
 800975e:	f04f 32ff 	movle.w	r2, #4294967295
 8009762:	f04f 0800 	mov.w	r8, #0
 8009766:	bfcf      	iteee	gt
 8009768:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800976c:	3b20      	suble	r3, #32
 800976e:	fa02 f303 	lslle.w	r3, r2, r3
 8009772:	ea03 0901 	andle.w	r9, r3, r1
 8009776:	2200      	movs	r2, #0
 8009778:	2300      	movs	r3, #0
 800977a:	4640      	mov	r0, r8
 800977c:	4649      	mov	r1, r9
 800977e:	f7f7 f913 	bl	80009a8 <__aeabi_dcmpeq>
 8009782:	2800      	cmp	r0, #0
 8009784:	d1a1      	bne.n	80096ca <_strtod_l+0x55a>
 8009786:	9b06      	ldr	r3, [sp, #24]
 8009788:	465a      	mov	r2, fp
 800978a:	9300      	str	r3, [sp, #0]
 800978c:	4650      	mov	r0, sl
 800978e:	4623      	mov	r3, r4
 8009790:	9908      	ldr	r1, [sp, #32]
 8009792:	f002 f92f 	bl	800b9f4 <__s2b>
 8009796:	9008      	str	r0, [sp, #32]
 8009798:	2800      	cmp	r0, #0
 800979a:	f43f af24 	beq.w	80095e6 <_strtod_l+0x476>
 800979e:	9b04      	ldr	r3, [sp, #16]
 80097a0:	f04f 0b00 	mov.w	fp, #0
 80097a4:	1b5d      	subs	r5, r3, r5
 80097a6:	9b07      	ldr	r3, [sp, #28]
 80097a8:	f8cd b010 	str.w	fp, [sp, #16]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	bfb4      	ite	lt
 80097b0:	462b      	movlt	r3, r5
 80097b2:	2300      	movge	r3, #0
 80097b4:	930e      	str	r3, [sp, #56]	; 0x38
 80097b6:	9b07      	ldr	r3, [sp, #28]
 80097b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80097bc:	9316      	str	r3, [sp, #88]	; 0x58
 80097be:	9b08      	ldr	r3, [sp, #32]
 80097c0:	4650      	mov	r0, sl
 80097c2:	6859      	ldr	r1, [r3, #4]
 80097c4:	f002 f86a 	bl	800b89c <_Balloc>
 80097c8:	9006      	str	r0, [sp, #24]
 80097ca:	2800      	cmp	r0, #0
 80097cc:	f43f af13 	beq.w	80095f6 <_strtod_l+0x486>
 80097d0:	9b08      	ldr	r3, [sp, #32]
 80097d2:	300c      	adds	r0, #12
 80097d4:	691a      	ldr	r2, [r3, #16]
 80097d6:	f103 010c 	add.w	r1, r3, #12
 80097da:	3202      	adds	r2, #2
 80097dc:	0092      	lsls	r2, r2, #2
 80097de:	f7fe fbe9 	bl	8007fb4 <memcpy>
 80097e2:	ab1e      	add	r3, sp, #120	; 0x78
 80097e4:	9301      	str	r3, [sp, #4]
 80097e6:	ab1d      	add	r3, sp, #116	; 0x74
 80097e8:	9300      	str	r3, [sp, #0]
 80097ea:	4642      	mov	r2, r8
 80097ec:	464b      	mov	r3, r9
 80097ee:	4650      	mov	r0, sl
 80097f0:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80097f4:	f002 fc3c 	bl	800c070 <__d2b>
 80097f8:	901c      	str	r0, [sp, #112]	; 0x70
 80097fa:	2800      	cmp	r0, #0
 80097fc:	f43f aefb 	beq.w	80095f6 <_strtod_l+0x486>
 8009800:	2101      	movs	r1, #1
 8009802:	4650      	mov	r0, sl
 8009804:	f002 f98e 	bl	800bb24 <__i2b>
 8009808:	4603      	mov	r3, r0
 800980a:	9004      	str	r0, [sp, #16]
 800980c:	2800      	cmp	r0, #0
 800980e:	f43f aef2 	beq.w	80095f6 <_strtod_l+0x486>
 8009812:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8009814:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009816:	2d00      	cmp	r5, #0
 8009818:	bfab      	itete	ge
 800981a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800981c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800981e:	18ee      	addge	r6, r5, r3
 8009820:	1b5c      	sublt	r4, r3, r5
 8009822:	9b05      	ldr	r3, [sp, #20]
 8009824:	bfa8      	it	ge
 8009826:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8009828:	eba5 0503 	sub.w	r5, r5, r3
 800982c:	4415      	add	r5, r2
 800982e:	4b71      	ldr	r3, [pc, #452]	; (80099f4 <_strtod_l+0x884>)
 8009830:	f105 35ff 	add.w	r5, r5, #4294967295
 8009834:	bfb8      	it	lt
 8009836:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8009838:	429d      	cmp	r5, r3
 800983a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800983e:	f280 80c9 	bge.w	80099d4 <_strtod_l+0x864>
 8009842:	1b5b      	subs	r3, r3, r5
 8009844:	2b1f      	cmp	r3, #31
 8009846:	f04f 0701 	mov.w	r7, #1
 800984a:	eba2 0203 	sub.w	r2, r2, r3
 800984e:	f300 80b6 	bgt.w	80099be <_strtod_l+0x84e>
 8009852:	2500      	movs	r5, #0
 8009854:	fa07 f303 	lsl.w	r3, r7, r3
 8009858:	930f      	str	r3, [sp, #60]	; 0x3c
 800985a:	18b7      	adds	r7, r6, r2
 800985c:	9b05      	ldr	r3, [sp, #20]
 800985e:	42be      	cmp	r6, r7
 8009860:	4414      	add	r4, r2
 8009862:	441c      	add	r4, r3
 8009864:	4633      	mov	r3, r6
 8009866:	bfa8      	it	ge
 8009868:	463b      	movge	r3, r7
 800986a:	42a3      	cmp	r3, r4
 800986c:	bfa8      	it	ge
 800986e:	4623      	movge	r3, r4
 8009870:	2b00      	cmp	r3, #0
 8009872:	bfc2      	ittt	gt
 8009874:	1aff      	subgt	r7, r7, r3
 8009876:	1ae4      	subgt	r4, r4, r3
 8009878:	1af6      	subgt	r6, r6, r3
 800987a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800987c:	2b00      	cmp	r3, #0
 800987e:	dd17      	ble.n	80098b0 <_strtod_l+0x740>
 8009880:	461a      	mov	r2, r3
 8009882:	4650      	mov	r0, sl
 8009884:	9904      	ldr	r1, [sp, #16]
 8009886:	f002 fa07 	bl	800bc98 <__pow5mult>
 800988a:	9004      	str	r0, [sp, #16]
 800988c:	2800      	cmp	r0, #0
 800988e:	f43f aeb2 	beq.w	80095f6 <_strtod_l+0x486>
 8009892:	4601      	mov	r1, r0
 8009894:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009896:	4650      	mov	r0, sl
 8009898:	f002 f95a 	bl	800bb50 <__multiply>
 800989c:	9009      	str	r0, [sp, #36]	; 0x24
 800989e:	2800      	cmp	r0, #0
 80098a0:	f43f aea9 	beq.w	80095f6 <_strtod_l+0x486>
 80098a4:	4650      	mov	r0, sl
 80098a6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80098a8:	f002 f838 	bl	800b91c <_Bfree>
 80098ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098ae:	931c      	str	r3, [sp, #112]	; 0x70
 80098b0:	2f00      	cmp	r7, #0
 80098b2:	f300 8093 	bgt.w	80099dc <_strtod_l+0x86c>
 80098b6:	9b07      	ldr	r3, [sp, #28]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	dd08      	ble.n	80098ce <_strtod_l+0x75e>
 80098bc:	4650      	mov	r0, sl
 80098be:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80098c0:	9906      	ldr	r1, [sp, #24]
 80098c2:	f002 f9e9 	bl	800bc98 <__pow5mult>
 80098c6:	9006      	str	r0, [sp, #24]
 80098c8:	2800      	cmp	r0, #0
 80098ca:	f43f ae94 	beq.w	80095f6 <_strtod_l+0x486>
 80098ce:	2c00      	cmp	r4, #0
 80098d0:	dd08      	ble.n	80098e4 <_strtod_l+0x774>
 80098d2:	4622      	mov	r2, r4
 80098d4:	4650      	mov	r0, sl
 80098d6:	9906      	ldr	r1, [sp, #24]
 80098d8:	f002 fa38 	bl	800bd4c <__lshift>
 80098dc:	9006      	str	r0, [sp, #24]
 80098de:	2800      	cmp	r0, #0
 80098e0:	f43f ae89 	beq.w	80095f6 <_strtod_l+0x486>
 80098e4:	2e00      	cmp	r6, #0
 80098e6:	dd08      	ble.n	80098fa <_strtod_l+0x78a>
 80098e8:	4632      	mov	r2, r6
 80098ea:	4650      	mov	r0, sl
 80098ec:	9904      	ldr	r1, [sp, #16]
 80098ee:	f002 fa2d 	bl	800bd4c <__lshift>
 80098f2:	9004      	str	r0, [sp, #16]
 80098f4:	2800      	cmp	r0, #0
 80098f6:	f43f ae7e 	beq.w	80095f6 <_strtod_l+0x486>
 80098fa:	4650      	mov	r0, sl
 80098fc:	9a06      	ldr	r2, [sp, #24]
 80098fe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009900:	f002 faac 	bl	800be5c <__mdiff>
 8009904:	4683      	mov	fp, r0
 8009906:	2800      	cmp	r0, #0
 8009908:	f43f ae75 	beq.w	80095f6 <_strtod_l+0x486>
 800990c:	2400      	movs	r4, #0
 800990e:	68c3      	ldr	r3, [r0, #12]
 8009910:	9904      	ldr	r1, [sp, #16]
 8009912:	60c4      	str	r4, [r0, #12]
 8009914:	930d      	str	r3, [sp, #52]	; 0x34
 8009916:	f002 fa85 	bl	800be24 <__mcmp>
 800991a:	42a0      	cmp	r0, r4
 800991c:	da70      	bge.n	8009a00 <_strtod_l+0x890>
 800991e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009920:	ea53 0308 	orrs.w	r3, r3, r8
 8009924:	f040 8096 	bne.w	8009a54 <_strtod_l+0x8e4>
 8009928:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800992c:	2b00      	cmp	r3, #0
 800992e:	f040 8091 	bne.w	8009a54 <_strtod_l+0x8e4>
 8009932:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009936:	0d1b      	lsrs	r3, r3, #20
 8009938:	051b      	lsls	r3, r3, #20
 800993a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800993e:	f240 8089 	bls.w	8009a54 <_strtod_l+0x8e4>
 8009942:	f8db 3014 	ldr.w	r3, [fp, #20]
 8009946:	b923      	cbnz	r3, 8009952 <_strtod_l+0x7e2>
 8009948:	f8db 3010 	ldr.w	r3, [fp, #16]
 800994c:	2b01      	cmp	r3, #1
 800994e:	f340 8081 	ble.w	8009a54 <_strtod_l+0x8e4>
 8009952:	4659      	mov	r1, fp
 8009954:	2201      	movs	r2, #1
 8009956:	4650      	mov	r0, sl
 8009958:	f002 f9f8 	bl	800bd4c <__lshift>
 800995c:	9904      	ldr	r1, [sp, #16]
 800995e:	4683      	mov	fp, r0
 8009960:	f002 fa60 	bl	800be24 <__mcmp>
 8009964:	2800      	cmp	r0, #0
 8009966:	dd75      	ble.n	8009a54 <_strtod_l+0x8e4>
 8009968:	9905      	ldr	r1, [sp, #20]
 800996a:	464b      	mov	r3, r9
 800996c:	4a22      	ldr	r2, [pc, #136]	; (80099f8 <_strtod_l+0x888>)
 800996e:	2900      	cmp	r1, #0
 8009970:	f000 8091 	beq.w	8009a96 <_strtod_l+0x926>
 8009974:	ea02 0109 	and.w	r1, r2, r9
 8009978:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800997c:	f300 808b 	bgt.w	8009a96 <_strtod_l+0x926>
 8009980:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009984:	f77f aea9 	ble.w	80096da <_strtod_l+0x56a>
 8009988:	2300      	movs	r3, #0
 800998a:	4a1c      	ldr	r2, [pc, #112]	; (80099fc <_strtod_l+0x88c>)
 800998c:	4640      	mov	r0, r8
 800998e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009992:	4649      	mov	r1, r9
 8009994:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009998:	f7f6 fd9e 	bl	80004d8 <__aeabi_dmul>
 800999c:	460b      	mov	r3, r1
 800999e:	4303      	orrs	r3, r0
 80099a0:	bf08      	it	eq
 80099a2:	2322      	moveq	r3, #34	; 0x22
 80099a4:	4680      	mov	r8, r0
 80099a6:	4689      	mov	r9, r1
 80099a8:	bf08      	it	eq
 80099aa:	f8ca 3000 	streq.w	r3, [sl]
 80099ae:	e62d      	b.n	800960c <_strtod_l+0x49c>
 80099b0:	f04f 32ff 	mov.w	r2, #4294967295
 80099b4:	fa02 f303 	lsl.w	r3, r2, r3
 80099b8:	ea03 0808 	and.w	r8, r3, r8
 80099bc:	e6db      	b.n	8009776 <_strtod_l+0x606>
 80099be:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80099c2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80099c6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80099ca:	35e2      	adds	r5, #226	; 0xe2
 80099cc:	fa07 f505 	lsl.w	r5, r7, r5
 80099d0:	970f      	str	r7, [sp, #60]	; 0x3c
 80099d2:	e742      	b.n	800985a <_strtod_l+0x6ea>
 80099d4:	2301      	movs	r3, #1
 80099d6:	2500      	movs	r5, #0
 80099d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80099da:	e73e      	b.n	800985a <_strtod_l+0x6ea>
 80099dc:	463a      	mov	r2, r7
 80099de:	4650      	mov	r0, sl
 80099e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80099e2:	f002 f9b3 	bl	800bd4c <__lshift>
 80099e6:	901c      	str	r0, [sp, #112]	; 0x70
 80099e8:	2800      	cmp	r0, #0
 80099ea:	f47f af64 	bne.w	80098b6 <_strtod_l+0x746>
 80099ee:	e602      	b.n	80095f6 <_strtod_l+0x486>
 80099f0:	0800c8e8 	.word	0x0800c8e8
 80099f4:	fffffc02 	.word	0xfffffc02
 80099f8:	7ff00000 	.word	0x7ff00000
 80099fc:	39500000 	.word	0x39500000
 8009a00:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009a04:	d166      	bne.n	8009ad4 <_strtod_l+0x964>
 8009a06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a0c:	b35a      	cbz	r2, 8009a66 <_strtod_l+0x8f6>
 8009a0e:	4a9c      	ldr	r2, [pc, #624]	; (8009c80 <_strtod_l+0xb10>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d12c      	bne.n	8009a6e <_strtod_l+0x8fe>
 8009a14:	9b05      	ldr	r3, [sp, #20]
 8009a16:	4640      	mov	r0, r8
 8009a18:	b303      	cbz	r3, 8009a5c <_strtod_l+0x8ec>
 8009a1a:	464b      	mov	r3, r9
 8009a1c:	4a99      	ldr	r2, [pc, #612]	; (8009c84 <_strtod_l+0xb14>)
 8009a1e:	f04f 31ff 	mov.w	r1, #4294967295
 8009a22:	401a      	ands	r2, r3
 8009a24:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009a28:	d81b      	bhi.n	8009a62 <_strtod_l+0x8f2>
 8009a2a:	0d12      	lsrs	r2, r2, #20
 8009a2c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009a30:	fa01 f303 	lsl.w	r3, r1, r3
 8009a34:	4298      	cmp	r0, r3
 8009a36:	d11a      	bne.n	8009a6e <_strtod_l+0x8fe>
 8009a38:	4b93      	ldr	r3, [pc, #588]	; (8009c88 <_strtod_l+0xb18>)
 8009a3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d102      	bne.n	8009a46 <_strtod_l+0x8d6>
 8009a40:	3001      	adds	r0, #1
 8009a42:	f43f add8 	beq.w	80095f6 <_strtod_l+0x486>
 8009a46:	f04f 0800 	mov.w	r8, #0
 8009a4a:	4b8e      	ldr	r3, [pc, #568]	; (8009c84 <_strtod_l+0xb14>)
 8009a4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a4e:	401a      	ands	r2, r3
 8009a50:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8009a54:	9b05      	ldr	r3, [sp, #20]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d196      	bne.n	8009988 <_strtod_l+0x818>
 8009a5a:	e5d7      	b.n	800960c <_strtod_l+0x49c>
 8009a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8009a60:	e7e8      	b.n	8009a34 <_strtod_l+0x8c4>
 8009a62:	460b      	mov	r3, r1
 8009a64:	e7e6      	b.n	8009a34 <_strtod_l+0x8c4>
 8009a66:	ea53 0308 	orrs.w	r3, r3, r8
 8009a6a:	f43f af7d 	beq.w	8009968 <_strtod_l+0x7f8>
 8009a6e:	b1e5      	cbz	r5, 8009aaa <_strtod_l+0x93a>
 8009a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a72:	421d      	tst	r5, r3
 8009a74:	d0ee      	beq.n	8009a54 <_strtod_l+0x8e4>
 8009a76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a78:	4640      	mov	r0, r8
 8009a7a:	4649      	mov	r1, r9
 8009a7c:	9a05      	ldr	r2, [sp, #20]
 8009a7e:	b1c3      	cbz	r3, 8009ab2 <_strtod_l+0x942>
 8009a80:	f7ff fb52 	bl	8009128 <sulp>
 8009a84:	4602      	mov	r2, r0
 8009a86:	460b      	mov	r3, r1
 8009a88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009a8c:	f7f6 fb6e 	bl	800016c <__adddf3>
 8009a90:	4680      	mov	r8, r0
 8009a92:	4689      	mov	r9, r1
 8009a94:	e7de      	b.n	8009a54 <_strtod_l+0x8e4>
 8009a96:	4013      	ands	r3, r2
 8009a98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009a9c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009aa0:	f04f 38ff 	mov.w	r8, #4294967295
 8009aa4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009aa8:	e7d4      	b.n	8009a54 <_strtod_l+0x8e4>
 8009aaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009aac:	ea13 0f08 	tst.w	r3, r8
 8009ab0:	e7e0      	b.n	8009a74 <_strtod_l+0x904>
 8009ab2:	f7ff fb39 	bl	8009128 <sulp>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	460b      	mov	r3, r1
 8009aba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009abe:	f7f6 fb53 	bl	8000168 <__aeabi_dsub>
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	4680      	mov	r8, r0
 8009ac8:	4689      	mov	r9, r1
 8009aca:	f7f6 ff6d 	bl	80009a8 <__aeabi_dcmpeq>
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	d0c0      	beq.n	8009a54 <_strtod_l+0x8e4>
 8009ad2:	e602      	b.n	80096da <_strtod_l+0x56a>
 8009ad4:	4658      	mov	r0, fp
 8009ad6:	9904      	ldr	r1, [sp, #16]
 8009ad8:	f002 fb26 	bl	800c128 <__ratio>
 8009adc:	2200      	movs	r2, #0
 8009ade:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009ae2:	4606      	mov	r6, r0
 8009ae4:	460f      	mov	r7, r1
 8009ae6:	f7f6 ff73 	bl	80009d0 <__aeabi_dcmple>
 8009aea:	2800      	cmp	r0, #0
 8009aec:	d075      	beq.n	8009bda <_strtod_l+0xa6a>
 8009aee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d047      	beq.n	8009b84 <_strtod_l+0xa14>
 8009af4:	2600      	movs	r6, #0
 8009af6:	4f65      	ldr	r7, [pc, #404]	; (8009c8c <_strtod_l+0xb1c>)
 8009af8:	4d64      	ldr	r5, [pc, #400]	; (8009c8c <_strtod_l+0xb1c>)
 8009afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009afc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b00:	0d1b      	lsrs	r3, r3, #20
 8009b02:	051b      	lsls	r3, r3, #20
 8009b04:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009b08:	4b61      	ldr	r3, [pc, #388]	; (8009c90 <_strtod_l+0xb20>)
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	f040 80c8 	bne.w	8009ca0 <_strtod_l+0xb30>
 8009b10:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009b14:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b1a:	4640      	mov	r0, r8
 8009b1c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8009b20:	4649      	mov	r1, r9
 8009b22:	f002 fa2b 	bl	800bf7c <__ulp>
 8009b26:	4602      	mov	r2, r0
 8009b28:	460b      	mov	r3, r1
 8009b2a:	4630      	mov	r0, r6
 8009b2c:	4639      	mov	r1, r7
 8009b2e:	f7f6 fcd3 	bl	80004d8 <__aeabi_dmul>
 8009b32:	4642      	mov	r2, r8
 8009b34:	464b      	mov	r3, r9
 8009b36:	f7f6 fb19 	bl	800016c <__adddf3>
 8009b3a:	460b      	mov	r3, r1
 8009b3c:	4951      	ldr	r1, [pc, #324]	; (8009c84 <_strtod_l+0xb14>)
 8009b3e:	4a55      	ldr	r2, [pc, #340]	; (8009c94 <_strtod_l+0xb24>)
 8009b40:	4019      	ands	r1, r3
 8009b42:	4291      	cmp	r1, r2
 8009b44:	4680      	mov	r8, r0
 8009b46:	d95e      	bls.n	8009c06 <_strtod_l+0xa96>
 8009b48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b4a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d103      	bne.n	8009b5a <_strtod_l+0x9ea>
 8009b52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b54:	3301      	adds	r3, #1
 8009b56:	f43f ad4e 	beq.w	80095f6 <_strtod_l+0x486>
 8009b5a:	f04f 38ff 	mov.w	r8, #4294967295
 8009b5e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8009c88 <_strtod_l+0xb18>
 8009b62:	4650      	mov	r0, sl
 8009b64:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009b66:	f001 fed9 	bl	800b91c <_Bfree>
 8009b6a:	4650      	mov	r0, sl
 8009b6c:	9906      	ldr	r1, [sp, #24]
 8009b6e:	f001 fed5 	bl	800b91c <_Bfree>
 8009b72:	4650      	mov	r0, sl
 8009b74:	9904      	ldr	r1, [sp, #16]
 8009b76:	f001 fed1 	bl	800b91c <_Bfree>
 8009b7a:	4659      	mov	r1, fp
 8009b7c:	4650      	mov	r0, sl
 8009b7e:	f001 fecd 	bl	800b91c <_Bfree>
 8009b82:	e61c      	b.n	80097be <_strtod_l+0x64e>
 8009b84:	f1b8 0f00 	cmp.w	r8, #0
 8009b88:	d119      	bne.n	8009bbe <_strtod_l+0xa4e>
 8009b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b90:	b9e3      	cbnz	r3, 8009bcc <_strtod_l+0xa5c>
 8009b92:	2200      	movs	r2, #0
 8009b94:	4630      	mov	r0, r6
 8009b96:	4639      	mov	r1, r7
 8009b98:	4b3c      	ldr	r3, [pc, #240]	; (8009c8c <_strtod_l+0xb1c>)
 8009b9a:	f7f6 ff0f 	bl	80009bc <__aeabi_dcmplt>
 8009b9e:	b9c8      	cbnz	r0, 8009bd4 <_strtod_l+0xa64>
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	4630      	mov	r0, r6
 8009ba4:	4639      	mov	r1, r7
 8009ba6:	4b3c      	ldr	r3, [pc, #240]	; (8009c98 <_strtod_l+0xb28>)
 8009ba8:	f7f6 fc96 	bl	80004d8 <__aeabi_dmul>
 8009bac:	4604      	mov	r4, r0
 8009bae:	460d      	mov	r5, r1
 8009bb0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009bb4:	9418      	str	r4, [sp, #96]	; 0x60
 8009bb6:	9319      	str	r3, [sp, #100]	; 0x64
 8009bb8:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8009bbc:	e79d      	b.n	8009afa <_strtod_l+0x98a>
 8009bbe:	f1b8 0f01 	cmp.w	r8, #1
 8009bc2:	d103      	bne.n	8009bcc <_strtod_l+0xa5c>
 8009bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	f43f ad87 	beq.w	80096da <_strtod_l+0x56a>
 8009bcc:	2600      	movs	r6, #0
 8009bce:	2400      	movs	r4, #0
 8009bd0:	4f32      	ldr	r7, [pc, #200]	; (8009c9c <_strtod_l+0xb2c>)
 8009bd2:	e791      	b.n	8009af8 <_strtod_l+0x988>
 8009bd4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8009bd6:	4d30      	ldr	r5, [pc, #192]	; (8009c98 <_strtod_l+0xb28>)
 8009bd8:	e7ea      	b.n	8009bb0 <_strtod_l+0xa40>
 8009bda:	4b2f      	ldr	r3, [pc, #188]	; (8009c98 <_strtod_l+0xb28>)
 8009bdc:	2200      	movs	r2, #0
 8009bde:	4630      	mov	r0, r6
 8009be0:	4639      	mov	r1, r7
 8009be2:	f7f6 fc79 	bl	80004d8 <__aeabi_dmul>
 8009be6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009be8:	4604      	mov	r4, r0
 8009bea:	460d      	mov	r5, r1
 8009bec:	b933      	cbnz	r3, 8009bfc <_strtod_l+0xa8c>
 8009bee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009bf2:	9010      	str	r0, [sp, #64]	; 0x40
 8009bf4:	9311      	str	r3, [sp, #68]	; 0x44
 8009bf6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009bfa:	e77e      	b.n	8009afa <_strtod_l+0x98a>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	460b      	mov	r3, r1
 8009c00:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009c04:	e7f7      	b.n	8009bf6 <_strtod_l+0xa86>
 8009c06:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009c0a:	9b05      	ldr	r3, [sp, #20]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d1a8      	bne.n	8009b62 <_strtod_l+0x9f2>
 8009c10:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009c14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009c16:	0d1b      	lsrs	r3, r3, #20
 8009c18:	051b      	lsls	r3, r3, #20
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d1a1      	bne.n	8009b62 <_strtod_l+0x9f2>
 8009c1e:	4620      	mov	r0, r4
 8009c20:	4629      	mov	r1, r5
 8009c22:	f7f7 fa25 	bl	8001070 <__aeabi_d2lz>
 8009c26:	f7f6 fc29 	bl	800047c <__aeabi_l2d>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	4620      	mov	r0, r4
 8009c30:	4629      	mov	r1, r5
 8009c32:	f7f6 fa99 	bl	8000168 <__aeabi_dsub>
 8009c36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c3c:	ea43 0308 	orr.w	r3, r3, r8
 8009c40:	4313      	orrs	r3, r2
 8009c42:	4604      	mov	r4, r0
 8009c44:	460d      	mov	r5, r1
 8009c46:	d066      	beq.n	8009d16 <_strtod_l+0xba6>
 8009c48:	a309      	add	r3, pc, #36	; (adr r3, 8009c70 <_strtod_l+0xb00>)
 8009c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4e:	f7f6 feb5 	bl	80009bc <__aeabi_dcmplt>
 8009c52:	2800      	cmp	r0, #0
 8009c54:	f47f acda 	bne.w	800960c <_strtod_l+0x49c>
 8009c58:	a307      	add	r3, pc, #28	; (adr r3, 8009c78 <_strtod_l+0xb08>)
 8009c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5e:	4620      	mov	r0, r4
 8009c60:	4629      	mov	r1, r5
 8009c62:	f7f6 fec9 	bl	80009f8 <__aeabi_dcmpgt>
 8009c66:	2800      	cmp	r0, #0
 8009c68:	f43f af7b 	beq.w	8009b62 <_strtod_l+0x9f2>
 8009c6c:	e4ce      	b.n	800960c <_strtod_l+0x49c>
 8009c6e:	bf00      	nop
 8009c70:	94a03595 	.word	0x94a03595
 8009c74:	3fdfffff 	.word	0x3fdfffff
 8009c78:	35afe535 	.word	0x35afe535
 8009c7c:	3fe00000 	.word	0x3fe00000
 8009c80:	000fffff 	.word	0x000fffff
 8009c84:	7ff00000 	.word	0x7ff00000
 8009c88:	7fefffff 	.word	0x7fefffff
 8009c8c:	3ff00000 	.word	0x3ff00000
 8009c90:	7fe00000 	.word	0x7fe00000
 8009c94:	7c9fffff 	.word	0x7c9fffff
 8009c98:	3fe00000 	.word	0x3fe00000
 8009c9c:	bff00000 	.word	0xbff00000
 8009ca0:	9b05      	ldr	r3, [sp, #20]
 8009ca2:	b313      	cbz	r3, 8009cea <_strtod_l+0xb7a>
 8009ca4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ca6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009caa:	d81e      	bhi.n	8009cea <_strtod_l+0xb7a>
 8009cac:	a326      	add	r3, pc, #152	; (adr r3, 8009d48 <_strtod_l+0xbd8>)
 8009cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	4629      	mov	r1, r5
 8009cb6:	f7f6 fe8b 	bl	80009d0 <__aeabi_dcmple>
 8009cba:	b190      	cbz	r0, 8009ce2 <_strtod_l+0xb72>
 8009cbc:	4629      	mov	r1, r5
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	f7f6 fee2 	bl	8000a88 <__aeabi_d2uiz>
 8009cc4:	2801      	cmp	r0, #1
 8009cc6:	bf38      	it	cc
 8009cc8:	2001      	movcc	r0, #1
 8009cca:	f7f6 fb8b 	bl	80003e4 <__aeabi_ui2d>
 8009cce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cd0:	4604      	mov	r4, r0
 8009cd2:	460d      	mov	r5, r1
 8009cd4:	b9d3      	cbnz	r3, 8009d0c <_strtod_l+0xb9c>
 8009cd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009cda:	9012      	str	r0, [sp, #72]	; 0x48
 8009cdc:	9313      	str	r3, [sp, #76]	; 0x4c
 8009cde:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8009ce2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009ce4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8009ce8:	1a9f      	subs	r7, r3, r2
 8009cea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009cee:	f002 f945 	bl	800bf7c <__ulp>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	4630      	mov	r0, r6
 8009cf8:	4639      	mov	r1, r7
 8009cfa:	f7f6 fbed 	bl	80004d8 <__aeabi_dmul>
 8009cfe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009d02:	f7f6 fa33 	bl	800016c <__adddf3>
 8009d06:	4680      	mov	r8, r0
 8009d08:	4689      	mov	r9, r1
 8009d0a:	e77e      	b.n	8009c0a <_strtod_l+0xa9a>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	460b      	mov	r3, r1
 8009d10:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8009d14:	e7e3      	b.n	8009cde <_strtod_l+0xb6e>
 8009d16:	a30e      	add	r3, pc, #56	; (adr r3, 8009d50 <_strtod_l+0xbe0>)
 8009d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1c:	f7f6 fe4e 	bl	80009bc <__aeabi_dcmplt>
 8009d20:	e7a1      	b.n	8009c66 <_strtod_l+0xaf6>
 8009d22:	2300      	movs	r3, #0
 8009d24:	930c      	str	r3, [sp, #48]	; 0x30
 8009d26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d28:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009d2a:	6013      	str	r3, [r2, #0]
 8009d2c:	f7ff ba65 	b.w	80091fa <_strtod_l+0x8a>
 8009d30:	2b65      	cmp	r3, #101	; 0x65
 8009d32:	f43f ab5c 	beq.w	80093ee <_strtod_l+0x27e>
 8009d36:	2b45      	cmp	r3, #69	; 0x45
 8009d38:	f43f ab59 	beq.w	80093ee <_strtod_l+0x27e>
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	f7ff bb8d 	b.w	800945c <_strtod_l+0x2ec>
 8009d42:	bf00      	nop
 8009d44:	f3af 8000 	nop.w
 8009d48:	ffc00000 	.word	0xffc00000
 8009d4c:	41dfffff 	.word	0x41dfffff
 8009d50:	94a03595 	.word	0x94a03595
 8009d54:	3fcfffff 	.word	0x3fcfffff

08009d58 <_strtod_r>:
 8009d58:	4b01      	ldr	r3, [pc, #4]	; (8009d60 <_strtod_r+0x8>)
 8009d5a:	f7ff ba09 	b.w	8009170 <_strtod_l>
 8009d5e:	bf00      	nop
 8009d60:	200000bc 	.word	0x200000bc

08009d64 <_strtol_l.isra.0>:
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d6a:	4686      	mov	lr, r0
 8009d6c:	d001      	beq.n	8009d72 <_strtol_l.isra.0+0xe>
 8009d6e:	2b24      	cmp	r3, #36	; 0x24
 8009d70:	d906      	bls.n	8009d80 <_strtol_l.isra.0+0x1c>
 8009d72:	f7fe f8db 	bl	8007f2c <__errno>
 8009d76:	2316      	movs	r3, #22
 8009d78:	6003      	str	r3, [r0, #0]
 8009d7a:	2000      	movs	r0, #0
 8009d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d80:	468c      	mov	ip, r1
 8009d82:	4e3a      	ldr	r6, [pc, #232]	; (8009e6c <_strtol_l.isra.0+0x108>)
 8009d84:	4660      	mov	r0, ip
 8009d86:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009d8a:	5da5      	ldrb	r5, [r4, r6]
 8009d8c:	f015 0508 	ands.w	r5, r5, #8
 8009d90:	d1f8      	bne.n	8009d84 <_strtol_l.isra.0+0x20>
 8009d92:	2c2d      	cmp	r4, #45	; 0x2d
 8009d94:	d133      	bne.n	8009dfe <_strtol_l.isra.0+0x9a>
 8009d96:	f04f 0801 	mov.w	r8, #1
 8009d9a:	f89c 4000 	ldrb.w	r4, [ip]
 8009d9e:	f100 0c02 	add.w	ip, r0, #2
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d05d      	beq.n	8009e62 <_strtol_l.isra.0+0xfe>
 8009da6:	2b10      	cmp	r3, #16
 8009da8:	d10c      	bne.n	8009dc4 <_strtol_l.isra.0+0x60>
 8009daa:	2c30      	cmp	r4, #48	; 0x30
 8009dac:	d10a      	bne.n	8009dc4 <_strtol_l.isra.0+0x60>
 8009dae:	f89c 0000 	ldrb.w	r0, [ip]
 8009db2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009db6:	2858      	cmp	r0, #88	; 0x58
 8009db8:	d14e      	bne.n	8009e58 <_strtol_l.isra.0+0xf4>
 8009dba:	2310      	movs	r3, #16
 8009dbc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8009dc0:	f10c 0c02 	add.w	ip, ip, #2
 8009dc4:	2500      	movs	r5, #0
 8009dc6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8009dca:	3f01      	subs	r7, #1
 8009dcc:	fbb7 f9f3 	udiv	r9, r7, r3
 8009dd0:	4628      	mov	r0, r5
 8009dd2:	fb03 7a19 	mls	sl, r3, r9, r7
 8009dd6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8009dda:	2e09      	cmp	r6, #9
 8009ddc:	d818      	bhi.n	8009e10 <_strtol_l.isra.0+0xac>
 8009dde:	4634      	mov	r4, r6
 8009de0:	42a3      	cmp	r3, r4
 8009de2:	dd24      	ble.n	8009e2e <_strtol_l.isra.0+0xca>
 8009de4:	2d00      	cmp	r5, #0
 8009de6:	db1f      	blt.n	8009e28 <_strtol_l.isra.0+0xc4>
 8009de8:	4581      	cmp	r9, r0
 8009dea:	d31d      	bcc.n	8009e28 <_strtol_l.isra.0+0xc4>
 8009dec:	d101      	bne.n	8009df2 <_strtol_l.isra.0+0x8e>
 8009dee:	45a2      	cmp	sl, r4
 8009df0:	db1a      	blt.n	8009e28 <_strtol_l.isra.0+0xc4>
 8009df2:	2501      	movs	r5, #1
 8009df4:	fb00 4003 	mla	r0, r0, r3, r4
 8009df8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009dfc:	e7eb      	b.n	8009dd6 <_strtol_l.isra.0+0x72>
 8009dfe:	2c2b      	cmp	r4, #43	; 0x2b
 8009e00:	bf08      	it	eq
 8009e02:	f89c 4000 	ldrbeq.w	r4, [ip]
 8009e06:	46a8      	mov	r8, r5
 8009e08:	bf08      	it	eq
 8009e0a:	f100 0c02 	addeq.w	ip, r0, #2
 8009e0e:	e7c8      	b.n	8009da2 <_strtol_l.isra.0+0x3e>
 8009e10:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8009e14:	2e19      	cmp	r6, #25
 8009e16:	d801      	bhi.n	8009e1c <_strtol_l.isra.0+0xb8>
 8009e18:	3c37      	subs	r4, #55	; 0x37
 8009e1a:	e7e1      	b.n	8009de0 <_strtol_l.isra.0+0x7c>
 8009e1c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8009e20:	2e19      	cmp	r6, #25
 8009e22:	d804      	bhi.n	8009e2e <_strtol_l.isra.0+0xca>
 8009e24:	3c57      	subs	r4, #87	; 0x57
 8009e26:	e7db      	b.n	8009de0 <_strtol_l.isra.0+0x7c>
 8009e28:	f04f 35ff 	mov.w	r5, #4294967295
 8009e2c:	e7e4      	b.n	8009df8 <_strtol_l.isra.0+0x94>
 8009e2e:	2d00      	cmp	r5, #0
 8009e30:	da08      	bge.n	8009e44 <_strtol_l.isra.0+0xe0>
 8009e32:	2322      	movs	r3, #34	; 0x22
 8009e34:	4638      	mov	r0, r7
 8009e36:	f8ce 3000 	str.w	r3, [lr]
 8009e3a:	2a00      	cmp	r2, #0
 8009e3c:	d09e      	beq.n	8009d7c <_strtol_l.isra.0+0x18>
 8009e3e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8009e42:	e007      	b.n	8009e54 <_strtol_l.isra.0+0xf0>
 8009e44:	f1b8 0f00 	cmp.w	r8, #0
 8009e48:	d000      	beq.n	8009e4c <_strtol_l.isra.0+0xe8>
 8009e4a:	4240      	negs	r0, r0
 8009e4c:	2a00      	cmp	r2, #0
 8009e4e:	d095      	beq.n	8009d7c <_strtol_l.isra.0+0x18>
 8009e50:	2d00      	cmp	r5, #0
 8009e52:	d1f4      	bne.n	8009e3e <_strtol_l.isra.0+0xda>
 8009e54:	6011      	str	r1, [r2, #0]
 8009e56:	e791      	b.n	8009d7c <_strtol_l.isra.0+0x18>
 8009e58:	2430      	movs	r4, #48	; 0x30
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d1b2      	bne.n	8009dc4 <_strtol_l.isra.0+0x60>
 8009e5e:	2308      	movs	r3, #8
 8009e60:	e7b0      	b.n	8009dc4 <_strtol_l.isra.0+0x60>
 8009e62:	2c30      	cmp	r4, #48	; 0x30
 8009e64:	d0a3      	beq.n	8009dae <_strtol_l.isra.0+0x4a>
 8009e66:	230a      	movs	r3, #10
 8009e68:	e7ac      	b.n	8009dc4 <_strtol_l.isra.0+0x60>
 8009e6a:	bf00      	nop
 8009e6c:	0800c911 	.word	0x0800c911

08009e70 <_strtol_r>:
 8009e70:	f7ff bf78 	b.w	8009d64 <_strtol_l.isra.0>

08009e74 <__swbuf_r>:
 8009e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e76:	460e      	mov	r6, r1
 8009e78:	4614      	mov	r4, r2
 8009e7a:	4605      	mov	r5, r0
 8009e7c:	b118      	cbz	r0, 8009e86 <__swbuf_r+0x12>
 8009e7e:	6983      	ldr	r3, [r0, #24]
 8009e80:	b90b      	cbnz	r3, 8009e86 <__swbuf_r+0x12>
 8009e82:	f001 f855 	bl	800af30 <__sinit>
 8009e86:	4b21      	ldr	r3, [pc, #132]	; (8009f0c <__swbuf_r+0x98>)
 8009e88:	429c      	cmp	r4, r3
 8009e8a:	d12b      	bne.n	8009ee4 <__swbuf_r+0x70>
 8009e8c:	686c      	ldr	r4, [r5, #4]
 8009e8e:	69a3      	ldr	r3, [r4, #24]
 8009e90:	60a3      	str	r3, [r4, #8]
 8009e92:	89a3      	ldrh	r3, [r4, #12]
 8009e94:	071a      	lsls	r2, r3, #28
 8009e96:	d52f      	bpl.n	8009ef8 <__swbuf_r+0x84>
 8009e98:	6923      	ldr	r3, [r4, #16]
 8009e9a:	b36b      	cbz	r3, 8009ef8 <__swbuf_r+0x84>
 8009e9c:	6923      	ldr	r3, [r4, #16]
 8009e9e:	6820      	ldr	r0, [r4, #0]
 8009ea0:	b2f6      	uxtb	r6, r6
 8009ea2:	1ac0      	subs	r0, r0, r3
 8009ea4:	6963      	ldr	r3, [r4, #20]
 8009ea6:	4637      	mov	r7, r6
 8009ea8:	4283      	cmp	r3, r0
 8009eaa:	dc04      	bgt.n	8009eb6 <__swbuf_r+0x42>
 8009eac:	4621      	mov	r1, r4
 8009eae:	4628      	mov	r0, r5
 8009eb0:	f000 ffaa 	bl	800ae08 <_fflush_r>
 8009eb4:	bb30      	cbnz	r0, 8009f04 <__swbuf_r+0x90>
 8009eb6:	68a3      	ldr	r3, [r4, #8]
 8009eb8:	3001      	adds	r0, #1
 8009eba:	3b01      	subs	r3, #1
 8009ebc:	60a3      	str	r3, [r4, #8]
 8009ebe:	6823      	ldr	r3, [r4, #0]
 8009ec0:	1c5a      	adds	r2, r3, #1
 8009ec2:	6022      	str	r2, [r4, #0]
 8009ec4:	701e      	strb	r6, [r3, #0]
 8009ec6:	6963      	ldr	r3, [r4, #20]
 8009ec8:	4283      	cmp	r3, r0
 8009eca:	d004      	beq.n	8009ed6 <__swbuf_r+0x62>
 8009ecc:	89a3      	ldrh	r3, [r4, #12]
 8009ece:	07db      	lsls	r3, r3, #31
 8009ed0:	d506      	bpl.n	8009ee0 <__swbuf_r+0x6c>
 8009ed2:	2e0a      	cmp	r6, #10
 8009ed4:	d104      	bne.n	8009ee0 <__swbuf_r+0x6c>
 8009ed6:	4621      	mov	r1, r4
 8009ed8:	4628      	mov	r0, r5
 8009eda:	f000 ff95 	bl	800ae08 <_fflush_r>
 8009ede:	b988      	cbnz	r0, 8009f04 <__swbuf_r+0x90>
 8009ee0:	4638      	mov	r0, r7
 8009ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ee4:	4b0a      	ldr	r3, [pc, #40]	; (8009f10 <__swbuf_r+0x9c>)
 8009ee6:	429c      	cmp	r4, r3
 8009ee8:	d101      	bne.n	8009eee <__swbuf_r+0x7a>
 8009eea:	68ac      	ldr	r4, [r5, #8]
 8009eec:	e7cf      	b.n	8009e8e <__swbuf_r+0x1a>
 8009eee:	4b09      	ldr	r3, [pc, #36]	; (8009f14 <__swbuf_r+0xa0>)
 8009ef0:	429c      	cmp	r4, r3
 8009ef2:	bf08      	it	eq
 8009ef4:	68ec      	ldreq	r4, [r5, #12]
 8009ef6:	e7ca      	b.n	8009e8e <__swbuf_r+0x1a>
 8009ef8:	4621      	mov	r1, r4
 8009efa:	4628      	mov	r0, r5
 8009efc:	f000 f80c 	bl	8009f18 <__swsetup_r>
 8009f00:	2800      	cmp	r0, #0
 8009f02:	d0cb      	beq.n	8009e9c <__swbuf_r+0x28>
 8009f04:	f04f 37ff 	mov.w	r7, #4294967295
 8009f08:	e7ea      	b.n	8009ee0 <__swbuf_r+0x6c>
 8009f0a:	bf00      	nop
 8009f0c:	0800cac8 	.word	0x0800cac8
 8009f10:	0800cae8 	.word	0x0800cae8
 8009f14:	0800caa8 	.word	0x0800caa8

08009f18 <__swsetup_r>:
 8009f18:	4b32      	ldr	r3, [pc, #200]	; (8009fe4 <__swsetup_r+0xcc>)
 8009f1a:	b570      	push	{r4, r5, r6, lr}
 8009f1c:	681d      	ldr	r5, [r3, #0]
 8009f1e:	4606      	mov	r6, r0
 8009f20:	460c      	mov	r4, r1
 8009f22:	b125      	cbz	r5, 8009f2e <__swsetup_r+0x16>
 8009f24:	69ab      	ldr	r3, [r5, #24]
 8009f26:	b913      	cbnz	r3, 8009f2e <__swsetup_r+0x16>
 8009f28:	4628      	mov	r0, r5
 8009f2a:	f001 f801 	bl	800af30 <__sinit>
 8009f2e:	4b2e      	ldr	r3, [pc, #184]	; (8009fe8 <__swsetup_r+0xd0>)
 8009f30:	429c      	cmp	r4, r3
 8009f32:	d10f      	bne.n	8009f54 <__swsetup_r+0x3c>
 8009f34:	686c      	ldr	r4, [r5, #4]
 8009f36:	89a3      	ldrh	r3, [r4, #12]
 8009f38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f3c:	0719      	lsls	r1, r3, #28
 8009f3e:	d42c      	bmi.n	8009f9a <__swsetup_r+0x82>
 8009f40:	06dd      	lsls	r5, r3, #27
 8009f42:	d411      	bmi.n	8009f68 <__swsetup_r+0x50>
 8009f44:	2309      	movs	r3, #9
 8009f46:	6033      	str	r3, [r6, #0]
 8009f48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f50:	81a3      	strh	r3, [r4, #12]
 8009f52:	e03e      	b.n	8009fd2 <__swsetup_r+0xba>
 8009f54:	4b25      	ldr	r3, [pc, #148]	; (8009fec <__swsetup_r+0xd4>)
 8009f56:	429c      	cmp	r4, r3
 8009f58:	d101      	bne.n	8009f5e <__swsetup_r+0x46>
 8009f5a:	68ac      	ldr	r4, [r5, #8]
 8009f5c:	e7eb      	b.n	8009f36 <__swsetup_r+0x1e>
 8009f5e:	4b24      	ldr	r3, [pc, #144]	; (8009ff0 <__swsetup_r+0xd8>)
 8009f60:	429c      	cmp	r4, r3
 8009f62:	bf08      	it	eq
 8009f64:	68ec      	ldreq	r4, [r5, #12]
 8009f66:	e7e6      	b.n	8009f36 <__swsetup_r+0x1e>
 8009f68:	0758      	lsls	r0, r3, #29
 8009f6a:	d512      	bpl.n	8009f92 <__swsetup_r+0x7a>
 8009f6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f6e:	b141      	cbz	r1, 8009f82 <__swsetup_r+0x6a>
 8009f70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f74:	4299      	cmp	r1, r3
 8009f76:	d002      	beq.n	8009f7e <__swsetup_r+0x66>
 8009f78:	4630      	mov	r0, r6
 8009f7a:	f7fe f831 	bl	8007fe0 <_free_r>
 8009f7e:	2300      	movs	r3, #0
 8009f80:	6363      	str	r3, [r4, #52]	; 0x34
 8009f82:	89a3      	ldrh	r3, [r4, #12]
 8009f84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f88:	81a3      	strh	r3, [r4, #12]
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	6063      	str	r3, [r4, #4]
 8009f8e:	6923      	ldr	r3, [r4, #16]
 8009f90:	6023      	str	r3, [r4, #0]
 8009f92:	89a3      	ldrh	r3, [r4, #12]
 8009f94:	f043 0308 	orr.w	r3, r3, #8
 8009f98:	81a3      	strh	r3, [r4, #12]
 8009f9a:	6923      	ldr	r3, [r4, #16]
 8009f9c:	b94b      	cbnz	r3, 8009fb2 <__swsetup_r+0x9a>
 8009f9e:	89a3      	ldrh	r3, [r4, #12]
 8009fa0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fa8:	d003      	beq.n	8009fb2 <__swsetup_r+0x9a>
 8009faa:	4621      	mov	r1, r4
 8009fac:	4630      	mov	r0, r6
 8009fae:	f001 fbef 	bl	800b790 <__smakebuf_r>
 8009fb2:	89a0      	ldrh	r0, [r4, #12]
 8009fb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fb8:	f010 0301 	ands.w	r3, r0, #1
 8009fbc:	d00a      	beq.n	8009fd4 <__swsetup_r+0xbc>
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	60a3      	str	r3, [r4, #8]
 8009fc2:	6963      	ldr	r3, [r4, #20]
 8009fc4:	425b      	negs	r3, r3
 8009fc6:	61a3      	str	r3, [r4, #24]
 8009fc8:	6923      	ldr	r3, [r4, #16]
 8009fca:	b943      	cbnz	r3, 8009fde <__swsetup_r+0xc6>
 8009fcc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009fd0:	d1ba      	bne.n	8009f48 <__swsetup_r+0x30>
 8009fd2:	bd70      	pop	{r4, r5, r6, pc}
 8009fd4:	0781      	lsls	r1, r0, #30
 8009fd6:	bf58      	it	pl
 8009fd8:	6963      	ldrpl	r3, [r4, #20]
 8009fda:	60a3      	str	r3, [r4, #8]
 8009fdc:	e7f4      	b.n	8009fc8 <__swsetup_r+0xb0>
 8009fde:	2000      	movs	r0, #0
 8009fe0:	e7f7      	b.n	8009fd2 <__swsetup_r+0xba>
 8009fe2:	bf00      	nop
 8009fe4:	20000054 	.word	0x20000054
 8009fe8:	0800cac8 	.word	0x0800cac8
 8009fec:	0800cae8 	.word	0x0800cae8
 8009ff0:	0800caa8 	.word	0x0800caa8

08009ff4 <abort>:
 8009ff4:	2006      	movs	r0, #6
 8009ff6:	b508      	push	{r3, lr}
 8009ff8:	f002 fac6 	bl	800c588 <raise>
 8009ffc:	2001      	movs	r0, #1
 8009ffe:	f7f8 fa2c 	bl	800245a <_exit>

0800a002 <quorem>:
 800a002:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a006:	6903      	ldr	r3, [r0, #16]
 800a008:	690c      	ldr	r4, [r1, #16]
 800a00a:	4607      	mov	r7, r0
 800a00c:	42a3      	cmp	r3, r4
 800a00e:	f2c0 8083 	blt.w	800a118 <quorem+0x116>
 800a012:	3c01      	subs	r4, #1
 800a014:	f100 0514 	add.w	r5, r0, #20
 800a018:	f101 0814 	add.w	r8, r1, #20
 800a01c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a020:	9301      	str	r3, [sp, #4]
 800a022:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a026:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a02a:	3301      	adds	r3, #1
 800a02c:	429a      	cmp	r2, r3
 800a02e:	fbb2 f6f3 	udiv	r6, r2, r3
 800a032:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a036:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a03a:	d332      	bcc.n	800a0a2 <quorem+0xa0>
 800a03c:	f04f 0e00 	mov.w	lr, #0
 800a040:	4640      	mov	r0, r8
 800a042:	46ac      	mov	ip, r5
 800a044:	46f2      	mov	sl, lr
 800a046:	f850 2b04 	ldr.w	r2, [r0], #4
 800a04a:	b293      	uxth	r3, r2
 800a04c:	fb06 e303 	mla	r3, r6, r3, lr
 800a050:	0c12      	lsrs	r2, r2, #16
 800a052:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a056:	fb06 e202 	mla	r2, r6, r2, lr
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	ebaa 0303 	sub.w	r3, sl, r3
 800a060:	f8dc a000 	ldr.w	sl, [ip]
 800a064:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a068:	fa1f fa8a 	uxth.w	sl, sl
 800a06c:	4453      	add	r3, sl
 800a06e:	fa1f fa82 	uxth.w	sl, r2
 800a072:	f8dc 2000 	ldr.w	r2, [ip]
 800a076:	4581      	cmp	r9, r0
 800a078:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a07c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a080:	b29b      	uxth	r3, r3
 800a082:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a086:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a08a:	f84c 3b04 	str.w	r3, [ip], #4
 800a08e:	d2da      	bcs.n	800a046 <quorem+0x44>
 800a090:	f855 300b 	ldr.w	r3, [r5, fp]
 800a094:	b92b      	cbnz	r3, 800a0a2 <quorem+0xa0>
 800a096:	9b01      	ldr	r3, [sp, #4]
 800a098:	3b04      	subs	r3, #4
 800a09a:	429d      	cmp	r5, r3
 800a09c:	461a      	mov	r2, r3
 800a09e:	d32f      	bcc.n	800a100 <quorem+0xfe>
 800a0a0:	613c      	str	r4, [r7, #16]
 800a0a2:	4638      	mov	r0, r7
 800a0a4:	f001 febe 	bl	800be24 <__mcmp>
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	db25      	blt.n	800a0f8 <quorem+0xf6>
 800a0ac:	4628      	mov	r0, r5
 800a0ae:	f04f 0c00 	mov.w	ip, #0
 800a0b2:	3601      	adds	r6, #1
 800a0b4:	f858 1b04 	ldr.w	r1, [r8], #4
 800a0b8:	f8d0 e000 	ldr.w	lr, [r0]
 800a0bc:	b28b      	uxth	r3, r1
 800a0be:	ebac 0303 	sub.w	r3, ip, r3
 800a0c2:	fa1f f28e 	uxth.w	r2, lr
 800a0c6:	4413      	add	r3, r2
 800a0c8:	0c0a      	lsrs	r2, r1, #16
 800a0ca:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a0ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a0d2:	b29b      	uxth	r3, r3
 800a0d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0d8:	45c1      	cmp	r9, r8
 800a0da:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a0de:	f840 3b04 	str.w	r3, [r0], #4
 800a0e2:	d2e7      	bcs.n	800a0b4 <quorem+0xb2>
 800a0e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0ec:	b922      	cbnz	r2, 800a0f8 <quorem+0xf6>
 800a0ee:	3b04      	subs	r3, #4
 800a0f0:	429d      	cmp	r5, r3
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	d30a      	bcc.n	800a10c <quorem+0x10a>
 800a0f6:	613c      	str	r4, [r7, #16]
 800a0f8:	4630      	mov	r0, r6
 800a0fa:	b003      	add	sp, #12
 800a0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a100:	6812      	ldr	r2, [r2, #0]
 800a102:	3b04      	subs	r3, #4
 800a104:	2a00      	cmp	r2, #0
 800a106:	d1cb      	bne.n	800a0a0 <quorem+0x9e>
 800a108:	3c01      	subs	r4, #1
 800a10a:	e7c6      	b.n	800a09a <quorem+0x98>
 800a10c:	6812      	ldr	r2, [r2, #0]
 800a10e:	3b04      	subs	r3, #4
 800a110:	2a00      	cmp	r2, #0
 800a112:	d1f0      	bne.n	800a0f6 <quorem+0xf4>
 800a114:	3c01      	subs	r4, #1
 800a116:	e7eb      	b.n	800a0f0 <quorem+0xee>
 800a118:	2000      	movs	r0, #0
 800a11a:	e7ee      	b.n	800a0fa <quorem+0xf8>
 800a11c:	0000      	movs	r0, r0
	...

0800a120 <_dtoa_r>:
 800a120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a124:	4616      	mov	r6, r2
 800a126:	461f      	mov	r7, r3
 800a128:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a12a:	b099      	sub	sp, #100	; 0x64
 800a12c:	4605      	mov	r5, r0
 800a12e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a132:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a136:	b974      	cbnz	r4, 800a156 <_dtoa_r+0x36>
 800a138:	2010      	movs	r0, #16
 800a13a:	f7fd ff33 	bl	8007fa4 <malloc>
 800a13e:	4602      	mov	r2, r0
 800a140:	6268      	str	r0, [r5, #36]	; 0x24
 800a142:	b920      	cbnz	r0, 800a14e <_dtoa_r+0x2e>
 800a144:	21ea      	movs	r1, #234	; 0xea
 800a146:	4bae      	ldr	r3, [pc, #696]	; (800a400 <_dtoa_r+0x2e0>)
 800a148:	48ae      	ldr	r0, [pc, #696]	; (800a404 <_dtoa_r+0x2e4>)
 800a14a:	f7fd fed1 	bl	8007ef0 <__assert_func>
 800a14e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a152:	6004      	str	r4, [r0, #0]
 800a154:	60c4      	str	r4, [r0, #12]
 800a156:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a158:	6819      	ldr	r1, [r3, #0]
 800a15a:	b151      	cbz	r1, 800a172 <_dtoa_r+0x52>
 800a15c:	685a      	ldr	r2, [r3, #4]
 800a15e:	2301      	movs	r3, #1
 800a160:	4093      	lsls	r3, r2
 800a162:	604a      	str	r2, [r1, #4]
 800a164:	608b      	str	r3, [r1, #8]
 800a166:	4628      	mov	r0, r5
 800a168:	f001 fbd8 	bl	800b91c <_Bfree>
 800a16c:	2200      	movs	r2, #0
 800a16e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a170:	601a      	str	r2, [r3, #0]
 800a172:	1e3b      	subs	r3, r7, #0
 800a174:	bfaf      	iteee	ge
 800a176:	2300      	movge	r3, #0
 800a178:	2201      	movlt	r2, #1
 800a17a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a17e:	9305      	strlt	r3, [sp, #20]
 800a180:	bfa8      	it	ge
 800a182:	f8c8 3000 	strge.w	r3, [r8]
 800a186:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a18a:	4b9f      	ldr	r3, [pc, #636]	; (800a408 <_dtoa_r+0x2e8>)
 800a18c:	bfb8      	it	lt
 800a18e:	f8c8 2000 	strlt.w	r2, [r8]
 800a192:	ea33 0309 	bics.w	r3, r3, r9
 800a196:	d119      	bne.n	800a1cc <_dtoa_r+0xac>
 800a198:	f242 730f 	movw	r3, #9999	; 0x270f
 800a19c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a19e:	6013      	str	r3, [r2, #0]
 800a1a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a1a4:	4333      	orrs	r3, r6
 800a1a6:	f000 8580 	beq.w	800acaa <_dtoa_r+0xb8a>
 800a1aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a1ac:	b953      	cbnz	r3, 800a1c4 <_dtoa_r+0xa4>
 800a1ae:	4b97      	ldr	r3, [pc, #604]	; (800a40c <_dtoa_r+0x2ec>)
 800a1b0:	e022      	b.n	800a1f8 <_dtoa_r+0xd8>
 800a1b2:	4b97      	ldr	r3, [pc, #604]	; (800a410 <_dtoa_r+0x2f0>)
 800a1b4:	9308      	str	r3, [sp, #32]
 800a1b6:	3308      	adds	r3, #8
 800a1b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a1ba:	6013      	str	r3, [r2, #0]
 800a1bc:	9808      	ldr	r0, [sp, #32]
 800a1be:	b019      	add	sp, #100	; 0x64
 800a1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1c4:	4b91      	ldr	r3, [pc, #580]	; (800a40c <_dtoa_r+0x2ec>)
 800a1c6:	9308      	str	r3, [sp, #32]
 800a1c8:	3303      	adds	r3, #3
 800a1ca:	e7f5      	b.n	800a1b8 <_dtoa_r+0x98>
 800a1cc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a1d0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a1d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a1d8:	2200      	movs	r2, #0
 800a1da:	2300      	movs	r3, #0
 800a1dc:	f7f6 fbe4 	bl	80009a8 <__aeabi_dcmpeq>
 800a1e0:	4680      	mov	r8, r0
 800a1e2:	b158      	cbz	r0, 800a1fc <_dtoa_r+0xdc>
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a1e8:	6013      	str	r3, [r2, #0]
 800a1ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	f000 8559 	beq.w	800aca4 <_dtoa_r+0xb84>
 800a1f2:	4888      	ldr	r0, [pc, #544]	; (800a414 <_dtoa_r+0x2f4>)
 800a1f4:	6018      	str	r0, [r3, #0]
 800a1f6:	1e43      	subs	r3, r0, #1
 800a1f8:	9308      	str	r3, [sp, #32]
 800a1fa:	e7df      	b.n	800a1bc <_dtoa_r+0x9c>
 800a1fc:	ab16      	add	r3, sp, #88	; 0x58
 800a1fe:	9301      	str	r3, [sp, #4]
 800a200:	ab17      	add	r3, sp, #92	; 0x5c
 800a202:	9300      	str	r3, [sp, #0]
 800a204:	4628      	mov	r0, r5
 800a206:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a20a:	f001 ff31 	bl	800c070 <__d2b>
 800a20e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a212:	4682      	mov	sl, r0
 800a214:	2c00      	cmp	r4, #0
 800a216:	d07e      	beq.n	800a316 <_dtoa_r+0x1f6>
 800a218:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a21c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a21e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a222:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a226:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a22a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a22e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a232:	2200      	movs	r2, #0
 800a234:	4b78      	ldr	r3, [pc, #480]	; (800a418 <_dtoa_r+0x2f8>)
 800a236:	f7f5 ff97 	bl	8000168 <__aeabi_dsub>
 800a23a:	a36b      	add	r3, pc, #428	; (adr r3, 800a3e8 <_dtoa_r+0x2c8>)
 800a23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a240:	f7f6 f94a 	bl	80004d8 <__aeabi_dmul>
 800a244:	a36a      	add	r3, pc, #424	; (adr r3, 800a3f0 <_dtoa_r+0x2d0>)
 800a246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24a:	f7f5 ff8f 	bl	800016c <__adddf3>
 800a24e:	4606      	mov	r6, r0
 800a250:	4620      	mov	r0, r4
 800a252:	460f      	mov	r7, r1
 800a254:	f7f6 f8d6 	bl	8000404 <__aeabi_i2d>
 800a258:	a367      	add	r3, pc, #412	; (adr r3, 800a3f8 <_dtoa_r+0x2d8>)
 800a25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25e:	f7f6 f93b 	bl	80004d8 <__aeabi_dmul>
 800a262:	4602      	mov	r2, r0
 800a264:	460b      	mov	r3, r1
 800a266:	4630      	mov	r0, r6
 800a268:	4639      	mov	r1, r7
 800a26a:	f7f5 ff7f 	bl	800016c <__adddf3>
 800a26e:	4606      	mov	r6, r0
 800a270:	460f      	mov	r7, r1
 800a272:	f7f6 fbe1 	bl	8000a38 <__aeabi_d2iz>
 800a276:	2200      	movs	r2, #0
 800a278:	4681      	mov	r9, r0
 800a27a:	2300      	movs	r3, #0
 800a27c:	4630      	mov	r0, r6
 800a27e:	4639      	mov	r1, r7
 800a280:	f7f6 fb9c 	bl	80009bc <__aeabi_dcmplt>
 800a284:	b148      	cbz	r0, 800a29a <_dtoa_r+0x17a>
 800a286:	4648      	mov	r0, r9
 800a288:	f7f6 f8bc 	bl	8000404 <__aeabi_i2d>
 800a28c:	4632      	mov	r2, r6
 800a28e:	463b      	mov	r3, r7
 800a290:	f7f6 fb8a 	bl	80009a8 <__aeabi_dcmpeq>
 800a294:	b908      	cbnz	r0, 800a29a <_dtoa_r+0x17a>
 800a296:	f109 39ff 	add.w	r9, r9, #4294967295
 800a29a:	f1b9 0f16 	cmp.w	r9, #22
 800a29e:	d857      	bhi.n	800a350 <_dtoa_r+0x230>
 800a2a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a2a4:	4b5d      	ldr	r3, [pc, #372]	; (800a41c <_dtoa_r+0x2fc>)
 800a2a6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ae:	f7f6 fb85 	bl	80009bc <__aeabi_dcmplt>
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	d04e      	beq.n	800a354 <_dtoa_r+0x234>
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	f109 39ff 	add.w	r9, r9, #4294967295
 800a2bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a2c0:	1b1c      	subs	r4, r3, r4
 800a2c2:	1e63      	subs	r3, r4, #1
 800a2c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a2c6:	bf49      	itett	mi
 800a2c8:	f1c4 0301 	rsbmi	r3, r4, #1
 800a2cc:	2300      	movpl	r3, #0
 800a2ce:	9306      	strmi	r3, [sp, #24]
 800a2d0:	2300      	movmi	r3, #0
 800a2d2:	bf54      	ite	pl
 800a2d4:	9306      	strpl	r3, [sp, #24]
 800a2d6:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a2d8:	f1b9 0f00 	cmp.w	r9, #0
 800a2dc:	db3c      	blt.n	800a358 <_dtoa_r+0x238>
 800a2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2e0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a2e4:	444b      	add	r3, r9
 800a2e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	930a      	str	r3, [sp, #40]	; 0x28
 800a2ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a2ee:	2b09      	cmp	r3, #9
 800a2f0:	d86c      	bhi.n	800a3cc <_dtoa_r+0x2ac>
 800a2f2:	2b05      	cmp	r3, #5
 800a2f4:	bfc4      	itt	gt
 800a2f6:	3b04      	subgt	r3, #4
 800a2f8:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a2fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a2fc:	bfc8      	it	gt
 800a2fe:	2400      	movgt	r4, #0
 800a300:	f1a3 0302 	sub.w	r3, r3, #2
 800a304:	bfd8      	it	le
 800a306:	2401      	movle	r4, #1
 800a308:	2b03      	cmp	r3, #3
 800a30a:	f200 808b 	bhi.w	800a424 <_dtoa_r+0x304>
 800a30e:	e8df f003 	tbb	[pc, r3]
 800a312:	4f2d      	.short	0x4f2d
 800a314:	5b4d      	.short	0x5b4d
 800a316:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a31a:	441c      	add	r4, r3
 800a31c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a320:	2b20      	cmp	r3, #32
 800a322:	bfc3      	ittte	gt
 800a324:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a328:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a32c:	fa09 f303 	lslgt.w	r3, r9, r3
 800a330:	f1c3 0320 	rsble	r3, r3, #32
 800a334:	bfc6      	itte	gt
 800a336:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a33a:	4318      	orrgt	r0, r3
 800a33c:	fa06 f003 	lslle.w	r0, r6, r3
 800a340:	f7f6 f850 	bl	80003e4 <__aeabi_ui2d>
 800a344:	2301      	movs	r3, #1
 800a346:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a34a:	3c01      	subs	r4, #1
 800a34c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a34e:	e770      	b.n	800a232 <_dtoa_r+0x112>
 800a350:	2301      	movs	r3, #1
 800a352:	e7b3      	b.n	800a2bc <_dtoa_r+0x19c>
 800a354:	900f      	str	r0, [sp, #60]	; 0x3c
 800a356:	e7b2      	b.n	800a2be <_dtoa_r+0x19e>
 800a358:	9b06      	ldr	r3, [sp, #24]
 800a35a:	eba3 0309 	sub.w	r3, r3, r9
 800a35e:	9306      	str	r3, [sp, #24]
 800a360:	f1c9 0300 	rsb	r3, r9, #0
 800a364:	930a      	str	r3, [sp, #40]	; 0x28
 800a366:	2300      	movs	r3, #0
 800a368:	930e      	str	r3, [sp, #56]	; 0x38
 800a36a:	e7bf      	b.n	800a2ec <_dtoa_r+0x1cc>
 800a36c:	2300      	movs	r3, #0
 800a36e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a370:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a372:	2b00      	cmp	r3, #0
 800a374:	dc59      	bgt.n	800a42a <_dtoa_r+0x30a>
 800a376:	f04f 0b01 	mov.w	fp, #1
 800a37a:	465b      	mov	r3, fp
 800a37c:	f8cd b008 	str.w	fp, [sp, #8]
 800a380:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800a384:	2200      	movs	r2, #0
 800a386:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a388:	6042      	str	r2, [r0, #4]
 800a38a:	2204      	movs	r2, #4
 800a38c:	f102 0614 	add.w	r6, r2, #20
 800a390:	429e      	cmp	r6, r3
 800a392:	6841      	ldr	r1, [r0, #4]
 800a394:	d94f      	bls.n	800a436 <_dtoa_r+0x316>
 800a396:	4628      	mov	r0, r5
 800a398:	f001 fa80 	bl	800b89c <_Balloc>
 800a39c:	9008      	str	r0, [sp, #32]
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	d14d      	bne.n	800a43e <_dtoa_r+0x31e>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a3a8:	4b1d      	ldr	r3, [pc, #116]	; (800a420 <_dtoa_r+0x300>)
 800a3aa:	e6cd      	b.n	800a148 <_dtoa_r+0x28>
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	e7de      	b.n	800a36e <_dtoa_r+0x24e>
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a3b6:	eb09 0b03 	add.w	fp, r9, r3
 800a3ba:	f10b 0301 	add.w	r3, fp, #1
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	9302      	str	r3, [sp, #8]
 800a3c2:	bfb8      	it	lt
 800a3c4:	2301      	movlt	r3, #1
 800a3c6:	e7dd      	b.n	800a384 <_dtoa_r+0x264>
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	e7f2      	b.n	800a3b2 <_dtoa_r+0x292>
 800a3cc:	2401      	movs	r4, #1
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	940b      	str	r4, [sp, #44]	; 0x2c
 800a3d2:	9322      	str	r3, [sp, #136]	; 0x88
 800a3d4:	f04f 3bff 	mov.w	fp, #4294967295
 800a3d8:	2200      	movs	r2, #0
 800a3da:	2312      	movs	r3, #18
 800a3dc:	f8cd b008 	str.w	fp, [sp, #8]
 800a3e0:	9223      	str	r2, [sp, #140]	; 0x8c
 800a3e2:	e7cf      	b.n	800a384 <_dtoa_r+0x264>
 800a3e4:	f3af 8000 	nop.w
 800a3e8:	636f4361 	.word	0x636f4361
 800a3ec:	3fd287a7 	.word	0x3fd287a7
 800a3f0:	8b60c8b3 	.word	0x8b60c8b3
 800a3f4:	3fc68a28 	.word	0x3fc68a28
 800a3f8:	509f79fb 	.word	0x509f79fb
 800a3fc:	3fd34413 	.word	0x3fd34413
 800a400:	0800ca1e 	.word	0x0800ca1e
 800a404:	0800ca35 	.word	0x0800ca35
 800a408:	7ff00000 	.word	0x7ff00000
 800a40c:	0800ca1a 	.word	0x0800ca1a
 800a410:	0800ca11 	.word	0x0800ca11
 800a414:	0800c892 	.word	0x0800c892
 800a418:	3ff80000 	.word	0x3ff80000
 800a41c:	0800cc10 	.word	0x0800cc10
 800a420:	0800ca94 	.word	0x0800ca94
 800a424:	2301      	movs	r3, #1
 800a426:	930b      	str	r3, [sp, #44]	; 0x2c
 800a428:	e7d4      	b.n	800a3d4 <_dtoa_r+0x2b4>
 800a42a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800a42e:	465b      	mov	r3, fp
 800a430:	f8cd b008 	str.w	fp, [sp, #8]
 800a434:	e7a6      	b.n	800a384 <_dtoa_r+0x264>
 800a436:	3101      	adds	r1, #1
 800a438:	6041      	str	r1, [r0, #4]
 800a43a:	0052      	lsls	r2, r2, #1
 800a43c:	e7a6      	b.n	800a38c <_dtoa_r+0x26c>
 800a43e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a440:	9a08      	ldr	r2, [sp, #32]
 800a442:	601a      	str	r2, [r3, #0]
 800a444:	9b02      	ldr	r3, [sp, #8]
 800a446:	2b0e      	cmp	r3, #14
 800a448:	f200 80a8 	bhi.w	800a59c <_dtoa_r+0x47c>
 800a44c:	2c00      	cmp	r4, #0
 800a44e:	f000 80a5 	beq.w	800a59c <_dtoa_r+0x47c>
 800a452:	f1b9 0f00 	cmp.w	r9, #0
 800a456:	dd34      	ble.n	800a4c2 <_dtoa_r+0x3a2>
 800a458:	4a9a      	ldr	r2, [pc, #616]	; (800a6c4 <_dtoa_r+0x5a4>)
 800a45a:	f009 030f 	and.w	r3, r9, #15
 800a45e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a462:	f419 7f80 	tst.w	r9, #256	; 0x100
 800a466:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a46a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a46e:	ea4f 1429 	mov.w	r4, r9, asr #4
 800a472:	d016      	beq.n	800a4a2 <_dtoa_r+0x382>
 800a474:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a478:	4b93      	ldr	r3, [pc, #588]	; (800a6c8 <_dtoa_r+0x5a8>)
 800a47a:	2703      	movs	r7, #3
 800a47c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a480:	f7f6 f954 	bl	800072c <__aeabi_ddiv>
 800a484:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a488:	f004 040f 	and.w	r4, r4, #15
 800a48c:	4e8e      	ldr	r6, [pc, #568]	; (800a6c8 <_dtoa_r+0x5a8>)
 800a48e:	b954      	cbnz	r4, 800a4a6 <_dtoa_r+0x386>
 800a490:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a494:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a498:	f7f6 f948 	bl	800072c <__aeabi_ddiv>
 800a49c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4a0:	e029      	b.n	800a4f6 <_dtoa_r+0x3d6>
 800a4a2:	2702      	movs	r7, #2
 800a4a4:	e7f2      	b.n	800a48c <_dtoa_r+0x36c>
 800a4a6:	07e1      	lsls	r1, r4, #31
 800a4a8:	d508      	bpl.n	800a4bc <_dtoa_r+0x39c>
 800a4aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a4ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a4b2:	f7f6 f811 	bl	80004d8 <__aeabi_dmul>
 800a4b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a4ba:	3701      	adds	r7, #1
 800a4bc:	1064      	asrs	r4, r4, #1
 800a4be:	3608      	adds	r6, #8
 800a4c0:	e7e5      	b.n	800a48e <_dtoa_r+0x36e>
 800a4c2:	f000 80a5 	beq.w	800a610 <_dtoa_r+0x4f0>
 800a4c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a4ca:	f1c9 0400 	rsb	r4, r9, #0
 800a4ce:	4b7d      	ldr	r3, [pc, #500]	; (800a6c4 <_dtoa_r+0x5a4>)
 800a4d0:	f004 020f 	and.w	r2, r4, #15
 800a4d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4dc:	f7f5 fffc 	bl	80004d8 <__aeabi_dmul>
 800a4e0:	2702      	movs	r7, #2
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4e8:	4e77      	ldr	r6, [pc, #476]	; (800a6c8 <_dtoa_r+0x5a8>)
 800a4ea:	1124      	asrs	r4, r4, #4
 800a4ec:	2c00      	cmp	r4, #0
 800a4ee:	f040 8084 	bne.w	800a5fa <_dtoa_r+0x4da>
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d1d2      	bne.n	800a49c <_dtoa_r+0x37c>
 800a4f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	f000 808b 	beq.w	800a614 <_dtoa_r+0x4f4>
 800a4fe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a502:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a506:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a50a:	2200      	movs	r2, #0
 800a50c:	4b6f      	ldr	r3, [pc, #444]	; (800a6cc <_dtoa_r+0x5ac>)
 800a50e:	f7f6 fa55 	bl	80009bc <__aeabi_dcmplt>
 800a512:	2800      	cmp	r0, #0
 800a514:	d07e      	beq.n	800a614 <_dtoa_r+0x4f4>
 800a516:	9b02      	ldr	r3, [sp, #8]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d07b      	beq.n	800a614 <_dtoa_r+0x4f4>
 800a51c:	f1bb 0f00 	cmp.w	fp, #0
 800a520:	dd38      	ble.n	800a594 <_dtoa_r+0x474>
 800a522:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a526:	2200      	movs	r2, #0
 800a528:	4b69      	ldr	r3, [pc, #420]	; (800a6d0 <_dtoa_r+0x5b0>)
 800a52a:	f7f5 ffd5 	bl	80004d8 <__aeabi_dmul>
 800a52e:	465c      	mov	r4, fp
 800a530:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a534:	f109 38ff 	add.w	r8, r9, #4294967295
 800a538:	3701      	adds	r7, #1
 800a53a:	4638      	mov	r0, r7
 800a53c:	f7f5 ff62 	bl	8000404 <__aeabi_i2d>
 800a540:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a544:	f7f5 ffc8 	bl	80004d8 <__aeabi_dmul>
 800a548:	2200      	movs	r2, #0
 800a54a:	4b62      	ldr	r3, [pc, #392]	; (800a6d4 <_dtoa_r+0x5b4>)
 800a54c:	f7f5 fe0e 	bl	800016c <__adddf3>
 800a550:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a554:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a558:	9611      	str	r6, [sp, #68]	; 0x44
 800a55a:	2c00      	cmp	r4, #0
 800a55c:	d15d      	bne.n	800a61a <_dtoa_r+0x4fa>
 800a55e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a562:	2200      	movs	r2, #0
 800a564:	4b5c      	ldr	r3, [pc, #368]	; (800a6d8 <_dtoa_r+0x5b8>)
 800a566:	f7f5 fdff 	bl	8000168 <__aeabi_dsub>
 800a56a:	4602      	mov	r2, r0
 800a56c:	460b      	mov	r3, r1
 800a56e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a572:	4633      	mov	r3, r6
 800a574:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a576:	f7f6 fa3f 	bl	80009f8 <__aeabi_dcmpgt>
 800a57a:	2800      	cmp	r0, #0
 800a57c:	f040 829e 	bne.w	800aabc <_dtoa_r+0x99c>
 800a580:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a584:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a586:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a58a:	f7f6 fa17 	bl	80009bc <__aeabi_dcmplt>
 800a58e:	2800      	cmp	r0, #0
 800a590:	f040 8292 	bne.w	800aab8 <_dtoa_r+0x998>
 800a594:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a598:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a59c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	f2c0 8153 	blt.w	800a84a <_dtoa_r+0x72a>
 800a5a4:	f1b9 0f0e 	cmp.w	r9, #14
 800a5a8:	f300 814f 	bgt.w	800a84a <_dtoa_r+0x72a>
 800a5ac:	4b45      	ldr	r3, [pc, #276]	; (800a6c4 <_dtoa_r+0x5a4>)
 800a5ae:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a5b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a5b6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a5ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	f280 80db 	bge.w	800a778 <_dtoa_r+0x658>
 800a5c2:	9b02      	ldr	r3, [sp, #8]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	f300 80d7 	bgt.w	800a778 <_dtoa_r+0x658>
 800a5ca:	f040 8274 	bne.w	800aab6 <_dtoa_r+0x996>
 800a5ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	4b40      	ldr	r3, [pc, #256]	; (800a6d8 <_dtoa_r+0x5b8>)
 800a5d6:	f7f5 ff7f 	bl	80004d8 <__aeabi_dmul>
 800a5da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5de:	f7f6 fa01 	bl	80009e4 <__aeabi_dcmpge>
 800a5e2:	9c02      	ldr	r4, [sp, #8]
 800a5e4:	4626      	mov	r6, r4
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	f040 824a 	bne.w	800aa80 <_dtoa_r+0x960>
 800a5ec:	2331      	movs	r3, #49	; 0x31
 800a5ee:	9f08      	ldr	r7, [sp, #32]
 800a5f0:	f109 0901 	add.w	r9, r9, #1
 800a5f4:	f807 3b01 	strb.w	r3, [r7], #1
 800a5f8:	e246      	b.n	800aa88 <_dtoa_r+0x968>
 800a5fa:	07e2      	lsls	r2, r4, #31
 800a5fc:	d505      	bpl.n	800a60a <_dtoa_r+0x4ea>
 800a5fe:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a602:	f7f5 ff69 	bl	80004d8 <__aeabi_dmul>
 800a606:	2301      	movs	r3, #1
 800a608:	3701      	adds	r7, #1
 800a60a:	1064      	asrs	r4, r4, #1
 800a60c:	3608      	adds	r6, #8
 800a60e:	e76d      	b.n	800a4ec <_dtoa_r+0x3cc>
 800a610:	2702      	movs	r7, #2
 800a612:	e770      	b.n	800a4f6 <_dtoa_r+0x3d6>
 800a614:	46c8      	mov	r8, r9
 800a616:	9c02      	ldr	r4, [sp, #8]
 800a618:	e78f      	b.n	800a53a <_dtoa_r+0x41a>
 800a61a:	9908      	ldr	r1, [sp, #32]
 800a61c:	4b29      	ldr	r3, [pc, #164]	; (800a6c4 <_dtoa_r+0x5a4>)
 800a61e:	4421      	add	r1, r4
 800a620:	9112      	str	r1, [sp, #72]	; 0x48
 800a622:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a624:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a628:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a62c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a630:	2900      	cmp	r1, #0
 800a632:	d055      	beq.n	800a6e0 <_dtoa_r+0x5c0>
 800a634:	2000      	movs	r0, #0
 800a636:	4929      	ldr	r1, [pc, #164]	; (800a6dc <_dtoa_r+0x5bc>)
 800a638:	f7f6 f878 	bl	800072c <__aeabi_ddiv>
 800a63c:	463b      	mov	r3, r7
 800a63e:	4632      	mov	r2, r6
 800a640:	f7f5 fd92 	bl	8000168 <__aeabi_dsub>
 800a644:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a648:	9f08      	ldr	r7, [sp, #32]
 800a64a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a64e:	f7f6 f9f3 	bl	8000a38 <__aeabi_d2iz>
 800a652:	4604      	mov	r4, r0
 800a654:	f7f5 fed6 	bl	8000404 <__aeabi_i2d>
 800a658:	4602      	mov	r2, r0
 800a65a:	460b      	mov	r3, r1
 800a65c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a660:	f7f5 fd82 	bl	8000168 <__aeabi_dsub>
 800a664:	4602      	mov	r2, r0
 800a666:	460b      	mov	r3, r1
 800a668:	3430      	adds	r4, #48	; 0x30
 800a66a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a66e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a672:	f807 4b01 	strb.w	r4, [r7], #1
 800a676:	f7f6 f9a1 	bl	80009bc <__aeabi_dcmplt>
 800a67a:	2800      	cmp	r0, #0
 800a67c:	d174      	bne.n	800a768 <_dtoa_r+0x648>
 800a67e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a682:	2000      	movs	r0, #0
 800a684:	4911      	ldr	r1, [pc, #68]	; (800a6cc <_dtoa_r+0x5ac>)
 800a686:	f7f5 fd6f 	bl	8000168 <__aeabi_dsub>
 800a68a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a68e:	f7f6 f995 	bl	80009bc <__aeabi_dcmplt>
 800a692:	2800      	cmp	r0, #0
 800a694:	f040 80b6 	bne.w	800a804 <_dtoa_r+0x6e4>
 800a698:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a69a:	429f      	cmp	r7, r3
 800a69c:	f43f af7a 	beq.w	800a594 <_dtoa_r+0x474>
 800a6a0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	4b0a      	ldr	r3, [pc, #40]	; (800a6d0 <_dtoa_r+0x5b0>)
 800a6a8:	f7f5 ff16 	bl	80004d8 <__aeabi_dmul>
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a6b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a6b6:	4b06      	ldr	r3, [pc, #24]	; (800a6d0 <_dtoa_r+0x5b0>)
 800a6b8:	f7f5 ff0e 	bl	80004d8 <__aeabi_dmul>
 800a6bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a6c0:	e7c3      	b.n	800a64a <_dtoa_r+0x52a>
 800a6c2:	bf00      	nop
 800a6c4:	0800cc10 	.word	0x0800cc10
 800a6c8:	0800cbe8 	.word	0x0800cbe8
 800a6cc:	3ff00000 	.word	0x3ff00000
 800a6d0:	40240000 	.word	0x40240000
 800a6d4:	401c0000 	.word	0x401c0000
 800a6d8:	40140000 	.word	0x40140000
 800a6dc:	3fe00000 	.word	0x3fe00000
 800a6e0:	4630      	mov	r0, r6
 800a6e2:	4639      	mov	r1, r7
 800a6e4:	f7f5 fef8 	bl	80004d8 <__aeabi_dmul>
 800a6e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a6ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a6ee:	9c08      	ldr	r4, [sp, #32]
 800a6f0:	9314      	str	r3, [sp, #80]	; 0x50
 800a6f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a6f6:	f7f6 f99f 	bl	8000a38 <__aeabi_d2iz>
 800a6fa:	9015      	str	r0, [sp, #84]	; 0x54
 800a6fc:	f7f5 fe82 	bl	8000404 <__aeabi_i2d>
 800a700:	4602      	mov	r2, r0
 800a702:	460b      	mov	r3, r1
 800a704:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a708:	f7f5 fd2e 	bl	8000168 <__aeabi_dsub>
 800a70c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a70e:	4606      	mov	r6, r0
 800a710:	3330      	adds	r3, #48	; 0x30
 800a712:	f804 3b01 	strb.w	r3, [r4], #1
 800a716:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a718:	460f      	mov	r7, r1
 800a71a:	429c      	cmp	r4, r3
 800a71c:	f04f 0200 	mov.w	r2, #0
 800a720:	d124      	bne.n	800a76c <_dtoa_r+0x64c>
 800a722:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a726:	4bb3      	ldr	r3, [pc, #716]	; (800a9f4 <_dtoa_r+0x8d4>)
 800a728:	f7f5 fd20 	bl	800016c <__adddf3>
 800a72c:	4602      	mov	r2, r0
 800a72e:	460b      	mov	r3, r1
 800a730:	4630      	mov	r0, r6
 800a732:	4639      	mov	r1, r7
 800a734:	f7f6 f960 	bl	80009f8 <__aeabi_dcmpgt>
 800a738:	2800      	cmp	r0, #0
 800a73a:	d162      	bne.n	800a802 <_dtoa_r+0x6e2>
 800a73c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a740:	2000      	movs	r0, #0
 800a742:	49ac      	ldr	r1, [pc, #688]	; (800a9f4 <_dtoa_r+0x8d4>)
 800a744:	f7f5 fd10 	bl	8000168 <__aeabi_dsub>
 800a748:	4602      	mov	r2, r0
 800a74a:	460b      	mov	r3, r1
 800a74c:	4630      	mov	r0, r6
 800a74e:	4639      	mov	r1, r7
 800a750:	f7f6 f934 	bl	80009bc <__aeabi_dcmplt>
 800a754:	2800      	cmp	r0, #0
 800a756:	f43f af1d 	beq.w	800a594 <_dtoa_r+0x474>
 800a75a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a75c:	1e7b      	subs	r3, r7, #1
 800a75e:	9314      	str	r3, [sp, #80]	; 0x50
 800a760:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a764:	2b30      	cmp	r3, #48	; 0x30
 800a766:	d0f8      	beq.n	800a75a <_dtoa_r+0x63a>
 800a768:	46c1      	mov	r9, r8
 800a76a:	e03a      	b.n	800a7e2 <_dtoa_r+0x6c2>
 800a76c:	4ba2      	ldr	r3, [pc, #648]	; (800a9f8 <_dtoa_r+0x8d8>)
 800a76e:	f7f5 feb3 	bl	80004d8 <__aeabi_dmul>
 800a772:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a776:	e7bc      	b.n	800a6f2 <_dtoa_r+0x5d2>
 800a778:	9f08      	ldr	r7, [sp, #32]
 800a77a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a77e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a782:	f7f5 ffd3 	bl	800072c <__aeabi_ddiv>
 800a786:	f7f6 f957 	bl	8000a38 <__aeabi_d2iz>
 800a78a:	4604      	mov	r4, r0
 800a78c:	f7f5 fe3a 	bl	8000404 <__aeabi_i2d>
 800a790:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a794:	f7f5 fea0 	bl	80004d8 <__aeabi_dmul>
 800a798:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a79c:	460b      	mov	r3, r1
 800a79e:	4602      	mov	r2, r0
 800a7a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7a4:	f7f5 fce0 	bl	8000168 <__aeabi_dsub>
 800a7a8:	f807 6b01 	strb.w	r6, [r7], #1
 800a7ac:	9e08      	ldr	r6, [sp, #32]
 800a7ae:	9b02      	ldr	r3, [sp, #8]
 800a7b0:	1bbe      	subs	r6, r7, r6
 800a7b2:	42b3      	cmp	r3, r6
 800a7b4:	d13a      	bne.n	800a82c <_dtoa_r+0x70c>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	f7f5 fcd7 	bl	800016c <__adddf3>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a7c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a7ca:	f7f6 f915 	bl	80009f8 <__aeabi_dcmpgt>
 800a7ce:	bb58      	cbnz	r0, 800a828 <_dtoa_r+0x708>
 800a7d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a7d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7d8:	f7f6 f8e6 	bl	80009a8 <__aeabi_dcmpeq>
 800a7dc:	b108      	cbz	r0, 800a7e2 <_dtoa_r+0x6c2>
 800a7de:	07e1      	lsls	r1, r4, #31
 800a7e0:	d422      	bmi.n	800a828 <_dtoa_r+0x708>
 800a7e2:	4628      	mov	r0, r5
 800a7e4:	4651      	mov	r1, sl
 800a7e6:	f001 f899 	bl	800b91c <_Bfree>
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	703b      	strb	r3, [r7, #0]
 800a7ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a7f0:	f109 0001 	add.w	r0, r9, #1
 800a7f4:	6018      	str	r0, [r3, #0]
 800a7f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	f43f acdf 	beq.w	800a1bc <_dtoa_r+0x9c>
 800a7fe:	601f      	str	r7, [r3, #0]
 800a800:	e4dc      	b.n	800a1bc <_dtoa_r+0x9c>
 800a802:	4627      	mov	r7, r4
 800a804:	463b      	mov	r3, r7
 800a806:	461f      	mov	r7, r3
 800a808:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a80c:	2a39      	cmp	r2, #57	; 0x39
 800a80e:	d107      	bne.n	800a820 <_dtoa_r+0x700>
 800a810:	9a08      	ldr	r2, [sp, #32]
 800a812:	429a      	cmp	r2, r3
 800a814:	d1f7      	bne.n	800a806 <_dtoa_r+0x6e6>
 800a816:	2230      	movs	r2, #48	; 0x30
 800a818:	9908      	ldr	r1, [sp, #32]
 800a81a:	f108 0801 	add.w	r8, r8, #1
 800a81e:	700a      	strb	r2, [r1, #0]
 800a820:	781a      	ldrb	r2, [r3, #0]
 800a822:	3201      	adds	r2, #1
 800a824:	701a      	strb	r2, [r3, #0]
 800a826:	e79f      	b.n	800a768 <_dtoa_r+0x648>
 800a828:	46c8      	mov	r8, r9
 800a82a:	e7eb      	b.n	800a804 <_dtoa_r+0x6e4>
 800a82c:	2200      	movs	r2, #0
 800a82e:	4b72      	ldr	r3, [pc, #456]	; (800a9f8 <_dtoa_r+0x8d8>)
 800a830:	f7f5 fe52 	bl	80004d8 <__aeabi_dmul>
 800a834:	4602      	mov	r2, r0
 800a836:	460b      	mov	r3, r1
 800a838:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a83c:	2200      	movs	r2, #0
 800a83e:	2300      	movs	r3, #0
 800a840:	f7f6 f8b2 	bl	80009a8 <__aeabi_dcmpeq>
 800a844:	2800      	cmp	r0, #0
 800a846:	d098      	beq.n	800a77a <_dtoa_r+0x65a>
 800a848:	e7cb      	b.n	800a7e2 <_dtoa_r+0x6c2>
 800a84a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a84c:	2a00      	cmp	r2, #0
 800a84e:	f000 80cd 	beq.w	800a9ec <_dtoa_r+0x8cc>
 800a852:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a854:	2a01      	cmp	r2, #1
 800a856:	f300 80af 	bgt.w	800a9b8 <_dtoa_r+0x898>
 800a85a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a85c:	2a00      	cmp	r2, #0
 800a85e:	f000 80a7 	beq.w	800a9b0 <_dtoa_r+0x890>
 800a862:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a866:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a868:	9f06      	ldr	r7, [sp, #24]
 800a86a:	9a06      	ldr	r2, [sp, #24]
 800a86c:	2101      	movs	r1, #1
 800a86e:	441a      	add	r2, r3
 800a870:	9206      	str	r2, [sp, #24]
 800a872:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a874:	4628      	mov	r0, r5
 800a876:	441a      	add	r2, r3
 800a878:	9209      	str	r2, [sp, #36]	; 0x24
 800a87a:	f001 f953 	bl	800bb24 <__i2b>
 800a87e:	4606      	mov	r6, r0
 800a880:	2f00      	cmp	r7, #0
 800a882:	dd0c      	ble.n	800a89e <_dtoa_r+0x77e>
 800a884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a886:	2b00      	cmp	r3, #0
 800a888:	dd09      	ble.n	800a89e <_dtoa_r+0x77e>
 800a88a:	42bb      	cmp	r3, r7
 800a88c:	bfa8      	it	ge
 800a88e:	463b      	movge	r3, r7
 800a890:	9a06      	ldr	r2, [sp, #24]
 800a892:	1aff      	subs	r7, r7, r3
 800a894:	1ad2      	subs	r2, r2, r3
 800a896:	9206      	str	r2, [sp, #24]
 800a898:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a89a:	1ad3      	subs	r3, r2, r3
 800a89c:	9309      	str	r3, [sp, #36]	; 0x24
 800a89e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8a0:	b1f3      	cbz	r3, 800a8e0 <_dtoa_r+0x7c0>
 800a8a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	f000 80a9 	beq.w	800a9fc <_dtoa_r+0x8dc>
 800a8aa:	2c00      	cmp	r4, #0
 800a8ac:	dd10      	ble.n	800a8d0 <_dtoa_r+0x7b0>
 800a8ae:	4631      	mov	r1, r6
 800a8b0:	4622      	mov	r2, r4
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	f001 f9f0 	bl	800bc98 <__pow5mult>
 800a8b8:	4652      	mov	r2, sl
 800a8ba:	4601      	mov	r1, r0
 800a8bc:	4606      	mov	r6, r0
 800a8be:	4628      	mov	r0, r5
 800a8c0:	f001 f946 	bl	800bb50 <__multiply>
 800a8c4:	4680      	mov	r8, r0
 800a8c6:	4651      	mov	r1, sl
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	f001 f827 	bl	800b91c <_Bfree>
 800a8ce:	46c2      	mov	sl, r8
 800a8d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8d2:	1b1a      	subs	r2, r3, r4
 800a8d4:	d004      	beq.n	800a8e0 <_dtoa_r+0x7c0>
 800a8d6:	4651      	mov	r1, sl
 800a8d8:	4628      	mov	r0, r5
 800a8da:	f001 f9dd 	bl	800bc98 <__pow5mult>
 800a8de:	4682      	mov	sl, r0
 800a8e0:	2101      	movs	r1, #1
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	f001 f91e 	bl	800bb24 <__i2b>
 800a8e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a8ea:	4604      	mov	r4, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	f340 8087 	ble.w	800aa00 <_dtoa_r+0x8e0>
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	4601      	mov	r1, r0
 800a8f6:	4628      	mov	r0, r5
 800a8f8:	f001 f9ce 	bl	800bc98 <__pow5mult>
 800a8fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8fe:	4604      	mov	r4, r0
 800a900:	2b01      	cmp	r3, #1
 800a902:	f340 8080 	ble.w	800aa06 <_dtoa_r+0x8e6>
 800a906:	f04f 0800 	mov.w	r8, #0
 800a90a:	6923      	ldr	r3, [r4, #16]
 800a90c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a910:	6918      	ldr	r0, [r3, #16]
 800a912:	f001 f8b9 	bl	800ba88 <__hi0bits>
 800a916:	f1c0 0020 	rsb	r0, r0, #32
 800a91a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a91c:	4418      	add	r0, r3
 800a91e:	f010 001f 	ands.w	r0, r0, #31
 800a922:	f000 8092 	beq.w	800aa4a <_dtoa_r+0x92a>
 800a926:	f1c0 0320 	rsb	r3, r0, #32
 800a92a:	2b04      	cmp	r3, #4
 800a92c:	f340 808a 	ble.w	800aa44 <_dtoa_r+0x924>
 800a930:	f1c0 001c 	rsb	r0, r0, #28
 800a934:	9b06      	ldr	r3, [sp, #24]
 800a936:	4407      	add	r7, r0
 800a938:	4403      	add	r3, r0
 800a93a:	9306      	str	r3, [sp, #24]
 800a93c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a93e:	4403      	add	r3, r0
 800a940:	9309      	str	r3, [sp, #36]	; 0x24
 800a942:	9b06      	ldr	r3, [sp, #24]
 800a944:	2b00      	cmp	r3, #0
 800a946:	dd05      	ble.n	800a954 <_dtoa_r+0x834>
 800a948:	4651      	mov	r1, sl
 800a94a:	461a      	mov	r2, r3
 800a94c:	4628      	mov	r0, r5
 800a94e:	f001 f9fd 	bl	800bd4c <__lshift>
 800a952:	4682      	mov	sl, r0
 800a954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a956:	2b00      	cmp	r3, #0
 800a958:	dd05      	ble.n	800a966 <_dtoa_r+0x846>
 800a95a:	4621      	mov	r1, r4
 800a95c:	461a      	mov	r2, r3
 800a95e:	4628      	mov	r0, r5
 800a960:	f001 f9f4 	bl	800bd4c <__lshift>
 800a964:	4604      	mov	r4, r0
 800a966:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d070      	beq.n	800aa4e <_dtoa_r+0x92e>
 800a96c:	4621      	mov	r1, r4
 800a96e:	4650      	mov	r0, sl
 800a970:	f001 fa58 	bl	800be24 <__mcmp>
 800a974:	2800      	cmp	r0, #0
 800a976:	da6a      	bge.n	800aa4e <_dtoa_r+0x92e>
 800a978:	2300      	movs	r3, #0
 800a97a:	4651      	mov	r1, sl
 800a97c:	220a      	movs	r2, #10
 800a97e:	4628      	mov	r0, r5
 800a980:	f000 ffee 	bl	800b960 <__multadd>
 800a984:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a986:	4682      	mov	sl, r0
 800a988:	f109 39ff 	add.w	r9, r9, #4294967295
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	f000 8193 	beq.w	800acb8 <_dtoa_r+0xb98>
 800a992:	4631      	mov	r1, r6
 800a994:	2300      	movs	r3, #0
 800a996:	220a      	movs	r2, #10
 800a998:	4628      	mov	r0, r5
 800a99a:	f000 ffe1 	bl	800b960 <__multadd>
 800a99e:	f1bb 0f00 	cmp.w	fp, #0
 800a9a2:	4606      	mov	r6, r0
 800a9a4:	f300 8093 	bgt.w	800aace <_dtoa_r+0x9ae>
 800a9a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a9aa:	2b02      	cmp	r3, #2
 800a9ac:	dc57      	bgt.n	800aa5e <_dtoa_r+0x93e>
 800a9ae:	e08e      	b.n	800aace <_dtoa_r+0x9ae>
 800a9b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a9b2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a9b6:	e756      	b.n	800a866 <_dtoa_r+0x746>
 800a9b8:	9b02      	ldr	r3, [sp, #8]
 800a9ba:	1e5c      	subs	r4, r3, #1
 800a9bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9be:	42a3      	cmp	r3, r4
 800a9c0:	bfb7      	itett	lt
 800a9c2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a9c4:	1b1c      	subge	r4, r3, r4
 800a9c6:	1ae2      	sublt	r2, r4, r3
 800a9c8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a9ca:	bfbe      	ittt	lt
 800a9cc:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a9ce:	189b      	addlt	r3, r3, r2
 800a9d0:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a9d2:	9b02      	ldr	r3, [sp, #8]
 800a9d4:	bfb8      	it	lt
 800a9d6:	2400      	movlt	r4, #0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	bfbb      	ittet	lt
 800a9dc:	9b06      	ldrlt	r3, [sp, #24]
 800a9de:	9a02      	ldrlt	r2, [sp, #8]
 800a9e0:	9f06      	ldrge	r7, [sp, #24]
 800a9e2:	1a9f      	sublt	r7, r3, r2
 800a9e4:	bfac      	ite	ge
 800a9e6:	9b02      	ldrge	r3, [sp, #8]
 800a9e8:	2300      	movlt	r3, #0
 800a9ea:	e73e      	b.n	800a86a <_dtoa_r+0x74a>
 800a9ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a9ee:	9f06      	ldr	r7, [sp, #24]
 800a9f0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a9f2:	e745      	b.n	800a880 <_dtoa_r+0x760>
 800a9f4:	3fe00000 	.word	0x3fe00000
 800a9f8:	40240000 	.word	0x40240000
 800a9fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9fe:	e76a      	b.n	800a8d6 <_dtoa_r+0x7b6>
 800aa00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	dc19      	bgt.n	800aa3a <_dtoa_r+0x91a>
 800aa06:	9b04      	ldr	r3, [sp, #16]
 800aa08:	b9bb      	cbnz	r3, 800aa3a <_dtoa_r+0x91a>
 800aa0a:	9b05      	ldr	r3, [sp, #20]
 800aa0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa10:	b99b      	cbnz	r3, 800aa3a <_dtoa_r+0x91a>
 800aa12:	9b05      	ldr	r3, [sp, #20]
 800aa14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa18:	0d1b      	lsrs	r3, r3, #20
 800aa1a:	051b      	lsls	r3, r3, #20
 800aa1c:	b183      	cbz	r3, 800aa40 <_dtoa_r+0x920>
 800aa1e:	f04f 0801 	mov.w	r8, #1
 800aa22:	9b06      	ldr	r3, [sp, #24]
 800aa24:	3301      	adds	r3, #1
 800aa26:	9306      	str	r3, [sp, #24]
 800aa28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	9309      	str	r3, [sp, #36]	; 0x24
 800aa2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	f47f af6a 	bne.w	800a90a <_dtoa_r+0x7ea>
 800aa36:	2001      	movs	r0, #1
 800aa38:	e76f      	b.n	800a91a <_dtoa_r+0x7fa>
 800aa3a:	f04f 0800 	mov.w	r8, #0
 800aa3e:	e7f6      	b.n	800aa2e <_dtoa_r+0x90e>
 800aa40:	4698      	mov	r8, r3
 800aa42:	e7f4      	b.n	800aa2e <_dtoa_r+0x90e>
 800aa44:	f43f af7d 	beq.w	800a942 <_dtoa_r+0x822>
 800aa48:	4618      	mov	r0, r3
 800aa4a:	301c      	adds	r0, #28
 800aa4c:	e772      	b.n	800a934 <_dtoa_r+0x814>
 800aa4e:	9b02      	ldr	r3, [sp, #8]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	dc36      	bgt.n	800aac2 <_dtoa_r+0x9a2>
 800aa54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	dd33      	ble.n	800aac2 <_dtoa_r+0x9a2>
 800aa5a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800aa5e:	f1bb 0f00 	cmp.w	fp, #0
 800aa62:	d10d      	bne.n	800aa80 <_dtoa_r+0x960>
 800aa64:	4621      	mov	r1, r4
 800aa66:	465b      	mov	r3, fp
 800aa68:	2205      	movs	r2, #5
 800aa6a:	4628      	mov	r0, r5
 800aa6c:	f000 ff78 	bl	800b960 <__multadd>
 800aa70:	4601      	mov	r1, r0
 800aa72:	4604      	mov	r4, r0
 800aa74:	4650      	mov	r0, sl
 800aa76:	f001 f9d5 	bl	800be24 <__mcmp>
 800aa7a:	2800      	cmp	r0, #0
 800aa7c:	f73f adb6 	bgt.w	800a5ec <_dtoa_r+0x4cc>
 800aa80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aa82:	9f08      	ldr	r7, [sp, #32]
 800aa84:	ea6f 0903 	mvn.w	r9, r3
 800aa88:	f04f 0800 	mov.w	r8, #0
 800aa8c:	4621      	mov	r1, r4
 800aa8e:	4628      	mov	r0, r5
 800aa90:	f000 ff44 	bl	800b91c <_Bfree>
 800aa94:	2e00      	cmp	r6, #0
 800aa96:	f43f aea4 	beq.w	800a7e2 <_dtoa_r+0x6c2>
 800aa9a:	f1b8 0f00 	cmp.w	r8, #0
 800aa9e:	d005      	beq.n	800aaac <_dtoa_r+0x98c>
 800aaa0:	45b0      	cmp	r8, r6
 800aaa2:	d003      	beq.n	800aaac <_dtoa_r+0x98c>
 800aaa4:	4641      	mov	r1, r8
 800aaa6:	4628      	mov	r0, r5
 800aaa8:	f000 ff38 	bl	800b91c <_Bfree>
 800aaac:	4631      	mov	r1, r6
 800aaae:	4628      	mov	r0, r5
 800aab0:	f000 ff34 	bl	800b91c <_Bfree>
 800aab4:	e695      	b.n	800a7e2 <_dtoa_r+0x6c2>
 800aab6:	2400      	movs	r4, #0
 800aab8:	4626      	mov	r6, r4
 800aaba:	e7e1      	b.n	800aa80 <_dtoa_r+0x960>
 800aabc:	46c1      	mov	r9, r8
 800aabe:	4626      	mov	r6, r4
 800aac0:	e594      	b.n	800a5ec <_dtoa_r+0x4cc>
 800aac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aac4:	f8dd b008 	ldr.w	fp, [sp, #8]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	f000 80fc 	beq.w	800acc6 <_dtoa_r+0xba6>
 800aace:	2f00      	cmp	r7, #0
 800aad0:	dd05      	ble.n	800aade <_dtoa_r+0x9be>
 800aad2:	4631      	mov	r1, r6
 800aad4:	463a      	mov	r2, r7
 800aad6:	4628      	mov	r0, r5
 800aad8:	f001 f938 	bl	800bd4c <__lshift>
 800aadc:	4606      	mov	r6, r0
 800aade:	f1b8 0f00 	cmp.w	r8, #0
 800aae2:	d05c      	beq.n	800ab9e <_dtoa_r+0xa7e>
 800aae4:	4628      	mov	r0, r5
 800aae6:	6871      	ldr	r1, [r6, #4]
 800aae8:	f000 fed8 	bl	800b89c <_Balloc>
 800aaec:	4607      	mov	r7, r0
 800aaee:	b928      	cbnz	r0, 800aafc <_dtoa_r+0x9dc>
 800aaf0:	4602      	mov	r2, r0
 800aaf2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800aaf6:	4b7e      	ldr	r3, [pc, #504]	; (800acf0 <_dtoa_r+0xbd0>)
 800aaf8:	f7ff bb26 	b.w	800a148 <_dtoa_r+0x28>
 800aafc:	6932      	ldr	r2, [r6, #16]
 800aafe:	f106 010c 	add.w	r1, r6, #12
 800ab02:	3202      	adds	r2, #2
 800ab04:	0092      	lsls	r2, r2, #2
 800ab06:	300c      	adds	r0, #12
 800ab08:	f7fd fa54 	bl	8007fb4 <memcpy>
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	4639      	mov	r1, r7
 800ab10:	4628      	mov	r0, r5
 800ab12:	f001 f91b 	bl	800bd4c <__lshift>
 800ab16:	46b0      	mov	r8, r6
 800ab18:	4606      	mov	r6, r0
 800ab1a:	9b08      	ldr	r3, [sp, #32]
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	9302      	str	r3, [sp, #8]
 800ab20:	9b08      	ldr	r3, [sp, #32]
 800ab22:	445b      	add	r3, fp
 800ab24:	930a      	str	r3, [sp, #40]	; 0x28
 800ab26:	9b04      	ldr	r3, [sp, #16]
 800ab28:	f003 0301 	and.w	r3, r3, #1
 800ab2c:	9309      	str	r3, [sp, #36]	; 0x24
 800ab2e:	9b02      	ldr	r3, [sp, #8]
 800ab30:	4621      	mov	r1, r4
 800ab32:	4650      	mov	r0, sl
 800ab34:	f103 3bff 	add.w	fp, r3, #4294967295
 800ab38:	f7ff fa63 	bl	800a002 <quorem>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	4641      	mov	r1, r8
 800ab40:	3330      	adds	r3, #48	; 0x30
 800ab42:	9004      	str	r0, [sp, #16]
 800ab44:	4650      	mov	r0, sl
 800ab46:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab48:	f001 f96c 	bl	800be24 <__mcmp>
 800ab4c:	4632      	mov	r2, r6
 800ab4e:	9006      	str	r0, [sp, #24]
 800ab50:	4621      	mov	r1, r4
 800ab52:	4628      	mov	r0, r5
 800ab54:	f001 f982 	bl	800be5c <__mdiff>
 800ab58:	68c2      	ldr	r2, [r0, #12]
 800ab5a:	4607      	mov	r7, r0
 800ab5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab5e:	bb02      	cbnz	r2, 800aba2 <_dtoa_r+0xa82>
 800ab60:	4601      	mov	r1, r0
 800ab62:	4650      	mov	r0, sl
 800ab64:	f001 f95e 	bl	800be24 <__mcmp>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab6c:	4639      	mov	r1, r7
 800ab6e:	4628      	mov	r0, r5
 800ab70:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800ab74:	f000 fed2 	bl	800b91c <_Bfree>
 800ab78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab7c:	9f02      	ldr	r7, [sp, #8]
 800ab7e:	ea43 0102 	orr.w	r1, r3, r2
 800ab82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab84:	430b      	orrs	r3, r1
 800ab86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab88:	d10d      	bne.n	800aba6 <_dtoa_r+0xa86>
 800ab8a:	2b39      	cmp	r3, #57	; 0x39
 800ab8c:	d027      	beq.n	800abde <_dtoa_r+0xabe>
 800ab8e:	9a06      	ldr	r2, [sp, #24]
 800ab90:	2a00      	cmp	r2, #0
 800ab92:	dd01      	ble.n	800ab98 <_dtoa_r+0xa78>
 800ab94:	9b04      	ldr	r3, [sp, #16]
 800ab96:	3331      	adds	r3, #49	; 0x31
 800ab98:	f88b 3000 	strb.w	r3, [fp]
 800ab9c:	e776      	b.n	800aa8c <_dtoa_r+0x96c>
 800ab9e:	4630      	mov	r0, r6
 800aba0:	e7b9      	b.n	800ab16 <_dtoa_r+0x9f6>
 800aba2:	2201      	movs	r2, #1
 800aba4:	e7e2      	b.n	800ab6c <_dtoa_r+0xa4c>
 800aba6:	9906      	ldr	r1, [sp, #24]
 800aba8:	2900      	cmp	r1, #0
 800abaa:	db04      	blt.n	800abb6 <_dtoa_r+0xa96>
 800abac:	9822      	ldr	r0, [sp, #136]	; 0x88
 800abae:	4301      	orrs	r1, r0
 800abb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abb2:	4301      	orrs	r1, r0
 800abb4:	d120      	bne.n	800abf8 <_dtoa_r+0xad8>
 800abb6:	2a00      	cmp	r2, #0
 800abb8:	ddee      	ble.n	800ab98 <_dtoa_r+0xa78>
 800abba:	4651      	mov	r1, sl
 800abbc:	2201      	movs	r2, #1
 800abbe:	4628      	mov	r0, r5
 800abc0:	9302      	str	r3, [sp, #8]
 800abc2:	f001 f8c3 	bl	800bd4c <__lshift>
 800abc6:	4621      	mov	r1, r4
 800abc8:	4682      	mov	sl, r0
 800abca:	f001 f92b 	bl	800be24 <__mcmp>
 800abce:	2800      	cmp	r0, #0
 800abd0:	9b02      	ldr	r3, [sp, #8]
 800abd2:	dc02      	bgt.n	800abda <_dtoa_r+0xaba>
 800abd4:	d1e0      	bne.n	800ab98 <_dtoa_r+0xa78>
 800abd6:	07da      	lsls	r2, r3, #31
 800abd8:	d5de      	bpl.n	800ab98 <_dtoa_r+0xa78>
 800abda:	2b39      	cmp	r3, #57	; 0x39
 800abdc:	d1da      	bne.n	800ab94 <_dtoa_r+0xa74>
 800abde:	2339      	movs	r3, #57	; 0x39
 800abe0:	f88b 3000 	strb.w	r3, [fp]
 800abe4:	463b      	mov	r3, r7
 800abe6:	461f      	mov	r7, r3
 800abe8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800abec:	3b01      	subs	r3, #1
 800abee:	2a39      	cmp	r2, #57	; 0x39
 800abf0:	d050      	beq.n	800ac94 <_dtoa_r+0xb74>
 800abf2:	3201      	adds	r2, #1
 800abf4:	701a      	strb	r2, [r3, #0]
 800abf6:	e749      	b.n	800aa8c <_dtoa_r+0x96c>
 800abf8:	2a00      	cmp	r2, #0
 800abfa:	dd03      	ble.n	800ac04 <_dtoa_r+0xae4>
 800abfc:	2b39      	cmp	r3, #57	; 0x39
 800abfe:	d0ee      	beq.n	800abde <_dtoa_r+0xabe>
 800ac00:	3301      	adds	r3, #1
 800ac02:	e7c9      	b.n	800ab98 <_dtoa_r+0xa78>
 800ac04:	9a02      	ldr	r2, [sp, #8]
 800ac06:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ac08:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ac0c:	428a      	cmp	r2, r1
 800ac0e:	d02a      	beq.n	800ac66 <_dtoa_r+0xb46>
 800ac10:	4651      	mov	r1, sl
 800ac12:	2300      	movs	r3, #0
 800ac14:	220a      	movs	r2, #10
 800ac16:	4628      	mov	r0, r5
 800ac18:	f000 fea2 	bl	800b960 <__multadd>
 800ac1c:	45b0      	cmp	r8, r6
 800ac1e:	4682      	mov	sl, r0
 800ac20:	f04f 0300 	mov.w	r3, #0
 800ac24:	f04f 020a 	mov.w	r2, #10
 800ac28:	4641      	mov	r1, r8
 800ac2a:	4628      	mov	r0, r5
 800ac2c:	d107      	bne.n	800ac3e <_dtoa_r+0xb1e>
 800ac2e:	f000 fe97 	bl	800b960 <__multadd>
 800ac32:	4680      	mov	r8, r0
 800ac34:	4606      	mov	r6, r0
 800ac36:	9b02      	ldr	r3, [sp, #8]
 800ac38:	3301      	adds	r3, #1
 800ac3a:	9302      	str	r3, [sp, #8]
 800ac3c:	e777      	b.n	800ab2e <_dtoa_r+0xa0e>
 800ac3e:	f000 fe8f 	bl	800b960 <__multadd>
 800ac42:	4631      	mov	r1, r6
 800ac44:	4680      	mov	r8, r0
 800ac46:	2300      	movs	r3, #0
 800ac48:	220a      	movs	r2, #10
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	f000 fe88 	bl	800b960 <__multadd>
 800ac50:	4606      	mov	r6, r0
 800ac52:	e7f0      	b.n	800ac36 <_dtoa_r+0xb16>
 800ac54:	f1bb 0f00 	cmp.w	fp, #0
 800ac58:	bfcc      	ite	gt
 800ac5a:	465f      	movgt	r7, fp
 800ac5c:	2701      	movle	r7, #1
 800ac5e:	f04f 0800 	mov.w	r8, #0
 800ac62:	9a08      	ldr	r2, [sp, #32]
 800ac64:	4417      	add	r7, r2
 800ac66:	4651      	mov	r1, sl
 800ac68:	2201      	movs	r2, #1
 800ac6a:	4628      	mov	r0, r5
 800ac6c:	9302      	str	r3, [sp, #8]
 800ac6e:	f001 f86d 	bl	800bd4c <__lshift>
 800ac72:	4621      	mov	r1, r4
 800ac74:	4682      	mov	sl, r0
 800ac76:	f001 f8d5 	bl	800be24 <__mcmp>
 800ac7a:	2800      	cmp	r0, #0
 800ac7c:	dcb2      	bgt.n	800abe4 <_dtoa_r+0xac4>
 800ac7e:	d102      	bne.n	800ac86 <_dtoa_r+0xb66>
 800ac80:	9b02      	ldr	r3, [sp, #8]
 800ac82:	07db      	lsls	r3, r3, #31
 800ac84:	d4ae      	bmi.n	800abe4 <_dtoa_r+0xac4>
 800ac86:	463b      	mov	r3, r7
 800ac88:	461f      	mov	r7, r3
 800ac8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac8e:	2a30      	cmp	r2, #48	; 0x30
 800ac90:	d0fa      	beq.n	800ac88 <_dtoa_r+0xb68>
 800ac92:	e6fb      	b.n	800aa8c <_dtoa_r+0x96c>
 800ac94:	9a08      	ldr	r2, [sp, #32]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d1a5      	bne.n	800abe6 <_dtoa_r+0xac6>
 800ac9a:	2331      	movs	r3, #49	; 0x31
 800ac9c:	f109 0901 	add.w	r9, r9, #1
 800aca0:	7013      	strb	r3, [r2, #0]
 800aca2:	e6f3      	b.n	800aa8c <_dtoa_r+0x96c>
 800aca4:	4b13      	ldr	r3, [pc, #76]	; (800acf4 <_dtoa_r+0xbd4>)
 800aca6:	f7ff baa7 	b.w	800a1f8 <_dtoa_r+0xd8>
 800acaa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800acac:	2b00      	cmp	r3, #0
 800acae:	f47f aa80 	bne.w	800a1b2 <_dtoa_r+0x92>
 800acb2:	4b11      	ldr	r3, [pc, #68]	; (800acf8 <_dtoa_r+0xbd8>)
 800acb4:	f7ff baa0 	b.w	800a1f8 <_dtoa_r+0xd8>
 800acb8:	f1bb 0f00 	cmp.w	fp, #0
 800acbc:	dc03      	bgt.n	800acc6 <_dtoa_r+0xba6>
 800acbe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800acc0:	2b02      	cmp	r3, #2
 800acc2:	f73f aecc 	bgt.w	800aa5e <_dtoa_r+0x93e>
 800acc6:	9f08      	ldr	r7, [sp, #32]
 800acc8:	4621      	mov	r1, r4
 800acca:	4650      	mov	r0, sl
 800accc:	f7ff f999 	bl	800a002 <quorem>
 800acd0:	9a08      	ldr	r2, [sp, #32]
 800acd2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800acd6:	f807 3b01 	strb.w	r3, [r7], #1
 800acda:	1aba      	subs	r2, r7, r2
 800acdc:	4593      	cmp	fp, r2
 800acde:	ddb9      	ble.n	800ac54 <_dtoa_r+0xb34>
 800ace0:	4651      	mov	r1, sl
 800ace2:	2300      	movs	r3, #0
 800ace4:	220a      	movs	r2, #10
 800ace6:	4628      	mov	r0, r5
 800ace8:	f000 fe3a 	bl	800b960 <__multadd>
 800acec:	4682      	mov	sl, r0
 800acee:	e7eb      	b.n	800acc8 <_dtoa_r+0xba8>
 800acf0:	0800ca94 	.word	0x0800ca94
 800acf4:	0800c891 	.word	0x0800c891
 800acf8:	0800ca11 	.word	0x0800ca11

0800acfc <__sflush_r>:
 800acfc:	898a      	ldrh	r2, [r1, #12]
 800acfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad02:	4605      	mov	r5, r0
 800ad04:	0710      	lsls	r0, r2, #28
 800ad06:	460c      	mov	r4, r1
 800ad08:	d458      	bmi.n	800adbc <__sflush_r+0xc0>
 800ad0a:	684b      	ldr	r3, [r1, #4]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	dc05      	bgt.n	800ad1c <__sflush_r+0x20>
 800ad10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	dc02      	bgt.n	800ad1c <__sflush_r+0x20>
 800ad16:	2000      	movs	r0, #0
 800ad18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad1e:	2e00      	cmp	r6, #0
 800ad20:	d0f9      	beq.n	800ad16 <__sflush_r+0x1a>
 800ad22:	2300      	movs	r3, #0
 800ad24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad28:	682f      	ldr	r7, [r5, #0]
 800ad2a:	602b      	str	r3, [r5, #0]
 800ad2c:	d032      	beq.n	800ad94 <__sflush_r+0x98>
 800ad2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad30:	89a3      	ldrh	r3, [r4, #12]
 800ad32:	075a      	lsls	r2, r3, #29
 800ad34:	d505      	bpl.n	800ad42 <__sflush_r+0x46>
 800ad36:	6863      	ldr	r3, [r4, #4]
 800ad38:	1ac0      	subs	r0, r0, r3
 800ad3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad3c:	b10b      	cbz	r3, 800ad42 <__sflush_r+0x46>
 800ad3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad40:	1ac0      	subs	r0, r0, r3
 800ad42:	2300      	movs	r3, #0
 800ad44:	4602      	mov	r2, r0
 800ad46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad48:	4628      	mov	r0, r5
 800ad4a:	6a21      	ldr	r1, [r4, #32]
 800ad4c:	47b0      	blx	r6
 800ad4e:	1c43      	adds	r3, r0, #1
 800ad50:	89a3      	ldrh	r3, [r4, #12]
 800ad52:	d106      	bne.n	800ad62 <__sflush_r+0x66>
 800ad54:	6829      	ldr	r1, [r5, #0]
 800ad56:	291d      	cmp	r1, #29
 800ad58:	d82c      	bhi.n	800adb4 <__sflush_r+0xb8>
 800ad5a:	4a2a      	ldr	r2, [pc, #168]	; (800ae04 <__sflush_r+0x108>)
 800ad5c:	40ca      	lsrs	r2, r1
 800ad5e:	07d6      	lsls	r6, r2, #31
 800ad60:	d528      	bpl.n	800adb4 <__sflush_r+0xb8>
 800ad62:	2200      	movs	r2, #0
 800ad64:	6062      	str	r2, [r4, #4]
 800ad66:	6922      	ldr	r2, [r4, #16]
 800ad68:	04d9      	lsls	r1, r3, #19
 800ad6a:	6022      	str	r2, [r4, #0]
 800ad6c:	d504      	bpl.n	800ad78 <__sflush_r+0x7c>
 800ad6e:	1c42      	adds	r2, r0, #1
 800ad70:	d101      	bne.n	800ad76 <__sflush_r+0x7a>
 800ad72:	682b      	ldr	r3, [r5, #0]
 800ad74:	b903      	cbnz	r3, 800ad78 <__sflush_r+0x7c>
 800ad76:	6560      	str	r0, [r4, #84]	; 0x54
 800ad78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad7a:	602f      	str	r7, [r5, #0]
 800ad7c:	2900      	cmp	r1, #0
 800ad7e:	d0ca      	beq.n	800ad16 <__sflush_r+0x1a>
 800ad80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad84:	4299      	cmp	r1, r3
 800ad86:	d002      	beq.n	800ad8e <__sflush_r+0x92>
 800ad88:	4628      	mov	r0, r5
 800ad8a:	f7fd f929 	bl	8007fe0 <_free_r>
 800ad8e:	2000      	movs	r0, #0
 800ad90:	6360      	str	r0, [r4, #52]	; 0x34
 800ad92:	e7c1      	b.n	800ad18 <__sflush_r+0x1c>
 800ad94:	6a21      	ldr	r1, [r4, #32]
 800ad96:	2301      	movs	r3, #1
 800ad98:	4628      	mov	r0, r5
 800ad9a:	47b0      	blx	r6
 800ad9c:	1c41      	adds	r1, r0, #1
 800ad9e:	d1c7      	bne.n	800ad30 <__sflush_r+0x34>
 800ada0:	682b      	ldr	r3, [r5, #0]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d0c4      	beq.n	800ad30 <__sflush_r+0x34>
 800ada6:	2b1d      	cmp	r3, #29
 800ada8:	d001      	beq.n	800adae <__sflush_r+0xb2>
 800adaa:	2b16      	cmp	r3, #22
 800adac:	d101      	bne.n	800adb2 <__sflush_r+0xb6>
 800adae:	602f      	str	r7, [r5, #0]
 800adb0:	e7b1      	b.n	800ad16 <__sflush_r+0x1a>
 800adb2:	89a3      	ldrh	r3, [r4, #12]
 800adb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adb8:	81a3      	strh	r3, [r4, #12]
 800adba:	e7ad      	b.n	800ad18 <__sflush_r+0x1c>
 800adbc:	690f      	ldr	r7, [r1, #16]
 800adbe:	2f00      	cmp	r7, #0
 800adc0:	d0a9      	beq.n	800ad16 <__sflush_r+0x1a>
 800adc2:	0793      	lsls	r3, r2, #30
 800adc4:	bf18      	it	ne
 800adc6:	2300      	movne	r3, #0
 800adc8:	680e      	ldr	r6, [r1, #0]
 800adca:	bf08      	it	eq
 800adcc:	694b      	ldreq	r3, [r1, #20]
 800adce:	eba6 0807 	sub.w	r8, r6, r7
 800add2:	600f      	str	r7, [r1, #0]
 800add4:	608b      	str	r3, [r1, #8]
 800add6:	f1b8 0f00 	cmp.w	r8, #0
 800adda:	dd9c      	ble.n	800ad16 <__sflush_r+0x1a>
 800addc:	4643      	mov	r3, r8
 800adde:	463a      	mov	r2, r7
 800ade0:	4628      	mov	r0, r5
 800ade2:	6a21      	ldr	r1, [r4, #32]
 800ade4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ade6:	47b0      	blx	r6
 800ade8:	2800      	cmp	r0, #0
 800adea:	dc06      	bgt.n	800adfa <__sflush_r+0xfe>
 800adec:	89a3      	ldrh	r3, [r4, #12]
 800adee:	f04f 30ff 	mov.w	r0, #4294967295
 800adf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adf6:	81a3      	strh	r3, [r4, #12]
 800adf8:	e78e      	b.n	800ad18 <__sflush_r+0x1c>
 800adfa:	4407      	add	r7, r0
 800adfc:	eba8 0800 	sub.w	r8, r8, r0
 800ae00:	e7e9      	b.n	800add6 <__sflush_r+0xda>
 800ae02:	bf00      	nop
 800ae04:	20400001 	.word	0x20400001

0800ae08 <_fflush_r>:
 800ae08:	b538      	push	{r3, r4, r5, lr}
 800ae0a:	690b      	ldr	r3, [r1, #16]
 800ae0c:	4605      	mov	r5, r0
 800ae0e:	460c      	mov	r4, r1
 800ae10:	b913      	cbnz	r3, 800ae18 <_fflush_r+0x10>
 800ae12:	2500      	movs	r5, #0
 800ae14:	4628      	mov	r0, r5
 800ae16:	bd38      	pop	{r3, r4, r5, pc}
 800ae18:	b118      	cbz	r0, 800ae22 <_fflush_r+0x1a>
 800ae1a:	6983      	ldr	r3, [r0, #24]
 800ae1c:	b90b      	cbnz	r3, 800ae22 <_fflush_r+0x1a>
 800ae1e:	f000 f887 	bl	800af30 <__sinit>
 800ae22:	4b14      	ldr	r3, [pc, #80]	; (800ae74 <_fflush_r+0x6c>)
 800ae24:	429c      	cmp	r4, r3
 800ae26:	d11b      	bne.n	800ae60 <_fflush_r+0x58>
 800ae28:	686c      	ldr	r4, [r5, #4]
 800ae2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d0ef      	beq.n	800ae12 <_fflush_r+0xa>
 800ae32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae34:	07d0      	lsls	r0, r2, #31
 800ae36:	d404      	bmi.n	800ae42 <_fflush_r+0x3a>
 800ae38:	0599      	lsls	r1, r3, #22
 800ae3a:	d402      	bmi.n	800ae42 <_fflush_r+0x3a>
 800ae3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae3e:	f000 fc80 	bl	800b742 <__retarget_lock_acquire_recursive>
 800ae42:	4628      	mov	r0, r5
 800ae44:	4621      	mov	r1, r4
 800ae46:	f7ff ff59 	bl	800acfc <__sflush_r>
 800ae4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae4c:	4605      	mov	r5, r0
 800ae4e:	07da      	lsls	r2, r3, #31
 800ae50:	d4e0      	bmi.n	800ae14 <_fflush_r+0xc>
 800ae52:	89a3      	ldrh	r3, [r4, #12]
 800ae54:	059b      	lsls	r3, r3, #22
 800ae56:	d4dd      	bmi.n	800ae14 <_fflush_r+0xc>
 800ae58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae5a:	f000 fc73 	bl	800b744 <__retarget_lock_release_recursive>
 800ae5e:	e7d9      	b.n	800ae14 <_fflush_r+0xc>
 800ae60:	4b05      	ldr	r3, [pc, #20]	; (800ae78 <_fflush_r+0x70>)
 800ae62:	429c      	cmp	r4, r3
 800ae64:	d101      	bne.n	800ae6a <_fflush_r+0x62>
 800ae66:	68ac      	ldr	r4, [r5, #8]
 800ae68:	e7df      	b.n	800ae2a <_fflush_r+0x22>
 800ae6a:	4b04      	ldr	r3, [pc, #16]	; (800ae7c <_fflush_r+0x74>)
 800ae6c:	429c      	cmp	r4, r3
 800ae6e:	bf08      	it	eq
 800ae70:	68ec      	ldreq	r4, [r5, #12]
 800ae72:	e7da      	b.n	800ae2a <_fflush_r+0x22>
 800ae74:	0800cac8 	.word	0x0800cac8
 800ae78:	0800cae8 	.word	0x0800cae8
 800ae7c:	0800caa8 	.word	0x0800caa8

0800ae80 <std>:
 800ae80:	2300      	movs	r3, #0
 800ae82:	b510      	push	{r4, lr}
 800ae84:	4604      	mov	r4, r0
 800ae86:	e9c0 3300 	strd	r3, r3, [r0]
 800ae8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae8e:	6083      	str	r3, [r0, #8]
 800ae90:	8181      	strh	r1, [r0, #12]
 800ae92:	6643      	str	r3, [r0, #100]	; 0x64
 800ae94:	81c2      	strh	r2, [r0, #14]
 800ae96:	6183      	str	r3, [r0, #24]
 800ae98:	4619      	mov	r1, r3
 800ae9a:	2208      	movs	r2, #8
 800ae9c:	305c      	adds	r0, #92	; 0x5c
 800ae9e:	f7fd f897 	bl	8007fd0 <memset>
 800aea2:	4b05      	ldr	r3, [pc, #20]	; (800aeb8 <std+0x38>)
 800aea4:	6224      	str	r4, [r4, #32]
 800aea6:	6263      	str	r3, [r4, #36]	; 0x24
 800aea8:	4b04      	ldr	r3, [pc, #16]	; (800aebc <std+0x3c>)
 800aeaa:	62a3      	str	r3, [r4, #40]	; 0x28
 800aeac:	4b04      	ldr	r3, [pc, #16]	; (800aec0 <std+0x40>)
 800aeae:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aeb0:	4b04      	ldr	r3, [pc, #16]	; (800aec4 <std+0x44>)
 800aeb2:	6323      	str	r3, [r4, #48]	; 0x30
 800aeb4:	bd10      	pop	{r4, pc}
 800aeb6:	bf00      	nop
 800aeb8:	0800c5c1 	.word	0x0800c5c1
 800aebc:	0800c5e3 	.word	0x0800c5e3
 800aec0:	0800c61b 	.word	0x0800c61b
 800aec4:	0800c63f 	.word	0x0800c63f

0800aec8 <_cleanup_r>:
 800aec8:	4901      	ldr	r1, [pc, #4]	; (800aed0 <_cleanup_r+0x8>)
 800aeca:	f000 b8af 	b.w	800b02c <_fwalk_reent>
 800aece:	bf00      	nop
 800aed0:	0800ae09 	.word	0x0800ae09

0800aed4 <__sfmoreglue>:
 800aed4:	b570      	push	{r4, r5, r6, lr}
 800aed6:	2568      	movs	r5, #104	; 0x68
 800aed8:	1e4a      	subs	r2, r1, #1
 800aeda:	4355      	muls	r5, r2
 800aedc:	460e      	mov	r6, r1
 800aede:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aee2:	f7fd f8c9 	bl	8008078 <_malloc_r>
 800aee6:	4604      	mov	r4, r0
 800aee8:	b140      	cbz	r0, 800aefc <__sfmoreglue+0x28>
 800aeea:	2100      	movs	r1, #0
 800aeec:	e9c0 1600 	strd	r1, r6, [r0]
 800aef0:	300c      	adds	r0, #12
 800aef2:	60a0      	str	r0, [r4, #8]
 800aef4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aef8:	f7fd f86a 	bl	8007fd0 <memset>
 800aefc:	4620      	mov	r0, r4
 800aefe:	bd70      	pop	{r4, r5, r6, pc}

0800af00 <__sfp_lock_acquire>:
 800af00:	4801      	ldr	r0, [pc, #4]	; (800af08 <__sfp_lock_acquire+0x8>)
 800af02:	f000 bc1e 	b.w	800b742 <__retarget_lock_acquire_recursive>
 800af06:	bf00      	nop
 800af08:	20000a58 	.word	0x20000a58

0800af0c <__sfp_lock_release>:
 800af0c:	4801      	ldr	r0, [pc, #4]	; (800af14 <__sfp_lock_release+0x8>)
 800af0e:	f000 bc19 	b.w	800b744 <__retarget_lock_release_recursive>
 800af12:	bf00      	nop
 800af14:	20000a58 	.word	0x20000a58

0800af18 <__sinit_lock_acquire>:
 800af18:	4801      	ldr	r0, [pc, #4]	; (800af20 <__sinit_lock_acquire+0x8>)
 800af1a:	f000 bc12 	b.w	800b742 <__retarget_lock_acquire_recursive>
 800af1e:	bf00      	nop
 800af20:	20000a53 	.word	0x20000a53

0800af24 <__sinit_lock_release>:
 800af24:	4801      	ldr	r0, [pc, #4]	; (800af2c <__sinit_lock_release+0x8>)
 800af26:	f000 bc0d 	b.w	800b744 <__retarget_lock_release_recursive>
 800af2a:	bf00      	nop
 800af2c:	20000a53 	.word	0x20000a53

0800af30 <__sinit>:
 800af30:	b510      	push	{r4, lr}
 800af32:	4604      	mov	r4, r0
 800af34:	f7ff fff0 	bl	800af18 <__sinit_lock_acquire>
 800af38:	69a3      	ldr	r3, [r4, #24]
 800af3a:	b11b      	cbz	r3, 800af44 <__sinit+0x14>
 800af3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af40:	f7ff bff0 	b.w	800af24 <__sinit_lock_release>
 800af44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800af48:	6523      	str	r3, [r4, #80]	; 0x50
 800af4a:	4b13      	ldr	r3, [pc, #76]	; (800af98 <__sinit+0x68>)
 800af4c:	4a13      	ldr	r2, [pc, #76]	; (800af9c <__sinit+0x6c>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	62a2      	str	r2, [r4, #40]	; 0x28
 800af52:	42a3      	cmp	r3, r4
 800af54:	bf08      	it	eq
 800af56:	2301      	moveq	r3, #1
 800af58:	4620      	mov	r0, r4
 800af5a:	bf08      	it	eq
 800af5c:	61a3      	streq	r3, [r4, #24]
 800af5e:	f000 f81f 	bl	800afa0 <__sfp>
 800af62:	6060      	str	r0, [r4, #4]
 800af64:	4620      	mov	r0, r4
 800af66:	f000 f81b 	bl	800afa0 <__sfp>
 800af6a:	60a0      	str	r0, [r4, #8]
 800af6c:	4620      	mov	r0, r4
 800af6e:	f000 f817 	bl	800afa0 <__sfp>
 800af72:	2200      	movs	r2, #0
 800af74:	2104      	movs	r1, #4
 800af76:	60e0      	str	r0, [r4, #12]
 800af78:	6860      	ldr	r0, [r4, #4]
 800af7a:	f7ff ff81 	bl	800ae80 <std>
 800af7e:	2201      	movs	r2, #1
 800af80:	2109      	movs	r1, #9
 800af82:	68a0      	ldr	r0, [r4, #8]
 800af84:	f7ff ff7c 	bl	800ae80 <std>
 800af88:	2202      	movs	r2, #2
 800af8a:	2112      	movs	r1, #18
 800af8c:	68e0      	ldr	r0, [r4, #12]
 800af8e:	f7ff ff77 	bl	800ae80 <std>
 800af92:	2301      	movs	r3, #1
 800af94:	61a3      	str	r3, [r4, #24]
 800af96:	e7d1      	b.n	800af3c <__sinit+0xc>
 800af98:	0800c86c 	.word	0x0800c86c
 800af9c:	0800aec9 	.word	0x0800aec9

0800afa0 <__sfp>:
 800afa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa2:	4607      	mov	r7, r0
 800afa4:	f7ff ffac 	bl	800af00 <__sfp_lock_acquire>
 800afa8:	4b1e      	ldr	r3, [pc, #120]	; (800b024 <__sfp+0x84>)
 800afaa:	681e      	ldr	r6, [r3, #0]
 800afac:	69b3      	ldr	r3, [r6, #24]
 800afae:	b913      	cbnz	r3, 800afb6 <__sfp+0x16>
 800afb0:	4630      	mov	r0, r6
 800afb2:	f7ff ffbd 	bl	800af30 <__sinit>
 800afb6:	3648      	adds	r6, #72	; 0x48
 800afb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800afbc:	3b01      	subs	r3, #1
 800afbe:	d503      	bpl.n	800afc8 <__sfp+0x28>
 800afc0:	6833      	ldr	r3, [r6, #0]
 800afc2:	b30b      	cbz	r3, 800b008 <__sfp+0x68>
 800afc4:	6836      	ldr	r6, [r6, #0]
 800afc6:	e7f7      	b.n	800afb8 <__sfp+0x18>
 800afc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800afcc:	b9d5      	cbnz	r5, 800b004 <__sfp+0x64>
 800afce:	4b16      	ldr	r3, [pc, #88]	; (800b028 <__sfp+0x88>)
 800afd0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800afd4:	60e3      	str	r3, [r4, #12]
 800afd6:	6665      	str	r5, [r4, #100]	; 0x64
 800afd8:	f000 fbb2 	bl	800b740 <__retarget_lock_init_recursive>
 800afdc:	f7ff ff96 	bl	800af0c <__sfp_lock_release>
 800afe0:	2208      	movs	r2, #8
 800afe2:	4629      	mov	r1, r5
 800afe4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800afe8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800afec:	6025      	str	r5, [r4, #0]
 800afee:	61a5      	str	r5, [r4, #24]
 800aff0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aff4:	f7fc ffec 	bl	8007fd0 <memset>
 800aff8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800affc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b000:	4620      	mov	r0, r4
 800b002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b004:	3468      	adds	r4, #104	; 0x68
 800b006:	e7d9      	b.n	800afbc <__sfp+0x1c>
 800b008:	2104      	movs	r1, #4
 800b00a:	4638      	mov	r0, r7
 800b00c:	f7ff ff62 	bl	800aed4 <__sfmoreglue>
 800b010:	4604      	mov	r4, r0
 800b012:	6030      	str	r0, [r6, #0]
 800b014:	2800      	cmp	r0, #0
 800b016:	d1d5      	bne.n	800afc4 <__sfp+0x24>
 800b018:	f7ff ff78 	bl	800af0c <__sfp_lock_release>
 800b01c:	230c      	movs	r3, #12
 800b01e:	603b      	str	r3, [r7, #0]
 800b020:	e7ee      	b.n	800b000 <__sfp+0x60>
 800b022:	bf00      	nop
 800b024:	0800c86c 	.word	0x0800c86c
 800b028:	ffff0001 	.word	0xffff0001

0800b02c <_fwalk_reent>:
 800b02c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b030:	4606      	mov	r6, r0
 800b032:	4688      	mov	r8, r1
 800b034:	2700      	movs	r7, #0
 800b036:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b03a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b03e:	f1b9 0901 	subs.w	r9, r9, #1
 800b042:	d505      	bpl.n	800b050 <_fwalk_reent+0x24>
 800b044:	6824      	ldr	r4, [r4, #0]
 800b046:	2c00      	cmp	r4, #0
 800b048:	d1f7      	bne.n	800b03a <_fwalk_reent+0xe>
 800b04a:	4638      	mov	r0, r7
 800b04c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b050:	89ab      	ldrh	r3, [r5, #12]
 800b052:	2b01      	cmp	r3, #1
 800b054:	d907      	bls.n	800b066 <_fwalk_reent+0x3a>
 800b056:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b05a:	3301      	adds	r3, #1
 800b05c:	d003      	beq.n	800b066 <_fwalk_reent+0x3a>
 800b05e:	4629      	mov	r1, r5
 800b060:	4630      	mov	r0, r6
 800b062:	47c0      	blx	r8
 800b064:	4307      	orrs	r7, r0
 800b066:	3568      	adds	r5, #104	; 0x68
 800b068:	e7e9      	b.n	800b03e <_fwalk_reent+0x12>

0800b06a <rshift>:
 800b06a:	6903      	ldr	r3, [r0, #16]
 800b06c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b070:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b074:	f100 0414 	add.w	r4, r0, #20
 800b078:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b07c:	dd46      	ble.n	800b10c <rshift+0xa2>
 800b07e:	f011 011f 	ands.w	r1, r1, #31
 800b082:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b086:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b08a:	d10c      	bne.n	800b0a6 <rshift+0x3c>
 800b08c:	4629      	mov	r1, r5
 800b08e:	f100 0710 	add.w	r7, r0, #16
 800b092:	42b1      	cmp	r1, r6
 800b094:	d335      	bcc.n	800b102 <rshift+0x98>
 800b096:	1a9b      	subs	r3, r3, r2
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	1eea      	subs	r2, r5, #3
 800b09c:	4296      	cmp	r6, r2
 800b09e:	bf38      	it	cc
 800b0a0:	2300      	movcc	r3, #0
 800b0a2:	4423      	add	r3, r4
 800b0a4:	e015      	b.n	800b0d2 <rshift+0x68>
 800b0a6:	46a1      	mov	r9, r4
 800b0a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b0ac:	f1c1 0820 	rsb	r8, r1, #32
 800b0b0:	40cf      	lsrs	r7, r1
 800b0b2:	f105 0e04 	add.w	lr, r5, #4
 800b0b6:	4576      	cmp	r6, lr
 800b0b8:	46f4      	mov	ip, lr
 800b0ba:	d816      	bhi.n	800b0ea <rshift+0x80>
 800b0bc:	1a9b      	subs	r3, r3, r2
 800b0be:	009a      	lsls	r2, r3, #2
 800b0c0:	3a04      	subs	r2, #4
 800b0c2:	3501      	adds	r5, #1
 800b0c4:	42ae      	cmp	r6, r5
 800b0c6:	bf38      	it	cc
 800b0c8:	2200      	movcc	r2, #0
 800b0ca:	18a3      	adds	r3, r4, r2
 800b0cc:	50a7      	str	r7, [r4, r2]
 800b0ce:	b107      	cbz	r7, 800b0d2 <rshift+0x68>
 800b0d0:	3304      	adds	r3, #4
 800b0d2:	42a3      	cmp	r3, r4
 800b0d4:	eba3 0204 	sub.w	r2, r3, r4
 800b0d8:	bf08      	it	eq
 800b0da:	2300      	moveq	r3, #0
 800b0dc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b0e0:	6102      	str	r2, [r0, #16]
 800b0e2:	bf08      	it	eq
 800b0e4:	6143      	streq	r3, [r0, #20]
 800b0e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0ea:	f8dc c000 	ldr.w	ip, [ip]
 800b0ee:	fa0c fc08 	lsl.w	ip, ip, r8
 800b0f2:	ea4c 0707 	orr.w	r7, ip, r7
 800b0f6:	f849 7b04 	str.w	r7, [r9], #4
 800b0fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b0fe:	40cf      	lsrs	r7, r1
 800b100:	e7d9      	b.n	800b0b6 <rshift+0x4c>
 800b102:	f851 cb04 	ldr.w	ip, [r1], #4
 800b106:	f847 cf04 	str.w	ip, [r7, #4]!
 800b10a:	e7c2      	b.n	800b092 <rshift+0x28>
 800b10c:	4623      	mov	r3, r4
 800b10e:	e7e0      	b.n	800b0d2 <rshift+0x68>

0800b110 <__hexdig_fun>:
 800b110:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b114:	2b09      	cmp	r3, #9
 800b116:	d802      	bhi.n	800b11e <__hexdig_fun+0xe>
 800b118:	3820      	subs	r0, #32
 800b11a:	b2c0      	uxtb	r0, r0
 800b11c:	4770      	bx	lr
 800b11e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b122:	2b05      	cmp	r3, #5
 800b124:	d801      	bhi.n	800b12a <__hexdig_fun+0x1a>
 800b126:	3847      	subs	r0, #71	; 0x47
 800b128:	e7f7      	b.n	800b11a <__hexdig_fun+0xa>
 800b12a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b12e:	2b05      	cmp	r3, #5
 800b130:	d801      	bhi.n	800b136 <__hexdig_fun+0x26>
 800b132:	3827      	subs	r0, #39	; 0x27
 800b134:	e7f1      	b.n	800b11a <__hexdig_fun+0xa>
 800b136:	2000      	movs	r0, #0
 800b138:	4770      	bx	lr
	...

0800b13c <__gethex>:
 800b13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b140:	b08b      	sub	sp, #44	; 0x2c
 800b142:	9306      	str	r3, [sp, #24]
 800b144:	4bb9      	ldr	r3, [pc, #740]	; (800b42c <__gethex+0x2f0>)
 800b146:	9002      	str	r0, [sp, #8]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	468b      	mov	fp, r1
 800b14c:	4618      	mov	r0, r3
 800b14e:	4690      	mov	r8, r2
 800b150:	9303      	str	r3, [sp, #12]
 800b152:	f7f4 fffd 	bl	8000150 <strlen>
 800b156:	4682      	mov	sl, r0
 800b158:	9b03      	ldr	r3, [sp, #12]
 800b15a:	f8db 2000 	ldr.w	r2, [fp]
 800b15e:	4403      	add	r3, r0
 800b160:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b164:	9307      	str	r3, [sp, #28]
 800b166:	1c93      	adds	r3, r2, #2
 800b168:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b16c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b170:	32fe      	adds	r2, #254	; 0xfe
 800b172:	18d1      	adds	r1, r2, r3
 800b174:	461f      	mov	r7, r3
 800b176:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b17a:	9101      	str	r1, [sp, #4]
 800b17c:	2830      	cmp	r0, #48	; 0x30
 800b17e:	d0f8      	beq.n	800b172 <__gethex+0x36>
 800b180:	f7ff ffc6 	bl	800b110 <__hexdig_fun>
 800b184:	4604      	mov	r4, r0
 800b186:	2800      	cmp	r0, #0
 800b188:	d13a      	bne.n	800b200 <__gethex+0xc4>
 800b18a:	4652      	mov	r2, sl
 800b18c:	4638      	mov	r0, r7
 800b18e:	9903      	ldr	r1, [sp, #12]
 800b190:	f001 fa59 	bl	800c646 <strncmp>
 800b194:	4605      	mov	r5, r0
 800b196:	2800      	cmp	r0, #0
 800b198:	d166      	bne.n	800b268 <__gethex+0x12c>
 800b19a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b19e:	eb07 060a 	add.w	r6, r7, sl
 800b1a2:	f7ff ffb5 	bl	800b110 <__hexdig_fun>
 800b1a6:	2800      	cmp	r0, #0
 800b1a8:	d060      	beq.n	800b26c <__gethex+0x130>
 800b1aa:	4633      	mov	r3, r6
 800b1ac:	7818      	ldrb	r0, [r3, #0]
 800b1ae:	461f      	mov	r7, r3
 800b1b0:	2830      	cmp	r0, #48	; 0x30
 800b1b2:	f103 0301 	add.w	r3, r3, #1
 800b1b6:	d0f9      	beq.n	800b1ac <__gethex+0x70>
 800b1b8:	f7ff ffaa 	bl	800b110 <__hexdig_fun>
 800b1bc:	2301      	movs	r3, #1
 800b1be:	fab0 f480 	clz	r4, r0
 800b1c2:	4635      	mov	r5, r6
 800b1c4:	0964      	lsrs	r4, r4, #5
 800b1c6:	9301      	str	r3, [sp, #4]
 800b1c8:	463a      	mov	r2, r7
 800b1ca:	4616      	mov	r6, r2
 800b1cc:	7830      	ldrb	r0, [r6, #0]
 800b1ce:	3201      	adds	r2, #1
 800b1d0:	f7ff ff9e 	bl	800b110 <__hexdig_fun>
 800b1d4:	2800      	cmp	r0, #0
 800b1d6:	d1f8      	bne.n	800b1ca <__gethex+0x8e>
 800b1d8:	4652      	mov	r2, sl
 800b1da:	4630      	mov	r0, r6
 800b1dc:	9903      	ldr	r1, [sp, #12]
 800b1de:	f001 fa32 	bl	800c646 <strncmp>
 800b1e2:	b980      	cbnz	r0, 800b206 <__gethex+0xca>
 800b1e4:	b94d      	cbnz	r5, 800b1fa <__gethex+0xbe>
 800b1e6:	eb06 050a 	add.w	r5, r6, sl
 800b1ea:	462a      	mov	r2, r5
 800b1ec:	4616      	mov	r6, r2
 800b1ee:	7830      	ldrb	r0, [r6, #0]
 800b1f0:	3201      	adds	r2, #1
 800b1f2:	f7ff ff8d 	bl	800b110 <__hexdig_fun>
 800b1f6:	2800      	cmp	r0, #0
 800b1f8:	d1f8      	bne.n	800b1ec <__gethex+0xb0>
 800b1fa:	1bad      	subs	r5, r5, r6
 800b1fc:	00ad      	lsls	r5, r5, #2
 800b1fe:	e004      	b.n	800b20a <__gethex+0xce>
 800b200:	2400      	movs	r4, #0
 800b202:	4625      	mov	r5, r4
 800b204:	e7e0      	b.n	800b1c8 <__gethex+0x8c>
 800b206:	2d00      	cmp	r5, #0
 800b208:	d1f7      	bne.n	800b1fa <__gethex+0xbe>
 800b20a:	7833      	ldrb	r3, [r6, #0]
 800b20c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b210:	2b50      	cmp	r3, #80	; 0x50
 800b212:	d139      	bne.n	800b288 <__gethex+0x14c>
 800b214:	7873      	ldrb	r3, [r6, #1]
 800b216:	2b2b      	cmp	r3, #43	; 0x2b
 800b218:	d02a      	beq.n	800b270 <__gethex+0x134>
 800b21a:	2b2d      	cmp	r3, #45	; 0x2d
 800b21c:	d02c      	beq.n	800b278 <__gethex+0x13c>
 800b21e:	f04f 0900 	mov.w	r9, #0
 800b222:	1c71      	adds	r1, r6, #1
 800b224:	7808      	ldrb	r0, [r1, #0]
 800b226:	f7ff ff73 	bl	800b110 <__hexdig_fun>
 800b22a:	1e43      	subs	r3, r0, #1
 800b22c:	b2db      	uxtb	r3, r3
 800b22e:	2b18      	cmp	r3, #24
 800b230:	d82a      	bhi.n	800b288 <__gethex+0x14c>
 800b232:	f1a0 0210 	sub.w	r2, r0, #16
 800b236:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b23a:	f7ff ff69 	bl	800b110 <__hexdig_fun>
 800b23e:	1e43      	subs	r3, r0, #1
 800b240:	b2db      	uxtb	r3, r3
 800b242:	2b18      	cmp	r3, #24
 800b244:	d91b      	bls.n	800b27e <__gethex+0x142>
 800b246:	f1b9 0f00 	cmp.w	r9, #0
 800b24a:	d000      	beq.n	800b24e <__gethex+0x112>
 800b24c:	4252      	negs	r2, r2
 800b24e:	4415      	add	r5, r2
 800b250:	f8cb 1000 	str.w	r1, [fp]
 800b254:	b1d4      	cbz	r4, 800b28c <__gethex+0x150>
 800b256:	9b01      	ldr	r3, [sp, #4]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	bf14      	ite	ne
 800b25c:	2700      	movne	r7, #0
 800b25e:	2706      	moveq	r7, #6
 800b260:	4638      	mov	r0, r7
 800b262:	b00b      	add	sp, #44	; 0x2c
 800b264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b268:	463e      	mov	r6, r7
 800b26a:	4625      	mov	r5, r4
 800b26c:	2401      	movs	r4, #1
 800b26e:	e7cc      	b.n	800b20a <__gethex+0xce>
 800b270:	f04f 0900 	mov.w	r9, #0
 800b274:	1cb1      	adds	r1, r6, #2
 800b276:	e7d5      	b.n	800b224 <__gethex+0xe8>
 800b278:	f04f 0901 	mov.w	r9, #1
 800b27c:	e7fa      	b.n	800b274 <__gethex+0x138>
 800b27e:	230a      	movs	r3, #10
 800b280:	fb03 0202 	mla	r2, r3, r2, r0
 800b284:	3a10      	subs	r2, #16
 800b286:	e7d6      	b.n	800b236 <__gethex+0xfa>
 800b288:	4631      	mov	r1, r6
 800b28a:	e7e1      	b.n	800b250 <__gethex+0x114>
 800b28c:	4621      	mov	r1, r4
 800b28e:	1bf3      	subs	r3, r6, r7
 800b290:	3b01      	subs	r3, #1
 800b292:	2b07      	cmp	r3, #7
 800b294:	dc0a      	bgt.n	800b2ac <__gethex+0x170>
 800b296:	9802      	ldr	r0, [sp, #8]
 800b298:	f000 fb00 	bl	800b89c <_Balloc>
 800b29c:	4604      	mov	r4, r0
 800b29e:	b940      	cbnz	r0, 800b2b2 <__gethex+0x176>
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	21de      	movs	r1, #222	; 0xde
 800b2a4:	4b62      	ldr	r3, [pc, #392]	; (800b430 <__gethex+0x2f4>)
 800b2a6:	4863      	ldr	r0, [pc, #396]	; (800b434 <__gethex+0x2f8>)
 800b2a8:	f7fc fe22 	bl	8007ef0 <__assert_func>
 800b2ac:	3101      	adds	r1, #1
 800b2ae:	105b      	asrs	r3, r3, #1
 800b2b0:	e7ef      	b.n	800b292 <__gethex+0x156>
 800b2b2:	f04f 0b00 	mov.w	fp, #0
 800b2b6:	f100 0914 	add.w	r9, r0, #20
 800b2ba:	f1ca 0301 	rsb	r3, sl, #1
 800b2be:	f8cd 9010 	str.w	r9, [sp, #16]
 800b2c2:	f8cd b004 	str.w	fp, [sp, #4]
 800b2c6:	9308      	str	r3, [sp, #32]
 800b2c8:	42b7      	cmp	r7, r6
 800b2ca:	d33f      	bcc.n	800b34c <__gethex+0x210>
 800b2cc:	9f04      	ldr	r7, [sp, #16]
 800b2ce:	9b01      	ldr	r3, [sp, #4]
 800b2d0:	f847 3b04 	str.w	r3, [r7], #4
 800b2d4:	eba7 0709 	sub.w	r7, r7, r9
 800b2d8:	10bf      	asrs	r7, r7, #2
 800b2da:	6127      	str	r7, [r4, #16]
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f000 fbd3 	bl	800ba88 <__hi0bits>
 800b2e2:	017f      	lsls	r7, r7, #5
 800b2e4:	f8d8 6000 	ldr.w	r6, [r8]
 800b2e8:	1a3f      	subs	r7, r7, r0
 800b2ea:	42b7      	cmp	r7, r6
 800b2ec:	dd62      	ble.n	800b3b4 <__gethex+0x278>
 800b2ee:	1bbf      	subs	r7, r7, r6
 800b2f0:	4639      	mov	r1, r7
 800b2f2:	4620      	mov	r0, r4
 800b2f4:	f000 ff69 	bl	800c1ca <__any_on>
 800b2f8:	4682      	mov	sl, r0
 800b2fa:	b1a8      	cbz	r0, 800b328 <__gethex+0x1ec>
 800b2fc:	f04f 0a01 	mov.w	sl, #1
 800b300:	1e7b      	subs	r3, r7, #1
 800b302:	1159      	asrs	r1, r3, #5
 800b304:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b308:	f003 021f 	and.w	r2, r3, #31
 800b30c:	fa0a f202 	lsl.w	r2, sl, r2
 800b310:	420a      	tst	r2, r1
 800b312:	d009      	beq.n	800b328 <__gethex+0x1ec>
 800b314:	4553      	cmp	r3, sl
 800b316:	dd05      	ble.n	800b324 <__gethex+0x1e8>
 800b318:	4620      	mov	r0, r4
 800b31a:	1eb9      	subs	r1, r7, #2
 800b31c:	f000 ff55 	bl	800c1ca <__any_on>
 800b320:	2800      	cmp	r0, #0
 800b322:	d144      	bne.n	800b3ae <__gethex+0x272>
 800b324:	f04f 0a02 	mov.w	sl, #2
 800b328:	4639      	mov	r1, r7
 800b32a:	4620      	mov	r0, r4
 800b32c:	f7ff fe9d 	bl	800b06a <rshift>
 800b330:	443d      	add	r5, r7
 800b332:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b336:	42ab      	cmp	r3, r5
 800b338:	da4a      	bge.n	800b3d0 <__gethex+0x294>
 800b33a:	4621      	mov	r1, r4
 800b33c:	9802      	ldr	r0, [sp, #8]
 800b33e:	f000 faed 	bl	800b91c <_Bfree>
 800b342:	2300      	movs	r3, #0
 800b344:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b346:	27a3      	movs	r7, #163	; 0xa3
 800b348:	6013      	str	r3, [r2, #0]
 800b34a:	e789      	b.n	800b260 <__gethex+0x124>
 800b34c:	1e73      	subs	r3, r6, #1
 800b34e:	9a07      	ldr	r2, [sp, #28]
 800b350:	9305      	str	r3, [sp, #20]
 800b352:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b356:	4293      	cmp	r3, r2
 800b358:	d019      	beq.n	800b38e <__gethex+0x252>
 800b35a:	f1bb 0f20 	cmp.w	fp, #32
 800b35e:	d107      	bne.n	800b370 <__gethex+0x234>
 800b360:	9b04      	ldr	r3, [sp, #16]
 800b362:	9a01      	ldr	r2, [sp, #4]
 800b364:	f843 2b04 	str.w	r2, [r3], #4
 800b368:	9304      	str	r3, [sp, #16]
 800b36a:	2300      	movs	r3, #0
 800b36c:	469b      	mov	fp, r3
 800b36e:	9301      	str	r3, [sp, #4]
 800b370:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b374:	f7ff fecc 	bl	800b110 <__hexdig_fun>
 800b378:	9b01      	ldr	r3, [sp, #4]
 800b37a:	f000 000f 	and.w	r0, r0, #15
 800b37e:	fa00 f00b 	lsl.w	r0, r0, fp
 800b382:	4303      	orrs	r3, r0
 800b384:	9301      	str	r3, [sp, #4]
 800b386:	f10b 0b04 	add.w	fp, fp, #4
 800b38a:	9b05      	ldr	r3, [sp, #20]
 800b38c:	e00d      	b.n	800b3aa <__gethex+0x26e>
 800b38e:	9b05      	ldr	r3, [sp, #20]
 800b390:	9a08      	ldr	r2, [sp, #32]
 800b392:	4413      	add	r3, r2
 800b394:	42bb      	cmp	r3, r7
 800b396:	d3e0      	bcc.n	800b35a <__gethex+0x21e>
 800b398:	4618      	mov	r0, r3
 800b39a:	4652      	mov	r2, sl
 800b39c:	9903      	ldr	r1, [sp, #12]
 800b39e:	9309      	str	r3, [sp, #36]	; 0x24
 800b3a0:	f001 f951 	bl	800c646 <strncmp>
 800b3a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3a6:	2800      	cmp	r0, #0
 800b3a8:	d1d7      	bne.n	800b35a <__gethex+0x21e>
 800b3aa:	461e      	mov	r6, r3
 800b3ac:	e78c      	b.n	800b2c8 <__gethex+0x18c>
 800b3ae:	f04f 0a03 	mov.w	sl, #3
 800b3b2:	e7b9      	b.n	800b328 <__gethex+0x1ec>
 800b3b4:	da09      	bge.n	800b3ca <__gethex+0x28e>
 800b3b6:	1bf7      	subs	r7, r6, r7
 800b3b8:	4621      	mov	r1, r4
 800b3ba:	463a      	mov	r2, r7
 800b3bc:	9802      	ldr	r0, [sp, #8]
 800b3be:	f000 fcc5 	bl	800bd4c <__lshift>
 800b3c2:	4604      	mov	r4, r0
 800b3c4:	1bed      	subs	r5, r5, r7
 800b3c6:	f100 0914 	add.w	r9, r0, #20
 800b3ca:	f04f 0a00 	mov.w	sl, #0
 800b3ce:	e7b0      	b.n	800b332 <__gethex+0x1f6>
 800b3d0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b3d4:	42a8      	cmp	r0, r5
 800b3d6:	dd71      	ble.n	800b4bc <__gethex+0x380>
 800b3d8:	1b45      	subs	r5, r0, r5
 800b3da:	42ae      	cmp	r6, r5
 800b3dc:	dc34      	bgt.n	800b448 <__gethex+0x30c>
 800b3de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b3e2:	2b02      	cmp	r3, #2
 800b3e4:	d028      	beq.n	800b438 <__gethex+0x2fc>
 800b3e6:	2b03      	cmp	r3, #3
 800b3e8:	d02a      	beq.n	800b440 <__gethex+0x304>
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	d115      	bne.n	800b41a <__gethex+0x2de>
 800b3ee:	42ae      	cmp	r6, r5
 800b3f0:	d113      	bne.n	800b41a <__gethex+0x2de>
 800b3f2:	2e01      	cmp	r6, #1
 800b3f4:	d10b      	bne.n	800b40e <__gethex+0x2d2>
 800b3f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b3fa:	9a06      	ldr	r2, [sp, #24]
 800b3fc:	2762      	movs	r7, #98	; 0x62
 800b3fe:	6013      	str	r3, [r2, #0]
 800b400:	2301      	movs	r3, #1
 800b402:	6123      	str	r3, [r4, #16]
 800b404:	f8c9 3000 	str.w	r3, [r9]
 800b408:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b40a:	601c      	str	r4, [r3, #0]
 800b40c:	e728      	b.n	800b260 <__gethex+0x124>
 800b40e:	4620      	mov	r0, r4
 800b410:	1e71      	subs	r1, r6, #1
 800b412:	f000 feda 	bl	800c1ca <__any_on>
 800b416:	2800      	cmp	r0, #0
 800b418:	d1ed      	bne.n	800b3f6 <__gethex+0x2ba>
 800b41a:	4621      	mov	r1, r4
 800b41c:	9802      	ldr	r0, [sp, #8]
 800b41e:	f000 fa7d 	bl	800b91c <_Bfree>
 800b422:	2300      	movs	r3, #0
 800b424:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b426:	2750      	movs	r7, #80	; 0x50
 800b428:	6013      	str	r3, [r2, #0]
 800b42a:	e719      	b.n	800b260 <__gethex+0x124>
 800b42c:	0800cb74 	.word	0x0800cb74
 800b430:	0800ca94 	.word	0x0800ca94
 800b434:	0800cb08 	.word	0x0800cb08
 800b438:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d1ed      	bne.n	800b41a <__gethex+0x2de>
 800b43e:	e7da      	b.n	800b3f6 <__gethex+0x2ba>
 800b440:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b442:	2b00      	cmp	r3, #0
 800b444:	d1d7      	bne.n	800b3f6 <__gethex+0x2ba>
 800b446:	e7e8      	b.n	800b41a <__gethex+0x2de>
 800b448:	1e6f      	subs	r7, r5, #1
 800b44a:	f1ba 0f00 	cmp.w	sl, #0
 800b44e:	d132      	bne.n	800b4b6 <__gethex+0x37a>
 800b450:	b127      	cbz	r7, 800b45c <__gethex+0x320>
 800b452:	4639      	mov	r1, r7
 800b454:	4620      	mov	r0, r4
 800b456:	f000 feb8 	bl	800c1ca <__any_on>
 800b45a:	4682      	mov	sl, r0
 800b45c:	2101      	movs	r1, #1
 800b45e:	117b      	asrs	r3, r7, #5
 800b460:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b464:	f007 071f 	and.w	r7, r7, #31
 800b468:	fa01 f707 	lsl.w	r7, r1, r7
 800b46c:	421f      	tst	r7, r3
 800b46e:	f04f 0702 	mov.w	r7, #2
 800b472:	4629      	mov	r1, r5
 800b474:	4620      	mov	r0, r4
 800b476:	bf18      	it	ne
 800b478:	f04a 0a02 	orrne.w	sl, sl, #2
 800b47c:	1b76      	subs	r6, r6, r5
 800b47e:	f7ff fdf4 	bl	800b06a <rshift>
 800b482:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b486:	f1ba 0f00 	cmp.w	sl, #0
 800b48a:	d048      	beq.n	800b51e <__gethex+0x3e2>
 800b48c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b490:	2b02      	cmp	r3, #2
 800b492:	d015      	beq.n	800b4c0 <__gethex+0x384>
 800b494:	2b03      	cmp	r3, #3
 800b496:	d017      	beq.n	800b4c8 <__gethex+0x38c>
 800b498:	2b01      	cmp	r3, #1
 800b49a:	d109      	bne.n	800b4b0 <__gethex+0x374>
 800b49c:	f01a 0f02 	tst.w	sl, #2
 800b4a0:	d006      	beq.n	800b4b0 <__gethex+0x374>
 800b4a2:	f8d9 0000 	ldr.w	r0, [r9]
 800b4a6:	ea4a 0a00 	orr.w	sl, sl, r0
 800b4aa:	f01a 0f01 	tst.w	sl, #1
 800b4ae:	d10e      	bne.n	800b4ce <__gethex+0x392>
 800b4b0:	f047 0710 	orr.w	r7, r7, #16
 800b4b4:	e033      	b.n	800b51e <__gethex+0x3e2>
 800b4b6:	f04f 0a01 	mov.w	sl, #1
 800b4ba:	e7cf      	b.n	800b45c <__gethex+0x320>
 800b4bc:	2701      	movs	r7, #1
 800b4be:	e7e2      	b.n	800b486 <__gethex+0x34a>
 800b4c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b4c2:	f1c3 0301 	rsb	r3, r3, #1
 800b4c6:	9315      	str	r3, [sp, #84]	; 0x54
 800b4c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d0f0      	beq.n	800b4b0 <__gethex+0x374>
 800b4ce:	f04f 0c00 	mov.w	ip, #0
 800b4d2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b4d6:	f104 0314 	add.w	r3, r4, #20
 800b4da:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b4de:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4e8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b4ec:	d01c      	beq.n	800b528 <__gethex+0x3ec>
 800b4ee:	3201      	adds	r2, #1
 800b4f0:	6002      	str	r2, [r0, #0]
 800b4f2:	2f02      	cmp	r7, #2
 800b4f4:	f104 0314 	add.w	r3, r4, #20
 800b4f8:	d13d      	bne.n	800b576 <__gethex+0x43a>
 800b4fa:	f8d8 2000 	ldr.w	r2, [r8]
 800b4fe:	3a01      	subs	r2, #1
 800b500:	42b2      	cmp	r2, r6
 800b502:	d10a      	bne.n	800b51a <__gethex+0x3de>
 800b504:	2201      	movs	r2, #1
 800b506:	1171      	asrs	r1, r6, #5
 800b508:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b50c:	f006 061f 	and.w	r6, r6, #31
 800b510:	fa02 f606 	lsl.w	r6, r2, r6
 800b514:	421e      	tst	r6, r3
 800b516:	bf18      	it	ne
 800b518:	4617      	movne	r7, r2
 800b51a:	f047 0720 	orr.w	r7, r7, #32
 800b51e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b520:	601c      	str	r4, [r3, #0]
 800b522:	9b06      	ldr	r3, [sp, #24]
 800b524:	601d      	str	r5, [r3, #0]
 800b526:	e69b      	b.n	800b260 <__gethex+0x124>
 800b528:	4299      	cmp	r1, r3
 800b52a:	f843 cc04 	str.w	ip, [r3, #-4]
 800b52e:	d8d8      	bhi.n	800b4e2 <__gethex+0x3a6>
 800b530:	68a3      	ldr	r3, [r4, #8]
 800b532:	459b      	cmp	fp, r3
 800b534:	db17      	blt.n	800b566 <__gethex+0x42a>
 800b536:	6861      	ldr	r1, [r4, #4]
 800b538:	9802      	ldr	r0, [sp, #8]
 800b53a:	3101      	adds	r1, #1
 800b53c:	f000 f9ae 	bl	800b89c <_Balloc>
 800b540:	4681      	mov	r9, r0
 800b542:	b918      	cbnz	r0, 800b54c <__gethex+0x410>
 800b544:	4602      	mov	r2, r0
 800b546:	2184      	movs	r1, #132	; 0x84
 800b548:	4b19      	ldr	r3, [pc, #100]	; (800b5b0 <__gethex+0x474>)
 800b54a:	e6ac      	b.n	800b2a6 <__gethex+0x16a>
 800b54c:	6922      	ldr	r2, [r4, #16]
 800b54e:	f104 010c 	add.w	r1, r4, #12
 800b552:	3202      	adds	r2, #2
 800b554:	0092      	lsls	r2, r2, #2
 800b556:	300c      	adds	r0, #12
 800b558:	f7fc fd2c 	bl	8007fb4 <memcpy>
 800b55c:	4621      	mov	r1, r4
 800b55e:	9802      	ldr	r0, [sp, #8]
 800b560:	f000 f9dc 	bl	800b91c <_Bfree>
 800b564:	464c      	mov	r4, r9
 800b566:	6923      	ldr	r3, [r4, #16]
 800b568:	1c5a      	adds	r2, r3, #1
 800b56a:	6122      	str	r2, [r4, #16]
 800b56c:	2201      	movs	r2, #1
 800b56e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b572:	615a      	str	r2, [r3, #20]
 800b574:	e7bd      	b.n	800b4f2 <__gethex+0x3b6>
 800b576:	6922      	ldr	r2, [r4, #16]
 800b578:	455a      	cmp	r2, fp
 800b57a:	dd0b      	ble.n	800b594 <__gethex+0x458>
 800b57c:	2101      	movs	r1, #1
 800b57e:	4620      	mov	r0, r4
 800b580:	f7ff fd73 	bl	800b06a <rshift>
 800b584:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b588:	3501      	adds	r5, #1
 800b58a:	42ab      	cmp	r3, r5
 800b58c:	f6ff aed5 	blt.w	800b33a <__gethex+0x1fe>
 800b590:	2701      	movs	r7, #1
 800b592:	e7c2      	b.n	800b51a <__gethex+0x3de>
 800b594:	f016 061f 	ands.w	r6, r6, #31
 800b598:	d0fa      	beq.n	800b590 <__gethex+0x454>
 800b59a:	449a      	add	sl, r3
 800b59c:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b5a0:	f000 fa72 	bl	800ba88 <__hi0bits>
 800b5a4:	f1c6 0620 	rsb	r6, r6, #32
 800b5a8:	42b0      	cmp	r0, r6
 800b5aa:	dbe7      	blt.n	800b57c <__gethex+0x440>
 800b5ac:	e7f0      	b.n	800b590 <__gethex+0x454>
 800b5ae:	bf00      	nop
 800b5b0:	0800ca94 	.word	0x0800ca94

0800b5b4 <L_shift>:
 800b5b4:	f1c2 0208 	rsb	r2, r2, #8
 800b5b8:	0092      	lsls	r2, r2, #2
 800b5ba:	b570      	push	{r4, r5, r6, lr}
 800b5bc:	f1c2 0620 	rsb	r6, r2, #32
 800b5c0:	6843      	ldr	r3, [r0, #4]
 800b5c2:	6804      	ldr	r4, [r0, #0]
 800b5c4:	fa03 f506 	lsl.w	r5, r3, r6
 800b5c8:	432c      	orrs	r4, r5
 800b5ca:	40d3      	lsrs	r3, r2
 800b5cc:	6004      	str	r4, [r0, #0]
 800b5ce:	f840 3f04 	str.w	r3, [r0, #4]!
 800b5d2:	4288      	cmp	r0, r1
 800b5d4:	d3f4      	bcc.n	800b5c0 <L_shift+0xc>
 800b5d6:	bd70      	pop	{r4, r5, r6, pc}

0800b5d8 <__match>:
 800b5d8:	b530      	push	{r4, r5, lr}
 800b5da:	6803      	ldr	r3, [r0, #0]
 800b5dc:	3301      	adds	r3, #1
 800b5de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5e2:	b914      	cbnz	r4, 800b5ea <__match+0x12>
 800b5e4:	6003      	str	r3, [r0, #0]
 800b5e6:	2001      	movs	r0, #1
 800b5e8:	bd30      	pop	{r4, r5, pc}
 800b5ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b5f2:	2d19      	cmp	r5, #25
 800b5f4:	bf98      	it	ls
 800b5f6:	3220      	addls	r2, #32
 800b5f8:	42a2      	cmp	r2, r4
 800b5fa:	d0f0      	beq.n	800b5de <__match+0x6>
 800b5fc:	2000      	movs	r0, #0
 800b5fe:	e7f3      	b.n	800b5e8 <__match+0x10>

0800b600 <__hexnan>:
 800b600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b604:	2500      	movs	r5, #0
 800b606:	680b      	ldr	r3, [r1, #0]
 800b608:	4682      	mov	sl, r0
 800b60a:	115e      	asrs	r6, r3, #5
 800b60c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b610:	f013 031f 	ands.w	r3, r3, #31
 800b614:	bf18      	it	ne
 800b616:	3604      	addne	r6, #4
 800b618:	1f37      	subs	r7, r6, #4
 800b61a:	4690      	mov	r8, r2
 800b61c:	46b9      	mov	r9, r7
 800b61e:	463c      	mov	r4, r7
 800b620:	46ab      	mov	fp, r5
 800b622:	b087      	sub	sp, #28
 800b624:	6801      	ldr	r1, [r0, #0]
 800b626:	9301      	str	r3, [sp, #4]
 800b628:	f846 5c04 	str.w	r5, [r6, #-4]
 800b62c:	9502      	str	r5, [sp, #8]
 800b62e:	784a      	ldrb	r2, [r1, #1]
 800b630:	1c4b      	adds	r3, r1, #1
 800b632:	9303      	str	r3, [sp, #12]
 800b634:	b342      	cbz	r2, 800b688 <__hexnan+0x88>
 800b636:	4610      	mov	r0, r2
 800b638:	9105      	str	r1, [sp, #20]
 800b63a:	9204      	str	r2, [sp, #16]
 800b63c:	f7ff fd68 	bl	800b110 <__hexdig_fun>
 800b640:	2800      	cmp	r0, #0
 800b642:	d14f      	bne.n	800b6e4 <__hexnan+0xe4>
 800b644:	9a04      	ldr	r2, [sp, #16]
 800b646:	9905      	ldr	r1, [sp, #20]
 800b648:	2a20      	cmp	r2, #32
 800b64a:	d818      	bhi.n	800b67e <__hexnan+0x7e>
 800b64c:	9b02      	ldr	r3, [sp, #8]
 800b64e:	459b      	cmp	fp, r3
 800b650:	dd13      	ble.n	800b67a <__hexnan+0x7a>
 800b652:	454c      	cmp	r4, r9
 800b654:	d206      	bcs.n	800b664 <__hexnan+0x64>
 800b656:	2d07      	cmp	r5, #7
 800b658:	dc04      	bgt.n	800b664 <__hexnan+0x64>
 800b65a:	462a      	mov	r2, r5
 800b65c:	4649      	mov	r1, r9
 800b65e:	4620      	mov	r0, r4
 800b660:	f7ff ffa8 	bl	800b5b4 <L_shift>
 800b664:	4544      	cmp	r4, r8
 800b666:	d950      	bls.n	800b70a <__hexnan+0x10a>
 800b668:	2300      	movs	r3, #0
 800b66a:	f1a4 0904 	sub.w	r9, r4, #4
 800b66e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b672:	461d      	mov	r5, r3
 800b674:	464c      	mov	r4, r9
 800b676:	f8cd b008 	str.w	fp, [sp, #8]
 800b67a:	9903      	ldr	r1, [sp, #12]
 800b67c:	e7d7      	b.n	800b62e <__hexnan+0x2e>
 800b67e:	2a29      	cmp	r2, #41	; 0x29
 800b680:	d156      	bne.n	800b730 <__hexnan+0x130>
 800b682:	3102      	adds	r1, #2
 800b684:	f8ca 1000 	str.w	r1, [sl]
 800b688:	f1bb 0f00 	cmp.w	fp, #0
 800b68c:	d050      	beq.n	800b730 <__hexnan+0x130>
 800b68e:	454c      	cmp	r4, r9
 800b690:	d206      	bcs.n	800b6a0 <__hexnan+0xa0>
 800b692:	2d07      	cmp	r5, #7
 800b694:	dc04      	bgt.n	800b6a0 <__hexnan+0xa0>
 800b696:	462a      	mov	r2, r5
 800b698:	4649      	mov	r1, r9
 800b69a:	4620      	mov	r0, r4
 800b69c:	f7ff ff8a 	bl	800b5b4 <L_shift>
 800b6a0:	4544      	cmp	r4, r8
 800b6a2:	d934      	bls.n	800b70e <__hexnan+0x10e>
 800b6a4:	4623      	mov	r3, r4
 800b6a6:	f1a8 0204 	sub.w	r2, r8, #4
 800b6aa:	f853 1b04 	ldr.w	r1, [r3], #4
 800b6ae:	429f      	cmp	r7, r3
 800b6b0:	f842 1f04 	str.w	r1, [r2, #4]!
 800b6b4:	d2f9      	bcs.n	800b6aa <__hexnan+0xaa>
 800b6b6:	1b3b      	subs	r3, r7, r4
 800b6b8:	f023 0303 	bic.w	r3, r3, #3
 800b6bc:	3304      	adds	r3, #4
 800b6be:	3401      	adds	r4, #1
 800b6c0:	3e03      	subs	r6, #3
 800b6c2:	42b4      	cmp	r4, r6
 800b6c4:	bf88      	it	hi
 800b6c6:	2304      	movhi	r3, #4
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	4443      	add	r3, r8
 800b6cc:	f843 2b04 	str.w	r2, [r3], #4
 800b6d0:	429f      	cmp	r7, r3
 800b6d2:	d2fb      	bcs.n	800b6cc <__hexnan+0xcc>
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	b91b      	cbnz	r3, 800b6e0 <__hexnan+0xe0>
 800b6d8:	4547      	cmp	r7, r8
 800b6da:	d127      	bne.n	800b72c <__hexnan+0x12c>
 800b6dc:	2301      	movs	r3, #1
 800b6de:	603b      	str	r3, [r7, #0]
 800b6e0:	2005      	movs	r0, #5
 800b6e2:	e026      	b.n	800b732 <__hexnan+0x132>
 800b6e4:	3501      	adds	r5, #1
 800b6e6:	2d08      	cmp	r5, #8
 800b6e8:	f10b 0b01 	add.w	fp, fp, #1
 800b6ec:	dd06      	ble.n	800b6fc <__hexnan+0xfc>
 800b6ee:	4544      	cmp	r4, r8
 800b6f0:	d9c3      	bls.n	800b67a <__hexnan+0x7a>
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	2501      	movs	r5, #1
 800b6f6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b6fa:	3c04      	subs	r4, #4
 800b6fc:	6822      	ldr	r2, [r4, #0]
 800b6fe:	f000 000f 	and.w	r0, r0, #15
 800b702:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b706:	6022      	str	r2, [r4, #0]
 800b708:	e7b7      	b.n	800b67a <__hexnan+0x7a>
 800b70a:	2508      	movs	r5, #8
 800b70c:	e7b5      	b.n	800b67a <__hexnan+0x7a>
 800b70e:	9b01      	ldr	r3, [sp, #4]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d0df      	beq.n	800b6d4 <__hexnan+0xd4>
 800b714:	f04f 32ff 	mov.w	r2, #4294967295
 800b718:	f1c3 0320 	rsb	r3, r3, #32
 800b71c:	fa22 f303 	lsr.w	r3, r2, r3
 800b720:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b724:	401a      	ands	r2, r3
 800b726:	f846 2c04 	str.w	r2, [r6, #-4]
 800b72a:	e7d3      	b.n	800b6d4 <__hexnan+0xd4>
 800b72c:	3f04      	subs	r7, #4
 800b72e:	e7d1      	b.n	800b6d4 <__hexnan+0xd4>
 800b730:	2004      	movs	r0, #4
 800b732:	b007      	add	sp, #28
 800b734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b738 <_localeconv_r>:
 800b738:	4800      	ldr	r0, [pc, #0]	; (800b73c <_localeconv_r+0x4>)
 800b73a:	4770      	bx	lr
 800b73c:	200001ac 	.word	0x200001ac

0800b740 <__retarget_lock_init_recursive>:
 800b740:	4770      	bx	lr

0800b742 <__retarget_lock_acquire_recursive>:
 800b742:	4770      	bx	lr

0800b744 <__retarget_lock_release_recursive>:
 800b744:	4770      	bx	lr

0800b746 <__swhatbuf_r>:
 800b746:	b570      	push	{r4, r5, r6, lr}
 800b748:	460e      	mov	r6, r1
 800b74a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b74e:	4614      	mov	r4, r2
 800b750:	2900      	cmp	r1, #0
 800b752:	461d      	mov	r5, r3
 800b754:	b096      	sub	sp, #88	; 0x58
 800b756:	da07      	bge.n	800b768 <__swhatbuf_r+0x22>
 800b758:	2300      	movs	r3, #0
 800b75a:	602b      	str	r3, [r5, #0]
 800b75c:	89b3      	ldrh	r3, [r6, #12]
 800b75e:	061a      	lsls	r2, r3, #24
 800b760:	d410      	bmi.n	800b784 <__swhatbuf_r+0x3e>
 800b762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b766:	e00e      	b.n	800b786 <__swhatbuf_r+0x40>
 800b768:	466a      	mov	r2, sp
 800b76a:	f000 ffad 	bl	800c6c8 <_fstat_r>
 800b76e:	2800      	cmp	r0, #0
 800b770:	dbf2      	blt.n	800b758 <__swhatbuf_r+0x12>
 800b772:	9a01      	ldr	r2, [sp, #4]
 800b774:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b778:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b77c:	425a      	negs	r2, r3
 800b77e:	415a      	adcs	r2, r3
 800b780:	602a      	str	r2, [r5, #0]
 800b782:	e7ee      	b.n	800b762 <__swhatbuf_r+0x1c>
 800b784:	2340      	movs	r3, #64	; 0x40
 800b786:	2000      	movs	r0, #0
 800b788:	6023      	str	r3, [r4, #0]
 800b78a:	b016      	add	sp, #88	; 0x58
 800b78c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b790 <__smakebuf_r>:
 800b790:	898b      	ldrh	r3, [r1, #12]
 800b792:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b794:	079d      	lsls	r5, r3, #30
 800b796:	4606      	mov	r6, r0
 800b798:	460c      	mov	r4, r1
 800b79a:	d507      	bpl.n	800b7ac <__smakebuf_r+0x1c>
 800b79c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b7a0:	6023      	str	r3, [r4, #0]
 800b7a2:	6123      	str	r3, [r4, #16]
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	6163      	str	r3, [r4, #20]
 800b7a8:	b002      	add	sp, #8
 800b7aa:	bd70      	pop	{r4, r5, r6, pc}
 800b7ac:	466a      	mov	r2, sp
 800b7ae:	ab01      	add	r3, sp, #4
 800b7b0:	f7ff ffc9 	bl	800b746 <__swhatbuf_r>
 800b7b4:	9900      	ldr	r1, [sp, #0]
 800b7b6:	4605      	mov	r5, r0
 800b7b8:	4630      	mov	r0, r6
 800b7ba:	f7fc fc5d 	bl	8008078 <_malloc_r>
 800b7be:	b948      	cbnz	r0, 800b7d4 <__smakebuf_r+0x44>
 800b7c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7c4:	059a      	lsls	r2, r3, #22
 800b7c6:	d4ef      	bmi.n	800b7a8 <__smakebuf_r+0x18>
 800b7c8:	f023 0303 	bic.w	r3, r3, #3
 800b7cc:	f043 0302 	orr.w	r3, r3, #2
 800b7d0:	81a3      	strh	r3, [r4, #12]
 800b7d2:	e7e3      	b.n	800b79c <__smakebuf_r+0xc>
 800b7d4:	4b0d      	ldr	r3, [pc, #52]	; (800b80c <__smakebuf_r+0x7c>)
 800b7d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b7d8:	89a3      	ldrh	r3, [r4, #12]
 800b7da:	6020      	str	r0, [r4, #0]
 800b7dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7e0:	81a3      	strh	r3, [r4, #12]
 800b7e2:	9b00      	ldr	r3, [sp, #0]
 800b7e4:	6120      	str	r0, [r4, #16]
 800b7e6:	6163      	str	r3, [r4, #20]
 800b7e8:	9b01      	ldr	r3, [sp, #4]
 800b7ea:	b15b      	cbz	r3, 800b804 <__smakebuf_r+0x74>
 800b7ec:	4630      	mov	r0, r6
 800b7ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7f2:	f000 ff7b 	bl	800c6ec <_isatty_r>
 800b7f6:	b128      	cbz	r0, 800b804 <__smakebuf_r+0x74>
 800b7f8:	89a3      	ldrh	r3, [r4, #12]
 800b7fa:	f023 0303 	bic.w	r3, r3, #3
 800b7fe:	f043 0301 	orr.w	r3, r3, #1
 800b802:	81a3      	strh	r3, [r4, #12]
 800b804:	89a0      	ldrh	r0, [r4, #12]
 800b806:	4305      	orrs	r5, r0
 800b808:	81a5      	strh	r5, [r4, #12]
 800b80a:	e7cd      	b.n	800b7a8 <__smakebuf_r+0x18>
 800b80c:	0800aec9 	.word	0x0800aec9

0800b810 <__ascii_mbtowc>:
 800b810:	b082      	sub	sp, #8
 800b812:	b901      	cbnz	r1, 800b816 <__ascii_mbtowc+0x6>
 800b814:	a901      	add	r1, sp, #4
 800b816:	b142      	cbz	r2, 800b82a <__ascii_mbtowc+0x1a>
 800b818:	b14b      	cbz	r3, 800b82e <__ascii_mbtowc+0x1e>
 800b81a:	7813      	ldrb	r3, [r2, #0]
 800b81c:	600b      	str	r3, [r1, #0]
 800b81e:	7812      	ldrb	r2, [r2, #0]
 800b820:	1e10      	subs	r0, r2, #0
 800b822:	bf18      	it	ne
 800b824:	2001      	movne	r0, #1
 800b826:	b002      	add	sp, #8
 800b828:	4770      	bx	lr
 800b82a:	4610      	mov	r0, r2
 800b82c:	e7fb      	b.n	800b826 <__ascii_mbtowc+0x16>
 800b82e:	f06f 0001 	mvn.w	r0, #1
 800b832:	e7f8      	b.n	800b826 <__ascii_mbtowc+0x16>

0800b834 <memchr>:
 800b834:	4603      	mov	r3, r0
 800b836:	b510      	push	{r4, lr}
 800b838:	b2c9      	uxtb	r1, r1
 800b83a:	4402      	add	r2, r0
 800b83c:	4293      	cmp	r3, r2
 800b83e:	4618      	mov	r0, r3
 800b840:	d101      	bne.n	800b846 <memchr+0x12>
 800b842:	2000      	movs	r0, #0
 800b844:	e003      	b.n	800b84e <memchr+0x1a>
 800b846:	7804      	ldrb	r4, [r0, #0]
 800b848:	3301      	adds	r3, #1
 800b84a:	428c      	cmp	r4, r1
 800b84c:	d1f6      	bne.n	800b83c <memchr+0x8>
 800b84e:	bd10      	pop	{r4, pc}

0800b850 <memmove>:
 800b850:	4288      	cmp	r0, r1
 800b852:	b510      	push	{r4, lr}
 800b854:	eb01 0402 	add.w	r4, r1, r2
 800b858:	d902      	bls.n	800b860 <memmove+0x10>
 800b85a:	4284      	cmp	r4, r0
 800b85c:	4623      	mov	r3, r4
 800b85e:	d807      	bhi.n	800b870 <memmove+0x20>
 800b860:	1e43      	subs	r3, r0, #1
 800b862:	42a1      	cmp	r1, r4
 800b864:	d008      	beq.n	800b878 <memmove+0x28>
 800b866:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b86a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b86e:	e7f8      	b.n	800b862 <memmove+0x12>
 800b870:	4601      	mov	r1, r0
 800b872:	4402      	add	r2, r0
 800b874:	428a      	cmp	r2, r1
 800b876:	d100      	bne.n	800b87a <memmove+0x2a>
 800b878:	bd10      	pop	{r4, pc}
 800b87a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b87e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b882:	e7f7      	b.n	800b874 <memmove+0x24>

0800b884 <__malloc_lock>:
 800b884:	4801      	ldr	r0, [pc, #4]	; (800b88c <__malloc_lock+0x8>)
 800b886:	f7ff bf5c 	b.w	800b742 <__retarget_lock_acquire_recursive>
 800b88a:	bf00      	nop
 800b88c:	20000a54 	.word	0x20000a54

0800b890 <__malloc_unlock>:
 800b890:	4801      	ldr	r0, [pc, #4]	; (800b898 <__malloc_unlock+0x8>)
 800b892:	f7ff bf57 	b.w	800b744 <__retarget_lock_release_recursive>
 800b896:	bf00      	nop
 800b898:	20000a54 	.word	0x20000a54

0800b89c <_Balloc>:
 800b89c:	b570      	push	{r4, r5, r6, lr}
 800b89e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b8a0:	4604      	mov	r4, r0
 800b8a2:	460d      	mov	r5, r1
 800b8a4:	b976      	cbnz	r6, 800b8c4 <_Balloc+0x28>
 800b8a6:	2010      	movs	r0, #16
 800b8a8:	f7fc fb7c 	bl	8007fa4 <malloc>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	6260      	str	r0, [r4, #36]	; 0x24
 800b8b0:	b920      	cbnz	r0, 800b8bc <_Balloc+0x20>
 800b8b2:	2166      	movs	r1, #102	; 0x66
 800b8b4:	4b17      	ldr	r3, [pc, #92]	; (800b914 <_Balloc+0x78>)
 800b8b6:	4818      	ldr	r0, [pc, #96]	; (800b918 <_Balloc+0x7c>)
 800b8b8:	f7fc fb1a 	bl	8007ef0 <__assert_func>
 800b8bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8c0:	6006      	str	r6, [r0, #0]
 800b8c2:	60c6      	str	r6, [r0, #12]
 800b8c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b8c6:	68f3      	ldr	r3, [r6, #12]
 800b8c8:	b183      	cbz	r3, 800b8ec <_Balloc+0x50>
 800b8ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8cc:	68db      	ldr	r3, [r3, #12]
 800b8ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b8d2:	b9b8      	cbnz	r0, 800b904 <_Balloc+0x68>
 800b8d4:	2101      	movs	r1, #1
 800b8d6:	fa01 f605 	lsl.w	r6, r1, r5
 800b8da:	1d72      	adds	r2, r6, #5
 800b8dc:	4620      	mov	r0, r4
 800b8de:	0092      	lsls	r2, r2, #2
 800b8e0:	f000 fc94 	bl	800c20c <_calloc_r>
 800b8e4:	b160      	cbz	r0, 800b900 <_Balloc+0x64>
 800b8e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b8ea:	e00e      	b.n	800b90a <_Balloc+0x6e>
 800b8ec:	2221      	movs	r2, #33	; 0x21
 800b8ee:	2104      	movs	r1, #4
 800b8f0:	4620      	mov	r0, r4
 800b8f2:	f000 fc8b 	bl	800c20c <_calloc_r>
 800b8f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8f8:	60f0      	str	r0, [r6, #12]
 800b8fa:	68db      	ldr	r3, [r3, #12]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d1e4      	bne.n	800b8ca <_Balloc+0x2e>
 800b900:	2000      	movs	r0, #0
 800b902:	bd70      	pop	{r4, r5, r6, pc}
 800b904:	6802      	ldr	r2, [r0, #0]
 800b906:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b90a:	2300      	movs	r3, #0
 800b90c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b910:	e7f7      	b.n	800b902 <_Balloc+0x66>
 800b912:	bf00      	nop
 800b914:	0800ca1e 	.word	0x0800ca1e
 800b918:	0800cb88 	.word	0x0800cb88

0800b91c <_Bfree>:
 800b91c:	b570      	push	{r4, r5, r6, lr}
 800b91e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b920:	4605      	mov	r5, r0
 800b922:	460c      	mov	r4, r1
 800b924:	b976      	cbnz	r6, 800b944 <_Bfree+0x28>
 800b926:	2010      	movs	r0, #16
 800b928:	f7fc fb3c 	bl	8007fa4 <malloc>
 800b92c:	4602      	mov	r2, r0
 800b92e:	6268      	str	r0, [r5, #36]	; 0x24
 800b930:	b920      	cbnz	r0, 800b93c <_Bfree+0x20>
 800b932:	218a      	movs	r1, #138	; 0x8a
 800b934:	4b08      	ldr	r3, [pc, #32]	; (800b958 <_Bfree+0x3c>)
 800b936:	4809      	ldr	r0, [pc, #36]	; (800b95c <_Bfree+0x40>)
 800b938:	f7fc fada 	bl	8007ef0 <__assert_func>
 800b93c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b940:	6006      	str	r6, [r0, #0]
 800b942:	60c6      	str	r6, [r0, #12]
 800b944:	b13c      	cbz	r4, 800b956 <_Bfree+0x3a>
 800b946:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b948:	6862      	ldr	r2, [r4, #4]
 800b94a:	68db      	ldr	r3, [r3, #12]
 800b94c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b950:	6021      	str	r1, [r4, #0]
 800b952:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b956:	bd70      	pop	{r4, r5, r6, pc}
 800b958:	0800ca1e 	.word	0x0800ca1e
 800b95c:	0800cb88 	.word	0x0800cb88

0800b960 <__multadd>:
 800b960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b964:	4698      	mov	r8, r3
 800b966:	460c      	mov	r4, r1
 800b968:	2300      	movs	r3, #0
 800b96a:	690e      	ldr	r6, [r1, #16]
 800b96c:	4607      	mov	r7, r0
 800b96e:	f101 0014 	add.w	r0, r1, #20
 800b972:	6805      	ldr	r5, [r0, #0]
 800b974:	3301      	adds	r3, #1
 800b976:	b2a9      	uxth	r1, r5
 800b978:	fb02 8101 	mla	r1, r2, r1, r8
 800b97c:	0c2d      	lsrs	r5, r5, #16
 800b97e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b982:	fb02 c505 	mla	r5, r2, r5, ip
 800b986:	b289      	uxth	r1, r1
 800b988:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b98c:	429e      	cmp	r6, r3
 800b98e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b992:	f840 1b04 	str.w	r1, [r0], #4
 800b996:	dcec      	bgt.n	800b972 <__multadd+0x12>
 800b998:	f1b8 0f00 	cmp.w	r8, #0
 800b99c:	d022      	beq.n	800b9e4 <__multadd+0x84>
 800b99e:	68a3      	ldr	r3, [r4, #8]
 800b9a0:	42b3      	cmp	r3, r6
 800b9a2:	dc19      	bgt.n	800b9d8 <__multadd+0x78>
 800b9a4:	6861      	ldr	r1, [r4, #4]
 800b9a6:	4638      	mov	r0, r7
 800b9a8:	3101      	adds	r1, #1
 800b9aa:	f7ff ff77 	bl	800b89c <_Balloc>
 800b9ae:	4605      	mov	r5, r0
 800b9b0:	b928      	cbnz	r0, 800b9be <__multadd+0x5e>
 800b9b2:	4602      	mov	r2, r0
 800b9b4:	21b5      	movs	r1, #181	; 0xb5
 800b9b6:	4b0d      	ldr	r3, [pc, #52]	; (800b9ec <__multadd+0x8c>)
 800b9b8:	480d      	ldr	r0, [pc, #52]	; (800b9f0 <__multadd+0x90>)
 800b9ba:	f7fc fa99 	bl	8007ef0 <__assert_func>
 800b9be:	6922      	ldr	r2, [r4, #16]
 800b9c0:	f104 010c 	add.w	r1, r4, #12
 800b9c4:	3202      	adds	r2, #2
 800b9c6:	0092      	lsls	r2, r2, #2
 800b9c8:	300c      	adds	r0, #12
 800b9ca:	f7fc faf3 	bl	8007fb4 <memcpy>
 800b9ce:	4621      	mov	r1, r4
 800b9d0:	4638      	mov	r0, r7
 800b9d2:	f7ff ffa3 	bl	800b91c <_Bfree>
 800b9d6:	462c      	mov	r4, r5
 800b9d8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b9dc:	3601      	adds	r6, #1
 800b9de:	f8c3 8014 	str.w	r8, [r3, #20]
 800b9e2:	6126      	str	r6, [r4, #16]
 800b9e4:	4620      	mov	r0, r4
 800b9e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9ea:	bf00      	nop
 800b9ec:	0800ca94 	.word	0x0800ca94
 800b9f0:	0800cb88 	.word	0x0800cb88

0800b9f4 <__s2b>:
 800b9f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9f8:	4615      	mov	r5, r2
 800b9fa:	2209      	movs	r2, #9
 800b9fc:	461f      	mov	r7, r3
 800b9fe:	3308      	adds	r3, #8
 800ba00:	460c      	mov	r4, r1
 800ba02:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba06:	4606      	mov	r6, r0
 800ba08:	2201      	movs	r2, #1
 800ba0a:	2100      	movs	r1, #0
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	db09      	blt.n	800ba24 <__s2b+0x30>
 800ba10:	4630      	mov	r0, r6
 800ba12:	f7ff ff43 	bl	800b89c <_Balloc>
 800ba16:	b940      	cbnz	r0, 800ba2a <__s2b+0x36>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	21ce      	movs	r1, #206	; 0xce
 800ba1c:	4b18      	ldr	r3, [pc, #96]	; (800ba80 <__s2b+0x8c>)
 800ba1e:	4819      	ldr	r0, [pc, #100]	; (800ba84 <__s2b+0x90>)
 800ba20:	f7fc fa66 	bl	8007ef0 <__assert_func>
 800ba24:	0052      	lsls	r2, r2, #1
 800ba26:	3101      	adds	r1, #1
 800ba28:	e7f0      	b.n	800ba0c <__s2b+0x18>
 800ba2a:	9b08      	ldr	r3, [sp, #32]
 800ba2c:	2d09      	cmp	r5, #9
 800ba2e:	6143      	str	r3, [r0, #20]
 800ba30:	f04f 0301 	mov.w	r3, #1
 800ba34:	6103      	str	r3, [r0, #16]
 800ba36:	dd16      	ble.n	800ba66 <__s2b+0x72>
 800ba38:	f104 0909 	add.w	r9, r4, #9
 800ba3c:	46c8      	mov	r8, r9
 800ba3e:	442c      	add	r4, r5
 800ba40:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ba44:	4601      	mov	r1, r0
 800ba46:	220a      	movs	r2, #10
 800ba48:	4630      	mov	r0, r6
 800ba4a:	3b30      	subs	r3, #48	; 0x30
 800ba4c:	f7ff ff88 	bl	800b960 <__multadd>
 800ba50:	45a0      	cmp	r8, r4
 800ba52:	d1f5      	bne.n	800ba40 <__s2b+0x4c>
 800ba54:	f1a5 0408 	sub.w	r4, r5, #8
 800ba58:	444c      	add	r4, r9
 800ba5a:	1b2d      	subs	r5, r5, r4
 800ba5c:	1963      	adds	r3, r4, r5
 800ba5e:	42bb      	cmp	r3, r7
 800ba60:	db04      	blt.n	800ba6c <__s2b+0x78>
 800ba62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba66:	2509      	movs	r5, #9
 800ba68:	340a      	adds	r4, #10
 800ba6a:	e7f6      	b.n	800ba5a <__s2b+0x66>
 800ba6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ba70:	4601      	mov	r1, r0
 800ba72:	220a      	movs	r2, #10
 800ba74:	4630      	mov	r0, r6
 800ba76:	3b30      	subs	r3, #48	; 0x30
 800ba78:	f7ff ff72 	bl	800b960 <__multadd>
 800ba7c:	e7ee      	b.n	800ba5c <__s2b+0x68>
 800ba7e:	bf00      	nop
 800ba80:	0800ca94 	.word	0x0800ca94
 800ba84:	0800cb88 	.word	0x0800cb88

0800ba88 <__hi0bits>:
 800ba88:	0c02      	lsrs	r2, r0, #16
 800ba8a:	0412      	lsls	r2, r2, #16
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	b9ca      	cbnz	r2, 800bac4 <__hi0bits+0x3c>
 800ba90:	0403      	lsls	r3, r0, #16
 800ba92:	2010      	movs	r0, #16
 800ba94:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ba98:	bf04      	itt	eq
 800ba9a:	021b      	lsleq	r3, r3, #8
 800ba9c:	3008      	addeq	r0, #8
 800ba9e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800baa2:	bf04      	itt	eq
 800baa4:	011b      	lsleq	r3, r3, #4
 800baa6:	3004      	addeq	r0, #4
 800baa8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800baac:	bf04      	itt	eq
 800baae:	009b      	lsleq	r3, r3, #2
 800bab0:	3002      	addeq	r0, #2
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	db05      	blt.n	800bac2 <__hi0bits+0x3a>
 800bab6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800baba:	f100 0001 	add.w	r0, r0, #1
 800babe:	bf08      	it	eq
 800bac0:	2020      	moveq	r0, #32
 800bac2:	4770      	bx	lr
 800bac4:	2000      	movs	r0, #0
 800bac6:	e7e5      	b.n	800ba94 <__hi0bits+0xc>

0800bac8 <__lo0bits>:
 800bac8:	6803      	ldr	r3, [r0, #0]
 800baca:	4602      	mov	r2, r0
 800bacc:	f013 0007 	ands.w	r0, r3, #7
 800bad0:	d00b      	beq.n	800baea <__lo0bits+0x22>
 800bad2:	07d9      	lsls	r1, r3, #31
 800bad4:	d422      	bmi.n	800bb1c <__lo0bits+0x54>
 800bad6:	0798      	lsls	r0, r3, #30
 800bad8:	bf49      	itett	mi
 800bada:	085b      	lsrmi	r3, r3, #1
 800badc:	089b      	lsrpl	r3, r3, #2
 800bade:	2001      	movmi	r0, #1
 800bae0:	6013      	strmi	r3, [r2, #0]
 800bae2:	bf5c      	itt	pl
 800bae4:	2002      	movpl	r0, #2
 800bae6:	6013      	strpl	r3, [r2, #0]
 800bae8:	4770      	bx	lr
 800baea:	b299      	uxth	r1, r3
 800baec:	b909      	cbnz	r1, 800baf2 <__lo0bits+0x2a>
 800baee:	2010      	movs	r0, #16
 800baf0:	0c1b      	lsrs	r3, r3, #16
 800baf2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800baf6:	bf04      	itt	eq
 800baf8:	0a1b      	lsreq	r3, r3, #8
 800bafa:	3008      	addeq	r0, #8
 800bafc:	0719      	lsls	r1, r3, #28
 800bafe:	bf04      	itt	eq
 800bb00:	091b      	lsreq	r3, r3, #4
 800bb02:	3004      	addeq	r0, #4
 800bb04:	0799      	lsls	r1, r3, #30
 800bb06:	bf04      	itt	eq
 800bb08:	089b      	lsreq	r3, r3, #2
 800bb0a:	3002      	addeq	r0, #2
 800bb0c:	07d9      	lsls	r1, r3, #31
 800bb0e:	d403      	bmi.n	800bb18 <__lo0bits+0x50>
 800bb10:	085b      	lsrs	r3, r3, #1
 800bb12:	f100 0001 	add.w	r0, r0, #1
 800bb16:	d003      	beq.n	800bb20 <__lo0bits+0x58>
 800bb18:	6013      	str	r3, [r2, #0]
 800bb1a:	4770      	bx	lr
 800bb1c:	2000      	movs	r0, #0
 800bb1e:	4770      	bx	lr
 800bb20:	2020      	movs	r0, #32
 800bb22:	4770      	bx	lr

0800bb24 <__i2b>:
 800bb24:	b510      	push	{r4, lr}
 800bb26:	460c      	mov	r4, r1
 800bb28:	2101      	movs	r1, #1
 800bb2a:	f7ff feb7 	bl	800b89c <_Balloc>
 800bb2e:	4602      	mov	r2, r0
 800bb30:	b928      	cbnz	r0, 800bb3e <__i2b+0x1a>
 800bb32:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bb36:	4b04      	ldr	r3, [pc, #16]	; (800bb48 <__i2b+0x24>)
 800bb38:	4804      	ldr	r0, [pc, #16]	; (800bb4c <__i2b+0x28>)
 800bb3a:	f7fc f9d9 	bl	8007ef0 <__assert_func>
 800bb3e:	2301      	movs	r3, #1
 800bb40:	6144      	str	r4, [r0, #20]
 800bb42:	6103      	str	r3, [r0, #16]
 800bb44:	bd10      	pop	{r4, pc}
 800bb46:	bf00      	nop
 800bb48:	0800ca94 	.word	0x0800ca94
 800bb4c:	0800cb88 	.word	0x0800cb88

0800bb50 <__multiply>:
 800bb50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb54:	4614      	mov	r4, r2
 800bb56:	690a      	ldr	r2, [r1, #16]
 800bb58:	6923      	ldr	r3, [r4, #16]
 800bb5a:	460d      	mov	r5, r1
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	bfbe      	ittt	lt
 800bb60:	460b      	movlt	r3, r1
 800bb62:	4625      	movlt	r5, r4
 800bb64:	461c      	movlt	r4, r3
 800bb66:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bb6a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bb6e:	68ab      	ldr	r3, [r5, #8]
 800bb70:	6869      	ldr	r1, [r5, #4]
 800bb72:	eb0a 0709 	add.w	r7, sl, r9
 800bb76:	42bb      	cmp	r3, r7
 800bb78:	b085      	sub	sp, #20
 800bb7a:	bfb8      	it	lt
 800bb7c:	3101      	addlt	r1, #1
 800bb7e:	f7ff fe8d 	bl	800b89c <_Balloc>
 800bb82:	b930      	cbnz	r0, 800bb92 <__multiply+0x42>
 800bb84:	4602      	mov	r2, r0
 800bb86:	f240 115d 	movw	r1, #349	; 0x15d
 800bb8a:	4b41      	ldr	r3, [pc, #260]	; (800bc90 <__multiply+0x140>)
 800bb8c:	4841      	ldr	r0, [pc, #260]	; (800bc94 <__multiply+0x144>)
 800bb8e:	f7fc f9af 	bl	8007ef0 <__assert_func>
 800bb92:	f100 0614 	add.w	r6, r0, #20
 800bb96:	4633      	mov	r3, r6
 800bb98:	2200      	movs	r2, #0
 800bb9a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bb9e:	4543      	cmp	r3, r8
 800bba0:	d31e      	bcc.n	800bbe0 <__multiply+0x90>
 800bba2:	f105 0c14 	add.w	ip, r5, #20
 800bba6:	f104 0314 	add.w	r3, r4, #20
 800bbaa:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bbae:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bbb2:	9202      	str	r2, [sp, #8]
 800bbb4:	ebac 0205 	sub.w	r2, ip, r5
 800bbb8:	3a15      	subs	r2, #21
 800bbba:	f022 0203 	bic.w	r2, r2, #3
 800bbbe:	3204      	adds	r2, #4
 800bbc0:	f105 0115 	add.w	r1, r5, #21
 800bbc4:	458c      	cmp	ip, r1
 800bbc6:	bf38      	it	cc
 800bbc8:	2204      	movcc	r2, #4
 800bbca:	9201      	str	r2, [sp, #4]
 800bbcc:	9a02      	ldr	r2, [sp, #8]
 800bbce:	9303      	str	r3, [sp, #12]
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d808      	bhi.n	800bbe6 <__multiply+0x96>
 800bbd4:	2f00      	cmp	r7, #0
 800bbd6:	dc55      	bgt.n	800bc84 <__multiply+0x134>
 800bbd8:	6107      	str	r7, [r0, #16]
 800bbda:	b005      	add	sp, #20
 800bbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbe0:	f843 2b04 	str.w	r2, [r3], #4
 800bbe4:	e7db      	b.n	800bb9e <__multiply+0x4e>
 800bbe6:	f8b3 a000 	ldrh.w	sl, [r3]
 800bbea:	f1ba 0f00 	cmp.w	sl, #0
 800bbee:	d020      	beq.n	800bc32 <__multiply+0xe2>
 800bbf0:	46b1      	mov	r9, r6
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	f105 0e14 	add.w	lr, r5, #20
 800bbf8:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bbfc:	f8d9 b000 	ldr.w	fp, [r9]
 800bc00:	b2a1      	uxth	r1, r4
 800bc02:	fa1f fb8b 	uxth.w	fp, fp
 800bc06:	fb0a b101 	mla	r1, sl, r1, fp
 800bc0a:	4411      	add	r1, r2
 800bc0c:	f8d9 2000 	ldr.w	r2, [r9]
 800bc10:	0c24      	lsrs	r4, r4, #16
 800bc12:	0c12      	lsrs	r2, r2, #16
 800bc14:	fb0a 2404 	mla	r4, sl, r4, r2
 800bc18:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bc1c:	b289      	uxth	r1, r1
 800bc1e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bc22:	45f4      	cmp	ip, lr
 800bc24:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bc28:	f849 1b04 	str.w	r1, [r9], #4
 800bc2c:	d8e4      	bhi.n	800bbf8 <__multiply+0xa8>
 800bc2e:	9901      	ldr	r1, [sp, #4]
 800bc30:	5072      	str	r2, [r6, r1]
 800bc32:	9a03      	ldr	r2, [sp, #12]
 800bc34:	3304      	adds	r3, #4
 800bc36:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bc3a:	f1b9 0f00 	cmp.w	r9, #0
 800bc3e:	d01f      	beq.n	800bc80 <__multiply+0x130>
 800bc40:	46b6      	mov	lr, r6
 800bc42:	f04f 0a00 	mov.w	sl, #0
 800bc46:	6834      	ldr	r4, [r6, #0]
 800bc48:	f105 0114 	add.w	r1, r5, #20
 800bc4c:	880a      	ldrh	r2, [r1, #0]
 800bc4e:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bc52:	b2a4      	uxth	r4, r4
 800bc54:	fb09 b202 	mla	r2, r9, r2, fp
 800bc58:	4492      	add	sl, r2
 800bc5a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bc5e:	f84e 4b04 	str.w	r4, [lr], #4
 800bc62:	f851 4b04 	ldr.w	r4, [r1], #4
 800bc66:	f8be 2000 	ldrh.w	r2, [lr]
 800bc6a:	0c24      	lsrs	r4, r4, #16
 800bc6c:	fb09 2404 	mla	r4, r9, r4, r2
 800bc70:	458c      	cmp	ip, r1
 800bc72:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bc76:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bc7a:	d8e7      	bhi.n	800bc4c <__multiply+0xfc>
 800bc7c:	9a01      	ldr	r2, [sp, #4]
 800bc7e:	50b4      	str	r4, [r6, r2]
 800bc80:	3604      	adds	r6, #4
 800bc82:	e7a3      	b.n	800bbcc <__multiply+0x7c>
 800bc84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d1a5      	bne.n	800bbd8 <__multiply+0x88>
 800bc8c:	3f01      	subs	r7, #1
 800bc8e:	e7a1      	b.n	800bbd4 <__multiply+0x84>
 800bc90:	0800ca94 	.word	0x0800ca94
 800bc94:	0800cb88 	.word	0x0800cb88

0800bc98 <__pow5mult>:
 800bc98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc9c:	4615      	mov	r5, r2
 800bc9e:	f012 0203 	ands.w	r2, r2, #3
 800bca2:	4606      	mov	r6, r0
 800bca4:	460f      	mov	r7, r1
 800bca6:	d007      	beq.n	800bcb8 <__pow5mult+0x20>
 800bca8:	4c25      	ldr	r4, [pc, #148]	; (800bd40 <__pow5mult+0xa8>)
 800bcaa:	3a01      	subs	r2, #1
 800bcac:	2300      	movs	r3, #0
 800bcae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bcb2:	f7ff fe55 	bl	800b960 <__multadd>
 800bcb6:	4607      	mov	r7, r0
 800bcb8:	10ad      	asrs	r5, r5, #2
 800bcba:	d03d      	beq.n	800bd38 <__pow5mult+0xa0>
 800bcbc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bcbe:	b97c      	cbnz	r4, 800bce0 <__pow5mult+0x48>
 800bcc0:	2010      	movs	r0, #16
 800bcc2:	f7fc f96f 	bl	8007fa4 <malloc>
 800bcc6:	4602      	mov	r2, r0
 800bcc8:	6270      	str	r0, [r6, #36]	; 0x24
 800bcca:	b928      	cbnz	r0, 800bcd8 <__pow5mult+0x40>
 800bccc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bcd0:	4b1c      	ldr	r3, [pc, #112]	; (800bd44 <__pow5mult+0xac>)
 800bcd2:	481d      	ldr	r0, [pc, #116]	; (800bd48 <__pow5mult+0xb0>)
 800bcd4:	f7fc f90c 	bl	8007ef0 <__assert_func>
 800bcd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bcdc:	6004      	str	r4, [r0, #0]
 800bcde:	60c4      	str	r4, [r0, #12]
 800bce0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bce4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bce8:	b94c      	cbnz	r4, 800bcfe <__pow5mult+0x66>
 800bcea:	f240 2171 	movw	r1, #625	; 0x271
 800bcee:	4630      	mov	r0, r6
 800bcf0:	f7ff ff18 	bl	800bb24 <__i2b>
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	4604      	mov	r4, r0
 800bcf8:	f8c8 0008 	str.w	r0, [r8, #8]
 800bcfc:	6003      	str	r3, [r0, #0]
 800bcfe:	f04f 0900 	mov.w	r9, #0
 800bd02:	07eb      	lsls	r3, r5, #31
 800bd04:	d50a      	bpl.n	800bd1c <__pow5mult+0x84>
 800bd06:	4639      	mov	r1, r7
 800bd08:	4622      	mov	r2, r4
 800bd0a:	4630      	mov	r0, r6
 800bd0c:	f7ff ff20 	bl	800bb50 <__multiply>
 800bd10:	4680      	mov	r8, r0
 800bd12:	4639      	mov	r1, r7
 800bd14:	4630      	mov	r0, r6
 800bd16:	f7ff fe01 	bl	800b91c <_Bfree>
 800bd1a:	4647      	mov	r7, r8
 800bd1c:	106d      	asrs	r5, r5, #1
 800bd1e:	d00b      	beq.n	800bd38 <__pow5mult+0xa0>
 800bd20:	6820      	ldr	r0, [r4, #0]
 800bd22:	b938      	cbnz	r0, 800bd34 <__pow5mult+0x9c>
 800bd24:	4622      	mov	r2, r4
 800bd26:	4621      	mov	r1, r4
 800bd28:	4630      	mov	r0, r6
 800bd2a:	f7ff ff11 	bl	800bb50 <__multiply>
 800bd2e:	6020      	str	r0, [r4, #0]
 800bd30:	f8c0 9000 	str.w	r9, [r0]
 800bd34:	4604      	mov	r4, r0
 800bd36:	e7e4      	b.n	800bd02 <__pow5mult+0x6a>
 800bd38:	4638      	mov	r0, r7
 800bd3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd3e:	bf00      	nop
 800bd40:	0800ccd8 	.word	0x0800ccd8
 800bd44:	0800ca1e 	.word	0x0800ca1e
 800bd48:	0800cb88 	.word	0x0800cb88

0800bd4c <__lshift>:
 800bd4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd50:	460c      	mov	r4, r1
 800bd52:	4607      	mov	r7, r0
 800bd54:	4691      	mov	r9, r2
 800bd56:	6923      	ldr	r3, [r4, #16]
 800bd58:	6849      	ldr	r1, [r1, #4]
 800bd5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bd5e:	68a3      	ldr	r3, [r4, #8]
 800bd60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bd64:	f108 0601 	add.w	r6, r8, #1
 800bd68:	42b3      	cmp	r3, r6
 800bd6a:	db0b      	blt.n	800bd84 <__lshift+0x38>
 800bd6c:	4638      	mov	r0, r7
 800bd6e:	f7ff fd95 	bl	800b89c <_Balloc>
 800bd72:	4605      	mov	r5, r0
 800bd74:	b948      	cbnz	r0, 800bd8a <__lshift+0x3e>
 800bd76:	4602      	mov	r2, r0
 800bd78:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bd7c:	4b27      	ldr	r3, [pc, #156]	; (800be1c <__lshift+0xd0>)
 800bd7e:	4828      	ldr	r0, [pc, #160]	; (800be20 <__lshift+0xd4>)
 800bd80:	f7fc f8b6 	bl	8007ef0 <__assert_func>
 800bd84:	3101      	adds	r1, #1
 800bd86:	005b      	lsls	r3, r3, #1
 800bd88:	e7ee      	b.n	800bd68 <__lshift+0x1c>
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	f100 0114 	add.w	r1, r0, #20
 800bd90:	f100 0210 	add.w	r2, r0, #16
 800bd94:	4618      	mov	r0, r3
 800bd96:	4553      	cmp	r3, sl
 800bd98:	db33      	blt.n	800be02 <__lshift+0xb6>
 800bd9a:	6920      	ldr	r0, [r4, #16]
 800bd9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bda0:	f104 0314 	add.w	r3, r4, #20
 800bda4:	f019 091f 	ands.w	r9, r9, #31
 800bda8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bdac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bdb0:	d02b      	beq.n	800be0a <__lshift+0xbe>
 800bdb2:	468a      	mov	sl, r1
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	f1c9 0e20 	rsb	lr, r9, #32
 800bdba:	6818      	ldr	r0, [r3, #0]
 800bdbc:	fa00 f009 	lsl.w	r0, r0, r9
 800bdc0:	4302      	orrs	r2, r0
 800bdc2:	f84a 2b04 	str.w	r2, [sl], #4
 800bdc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdca:	459c      	cmp	ip, r3
 800bdcc:	fa22 f20e 	lsr.w	r2, r2, lr
 800bdd0:	d8f3      	bhi.n	800bdba <__lshift+0x6e>
 800bdd2:	ebac 0304 	sub.w	r3, ip, r4
 800bdd6:	3b15      	subs	r3, #21
 800bdd8:	f023 0303 	bic.w	r3, r3, #3
 800bddc:	3304      	adds	r3, #4
 800bdde:	f104 0015 	add.w	r0, r4, #21
 800bde2:	4584      	cmp	ip, r0
 800bde4:	bf38      	it	cc
 800bde6:	2304      	movcc	r3, #4
 800bde8:	50ca      	str	r2, [r1, r3]
 800bdea:	b10a      	cbz	r2, 800bdf0 <__lshift+0xa4>
 800bdec:	f108 0602 	add.w	r6, r8, #2
 800bdf0:	3e01      	subs	r6, #1
 800bdf2:	4638      	mov	r0, r7
 800bdf4:	4621      	mov	r1, r4
 800bdf6:	612e      	str	r6, [r5, #16]
 800bdf8:	f7ff fd90 	bl	800b91c <_Bfree>
 800bdfc:	4628      	mov	r0, r5
 800bdfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be02:	f842 0f04 	str.w	r0, [r2, #4]!
 800be06:	3301      	adds	r3, #1
 800be08:	e7c5      	b.n	800bd96 <__lshift+0x4a>
 800be0a:	3904      	subs	r1, #4
 800be0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800be10:	459c      	cmp	ip, r3
 800be12:	f841 2f04 	str.w	r2, [r1, #4]!
 800be16:	d8f9      	bhi.n	800be0c <__lshift+0xc0>
 800be18:	e7ea      	b.n	800bdf0 <__lshift+0xa4>
 800be1a:	bf00      	nop
 800be1c:	0800ca94 	.word	0x0800ca94
 800be20:	0800cb88 	.word	0x0800cb88

0800be24 <__mcmp>:
 800be24:	4603      	mov	r3, r0
 800be26:	690a      	ldr	r2, [r1, #16]
 800be28:	6900      	ldr	r0, [r0, #16]
 800be2a:	b530      	push	{r4, r5, lr}
 800be2c:	1a80      	subs	r0, r0, r2
 800be2e:	d10d      	bne.n	800be4c <__mcmp+0x28>
 800be30:	3314      	adds	r3, #20
 800be32:	3114      	adds	r1, #20
 800be34:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800be38:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800be3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800be40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800be44:	4295      	cmp	r5, r2
 800be46:	d002      	beq.n	800be4e <__mcmp+0x2a>
 800be48:	d304      	bcc.n	800be54 <__mcmp+0x30>
 800be4a:	2001      	movs	r0, #1
 800be4c:	bd30      	pop	{r4, r5, pc}
 800be4e:	42a3      	cmp	r3, r4
 800be50:	d3f4      	bcc.n	800be3c <__mcmp+0x18>
 800be52:	e7fb      	b.n	800be4c <__mcmp+0x28>
 800be54:	f04f 30ff 	mov.w	r0, #4294967295
 800be58:	e7f8      	b.n	800be4c <__mcmp+0x28>
	...

0800be5c <__mdiff>:
 800be5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be60:	460c      	mov	r4, r1
 800be62:	4606      	mov	r6, r0
 800be64:	4611      	mov	r1, r2
 800be66:	4620      	mov	r0, r4
 800be68:	4692      	mov	sl, r2
 800be6a:	f7ff ffdb 	bl	800be24 <__mcmp>
 800be6e:	1e05      	subs	r5, r0, #0
 800be70:	d111      	bne.n	800be96 <__mdiff+0x3a>
 800be72:	4629      	mov	r1, r5
 800be74:	4630      	mov	r0, r6
 800be76:	f7ff fd11 	bl	800b89c <_Balloc>
 800be7a:	4602      	mov	r2, r0
 800be7c:	b928      	cbnz	r0, 800be8a <__mdiff+0x2e>
 800be7e:	f240 2132 	movw	r1, #562	; 0x232
 800be82:	4b3c      	ldr	r3, [pc, #240]	; (800bf74 <__mdiff+0x118>)
 800be84:	483c      	ldr	r0, [pc, #240]	; (800bf78 <__mdiff+0x11c>)
 800be86:	f7fc f833 	bl	8007ef0 <__assert_func>
 800be8a:	2301      	movs	r3, #1
 800be8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800be90:	4610      	mov	r0, r2
 800be92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be96:	bfa4      	itt	ge
 800be98:	4653      	movge	r3, sl
 800be9a:	46a2      	movge	sl, r4
 800be9c:	4630      	mov	r0, r6
 800be9e:	f8da 1004 	ldr.w	r1, [sl, #4]
 800bea2:	bfa6      	itte	ge
 800bea4:	461c      	movge	r4, r3
 800bea6:	2500      	movge	r5, #0
 800bea8:	2501      	movlt	r5, #1
 800beaa:	f7ff fcf7 	bl	800b89c <_Balloc>
 800beae:	4602      	mov	r2, r0
 800beb0:	b918      	cbnz	r0, 800beba <__mdiff+0x5e>
 800beb2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800beb6:	4b2f      	ldr	r3, [pc, #188]	; (800bf74 <__mdiff+0x118>)
 800beb8:	e7e4      	b.n	800be84 <__mdiff+0x28>
 800beba:	f100 0814 	add.w	r8, r0, #20
 800bebe:	f8da 7010 	ldr.w	r7, [sl, #16]
 800bec2:	60c5      	str	r5, [r0, #12]
 800bec4:	f04f 0c00 	mov.w	ip, #0
 800bec8:	f10a 0514 	add.w	r5, sl, #20
 800becc:	f10a 0010 	add.w	r0, sl, #16
 800bed0:	46c2      	mov	sl, r8
 800bed2:	6926      	ldr	r6, [r4, #16]
 800bed4:	f104 0914 	add.w	r9, r4, #20
 800bed8:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800bedc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bee0:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800bee4:	f859 3b04 	ldr.w	r3, [r9], #4
 800bee8:	fa1f f18b 	uxth.w	r1, fp
 800beec:	4461      	add	r1, ip
 800beee:	fa1f fc83 	uxth.w	ip, r3
 800bef2:	0c1b      	lsrs	r3, r3, #16
 800bef4:	eba1 010c 	sub.w	r1, r1, ip
 800bef8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800befc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bf00:	b289      	uxth	r1, r1
 800bf02:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800bf06:	454e      	cmp	r6, r9
 800bf08:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800bf0c:	f84a 3b04 	str.w	r3, [sl], #4
 800bf10:	d8e6      	bhi.n	800bee0 <__mdiff+0x84>
 800bf12:	1b33      	subs	r3, r6, r4
 800bf14:	3b15      	subs	r3, #21
 800bf16:	f023 0303 	bic.w	r3, r3, #3
 800bf1a:	3415      	adds	r4, #21
 800bf1c:	3304      	adds	r3, #4
 800bf1e:	42a6      	cmp	r6, r4
 800bf20:	bf38      	it	cc
 800bf22:	2304      	movcc	r3, #4
 800bf24:	441d      	add	r5, r3
 800bf26:	4443      	add	r3, r8
 800bf28:	461e      	mov	r6, r3
 800bf2a:	462c      	mov	r4, r5
 800bf2c:	4574      	cmp	r4, lr
 800bf2e:	d30e      	bcc.n	800bf4e <__mdiff+0xf2>
 800bf30:	f10e 0103 	add.w	r1, lr, #3
 800bf34:	1b49      	subs	r1, r1, r5
 800bf36:	f021 0103 	bic.w	r1, r1, #3
 800bf3a:	3d03      	subs	r5, #3
 800bf3c:	45ae      	cmp	lr, r5
 800bf3e:	bf38      	it	cc
 800bf40:	2100      	movcc	r1, #0
 800bf42:	4419      	add	r1, r3
 800bf44:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800bf48:	b18b      	cbz	r3, 800bf6e <__mdiff+0x112>
 800bf4a:	6117      	str	r7, [r2, #16]
 800bf4c:	e7a0      	b.n	800be90 <__mdiff+0x34>
 800bf4e:	f854 8b04 	ldr.w	r8, [r4], #4
 800bf52:	fa1f f188 	uxth.w	r1, r8
 800bf56:	4461      	add	r1, ip
 800bf58:	1408      	asrs	r0, r1, #16
 800bf5a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800bf5e:	b289      	uxth	r1, r1
 800bf60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bf64:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bf68:	f846 1b04 	str.w	r1, [r6], #4
 800bf6c:	e7de      	b.n	800bf2c <__mdiff+0xd0>
 800bf6e:	3f01      	subs	r7, #1
 800bf70:	e7e8      	b.n	800bf44 <__mdiff+0xe8>
 800bf72:	bf00      	nop
 800bf74:	0800ca94 	.word	0x0800ca94
 800bf78:	0800cb88 	.word	0x0800cb88

0800bf7c <__ulp>:
 800bf7c:	4b11      	ldr	r3, [pc, #68]	; (800bfc4 <__ulp+0x48>)
 800bf7e:	400b      	ands	r3, r1
 800bf80:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	dd02      	ble.n	800bf8e <__ulp+0x12>
 800bf88:	2000      	movs	r0, #0
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	4770      	bx	lr
 800bf8e:	425b      	negs	r3, r3
 800bf90:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800bf94:	f04f 0000 	mov.w	r0, #0
 800bf98:	f04f 0100 	mov.w	r1, #0
 800bf9c:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bfa0:	da04      	bge.n	800bfac <__ulp+0x30>
 800bfa2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bfa6:	fa43 f102 	asr.w	r1, r3, r2
 800bfaa:	4770      	bx	lr
 800bfac:	f1a2 0314 	sub.w	r3, r2, #20
 800bfb0:	2b1e      	cmp	r3, #30
 800bfb2:	bfd6      	itet	le
 800bfb4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800bfb8:	2301      	movgt	r3, #1
 800bfba:	fa22 f303 	lsrle.w	r3, r2, r3
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	4770      	bx	lr
 800bfc2:	bf00      	nop
 800bfc4:	7ff00000 	.word	0x7ff00000

0800bfc8 <__b2d>:
 800bfc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfcc:	6907      	ldr	r7, [r0, #16]
 800bfce:	f100 0914 	add.w	r9, r0, #20
 800bfd2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800bfd6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800bfda:	f1a7 0804 	sub.w	r8, r7, #4
 800bfde:	4630      	mov	r0, r6
 800bfe0:	f7ff fd52 	bl	800ba88 <__hi0bits>
 800bfe4:	f1c0 0320 	rsb	r3, r0, #32
 800bfe8:	280a      	cmp	r0, #10
 800bfea:	600b      	str	r3, [r1, #0]
 800bfec:	491f      	ldr	r1, [pc, #124]	; (800c06c <__b2d+0xa4>)
 800bfee:	dc17      	bgt.n	800c020 <__b2d+0x58>
 800bff0:	45c1      	cmp	r9, r8
 800bff2:	bf28      	it	cs
 800bff4:	2200      	movcs	r2, #0
 800bff6:	f1c0 0c0b 	rsb	ip, r0, #11
 800bffa:	fa26 f30c 	lsr.w	r3, r6, ip
 800bffe:	bf38      	it	cc
 800c000:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c004:	ea43 0501 	orr.w	r5, r3, r1
 800c008:	f100 0315 	add.w	r3, r0, #21
 800c00c:	fa06 f303 	lsl.w	r3, r6, r3
 800c010:	fa22 f20c 	lsr.w	r2, r2, ip
 800c014:	ea43 0402 	orr.w	r4, r3, r2
 800c018:	4620      	mov	r0, r4
 800c01a:	4629      	mov	r1, r5
 800c01c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c020:	45c1      	cmp	r9, r8
 800c022:	bf2e      	itee	cs
 800c024:	2200      	movcs	r2, #0
 800c026:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c02a:	f1a7 0808 	subcc.w	r8, r7, #8
 800c02e:	f1b0 030b 	subs.w	r3, r0, #11
 800c032:	d016      	beq.n	800c062 <__b2d+0x9a>
 800c034:	f1c3 0720 	rsb	r7, r3, #32
 800c038:	fa22 f107 	lsr.w	r1, r2, r7
 800c03c:	45c8      	cmp	r8, r9
 800c03e:	fa06 f603 	lsl.w	r6, r6, r3
 800c042:	ea46 0601 	orr.w	r6, r6, r1
 800c046:	bf94      	ite	ls
 800c048:	2100      	movls	r1, #0
 800c04a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800c04e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800c052:	fa02 f003 	lsl.w	r0, r2, r3
 800c056:	40f9      	lsrs	r1, r7
 800c058:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c05c:	ea40 0401 	orr.w	r4, r0, r1
 800c060:	e7da      	b.n	800c018 <__b2d+0x50>
 800c062:	4614      	mov	r4, r2
 800c064:	ea46 0501 	orr.w	r5, r6, r1
 800c068:	e7d6      	b.n	800c018 <__b2d+0x50>
 800c06a:	bf00      	nop
 800c06c:	3ff00000 	.word	0x3ff00000

0800c070 <__d2b>:
 800c070:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c074:	2101      	movs	r1, #1
 800c076:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c07a:	4690      	mov	r8, r2
 800c07c:	461d      	mov	r5, r3
 800c07e:	f7ff fc0d 	bl	800b89c <_Balloc>
 800c082:	4604      	mov	r4, r0
 800c084:	b930      	cbnz	r0, 800c094 <__d2b+0x24>
 800c086:	4602      	mov	r2, r0
 800c088:	f240 310a 	movw	r1, #778	; 0x30a
 800c08c:	4b24      	ldr	r3, [pc, #144]	; (800c120 <__d2b+0xb0>)
 800c08e:	4825      	ldr	r0, [pc, #148]	; (800c124 <__d2b+0xb4>)
 800c090:	f7fb ff2e 	bl	8007ef0 <__assert_func>
 800c094:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c098:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c09c:	bb2d      	cbnz	r5, 800c0ea <__d2b+0x7a>
 800c09e:	9301      	str	r3, [sp, #4]
 800c0a0:	f1b8 0300 	subs.w	r3, r8, #0
 800c0a4:	d026      	beq.n	800c0f4 <__d2b+0x84>
 800c0a6:	4668      	mov	r0, sp
 800c0a8:	9300      	str	r3, [sp, #0]
 800c0aa:	f7ff fd0d 	bl	800bac8 <__lo0bits>
 800c0ae:	9900      	ldr	r1, [sp, #0]
 800c0b0:	b1f0      	cbz	r0, 800c0f0 <__d2b+0x80>
 800c0b2:	9a01      	ldr	r2, [sp, #4]
 800c0b4:	f1c0 0320 	rsb	r3, r0, #32
 800c0b8:	fa02 f303 	lsl.w	r3, r2, r3
 800c0bc:	430b      	orrs	r3, r1
 800c0be:	40c2      	lsrs	r2, r0
 800c0c0:	6163      	str	r3, [r4, #20]
 800c0c2:	9201      	str	r2, [sp, #4]
 800c0c4:	9b01      	ldr	r3, [sp, #4]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	bf14      	ite	ne
 800c0ca:	2102      	movne	r1, #2
 800c0cc:	2101      	moveq	r1, #1
 800c0ce:	61a3      	str	r3, [r4, #24]
 800c0d0:	6121      	str	r1, [r4, #16]
 800c0d2:	b1c5      	cbz	r5, 800c106 <__d2b+0x96>
 800c0d4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c0d8:	4405      	add	r5, r0
 800c0da:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c0de:	603d      	str	r5, [r7, #0]
 800c0e0:	6030      	str	r0, [r6, #0]
 800c0e2:	4620      	mov	r0, r4
 800c0e4:	b002      	add	sp, #8
 800c0e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c0ee:	e7d6      	b.n	800c09e <__d2b+0x2e>
 800c0f0:	6161      	str	r1, [r4, #20]
 800c0f2:	e7e7      	b.n	800c0c4 <__d2b+0x54>
 800c0f4:	a801      	add	r0, sp, #4
 800c0f6:	f7ff fce7 	bl	800bac8 <__lo0bits>
 800c0fa:	2101      	movs	r1, #1
 800c0fc:	9b01      	ldr	r3, [sp, #4]
 800c0fe:	6121      	str	r1, [r4, #16]
 800c100:	6163      	str	r3, [r4, #20]
 800c102:	3020      	adds	r0, #32
 800c104:	e7e5      	b.n	800c0d2 <__d2b+0x62>
 800c106:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c10a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c10e:	6038      	str	r0, [r7, #0]
 800c110:	6918      	ldr	r0, [r3, #16]
 800c112:	f7ff fcb9 	bl	800ba88 <__hi0bits>
 800c116:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c11a:	6031      	str	r1, [r6, #0]
 800c11c:	e7e1      	b.n	800c0e2 <__d2b+0x72>
 800c11e:	bf00      	nop
 800c120:	0800ca94 	.word	0x0800ca94
 800c124:	0800cb88 	.word	0x0800cb88

0800c128 <__ratio>:
 800c128:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c12c:	4688      	mov	r8, r1
 800c12e:	4669      	mov	r1, sp
 800c130:	4681      	mov	r9, r0
 800c132:	f7ff ff49 	bl	800bfc8 <__b2d>
 800c136:	460f      	mov	r7, r1
 800c138:	4604      	mov	r4, r0
 800c13a:	460d      	mov	r5, r1
 800c13c:	4640      	mov	r0, r8
 800c13e:	a901      	add	r1, sp, #4
 800c140:	f7ff ff42 	bl	800bfc8 <__b2d>
 800c144:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c148:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c14c:	468b      	mov	fp, r1
 800c14e:	eba3 0c02 	sub.w	ip, r3, r2
 800c152:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c156:	1a9b      	subs	r3, r3, r2
 800c158:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	bfd5      	itete	le
 800c160:	460a      	movle	r2, r1
 800c162:	462a      	movgt	r2, r5
 800c164:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c168:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c16c:	bfd8      	it	le
 800c16e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c172:	465b      	mov	r3, fp
 800c174:	4602      	mov	r2, r0
 800c176:	4639      	mov	r1, r7
 800c178:	4620      	mov	r0, r4
 800c17a:	f7f4 fad7 	bl	800072c <__aeabi_ddiv>
 800c17e:	b003      	add	sp, #12
 800c180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c184 <__copybits>:
 800c184:	3901      	subs	r1, #1
 800c186:	b570      	push	{r4, r5, r6, lr}
 800c188:	1149      	asrs	r1, r1, #5
 800c18a:	6914      	ldr	r4, [r2, #16]
 800c18c:	3101      	adds	r1, #1
 800c18e:	f102 0314 	add.w	r3, r2, #20
 800c192:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c196:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c19a:	1f05      	subs	r5, r0, #4
 800c19c:	42a3      	cmp	r3, r4
 800c19e:	d30c      	bcc.n	800c1ba <__copybits+0x36>
 800c1a0:	1aa3      	subs	r3, r4, r2
 800c1a2:	3b11      	subs	r3, #17
 800c1a4:	f023 0303 	bic.w	r3, r3, #3
 800c1a8:	3211      	adds	r2, #17
 800c1aa:	42a2      	cmp	r2, r4
 800c1ac:	bf88      	it	hi
 800c1ae:	2300      	movhi	r3, #0
 800c1b0:	4418      	add	r0, r3
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	4288      	cmp	r0, r1
 800c1b6:	d305      	bcc.n	800c1c4 <__copybits+0x40>
 800c1b8:	bd70      	pop	{r4, r5, r6, pc}
 800c1ba:	f853 6b04 	ldr.w	r6, [r3], #4
 800c1be:	f845 6f04 	str.w	r6, [r5, #4]!
 800c1c2:	e7eb      	b.n	800c19c <__copybits+0x18>
 800c1c4:	f840 3b04 	str.w	r3, [r0], #4
 800c1c8:	e7f4      	b.n	800c1b4 <__copybits+0x30>

0800c1ca <__any_on>:
 800c1ca:	f100 0214 	add.w	r2, r0, #20
 800c1ce:	6900      	ldr	r0, [r0, #16]
 800c1d0:	114b      	asrs	r3, r1, #5
 800c1d2:	4298      	cmp	r0, r3
 800c1d4:	b510      	push	{r4, lr}
 800c1d6:	db11      	blt.n	800c1fc <__any_on+0x32>
 800c1d8:	dd0a      	ble.n	800c1f0 <__any_on+0x26>
 800c1da:	f011 011f 	ands.w	r1, r1, #31
 800c1de:	d007      	beq.n	800c1f0 <__any_on+0x26>
 800c1e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c1e4:	fa24 f001 	lsr.w	r0, r4, r1
 800c1e8:	fa00 f101 	lsl.w	r1, r0, r1
 800c1ec:	428c      	cmp	r4, r1
 800c1ee:	d10b      	bne.n	800c208 <__any_on+0x3e>
 800c1f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	d803      	bhi.n	800c200 <__any_on+0x36>
 800c1f8:	2000      	movs	r0, #0
 800c1fa:	bd10      	pop	{r4, pc}
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	e7f7      	b.n	800c1f0 <__any_on+0x26>
 800c200:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c204:	2900      	cmp	r1, #0
 800c206:	d0f5      	beq.n	800c1f4 <__any_on+0x2a>
 800c208:	2001      	movs	r0, #1
 800c20a:	e7f6      	b.n	800c1fa <__any_on+0x30>

0800c20c <_calloc_r>:
 800c20c:	b538      	push	{r3, r4, r5, lr}
 800c20e:	fb02 f501 	mul.w	r5, r2, r1
 800c212:	4629      	mov	r1, r5
 800c214:	f7fb ff30 	bl	8008078 <_malloc_r>
 800c218:	4604      	mov	r4, r0
 800c21a:	b118      	cbz	r0, 800c224 <_calloc_r+0x18>
 800c21c:	462a      	mov	r2, r5
 800c21e:	2100      	movs	r1, #0
 800c220:	f7fb fed6 	bl	8007fd0 <memset>
 800c224:	4620      	mov	r0, r4
 800c226:	bd38      	pop	{r3, r4, r5, pc}

0800c228 <_realloc_r>:
 800c228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c22a:	4607      	mov	r7, r0
 800c22c:	4614      	mov	r4, r2
 800c22e:	460e      	mov	r6, r1
 800c230:	b921      	cbnz	r1, 800c23c <_realloc_r+0x14>
 800c232:	4611      	mov	r1, r2
 800c234:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c238:	f7fb bf1e 	b.w	8008078 <_malloc_r>
 800c23c:	b922      	cbnz	r2, 800c248 <_realloc_r+0x20>
 800c23e:	f7fb fecf 	bl	8007fe0 <_free_r>
 800c242:	4625      	mov	r5, r4
 800c244:	4628      	mov	r0, r5
 800c246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c248:	f000 fa72 	bl	800c730 <_malloc_usable_size_r>
 800c24c:	42a0      	cmp	r0, r4
 800c24e:	d20f      	bcs.n	800c270 <_realloc_r+0x48>
 800c250:	4621      	mov	r1, r4
 800c252:	4638      	mov	r0, r7
 800c254:	f7fb ff10 	bl	8008078 <_malloc_r>
 800c258:	4605      	mov	r5, r0
 800c25a:	2800      	cmp	r0, #0
 800c25c:	d0f2      	beq.n	800c244 <_realloc_r+0x1c>
 800c25e:	4631      	mov	r1, r6
 800c260:	4622      	mov	r2, r4
 800c262:	f7fb fea7 	bl	8007fb4 <memcpy>
 800c266:	4631      	mov	r1, r6
 800c268:	4638      	mov	r0, r7
 800c26a:	f7fb feb9 	bl	8007fe0 <_free_r>
 800c26e:	e7e9      	b.n	800c244 <_realloc_r+0x1c>
 800c270:	4635      	mov	r5, r6
 800c272:	e7e7      	b.n	800c244 <_realloc_r+0x1c>

0800c274 <__ssputs_r>:
 800c274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c278:	688e      	ldr	r6, [r1, #8]
 800c27a:	4682      	mov	sl, r0
 800c27c:	429e      	cmp	r6, r3
 800c27e:	460c      	mov	r4, r1
 800c280:	4690      	mov	r8, r2
 800c282:	461f      	mov	r7, r3
 800c284:	d838      	bhi.n	800c2f8 <__ssputs_r+0x84>
 800c286:	898a      	ldrh	r2, [r1, #12]
 800c288:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c28c:	d032      	beq.n	800c2f4 <__ssputs_r+0x80>
 800c28e:	6825      	ldr	r5, [r4, #0]
 800c290:	6909      	ldr	r1, [r1, #16]
 800c292:	3301      	adds	r3, #1
 800c294:	eba5 0901 	sub.w	r9, r5, r1
 800c298:	6965      	ldr	r5, [r4, #20]
 800c29a:	444b      	add	r3, r9
 800c29c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c2a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c2a4:	106d      	asrs	r5, r5, #1
 800c2a6:	429d      	cmp	r5, r3
 800c2a8:	bf38      	it	cc
 800c2aa:	461d      	movcc	r5, r3
 800c2ac:	0553      	lsls	r3, r2, #21
 800c2ae:	d531      	bpl.n	800c314 <__ssputs_r+0xa0>
 800c2b0:	4629      	mov	r1, r5
 800c2b2:	f7fb fee1 	bl	8008078 <_malloc_r>
 800c2b6:	4606      	mov	r6, r0
 800c2b8:	b950      	cbnz	r0, 800c2d0 <__ssputs_r+0x5c>
 800c2ba:	230c      	movs	r3, #12
 800c2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c2c0:	f8ca 3000 	str.w	r3, [sl]
 800c2c4:	89a3      	ldrh	r3, [r4, #12]
 800c2c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2ca:	81a3      	strh	r3, [r4, #12]
 800c2cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2d0:	464a      	mov	r2, r9
 800c2d2:	6921      	ldr	r1, [r4, #16]
 800c2d4:	f7fb fe6e 	bl	8007fb4 <memcpy>
 800c2d8:	89a3      	ldrh	r3, [r4, #12]
 800c2da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c2de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2e2:	81a3      	strh	r3, [r4, #12]
 800c2e4:	6126      	str	r6, [r4, #16]
 800c2e6:	444e      	add	r6, r9
 800c2e8:	6026      	str	r6, [r4, #0]
 800c2ea:	463e      	mov	r6, r7
 800c2ec:	6165      	str	r5, [r4, #20]
 800c2ee:	eba5 0509 	sub.w	r5, r5, r9
 800c2f2:	60a5      	str	r5, [r4, #8]
 800c2f4:	42be      	cmp	r6, r7
 800c2f6:	d900      	bls.n	800c2fa <__ssputs_r+0x86>
 800c2f8:	463e      	mov	r6, r7
 800c2fa:	4632      	mov	r2, r6
 800c2fc:	4641      	mov	r1, r8
 800c2fe:	6820      	ldr	r0, [r4, #0]
 800c300:	f7ff faa6 	bl	800b850 <memmove>
 800c304:	68a3      	ldr	r3, [r4, #8]
 800c306:	6822      	ldr	r2, [r4, #0]
 800c308:	1b9b      	subs	r3, r3, r6
 800c30a:	4432      	add	r2, r6
 800c30c:	2000      	movs	r0, #0
 800c30e:	60a3      	str	r3, [r4, #8]
 800c310:	6022      	str	r2, [r4, #0]
 800c312:	e7db      	b.n	800c2cc <__ssputs_r+0x58>
 800c314:	462a      	mov	r2, r5
 800c316:	f7ff ff87 	bl	800c228 <_realloc_r>
 800c31a:	4606      	mov	r6, r0
 800c31c:	2800      	cmp	r0, #0
 800c31e:	d1e1      	bne.n	800c2e4 <__ssputs_r+0x70>
 800c320:	4650      	mov	r0, sl
 800c322:	6921      	ldr	r1, [r4, #16]
 800c324:	f7fb fe5c 	bl	8007fe0 <_free_r>
 800c328:	e7c7      	b.n	800c2ba <__ssputs_r+0x46>
	...

0800c32c <_svfiprintf_r>:
 800c32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c330:	4698      	mov	r8, r3
 800c332:	898b      	ldrh	r3, [r1, #12]
 800c334:	4607      	mov	r7, r0
 800c336:	061b      	lsls	r3, r3, #24
 800c338:	460d      	mov	r5, r1
 800c33a:	4614      	mov	r4, r2
 800c33c:	b09d      	sub	sp, #116	; 0x74
 800c33e:	d50e      	bpl.n	800c35e <_svfiprintf_r+0x32>
 800c340:	690b      	ldr	r3, [r1, #16]
 800c342:	b963      	cbnz	r3, 800c35e <_svfiprintf_r+0x32>
 800c344:	2140      	movs	r1, #64	; 0x40
 800c346:	f7fb fe97 	bl	8008078 <_malloc_r>
 800c34a:	6028      	str	r0, [r5, #0]
 800c34c:	6128      	str	r0, [r5, #16]
 800c34e:	b920      	cbnz	r0, 800c35a <_svfiprintf_r+0x2e>
 800c350:	230c      	movs	r3, #12
 800c352:	603b      	str	r3, [r7, #0]
 800c354:	f04f 30ff 	mov.w	r0, #4294967295
 800c358:	e0d1      	b.n	800c4fe <_svfiprintf_r+0x1d2>
 800c35a:	2340      	movs	r3, #64	; 0x40
 800c35c:	616b      	str	r3, [r5, #20]
 800c35e:	2300      	movs	r3, #0
 800c360:	9309      	str	r3, [sp, #36]	; 0x24
 800c362:	2320      	movs	r3, #32
 800c364:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c368:	2330      	movs	r3, #48	; 0x30
 800c36a:	f04f 0901 	mov.w	r9, #1
 800c36e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c372:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c518 <_svfiprintf_r+0x1ec>
 800c376:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c37a:	4623      	mov	r3, r4
 800c37c:	469a      	mov	sl, r3
 800c37e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c382:	b10a      	cbz	r2, 800c388 <_svfiprintf_r+0x5c>
 800c384:	2a25      	cmp	r2, #37	; 0x25
 800c386:	d1f9      	bne.n	800c37c <_svfiprintf_r+0x50>
 800c388:	ebba 0b04 	subs.w	fp, sl, r4
 800c38c:	d00b      	beq.n	800c3a6 <_svfiprintf_r+0x7a>
 800c38e:	465b      	mov	r3, fp
 800c390:	4622      	mov	r2, r4
 800c392:	4629      	mov	r1, r5
 800c394:	4638      	mov	r0, r7
 800c396:	f7ff ff6d 	bl	800c274 <__ssputs_r>
 800c39a:	3001      	adds	r0, #1
 800c39c:	f000 80aa 	beq.w	800c4f4 <_svfiprintf_r+0x1c8>
 800c3a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3a2:	445a      	add	r2, fp
 800c3a4:	9209      	str	r2, [sp, #36]	; 0x24
 800c3a6:	f89a 3000 	ldrb.w	r3, [sl]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	f000 80a2 	beq.w	800c4f4 <_svfiprintf_r+0x1c8>
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	f04f 32ff 	mov.w	r2, #4294967295
 800c3b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3ba:	f10a 0a01 	add.w	sl, sl, #1
 800c3be:	9304      	str	r3, [sp, #16]
 800c3c0:	9307      	str	r3, [sp, #28]
 800c3c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c3c6:	931a      	str	r3, [sp, #104]	; 0x68
 800c3c8:	4654      	mov	r4, sl
 800c3ca:	2205      	movs	r2, #5
 800c3cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3d0:	4851      	ldr	r0, [pc, #324]	; (800c518 <_svfiprintf_r+0x1ec>)
 800c3d2:	f7ff fa2f 	bl	800b834 <memchr>
 800c3d6:	9a04      	ldr	r2, [sp, #16]
 800c3d8:	b9d8      	cbnz	r0, 800c412 <_svfiprintf_r+0xe6>
 800c3da:	06d0      	lsls	r0, r2, #27
 800c3dc:	bf44      	itt	mi
 800c3de:	2320      	movmi	r3, #32
 800c3e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3e4:	0711      	lsls	r1, r2, #28
 800c3e6:	bf44      	itt	mi
 800c3e8:	232b      	movmi	r3, #43	; 0x2b
 800c3ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3ee:	f89a 3000 	ldrb.w	r3, [sl]
 800c3f2:	2b2a      	cmp	r3, #42	; 0x2a
 800c3f4:	d015      	beq.n	800c422 <_svfiprintf_r+0xf6>
 800c3f6:	4654      	mov	r4, sl
 800c3f8:	2000      	movs	r0, #0
 800c3fa:	f04f 0c0a 	mov.w	ip, #10
 800c3fe:	9a07      	ldr	r2, [sp, #28]
 800c400:	4621      	mov	r1, r4
 800c402:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c406:	3b30      	subs	r3, #48	; 0x30
 800c408:	2b09      	cmp	r3, #9
 800c40a:	d94e      	bls.n	800c4aa <_svfiprintf_r+0x17e>
 800c40c:	b1b0      	cbz	r0, 800c43c <_svfiprintf_r+0x110>
 800c40e:	9207      	str	r2, [sp, #28]
 800c410:	e014      	b.n	800c43c <_svfiprintf_r+0x110>
 800c412:	eba0 0308 	sub.w	r3, r0, r8
 800c416:	fa09 f303 	lsl.w	r3, r9, r3
 800c41a:	4313      	orrs	r3, r2
 800c41c:	46a2      	mov	sl, r4
 800c41e:	9304      	str	r3, [sp, #16]
 800c420:	e7d2      	b.n	800c3c8 <_svfiprintf_r+0x9c>
 800c422:	9b03      	ldr	r3, [sp, #12]
 800c424:	1d19      	adds	r1, r3, #4
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	9103      	str	r1, [sp, #12]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	bfbb      	ittet	lt
 800c42e:	425b      	neglt	r3, r3
 800c430:	f042 0202 	orrlt.w	r2, r2, #2
 800c434:	9307      	strge	r3, [sp, #28]
 800c436:	9307      	strlt	r3, [sp, #28]
 800c438:	bfb8      	it	lt
 800c43a:	9204      	strlt	r2, [sp, #16]
 800c43c:	7823      	ldrb	r3, [r4, #0]
 800c43e:	2b2e      	cmp	r3, #46	; 0x2e
 800c440:	d10c      	bne.n	800c45c <_svfiprintf_r+0x130>
 800c442:	7863      	ldrb	r3, [r4, #1]
 800c444:	2b2a      	cmp	r3, #42	; 0x2a
 800c446:	d135      	bne.n	800c4b4 <_svfiprintf_r+0x188>
 800c448:	9b03      	ldr	r3, [sp, #12]
 800c44a:	3402      	adds	r4, #2
 800c44c:	1d1a      	adds	r2, r3, #4
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	9203      	str	r2, [sp, #12]
 800c452:	2b00      	cmp	r3, #0
 800c454:	bfb8      	it	lt
 800c456:	f04f 33ff 	movlt.w	r3, #4294967295
 800c45a:	9305      	str	r3, [sp, #20]
 800c45c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c528 <_svfiprintf_r+0x1fc>
 800c460:	2203      	movs	r2, #3
 800c462:	4650      	mov	r0, sl
 800c464:	7821      	ldrb	r1, [r4, #0]
 800c466:	f7ff f9e5 	bl	800b834 <memchr>
 800c46a:	b140      	cbz	r0, 800c47e <_svfiprintf_r+0x152>
 800c46c:	2340      	movs	r3, #64	; 0x40
 800c46e:	eba0 000a 	sub.w	r0, r0, sl
 800c472:	fa03 f000 	lsl.w	r0, r3, r0
 800c476:	9b04      	ldr	r3, [sp, #16]
 800c478:	3401      	adds	r4, #1
 800c47a:	4303      	orrs	r3, r0
 800c47c:	9304      	str	r3, [sp, #16]
 800c47e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c482:	2206      	movs	r2, #6
 800c484:	4825      	ldr	r0, [pc, #148]	; (800c51c <_svfiprintf_r+0x1f0>)
 800c486:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c48a:	f7ff f9d3 	bl	800b834 <memchr>
 800c48e:	2800      	cmp	r0, #0
 800c490:	d038      	beq.n	800c504 <_svfiprintf_r+0x1d8>
 800c492:	4b23      	ldr	r3, [pc, #140]	; (800c520 <_svfiprintf_r+0x1f4>)
 800c494:	bb1b      	cbnz	r3, 800c4de <_svfiprintf_r+0x1b2>
 800c496:	9b03      	ldr	r3, [sp, #12]
 800c498:	3307      	adds	r3, #7
 800c49a:	f023 0307 	bic.w	r3, r3, #7
 800c49e:	3308      	adds	r3, #8
 800c4a0:	9303      	str	r3, [sp, #12]
 800c4a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4a4:	4433      	add	r3, r6
 800c4a6:	9309      	str	r3, [sp, #36]	; 0x24
 800c4a8:	e767      	b.n	800c37a <_svfiprintf_r+0x4e>
 800c4aa:	460c      	mov	r4, r1
 800c4ac:	2001      	movs	r0, #1
 800c4ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4b2:	e7a5      	b.n	800c400 <_svfiprintf_r+0xd4>
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	f04f 0c0a 	mov.w	ip, #10
 800c4ba:	4619      	mov	r1, r3
 800c4bc:	3401      	adds	r4, #1
 800c4be:	9305      	str	r3, [sp, #20]
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4c6:	3a30      	subs	r2, #48	; 0x30
 800c4c8:	2a09      	cmp	r2, #9
 800c4ca:	d903      	bls.n	800c4d4 <_svfiprintf_r+0x1a8>
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d0c5      	beq.n	800c45c <_svfiprintf_r+0x130>
 800c4d0:	9105      	str	r1, [sp, #20]
 800c4d2:	e7c3      	b.n	800c45c <_svfiprintf_r+0x130>
 800c4d4:	4604      	mov	r4, r0
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4dc:	e7f0      	b.n	800c4c0 <_svfiprintf_r+0x194>
 800c4de:	ab03      	add	r3, sp, #12
 800c4e0:	9300      	str	r3, [sp, #0]
 800c4e2:	462a      	mov	r2, r5
 800c4e4:	4638      	mov	r0, r7
 800c4e6:	4b0f      	ldr	r3, [pc, #60]	; (800c524 <_svfiprintf_r+0x1f8>)
 800c4e8:	a904      	add	r1, sp, #16
 800c4ea:	f7fc f815 	bl	8008518 <_printf_float>
 800c4ee:	1c42      	adds	r2, r0, #1
 800c4f0:	4606      	mov	r6, r0
 800c4f2:	d1d6      	bne.n	800c4a2 <_svfiprintf_r+0x176>
 800c4f4:	89ab      	ldrh	r3, [r5, #12]
 800c4f6:	065b      	lsls	r3, r3, #25
 800c4f8:	f53f af2c 	bmi.w	800c354 <_svfiprintf_r+0x28>
 800c4fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4fe:	b01d      	add	sp, #116	; 0x74
 800c500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c504:	ab03      	add	r3, sp, #12
 800c506:	9300      	str	r3, [sp, #0]
 800c508:	462a      	mov	r2, r5
 800c50a:	4638      	mov	r0, r7
 800c50c:	4b05      	ldr	r3, [pc, #20]	; (800c524 <_svfiprintf_r+0x1f8>)
 800c50e:	a904      	add	r1, sp, #16
 800c510:	f7fc fa9e 	bl	8008a50 <_printf_i>
 800c514:	e7eb      	b.n	800c4ee <_svfiprintf_r+0x1c2>
 800c516:	bf00      	nop
 800c518:	0800c870 	.word	0x0800c870
 800c51c:	0800c87a 	.word	0x0800c87a
 800c520:	08008519 	.word	0x08008519
 800c524:	0800c275 	.word	0x0800c275
 800c528:	0800c876 	.word	0x0800c876

0800c52c <nan>:
 800c52c:	2000      	movs	r0, #0
 800c52e:	4901      	ldr	r1, [pc, #4]	; (800c534 <nan+0x8>)
 800c530:	4770      	bx	lr
 800c532:	bf00      	nop
 800c534:	7ff80000 	.word	0x7ff80000

0800c538 <_raise_r>:
 800c538:	291f      	cmp	r1, #31
 800c53a:	b538      	push	{r3, r4, r5, lr}
 800c53c:	4604      	mov	r4, r0
 800c53e:	460d      	mov	r5, r1
 800c540:	d904      	bls.n	800c54c <_raise_r+0x14>
 800c542:	2316      	movs	r3, #22
 800c544:	6003      	str	r3, [r0, #0]
 800c546:	f04f 30ff 	mov.w	r0, #4294967295
 800c54a:	bd38      	pop	{r3, r4, r5, pc}
 800c54c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c54e:	b112      	cbz	r2, 800c556 <_raise_r+0x1e>
 800c550:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c554:	b94b      	cbnz	r3, 800c56a <_raise_r+0x32>
 800c556:	4620      	mov	r0, r4
 800c558:	f000 f830 	bl	800c5bc <_getpid_r>
 800c55c:	462a      	mov	r2, r5
 800c55e:	4601      	mov	r1, r0
 800c560:	4620      	mov	r0, r4
 800c562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c566:	f000 b817 	b.w	800c598 <_kill_r>
 800c56a:	2b01      	cmp	r3, #1
 800c56c:	d00a      	beq.n	800c584 <_raise_r+0x4c>
 800c56e:	1c59      	adds	r1, r3, #1
 800c570:	d103      	bne.n	800c57a <_raise_r+0x42>
 800c572:	2316      	movs	r3, #22
 800c574:	6003      	str	r3, [r0, #0]
 800c576:	2001      	movs	r0, #1
 800c578:	e7e7      	b.n	800c54a <_raise_r+0x12>
 800c57a:	2400      	movs	r4, #0
 800c57c:	4628      	mov	r0, r5
 800c57e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c582:	4798      	blx	r3
 800c584:	2000      	movs	r0, #0
 800c586:	e7e0      	b.n	800c54a <_raise_r+0x12>

0800c588 <raise>:
 800c588:	4b02      	ldr	r3, [pc, #8]	; (800c594 <raise+0xc>)
 800c58a:	4601      	mov	r1, r0
 800c58c:	6818      	ldr	r0, [r3, #0]
 800c58e:	f7ff bfd3 	b.w	800c538 <_raise_r>
 800c592:	bf00      	nop
 800c594:	20000054 	.word	0x20000054

0800c598 <_kill_r>:
 800c598:	b538      	push	{r3, r4, r5, lr}
 800c59a:	2300      	movs	r3, #0
 800c59c:	4d06      	ldr	r5, [pc, #24]	; (800c5b8 <_kill_r+0x20>)
 800c59e:	4604      	mov	r4, r0
 800c5a0:	4608      	mov	r0, r1
 800c5a2:	4611      	mov	r1, r2
 800c5a4:	602b      	str	r3, [r5, #0]
 800c5a6:	f7f5 ff48 	bl	800243a <_kill>
 800c5aa:	1c43      	adds	r3, r0, #1
 800c5ac:	d102      	bne.n	800c5b4 <_kill_r+0x1c>
 800c5ae:	682b      	ldr	r3, [r5, #0]
 800c5b0:	b103      	cbz	r3, 800c5b4 <_kill_r+0x1c>
 800c5b2:	6023      	str	r3, [r4, #0]
 800c5b4:	bd38      	pop	{r3, r4, r5, pc}
 800c5b6:	bf00      	nop
 800c5b8:	20000a5c 	.word	0x20000a5c

0800c5bc <_getpid_r>:
 800c5bc:	f7f5 bf36 	b.w	800242c <_getpid>

0800c5c0 <__sread>:
 800c5c0:	b510      	push	{r4, lr}
 800c5c2:	460c      	mov	r4, r1
 800c5c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5c8:	f000 f8ba 	bl	800c740 <_read_r>
 800c5cc:	2800      	cmp	r0, #0
 800c5ce:	bfab      	itete	ge
 800c5d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c5d2:	89a3      	ldrhlt	r3, [r4, #12]
 800c5d4:	181b      	addge	r3, r3, r0
 800c5d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c5da:	bfac      	ite	ge
 800c5dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800c5de:	81a3      	strhlt	r3, [r4, #12]
 800c5e0:	bd10      	pop	{r4, pc}

0800c5e2 <__swrite>:
 800c5e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5e6:	461f      	mov	r7, r3
 800c5e8:	898b      	ldrh	r3, [r1, #12]
 800c5ea:	4605      	mov	r5, r0
 800c5ec:	05db      	lsls	r3, r3, #23
 800c5ee:	460c      	mov	r4, r1
 800c5f0:	4616      	mov	r6, r2
 800c5f2:	d505      	bpl.n	800c600 <__swrite+0x1e>
 800c5f4:	2302      	movs	r3, #2
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5fc:	f000 f886 	bl	800c70c <_lseek_r>
 800c600:	89a3      	ldrh	r3, [r4, #12]
 800c602:	4632      	mov	r2, r6
 800c604:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c608:	81a3      	strh	r3, [r4, #12]
 800c60a:	4628      	mov	r0, r5
 800c60c:	463b      	mov	r3, r7
 800c60e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c616:	f000 b835 	b.w	800c684 <_write_r>

0800c61a <__sseek>:
 800c61a:	b510      	push	{r4, lr}
 800c61c:	460c      	mov	r4, r1
 800c61e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c622:	f000 f873 	bl	800c70c <_lseek_r>
 800c626:	1c43      	adds	r3, r0, #1
 800c628:	89a3      	ldrh	r3, [r4, #12]
 800c62a:	bf15      	itete	ne
 800c62c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c62e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c632:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c636:	81a3      	strheq	r3, [r4, #12]
 800c638:	bf18      	it	ne
 800c63a:	81a3      	strhne	r3, [r4, #12]
 800c63c:	bd10      	pop	{r4, pc}

0800c63e <__sclose>:
 800c63e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c642:	f000 b831 	b.w	800c6a8 <_close_r>

0800c646 <strncmp>:
 800c646:	b510      	push	{r4, lr}
 800c648:	b16a      	cbz	r2, 800c666 <strncmp+0x20>
 800c64a:	3901      	subs	r1, #1
 800c64c:	1884      	adds	r4, r0, r2
 800c64e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c652:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c656:	4293      	cmp	r3, r2
 800c658:	d103      	bne.n	800c662 <strncmp+0x1c>
 800c65a:	42a0      	cmp	r0, r4
 800c65c:	d001      	beq.n	800c662 <strncmp+0x1c>
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d1f5      	bne.n	800c64e <strncmp+0x8>
 800c662:	1a98      	subs	r0, r3, r2
 800c664:	bd10      	pop	{r4, pc}
 800c666:	4610      	mov	r0, r2
 800c668:	e7fc      	b.n	800c664 <strncmp+0x1e>

0800c66a <__ascii_wctomb>:
 800c66a:	4603      	mov	r3, r0
 800c66c:	4608      	mov	r0, r1
 800c66e:	b141      	cbz	r1, 800c682 <__ascii_wctomb+0x18>
 800c670:	2aff      	cmp	r2, #255	; 0xff
 800c672:	d904      	bls.n	800c67e <__ascii_wctomb+0x14>
 800c674:	228a      	movs	r2, #138	; 0x8a
 800c676:	f04f 30ff 	mov.w	r0, #4294967295
 800c67a:	601a      	str	r2, [r3, #0]
 800c67c:	4770      	bx	lr
 800c67e:	2001      	movs	r0, #1
 800c680:	700a      	strb	r2, [r1, #0]
 800c682:	4770      	bx	lr

0800c684 <_write_r>:
 800c684:	b538      	push	{r3, r4, r5, lr}
 800c686:	4604      	mov	r4, r0
 800c688:	4608      	mov	r0, r1
 800c68a:	4611      	mov	r1, r2
 800c68c:	2200      	movs	r2, #0
 800c68e:	4d05      	ldr	r5, [pc, #20]	; (800c6a4 <_write_r+0x20>)
 800c690:	602a      	str	r2, [r5, #0]
 800c692:	461a      	mov	r2, r3
 800c694:	f7f5 ff08 	bl	80024a8 <_write>
 800c698:	1c43      	adds	r3, r0, #1
 800c69a:	d102      	bne.n	800c6a2 <_write_r+0x1e>
 800c69c:	682b      	ldr	r3, [r5, #0]
 800c69e:	b103      	cbz	r3, 800c6a2 <_write_r+0x1e>
 800c6a0:	6023      	str	r3, [r4, #0]
 800c6a2:	bd38      	pop	{r3, r4, r5, pc}
 800c6a4:	20000a5c 	.word	0x20000a5c

0800c6a8 <_close_r>:
 800c6a8:	b538      	push	{r3, r4, r5, lr}
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	4d05      	ldr	r5, [pc, #20]	; (800c6c4 <_close_r+0x1c>)
 800c6ae:	4604      	mov	r4, r0
 800c6b0:	4608      	mov	r0, r1
 800c6b2:	602b      	str	r3, [r5, #0]
 800c6b4:	f7f5 ff14 	bl	80024e0 <_close>
 800c6b8:	1c43      	adds	r3, r0, #1
 800c6ba:	d102      	bne.n	800c6c2 <_close_r+0x1a>
 800c6bc:	682b      	ldr	r3, [r5, #0]
 800c6be:	b103      	cbz	r3, 800c6c2 <_close_r+0x1a>
 800c6c0:	6023      	str	r3, [r4, #0]
 800c6c2:	bd38      	pop	{r3, r4, r5, pc}
 800c6c4:	20000a5c 	.word	0x20000a5c

0800c6c8 <_fstat_r>:
 800c6c8:	b538      	push	{r3, r4, r5, lr}
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	4d06      	ldr	r5, [pc, #24]	; (800c6e8 <_fstat_r+0x20>)
 800c6ce:	4604      	mov	r4, r0
 800c6d0:	4608      	mov	r0, r1
 800c6d2:	4611      	mov	r1, r2
 800c6d4:	602b      	str	r3, [r5, #0]
 800c6d6:	f7f5 ff0e 	bl	80024f6 <_fstat>
 800c6da:	1c43      	adds	r3, r0, #1
 800c6dc:	d102      	bne.n	800c6e4 <_fstat_r+0x1c>
 800c6de:	682b      	ldr	r3, [r5, #0]
 800c6e0:	b103      	cbz	r3, 800c6e4 <_fstat_r+0x1c>
 800c6e2:	6023      	str	r3, [r4, #0]
 800c6e4:	bd38      	pop	{r3, r4, r5, pc}
 800c6e6:	bf00      	nop
 800c6e8:	20000a5c 	.word	0x20000a5c

0800c6ec <_isatty_r>:
 800c6ec:	b538      	push	{r3, r4, r5, lr}
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	4d05      	ldr	r5, [pc, #20]	; (800c708 <_isatty_r+0x1c>)
 800c6f2:	4604      	mov	r4, r0
 800c6f4:	4608      	mov	r0, r1
 800c6f6:	602b      	str	r3, [r5, #0]
 800c6f8:	f7f5 ff0c 	bl	8002514 <_isatty>
 800c6fc:	1c43      	adds	r3, r0, #1
 800c6fe:	d102      	bne.n	800c706 <_isatty_r+0x1a>
 800c700:	682b      	ldr	r3, [r5, #0]
 800c702:	b103      	cbz	r3, 800c706 <_isatty_r+0x1a>
 800c704:	6023      	str	r3, [r4, #0]
 800c706:	bd38      	pop	{r3, r4, r5, pc}
 800c708:	20000a5c 	.word	0x20000a5c

0800c70c <_lseek_r>:
 800c70c:	b538      	push	{r3, r4, r5, lr}
 800c70e:	4604      	mov	r4, r0
 800c710:	4608      	mov	r0, r1
 800c712:	4611      	mov	r1, r2
 800c714:	2200      	movs	r2, #0
 800c716:	4d05      	ldr	r5, [pc, #20]	; (800c72c <_lseek_r+0x20>)
 800c718:	602a      	str	r2, [r5, #0]
 800c71a:	461a      	mov	r2, r3
 800c71c:	f7f5 ff04 	bl	8002528 <_lseek>
 800c720:	1c43      	adds	r3, r0, #1
 800c722:	d102      	bne.n	800c72a <_lseek_r+0x1e>
 800c724:	682b      	ldr	r3, [r5, #0]
 800c726:	b103      	cbz	r3, 800c72a <_lseek_r+0x1e>
 800c728:	6023      	str	r3, [r4, #0]
 800c72a:	bd38      	pop	{r3, r4, r5, pc}
 800c72c:	20000a5c 	.word	0x20000a5c

0800c730 <_malloc_usable_size_r>:
 800c730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c734:	1f18      	subs	r0, r3, #4
 800c736:	2b00      	cmp	r3, #0
 800c738:	bfbc      	itt	lt
 800c73a:	580b      	ldrlt	r3, [r1, r0]
 800c73c:	18c0      	addlt	r0, r0, r3
 800c73e:	4770      	bx	lr

0800c740 <_read_r>:
 800c740:	b538      	push	{r3, r4, r5, lr}
 800c742:	4604      	mov	r4, r0
 800c744:	4608      	mov	r0, r1
 800c746:	4611      	mov	r1, r2
 800c748:	2200      	movs	r2, #0
 800c74a:	4d05      	ldr	r5, [pc, #20]	; (800c760 <_read_r+0x20>)
 800c74c:	602a      	str	r2, [r5, #0]
 800c74e:	461a      	mov	r2, r3
 800c750:	f7f5 fe8d 	bl	800246e <_read>
 800c754:	1c43      	adds	r3, r0, #1
 800c756:	d102      	bne.n	800c75e <_read_r+0x1e>
 800c758:	682b      	ldr	r3, [r5, #0]
 800c75a:	b103      	cbz	r3, 800c75e <_read_r+0x1e>
 800c75c:	6023      	str	r3, [r4, #0]
 800c75e:	bd38      	pop	{r3, r4, r5, pc}
 800c760:	20000a5c 	.word	0x20000a5c

0800c764 <_init>:
 800c764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c766:	bf00      	nop
 800c768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c76a:	bc08      	pop	{r3}
 800c76c:	469e      	mov	lr, r3
 800c76e:	4770      	bx	lr

0800c770 <_fini>:
 800c770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c772:	bf00      	nop
 800c774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c776:	bc08      	pop	{r3}
 800c778:	469e      	mov	lr, r3
 800c77a:	4770      	bx	lr
