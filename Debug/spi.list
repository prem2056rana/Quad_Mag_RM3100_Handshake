
spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c774  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000594  0800c888  0800c888  0001c888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce1c  0800ce1c  00020228  2**0
                  CONTENTS
  4 .ARM          00000000  0800ce1c  0800ce1c  00020228  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ce1c  0800ce1c  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce1c  0800ce1c  0001ce1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce20  0800ce20  0001ce20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0800ce24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000848  20000228  0800d04c  00020228  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000a70  0800d04c  00020a70  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012638  00000000  00000000  00020251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030cc  00000000  00000000  00032889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00035958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e48  00000000  00000000  00036908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016438  00000000  00000000  00037750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010bac  00000000  00000000  0004db88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074841  00000000  00000000  0005e734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2f75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005504  00000000  00000000  000d2fc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000228 	.word	0x20000228
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c86c 	.word	0x0800c86c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000022c 	.word	0x2000022c
 800014c:	0800c86c 	.word	0x0800c86c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2iz>:
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30f      	bcc.n	800104e <__aeabi_f2iz+0x2a>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d90d      	bls.n	8001054 <__aeabi_f2iz+0x30>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	bf18      	it	ne
 800104a:	4240      	negne	r0, r0
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2iz+0x3a>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d105      	bne.n	800106a <__aeabi_f2iz+0x46>
 800105e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001062:	bf08      	it	eq
 8001064:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <__aeabi_d2lz>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	460c      	mov	r4, r1
 8001074:	4605      	mov	r5, r0
 8001076:	4621      	mov	r1, r4
 8001078:	4628      	mov	r0, r5
 800107a:	2200      	movs	r2, #0
 800107c:	2300      	movs	r3, #0
 800107e:	f7ff fc9d 	bl	80009bc <__aeabi_dcmplt>
 8001082:	b928      	cbnz	r0, 8001090 <__aeabi_d2lz+0x20>
 8001084:	4628      	mov	r0, r5
 8001086:	4621      	mov	r1, r4
 8001088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800108c:	f000 b80a 	b.w	80010a4 <__aeabi_d2ulz>
 8001090:	4628      	mov	r0, r5
 8001092:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001096:	f000 f805 	bl	80010a4 <__aeabi_d2ulz>
 800109a:	4240      	negs	r0, r0
 800109c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010a0:	bd38      	pop	{r3, r4, r5, pc}
 80010a2:	bf00      	nop

080010a4 <__aeabi_d2ulz>:
 80010a4:	b5d0      	push	{r4, r6, r7, lr}
 80010a6:	2200      	movs	r2, #0
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <__aeabi_d2ulz+0x34>)
 80010aa:	4606      	mov	r6, r0
 80010ac:	460f      	mov	r7, r1
 80010ae:	f7ff fa13 	bl	80004d8 <__aeabi_dmul>
 80010b2:	f7ff fce9 	bl	8000a88 <__aeabi_d2uiz>
 80010b6:	4604      	mov	r4, r0
 80010b8:	f7ff f994 	bl	80003e4 <__aeabi_ui2d>
 80010bc:	2200      	movs	r2, #0
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <__aeabi_d2ulz+0x38>)
 80010c0:	f7ff fa0a 	bl	80004d8 <__aeabi_dmul>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4630      	mov	r0, r6
 80010ca:	4639      	mov	r1, r7
 80010cc:	f7ff f84c 	bl	8000168 <__aeabi_dsub>
 80010d0:	f7ff fcda 	bl	8000a88 <__aeabi_d2uiz>
 80010d4:	4621      	mov	r1, r4
 80010d6:	bdd0      	pop	{r4, r6, r7, pc}
 80010d8:	3df00000 	.word	0x3df00000
 80010dc:	41f00000 	.word	0x41f00000

080010e0 <SET_COUNT>:
extern uint8_t read_X2[4], read_X1[4], read_X0[4];
extern uint8_t read_Y2[4], read_Y1[4], read_Y0[4];
extern uint8_t read_Z2[4], read_Z1[4], read_Z0[4];


void SET_COUNT(int chip_select) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 80010e8:	4a2c      	ldr	r2, [pc, #176]	; (800119c <SET_COUNT+0xbc>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010f0:	4a2b      	ldr	r2, [pc, #172]	; (80011a0 <SET_COUNT+0xc0>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010f8:	2201      	movs	r2, #1
 80010fa:	4619      	mov	r1, r3
 80010fc:	f002 f978 	bl	80033f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_LOW); //SSN LOW TO COMMUNICATE WITH SENSOR
 8001100:	4a26      	ldr	r2, [pc, #152]	; (800119c <SET_COUNT+0xbc>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001108:	4a25      	ldr	r2, [pc, #148]	; (80011a0 <SET_COUNT+0xc0>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001110:	2200      	movs	r2, #0
 8001112:	4619      	mov	r1, r3
 8001114:	f002 f96c 	bl	80033f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, rm3100_MSB_X_buf, sizeof(rm3100_MSB_X_buf), 1000); //Not need to necessary to send multiple value or register
 8001118:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111c:	2201      	movs	r2, #1
 800111e:	4921      	ldr	r1, [pc, #132]	; (80011a4 <SET_COUNT+0xc4>)
 8001120:	4821      	ldr	r0, [pc, #132]	; (80011a8 <SET_COUNT+0xc8>)
 8001122:	f004 fa94 	bl	800564e <HAL_SPI_Transmit>
	//Initiate Count cycle
	HAL_SPI_Transmit(&hspi1, MSB_X_buf, sizeof(MSB_X_buf), 1000);
 8001126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112a:	2201      	movs	r2, #1
 800112c:	491f      	ldr	r1, [pc, #124]	; (80011ac <SET_COUNT+0xcc>)
 800112e:	481e      	ldr	r0, [pc, #120]	; (80011a8 <SET_COUNT+0xc8>)
 8001130:	f004 fa8d 	bl	800564e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, LSB_X_buf, sizeof(LSB_X_buf), 1000);
 8001134:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001138:	2201      	movs	r2, #1
 800113a:	491d      	ldr	r1, [pc, #116]	; (80011b0 <SET_COUNT+0xd0>)
 800113c:	481a      	ldr	r0, [pc, #104]	; (80011a8 <SET_COUNT+0xc8>)
 800113e:	f004 fa86 	bl	800564e <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, MSB_Y_buf, sizeof(MSB_Y_buf), 1000);
 8001142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001146:	2201      	movs	r2, #1
 8001148:	491a      	ldr	r1, [pc, #104]	; (80011b4 <SET_COUNT+0xd4>)
 800114a:	4817      	ldr	r0, [pc, #92]	; (80011a8 <SET_COUNT+0xc8>)
 800114c:	f004 fa7f 	bl	800564e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, LSB_Y_buf, sizeof(LSB_Y_buf), 1000);
 8001150:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001154:	2201      	movs	r2, #1
 8001156:	4918      	ldr	r1, [pc, #96]	; (80011b8 <SET_COUNT+0xd8>)
 8001158:	4813      	ldr	r0, [pc, #76]	; (80011a8 <SET_COUNT+0xc8>)
 800115a:	f004 fa78 	bl	800564e <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, MSB_Z_buf, sizeof(MSB_Z_buf), 1000);
 800115e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001162:	2201      	movs	r2, #1
 8001164:	4915      	ldr	r1, [pc, #84]	; (80011bc <SET_COUNT+0xdc>)
 8001166:	4810      	ldr	r0, [pc, #64]	; (80011a8 <SET_COUNT+0xc8>)
 8001168:	f004 fa71 	bl	800564e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, LSB_Z_buf, sizeof(LSB_Z_buf), 1000);
 800116c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001170:	2201      	movs	r2, #1
 8001172:	4913      	ldr	r1, [pc, #76]	; (80011c0 <SET_COUNT+0xe0>)
 8001174:	480c      	ldr	r0, [pc, #48]	; (80011a8 <SET_COUNT+0xc8>)
 8001176:	f004 fa6a 	bl	800564e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH);
 800117a:	4a08      	ldr	r2, [pc, #32]	; (800119c <SET_COUNT+0xbc>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001182:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <SET_COUNT+0xc0>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800118a:	2201      	movs	r2, #1
 800118c:	4619      	mov	r1, r3
 800118e:	f002 f92f 	bl	80033f0 <HAL_GPIO_WritePin>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000028 	.word	0x20000028
 80011a0:	20000038 	.word	0x20000038
 80011a4:	20000004 	.word	0x20000004
 80011a8:	2000062c 	.word	0x2000062c
 80011ac:	20000248 	.word	0x20000248
 80011b0:	20000008 	.word	0x20000008
 80011b4:	2000024c 	.word	0x2000024c
 80011b8:	2000000c 	.word	0x2000000c
 80011bc:	20000250 	.word	0x20000250
 80011c0:	20000010 	.word	0x20000010

080011c4 <Continuous_Mode>:
//Initiate Continuous Measurements Mode

void Continuous_Mode(int chip_select) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 80011cc:	4a1a      	ldr	r2, [pc, #104]	; (8001238 <Continuous_Mode+0x74>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011d4:	4a19      	ldr	r2, [pc, #100]	; (800123c <Continuous_Mode+0x78>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011dc:	2201      	movs	r2, #1
 80011de:	4619      	mov	r1, r3
 80011e0:	f002 f906 	bl	80033f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_LOW); //SSN LOW TO COMMUNICATE WITH SENSOR
 80011e4:	4a14      	ldr	r2, [pc, #80]	; (8001238 <Continuous_Mode+0x74>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011ec:	4a13      	ldr	r2, [pc, #76]	; (800123c <Continuous_Mode+0x78>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011f4:	2200      	movs	r2, #0
 80011f6:	4619      	mov	r1, r3
 80011f8:	f002 f8fa 	bl	80033f0 <HAL_GPIO_WritePin>
	//Initiate Continuous Measurements Mode
	HAL_SPI_Transmit(&hspi1, rm3100_cmm_buf, sizeof(rm3100_cmm_buf), 1000);
 80011fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001200:	2201      	movs	r2, #1
 8001202:	490f      	ldr	r1, [pc, #60]	; (8001240 <Continuous_Mode+0x7c>)
 8001204:	480f      	ldr	r0, [pc, #60]	; (8001244 <Continuous_Mode+0x80>)
 8001206:	f004 fa22 	bl	800564e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, rm3100_cmm_mod_buf, sizeof(rm3100_cmm_mod_buf), 1000);
 800120a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120e:	2201      	movs	r2, #1
 8001210:	490d      	ldr	r1, [pc, #52]	; (8001248 <Continuous_Mode+0x84>)
 8001212:	480c      	ldr	r0, [pc, #48]	; (8001244 <Continuous_Mode+0x80>)
 8001214:	f004 fa1b 	bl	800564e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 8001218:	4a07      	ldr	r2, [pc, #28]	; (8001238 <Continuous_Mode+0x74>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001220:	4a06      	ldr	r2, [pc, #24]	; (800123c <Continuous_Mode+0x78>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001228:	2201      	movs	r2, #1
 800122a:	4619      	mov	r1, r3
 800122c:	f002 f8e0 	bl	80033f0 <HAL_GPIO_WritePin>
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000028 	.word	0x20000028
 800123c:	20000038 	.word	0x20000038
 8001240:	20000014 	.word	0x20000014
 8001244:	2000062c 	.word	0x2000062c
 8001248:	20000018 	.word	0x20000018

0800124c <TMRC_Mode>:
//Initiate Time Measurements and Rate Control

void TMRC_Mode(int chip_select) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 8001254:	4a1a      	ldr	r2, [pc, #104]	; (80012c0 <TMRC_Mode+0x74>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800125c:	4a19      	ldr	r2, [pc, #100]	; (80012c4 <TMRC_Mode+0x78>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001264:	2201      	movs	r2, #1
 8001266:	4619      	mov	r1, r3
 8001268:	f002 f8c2 	bl	80033f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_LOW); //SSN LOW TO COMMUNICATE WITH SENSOR
 800126c:	4a14      	ldr	r2, [pc, #80]	; (80012c0 <TMRC_Mode+0x74>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001274:	4a13      	ldr	r2, [pc, #76]	; (80012c4 <TMRC_Mode+0x78>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800127c:	2200      	movs	r2, #0
 800127e:	4619      	mov	r1, r3
 8001280:	f002 f8b6 	bl	80033f0 <HAL_GPIO_WritePin>
	//initiate Time Measurements and Reset Control
	HAL_SPI_Transmit(&hspi1, rm3100_tmrc_add_buf, sizeof(rm3100_tmrc_add_buf), 1000);
 8001284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001288:	2201      	movs	r2, #1
 800128a:	490f      	ldr	r1, [pc, #60]	; (80012c8 <TMRC_Mode+0x7c>)
 800128c:	480f      	ldr	r0, [pc, #60]	; (80012cc <TMRC_Mode+0x80>)
 800128e:	f004 f9de 	bl	800564e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, rm3100_tmrc_Val_buf, sizeof(rm3100_tmrc_Val_buf), 1000);
 8001292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001296:	2201      	movs	r2, #1
 8001298:	490d      	ldr	r1, [pc, #52]	; (80012d0 <TMRC_Mode+0x84>)
 800129a:	480c      	ldr	r0, [pc, #48]	; (80012cc <TMRC_Mode+0x80>)
 800129c:	f004 f9d7 	bl	800564e <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(&hspi1, rm3100_tmrc_read_buf, sizeof(rm3100_tmrc_read_buf),
//			1000);
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 80012a0:	4a07      	ldr	r2, [pc, #28]	; (80012c0 <TMRC_Mode+0x74>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012a8:	4a06      	ldr	r2, [pc, #24]	; (80012c4 <TMRC_Mode+0x78>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012b0:	2201      	movs	r2, #1
 80012b2:	4619      	mov	r1, r3
 80012b4:	f002 f89c 	bl	80033f0 <HAL_GPIO_WritePin>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000028 	.word	0x20000028
 80012c4:	20000038 	.word	0x20000038
 80012c8:	2000001c 	.word	0x2000001c
 80012cc:	2000062c 	.word	0x2000062c
 80012d0:	20000020 	.word	0x20000020

080012d4 <Mea_Result>:

//Read Measurements Results
void Mea_Result(int chip_select) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 80012dc:	4a3f      	ldr	r2, [pc, #252]	; (80013dc <Mea_Result+0x108>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012e4:	4a3e      	ldr	r2, [pc, #248]	; (80013e0 <Mea_Result+0x10c>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012ec:	2201      	movs	r2, #1
 80012ee:	4619      	mov	r1, r3
 80012f0:	f002 f87e 	bl	80033f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_LOW); //SSN LOW TO COMMUNICATE WITH SENSOR
 80012f4:	4a39      	ldr	r2, [pc, #228]	; (80013dc <Mea_Result+0x108>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012fc:	4a38      	ldr	r2, [pc, #224]	; (80013e0 <Mea_Result+0x10c>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001304:	2200      	movs	r2, #0
 8001306:	4619      	mov	r1, r3
 8001308:	f002 f872 	bl	80033f0 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, MRRW2_X_buf, sizeof(MRRW2_X_buf), 1000);
 800130c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001310:	2201      	movs	r2, #1
 8001312:	4934      	ldr	r1, [pc, #208]	; (80013e4 <Mea_Result+0x110>)
 8001314:	4834      	ldr	r0, [pc, #208]	; (80013e8 <Mea_Result+0x114>)
 8001316:	f004 f99a 	bl	800564e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &read_X2[chip_select], sizeof(read_X2[chip_select]), 1000);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a33      	ldr	r2, [pc, #204]	; (80013ec <Mea_Result+0x118>)
 800131e:	1899      	adds	r1, r3, r2
 8001320:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001324:	2201      	movs	r2, #1
 8001326:	4830      	ldr	r0, [pc, #192]	; (80013e8 <Mea_Result+0x114>)
 8001328:	f004 fac5 	bl	80058b6 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_X1[chip_select], sizeof(read_X1[chip_select]), 1000);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a30      	ldr	r2, [pc, #192]	; (80013f0 <Mea_Result+0x11c>)
 8001330:	1899      	adds	r1, r3, r2
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	2201      	movs	r2, #1
 8001338:	482b      	ldr	r0, [pc, #172]	; (80013e8 <Mea_Result+0x114>)
 800133a:	f004 fabc 	bl	80058b6 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_X0[chip_select], sizeof(read_X0[chip_select]), 1000);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a2c      	ldr	r2, [pc, #176]	; (80013f4 <Mea_Result+0x120>)
 8001342:	1899      	adds	r1, r3, r2
 8001344:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001348:	2201      	movs	r2, #1
 800134a:	4827      	ldr	r0, [pc, #156]	; (80013e8 <Mea_Result+0x114>)
 800134c:	f004 fab3 	bl	80058b6 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Y2[chip_select], sizeof(read_Y2[chip_select]), 1000);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a29      	ldr	r2, [pc, #164]	; (80013f8 <Mea_Result+0x124>)
 8001354:	1899      	adds	r1, r3, r2
 8001356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135a:	2201      	movs	r2, #1
 800135c:	4822      	ldr	r0, [pc, #136]	; (80013e8 <Mea_Result+0x114>)
 800135e:	f004 faaa 	bl	80058b6 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Y1[chip_select], sizeof(read_Y1[chip_select]), 1000);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a25      	ldr	r2, [pc, #148]	; (80013fc <Mea_Result+0x128>)
 8001366:	1899      	adds	r1, r3, r2
 8001368:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136c:	2201      	movs	r2, #1
 800136e:	481e      	ldr	r0, [pc, #120]	; (80013e8 <Mea_Result+0x114>)
 8001370:	f004 faa1 	bl	80058b6 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Y0[chip_select], sizeof(read_Y0[chip_select]), 1000);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a22      	ldr	r2, [pc, #136]	; (8001400 <Mea_Result+0x12c>)
 8001378:	1899      	adds	r1, r3, r2
 800137a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137e:	2201      	movs	r2, #1
 8001380:	4819      	ldr	r0, [pc, #100]	; (80013e8 <Mea_Result+0x114>)
 8001382:	f004 fa98 	bl	80058b6 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Z2[chip_select], sizeof(read_Z2[chip_select]), 1000);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a1e      	ldr	r2, [pc, #120]	; (8001404 <Mea_Result+0x130>)
 800138a:	1899      	adds	r1, r3, r2
 800138c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001390:	2201      	movs	r2, #1
 8001392:	4815      	ldr	r0, [pc, #84]	; (80013e8 <Mea_Result+0x114>)
 8001394:	f004 fa8f 	bl	80058b6 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Z1[chip_select], sizeof(read_Z1[chip_select]), 1000);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a1b      	ldr	r2, [pc, #108]	; (8001408 <Mea_Result+0x134>)
 800139c:	1899      	adds	r1, r3, r2
 800139e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a2:	2201      	movs	r2, #1
 80013a4:	4810      	ldr	r0, [pc, #64]	; (80013e8 <Mea_Result+0x114>)
 80013a6:	f004 fa86 	bl	80058b6 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Z0[chip_select], sizeof(read_Z0[chip_select]), 1000);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a17      	ldr	r2, [pc, #92]	; (800140c <Mea_Result+0x138>)
 80013ae:	1899      	adds	r1, r3, r2
 80013b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b4:	2201      	movs	r2, #1
 80013b6:	480c      	ldr	r0, [pc, #48]	; (80013e8 <Mea_Result+0x114>)
 80013b8:	f004 fa7d 	bl	80058b6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 80013bc:	4a07      	ldr	r2, [pc, #28]	; (80013dc <Mea_Result+0x108>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80013c4:	4a06      	ldr	r2, [pc, #24]	; (80013e0 <Mea_Result+0x10c>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013cc:	2201      	movs	r2, #1
 80013ce:	4619      	mov	r1, r3
 80013d0:	f002 f80e 	bl	80033f0 <HAL_GPIO_WritePin>
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000028 	.word	0x20000028
 80013e0:	20000038 	.word	0x20000038
 80013e4:	20000024 	.word	0x20000024
 80013e8:	2000062c 	.word	0x2000062c
 80013ec:	2000040c 	.word	0x2000040c
 80013f0:	200003c8 	.word	0x200003c8
 80013f4:	20000420 	.word	0x20000420
 80013f8:	20000444 	.word	0x20000444
 80013fc:	20000360 	.word	0x20000360
 8001400:	20000438 	.word	0x20000438
 8001404:	200003cc 	.word	0x200003cc
 8001408:	20000384 	.word	0x20000384
 800140c:	20000434 	.word	0x20000434

08001410 <Comb_measurement>:
//    HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
//}


//Combine Measurements
void Comb_measurement(int chip_select) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
//    // Get current time from RTC
//    HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
//    HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);

    // Combine bytes for X-axis
    mag_X[chip_select] = (read_X2[chip_select] << 16) | (read_X1[chip_select] << 8) | read_X0[chip_select];
 8001418:	4a91      	ldr	r2, [pc, #580]	; (8001660 <Comb_measurement+0x250>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	041a      	lsls	r2, r3, #16
 8001422:	4990      	ldr	r1, [pc, #576]	; (8001664 <Comb_measurement+0x254>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	440b      	add	r3, r1
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	021b      	lsls	r3, r3, #8
 800142c:	4313      	orrs	r3, r2
 800142e:	498e      	ldr	r1, [pc, #568]	; (8001668 <Comb_measurement+0x258>)
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	440a      	add	r2, r1
 8001434:	7812      	ldrb	r2, [r2, #0]
 8001436:	4313      	orrs	r3, r2
 8001438:	4619      	mov	r1, r3
 800143a:	4a8c      	ldr	r2, [pc, #560]	; (800166c <Comb_measurement+0x25c>)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // Extend the sign bit for negative values
    signed_mag_X[chip_select] = (mag_X[chip_select] & 0x800000) ? (mag_X[chip_select] | 0xFF000000) : mag_X[chip_select];
 8001442:	4a8a      	ldr	r2, [pc, #552]	; (800166c <Comb_measurement+0x25c>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d007      	beq.n	8001462 <Comb_measurement+0x52>
 8001452:	4a86      	ldr	r2, [pc, #536]	; (800166c <Comb_measurement+0x25c>)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800145e:	4619      	mov	r1, r3
 8001460:	e004      	b.n	800146c <Comb_measurement+0x5c>
 8001462:	4a82      	ldr	r2, [pc, #520]	; (800166c <Comb_measurement+0x25c>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146a:	4619      	mov	r1, r3
 800146c:	4a80      	ldr	r2, [pc, #512]	; (8001670 <Comb_measurement+0x260>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    // Combine bytes for Y-axis
    mag_Y[chip_select] = (read_Y2[chip_select] << 16) | (read_Y1[chip_select] << 8) | read_Y0[chip_select];
 8001474:	4a7f      	ldr	r2, [pc, #508]	; (8001674 <Comb_measurement+0x264>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4413      	add	r3, r2
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	041a      	lsls	r2, r3, #16
 800147e:	497e      	ldr	r1, [pc, #504]	; (8001678 <Comb_measurement+0x268>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	440b      	add	r3, r1
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	021b      	lsls	r3, r3, #8
 8001488:	4313      	orrs	r3, r2
 800148a:	497c      	ldr	r1, [pc, #496]	; (800167c <Comb_measurement+0x26c>)
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	440a      	add	r2, r1
 8001490:	7812      	ldrb	r2, [r2, #0]
 8001492:	4313      	orrs	r3, r2
 8001494:	4619      	mov	r1, r3
 8001496:	4a7a      	ldr	r2, [pc, #488]	; (8001680 <Comb_measurement+0x270>)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // Extend the sign bit for negative values
    signed_mag_Y[chip_select] = (mag_Y[chip_select] & 0x800000) ? (mag_Y[chip_select] | 0xFF000000) : mag_Y[chip_select];
 800149e:	4a78      	ldr	r2, [pc, #480]	; (8001680 <Comb_measurement+0x270>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d007      	beq.n	80014be <Comb_measurement+0xae>
 80014ae:	4a74      	ldr	r2, [pc, #464]	; (8001680 <Comb_measurement+0x270>)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80014ba:	4619      	mov	r1, r3
 80014bc:	e004      	b.n	80014c8 <Comb_measurement+0xb8>
 80014be:	4a70      	ldr	r2, [pc, #448]	; (8001680 <Comb_measurement+0x270>)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c6:	4619      	mov	r1, r3
 80014c8:	4a6e      	ldr	r2, [pc, #440]	; (8001684 <Comb_measurement+0x274>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    // Combine bytes for Z-axis
    mag_Z[chip_select] = (read_Z2[chip_select] << 16) | (read_Z1[chip_select] << 8) | read_Z0[chip_select];
 80014d0:	4a6d      	ldr	r2, [pc, #436]	; (8001688 <Comb_measurement+0x278>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	041a      	lsls	r2, r3, #16
 80014da:	496c      	ldr	r1, [pc, #432]	; (800168c <Comb_measurement+0x27c>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	440b      	add	r3, r1
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	4313      	orrs	r3, r2
 80014e6:	496a      	ldr	r1, [pc, #424]	; (8001690 <Comb_measurement+0x280>)
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	440a      	add	r2, r1
 80014ec:	7812      	ldrb	r2, [r2, #0]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	4a68      	ldr	r2, [pc, #416]	; (8001694 <Comb_measurement+0x284>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // Extend the sign bit for negative values
    signed_mag_Z[chip_select] = (mag_Z[chip_select] & 0x800000) ? (mag_Z[chip_select] | 0xFF000000) : mag_Z[chip_select];
 80014fa:	4a66      	ldr	r2, [pc, #408]	; (8001694 <Comb_measurement+0x284>)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001502:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d007      	beq.n	800151a <Comb_measurement+0x10a>
 800150a:	4a62      	ldr	r2, [pc, #392]	; (8001694 <Comb_measurement+0x284>)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001512:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001516:	4619      	mov	r1, r3
 8001518:	e004      	b.n	8001524 <Comb_measurement+0x114>
 800151a:	4a5e      	ldr	r2, [pc, #376]	; (8001694 <Comb_measurement+0x284>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001522:	4619      	mov	r1, r3
 8001524:	4a5c      	ldr	r2, [pc, #368]	; (8001698 <Comb_measurement+0x288>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    // Calculate magnitude
   // magnitude[chip_select] = sqrt((float)(signed_mag_X[chip_select] * signed_mag_X[chip_select]) + (signed_mag_Y[chip_select] * signed_mag_Y[chip_select]) + (signed_mag_Z[chip_select] * signed_mag_Z[chip_select]));

    // Calculate axis values in float
    X_axis[chip_select] = (float)signed_mag_X[chip_select] / gain;
 800152c:	4a50      	ldr	r2, [pc, #320]	; (8001670 <Comb_measurement+0x260>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fbd1 	bl	8000cdc <__aeabi_i2f>
 800153a:	4602      	mov	r2, r0
 800153c:	4b57      	ldr	r3, [pc, #348]	; (800169c <Comb_measurement+0x28c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4619      	mov	r1, r3
 8001542:	4610      	mov	r0, r2
 8001544:	f7ff fcd2 	bl	8000eec <__aeabi_fdiv>
 8001548:	4603      	mov	r3, r0
 800154a:	4619      	mov	r1, r3
 800154c:	4a54      	ldr	r2, [pc, #336]	; (80016a0 <Comb_measurement+0x290>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Y_axis[chip_select] = (float)signed_mag_Y[chip_select] / gain;
 8001554:	4a4b      	ldr	r2, [pc, #300]	; (8001684 <Comb_measurement+0x274>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fbbd 	bl	8000cdc <__aeabi_i2f>
 8001562:	4602      	mov	r2, r0
 8001564:	4b4d      	ldr	r3, [pc, #308]	; (800169c <Comb_measurement+0x28c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4619      	mov	r1, r3
 800156a:	4610      	mov	r0, r2
 800156c:	f7ff fcbe 	bl	8000eec <__aeabi_fdiv>
 8001570:	4603      	mov	r3, r0
 8001572:	4619      	mov	r1, r3
 8001574:	4a4b      	ldr	r2, [pc, #300]	; (80016a4 <Comb_measurement+0x294>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Z_axis[chip_select] = (float)signed_mag_Z[chip_select] / gain;
 800157c:	4a46      	ldr	r2, [pc, #280]	; (8001698 <Comb_measurement+0x288>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fba9 	bl	8000cdc <__aeabi_i2f>
 800158a:	4602      	mov	r2, r0
 800158c:	4b43      	ldr	r3, [pc, #268]	; (800169c <Comb_measurement+0x28c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	4610      	mov	r0, r2
 8001594:	f7ff fcaa 	bl	8000eec <__aeabi_fdiv>
 8001598:	4603      	mov	r3, r0
 800159a:	4619      	mov	r1, r3
 800159c:	4a42      	ldr	r2, [pc, #264]	; (80016a8 <Comb_measurement+0x298>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    //Converting float axis data in to  integer data
    x_axis[chip_select] = (int16_t)(X_axis[chip_select] * 1000);
 80015a4:	4a3e      	ldr	r2, [pc, #248]	; (80016a0 <Comb_measurement+0x290>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ac:	493f      	ldr	r1, [pc, #252]	; (80016ac <Comb_measurement+0x29c>)
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fbe8 	bl	8000d84 <__aeabi_fmul>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fd34 	bl	8001024 <__aeabi_f2iz>
 80015bc:	4603      	mov	r3, r0
 80015be:	b21b      	sxth	r3, r3
 80015c0:	b299      	uxth	r1, r3
 80015c2:	4a3b      	ldr	r2, [pc, #236]	; (80016b0 <Comb_measurement+0x2a0>)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    y_axis[chip_select] = (int16_t)(Y_axis[chip_select] * 1000);
 80015ca:	4a36      	ldr	r2, [pc, #216]	; (80016a4 <Comb_measurement+0x294>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d2:	4936      	ldr	r1, [pc, #216]	; (80016ac <Comb_measurement+0x29c>)
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fbd5 	bl	8000d84 <__aeabi_fmul>
 80015da:	4603      	mov	r3, r0
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fd21 	bl	8001024 <__aeabi_f2iz>
 80015e2:	4603      	mov	r3, r0
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	b299      	uxth	r1, r3
 80015e8:	4a32      	ldr	r2, [pc, #200]	; (80016b4 <Comb_measurement+0x2a4>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    z_axis[chip_select] = (int16_t)(Z_axis[chip_select] * 1000);
 80015f0:	4a2d      	ldr	r2, [pc, #180]	; (80016a8 <Comb_measurement+0x298>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f8:	492c      	ldr	r1, [pc, #176]	; (80016ac <Comb_measurement+0x29c>)
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fbc2 	bl	8000d84 <__aeabi_fmul>
 8001600:	4603      	mov	r3, r0
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fd0e 	bl	8001024 <__aeabi_f2iz>
 8001608:	4603      	mov	r3, r0
 800160a:	b21b      	sxth	r3, r3
 800160c:	b299      	uxth	r1, r3
 800160e:	4a2a      	ldr	r2, [pc, #168]	; (80016b8 <Comb_measurement+0x2a8>)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

//    data1[counter++] = x_axis[chip_select];
//    data1[counter++] = y_axis[chip_select];
//    data1[counter++] = z_axis[chip_select];
    HAL_UART_Transmit(&huart2,  x_axis[chip_select], sizeof( x_axis[chip_select]), 1000);
 8001616:	4a26      	ldr	r2, [pc, #152]	; (80016b0 <Comb_measurement+0x2a0>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800161e:	4619      	mov	r1, r3
 8001620:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001624:	2202      	movs	r2, #2
 8001626:	4825      	ldr	r0, [pc, #148]	; (80016bc <Comb_measurement+0x2ac>)
 8001628:	f004 fe1a 	bl	8006260 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2,  y_axis[chip_select], sizeof( y_axis[chip_select]), 1000);
 800162c:	4a21      	ldr	r2, [pc, #132]	; (80016b4 <Comb_measurement+0x2a4>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001634:	4619      	mov	r1, r3
 8001636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800163a:	2202      	movs	r2, #2
 800163c:	481f      	ldr	r0, [pc, #124]	; (80016bc <Comb_measurement+0x2ac>)
 800163e:	f004 fe0f 	bl	8006260 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2,  z_axis[chip_select], sizeof( z_axis[chip_select]), 1000);
 8001642:	4a1d      	ldr	r2, [pc, #116]	; (80016b8 <Comb_measurement+0x2a8>)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800164a:	4619      	mov	r1, r3
 800164c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001650:	2202      	movs	r2, #2
 8001652:	481a      	ldr	r0, [pc, #104]	; (80016bc <Comb_measurement+0x2ac>)
 8001654:	f004 fe04 	bl	8006260 <HAL_UART_Transmit>
//    	if(HAL_OK == HAL_UART_Transmit(&huart2, data1, counter-1, 1000)){
//    		HAL_UART_Transmit(&huart1, "Data sent to OBC successfully\n",sizeof("Data sent to OBC successfully\n"), 1000);
//    	}
//    	counter = 0;
//    }
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	2000040c 	.word	0x2000040c
 8001664:	200003c8 	.word	0x200003c8
 8001668:	20000420 	.word	0x20000420
 800166c:	20000410 	.word	0x20000410
 8001670:	20000340 	.word	0x20000340
 8001674:	20000444 	.word	0x20000444
 8001678:	20000360 	.word	0x20000360
 800167c:	20000438 	.word	0x20000438
 8001680:	20000268 	.word	0x20000268
 8001684:	20000424 	.word	0x20000424
 8001688:	200003cc 	.word	0x200003cc
 800168c:	20000384 	.word	0x20000384
 8001690:	20000434 	.word	0x20000434
 8001694:	20000364 	.word	0x20000364
 8001698:	200003b8 	.word	0x200003b8
 800169c:	20000000 	.word	0x20000000
 80016a0:	200003a8 	.word	0x200003a8
 80016a4:	20000388 	.word	0x20000388
 80016a8:	20000350 	.word	0x20000350
 80016ac:	447a0000 	.word	0x447a0000
 80016b0:	20000404 	.word	0x20000404
 80016b4:	2000043c 	.word	0x2000043c
 80016b8:	20000260 	.word	0x20000260
 80016bc:	20000684 	.word	0x20000684

080016c0 <READ_DATA>:



READ_DATA(){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08a      	sub	sp, #40	; 0x28
 80016c4:	af00      	add	r7, sp, #0
	// Define the command sequence to compare
	uint8_t command[7] = {0x53, 0x0e, 0x0d, 0x0e, 0x01, 0x7e};
 80016c6:	4a52      	ldr	r2, [pc, #328]	; (8001810 <READ_DATA+0x150>)
 80016c8:	f107 0308 	add.w	r3, r7, #8
 80016cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016d0:	6018      	str	r0, [r3, #0]
 80016d2:	3304      	adds	r3, #4
 80016d4:	8019      	strh	r1, [r3, #0]
 80016d6:	3302      	adds	r3, #2
 80016d8:	0c0a      	lsrs	r2, r1, #16
 80016da:	701a      	strb	r2, [r3, #0]
	uint8_t match = 1;  // Flag to track if the command matches
 80016dc:	2301      	movs	r3, #1
 80016de:	76fb      	strb	r3, [r7, #27]
	uint32_t startTime = HAL_GetTick();  // Record the start time
 80016e0:	f001 f86e 	bl	80027c0 <HAL_GetTick>
 80016e4:	6178      	str	r0, [r7, #20]
	uint32_t maxDuration = 1 * 60 * 1000;  // Maximum duration (1 minute in milliseconds)
 80016e6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80016ea:	613b      	str	r3, [r7, #16]
    while(1){
    	memset(OBC_CMD_RX,'\0',7);
 80016ec:	2207      	movs	r2, #7
 80016ee:	2100      	movs	r1, #0
 80016f0:	4848      	ldr	r0, [pc, #288]	; (8001814 <READ_DATA+0x154>)
 80016f2:	f006 fcf3 	bl	80080dc <memset>
    	for(int i=0;i<7;i++){
 80016f6:	2300      	movs	r3, #0
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
 80016fa:	e017      	b.n	800172c <READ_DATA+0x6c>
    		if(HAL_UART_Receive(&huart2, &OBC_CMD_RX[i], 1,1000) == HAL_OK){
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	4a45      	ldr	r2, [pc, #276]	; (8001814 <READ_DATA+0x154>)
 8001700:	1899      	adds	r1, r3, r2
 8001702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001706:	2201      	movs	r2, #1
 8001708:	4843      	ldr	r0, [pc, #268]	; (8001818 <READ_DATA+0x158>)
 800170a:	f004 fe42 	bl	8006392 <HAL_UART_Receive>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d108      	bne.n	8001726 <READ_DATA+0x66>
    			HAL_UART_Transmit(&huart1, &OBC_CMD_RX[i], 1 ,1000);
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	4a3f      	ldr	r2, [pc, #252]	; (8001814 <READ_DATA+0x154>)
 8001718:	1899      	adds	r1, r3, r2
 800171a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800171e:	2201      	movs	r2, #1
 8001720:	483e      	ldr	r0, [pc, #248]	; (800181c <READ_DATA+0x15c>)
 8001722:	f004 fd9d 	bl	8006260 <HAL_UART_Transmit>
    	for(int i=0;i<7;i++){
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	3301      	adds	r3, #1
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	2b06      	cmp	r3, #6
 8001730:	dde4      	ble.n	80016fc <READ_DATA+0x3c>
    		}
    	}
	 {

		HAL_UART_Transmit(&huart1, OBC_CMD_RX, sizeof(OBC_CMD_RX), 1000);
 8001732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001736:	2207      	movs	r2, #7
 8001738:	4936      	ldr	r1, [pc, #216]	; (8001814 <READ_DATA+0x154>)
 800173a:	4838      	ldr	r0, [pc, #224]	; (800181c <READ_DATA+0x15c>)
 800173c:	f004 fd90 	bl	8006260 <HAL_UART_Transmit>
			if(HAL_UART_Transmit(&huart2, OBC_CMD_RX, sizeof(OBC_CMD_RX), 3000)==HAL_OK){
 8001740:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001744:	2207      	movs	r2, #7
 8001746:	4933      	ldr	r1, [pc, #204]	; (8001814 <READ_DATA+0x154>)
 8001748:	4833      	ldr	r0, [pc, #204]	; (8001818 <READ_DATA+0x158>)
 800174a:	f004 fd89 	bl	8006260 <HAL_UART_Transmit>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1cb      	bne.n	80016ec <READ_DATA+0x2c>
				HAL_UART_Transmit(&huart1, "COMMAND RECEIVED\n", sizeof("COMMAND RECEIVED"), 1000);
 8001754:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001758:	2211      	movs	r2, #17
 800175a:	4931      	ldr	r1, [pc, #196]	; (8001820 <READ_DATA+0x160>)
 800175c:	482f      	ldr	r0, [pc, #188]	; (800181c <READ_DATA+0x15c>)
 800175e:	f004 fd7f 	bl	8006260 <HAL_UART_Transmit>
				for(int i = 0; i<4; i++){
 8001762:	2300      	movs	r3, #0
 8001764:	623b      	str	r3, [r7, #32]
 8001766:	e00b      	b.n	8001780 <READ_DATA+0xc0>
					SET_COUNT(i);
 8001768:	6a38      	ldr	r0, [r7, #32]
 800176a:	f7ff fcb9 	bl	80010e0 <SET_COUNT>
					Continuous_Mode(i);
 800176e:	6a38      	ldr	r0, [r7, #32]
 8001770:	f7ff fd28 	bl	80011c4 <Continuous_Mode>
					TMRC_Mode(i);
 8001774:	6a38      	ldr	r0, [r7, #32]
 8001776:	f7ff fd69 	bl	800124c <TMRC_Mode>
				for(int i = 0; i<4; i++){
 800177a:	6a3b      	ldr	r3, [r7, #32]
 800177c:	3301      	adds	r3, #1
 800177e:	623b      	str	r3, [r7, #32]
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	2b03      	cmp	r3, #3
 8001784:	ddf0      	ble.n	8001768 <READ_DATA+0xa8>
				}
				 while (HAL_GetTick() - startTime < maxDuration) {  // Run loop for 1 minute
 8001786:	e01d      	b.n	80017c4 <READ_DATA+0x104>
					            for (int i = 0; i < 4; i++) {
 8001788:	2300      	movs	r3, #0
 800178a:	61fb      	str	r3, [r7, #28]
 800178c:	e017      	b.n	80017be <READ_DATA+0xfe>
					                Mea_Result(i);
 800178e:	69f8      	ldr	r0, [r7, #28]
 8001790:	f7ff fda0 	bl	80012d4 <Mea_Result>
					                Comb_measurement(i);
 8001794:	69f8      	ldr	r0, [r7, #28]
 8001796:	f7ff fe3b 	bl	8001410 <Comb_measurement>
					                HAL_Delay(100);  // Delay 100ms between iterations
 800179a:	2064      	movs	r0, #100	; 0x64
 800179c:	f001 f81a 	bl	80027d4 <HAL_Delay>
					                HAL_UART_Transmit(&huart1, "QUD_MAG IS WORKING\n", sizeof("QUDD_MAG IS WORKING"), 1000);
 80017a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a4:	2214      	movs	r2, #20
 80017a6:	491f      	ldr	r1, [pc, #124]	; (8001824 <READ_DATA+0x164>)
 80017a8:	481c      	ldr	r0, [pc, #112]	; (800181c <READ_DATA+0x15c>)
 80017aa:	f004 fd59 	bl	8006260 <HAL_UART_Transmit>
					                counter++;
 80017ae:	4b1e      	ldr	r3, [pc, #120]	; (8001828 <READ_DATA+0x168>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	3301      	adds	r3, #1
 80017b4:	4a1c      	ldr	r2, [pc, #112]	; (8001828 <READ_DATA+0x168>)
 80017b6:	6013      	str	r3, [r2, #0]
					            for (int i = 0; i < 4; i++) {
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	3301      	adds	r3, #1
 80017bc:	61fb      	str	r3, [r7, #28]
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	2b03      	cmp	r3, #3
 80017c2:	dde4      	ble.n	800178e <READ_DATA+0xce>
				 while (HAL_GetTick() - startTime < maxDuration) {  // Run loop for 1 minute
 80017c4:	f000 fffc 	bl	80027c0 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d8d9      	bhi.n	8001788 <READ_DATA+0xc8>
					            }
			}
				uint8_t END[]={0xff, 0xd9};
 80017d4:	f64d 13ff 	movw	r3, #55807	; 0xd9ff
 80017d8:	80bb      	strh	r3, [r7, #4]
				HAL_UART_Transmit(&huart2, END, sizeof(END), 1000);
 80017da:	1d39      	adds	r1, r7, #4
 80017dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e0:	2202      	movs	r2, #2
 80017e2:	480d      	ldr	r0, [pc, #52]	; (8001818 <READ_DATA+0x158>)
 80017e4:	f004 fd3c 	bl	8006260 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, END, sizeof(END), 1000);
 80017e8:	1d39      	adds	r1, r7, #4
 80017ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ee:	2202      	movs	r2, #2
 80017f0:	4809      	ldr	r0, [pc, #36]	; (8001818 <READ_DATA+0x158>)
 80017f2:	f004 fd35 	bl	8006260 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, "**DATA READING COMPLETED**", sizeof("**DATA READING COMPLETED**"), 1000);
 80017f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017fa:	221b      	movs	r2, #27
 80017fc:	490b      	ldr	r1, [pc, #44]	; (800182c <READ_DATA+0x16c>)
 80017fe:	4807      	ldr	r0, [pc, #28]	; (800181c <READ_DATA+0x15c>)
 8001800:	f004 fd2e 	bl	8006260 <HAL_UART_Transmit>

			break;
 8001804:	bf00      	nop
		}
	}
  }

}
 8001806:	bf00      	nop
 8001808:	3728      	adds	r7, #40	; 0x28
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	0800c8cc 	.word	0x0800c8cc
 8001814:	20000040 	.word	0x20000040
 8001818:	20000684 	.word	0x20000684
 800181c:	200005bc 	.word	0x200005bc
 8001820:	0800c888 	.word	0x0800c888
 8001824:	0800c89c 	.word	0x0800c89c
 8001828:	20000244 	.word	0x20000244
 800182c:	0800c8b0 	.word	0x0800c8b0

08001830 <OBC_HANDSHAKE>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//HANDSHAKE WITH ON-BOARD COMPUTER
uint8_t OBC_HANDSHAKE(){
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
	OBC_HANDSHAKE_SUCESS = 0;
 8001834:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <OBC_HANDSHAKE+0x88>)
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
	if(HAL_UART_Receive(&huart2, OBC_HANDSHAKE_RX, sizeof(OBC_HANDSHAKE_RX),3000)==HAL_OK){
 800183a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800183e:	2207      	movs	r2, #7
 8001840:	491e      	ldr	r1, [pc, #120]	; (80018bc <OBC_HANDSHAKE+0x8c>)
 8001842:	481f      	ldr	r0, [pc, #124]	; (80018c0 <OBC_HANDSHAKE+0x90>)
 8001844:	f004 fda5 	bl	8006392 <HAL_UART_Receive>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d12f      	bne.n	80018ae <OBC_HANDSHAKE+0x7e>
		if(OBC_HANDSHAKE_RX[0] != '\0' && OBC_HANDSHAKE_RX[1]!='\0' && OBC_HANDSHAKE_RX[2]!='\0' && OBC_HANDSHAKE_RX[3] != '\0'){
 800184e:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <OBC_HANDSHAKE+0x8c>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d02b      	beq.n	80018ae <OBC_HANDSHAKE+0x7e>
 8001856:	4b19      	ldr	r3, [pc, #100]	; (80018bc <OBC_HANDSHAKE+0x8c>)
 8001858:	785b      	ldrb	r3, [r3, #1]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d027      	beq.n	80018ae <OBC_HANDSHAKE+0x7e>
 800185e:	4b17      	ldr	r3, [pc, #92]	; (80018bc <OBC_HANDSHAKE+0x8c>)
 8001860:	789b      	ldrb	r3, [r3, #2]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d023      	beq.n	80018ae <OBC_HANDSHAKE+0x7e>
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <OBC_HANDSHAKE+0x8c>)
 8001868:	78db      	ldrb	r3, [r3, #3]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d01f      	beq.n	80018ae <OBC_HANDSHAKE+0x7e>

					if(HAL_UART_Transmit(&huart2, OBC_HANDSHAKE_RX, sizeof(OBC_HANDSHAKE_RX), 3000)==HAL_OK){
 800186e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001872:	2207      	movs	r2, #7
 8001874:	4911      	ldr	r1, [pc, #68]	; (80018bc <OBC_HANDSHAKE+0x8c>)
 8001876:	4812      	ldr	r0, [pc, #72]	; (80018c0 <OBC_HANDSHAKE+0x90>)
 8001878:	f004 fcf2 	bl	8006260 <HAL_UART_Transmit>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d115      	bne.n	80018ae <OBC_HANDSHAKE+0x7e>
						OBC_HANDSHAKE_SUCESS = 1;
 8001882:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <OBC_HANDSHAKE+0x88>)
 8001884:	2201      	movs	r2, #1
 8001886:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart1, OBC_HANDSHAKE_RX, sizeof(OBC_HANDSHAKE_RX), 1000);
 8001888:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188c:	2207      	movs	r2, #7
 800188e:	490b      	ldr	r1, [pc, #44]	; (80018bc <OBC_HANDSHAKE+0x8c>)
 8001890:	480c      	ldr	r0, [pc, #48]	; (80018c4 <OBC_HANDSHAKE+0x94>)
 8001892:	f004 fce5 	bl	8006260 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart1, "HANDSHAKE SUCCESSFULLY\n", "HANDSHAKE SUCCESSFULLY", 1000);
 8001896:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <OBC_HANDSHAKE+0x98>)
 8001898:	b29a      	uxth	r2, r3
 800189a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189e:	490b      	ldr	r1, [pc, #44]	; (80018cc <OBC_HANDSHAKE+0x9c>)
 80018a0:	4808      	ldr	r0, [pc, #32]	; (80018c4 <OBC_HANDSHAKE+0x94>)
 80018a2:	f004 fcdd 	bl	8006260 <HAL_UART_Transmit>
						HAL_Delay(1000);
 80018a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018aa:	f000 ff93 	bl	80027d4 <HAL_Delay>
					}
				}
	}
	return OBC_HANDSHAKE_SUCESS;
 80018ae:	4b02      	ldr	r3, [pc, #8]	; (80018b8 <OBC_HANDSHAKE+0x88>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000252 	.word	0x20000252
 80018bc:	200004e8 	.word	0x200004e8
 80018c0:	20000684 	.word	0x20000684
 80018c4:	200005bc 	.word	0x200005bc
 80018c8:	0800c8d4 	.word	0x0800c8d4
 80018cc:	0800c8ec 	.word	0x0800c8ec

080018d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018d6:	f000 ff1b 	bl	8002710 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018da:	f000 f875 	bl	80019c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018de:	f000 fa17 	bl	8001d10 <MX_GPIO_Init>
  MX_SPI1_Init();
 80018e2:	f000 f8ed 	bl	8001ac0 <MX_SPI1_Init>
  MX_DMA_Init();
 80018e6:	f000 f9cd 	bl	8001c84 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80018ea:	f000 f97f 	bl	8001bec <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80018ee:	f000 f91d 	bl	8001b2c <MX_SPI2_Init>
  MX_USB_PCD_Init();
 80018f2:	f000 f9a5 	bl	8001c40 <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 80018f6:	f000 f94f 	bl	8001b98 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80018fa:	f000 f8c5 	bl	8001a88 <MX_RTC_Init>
//while(1){
//	if(HAL_UART_Receive(&huart2,&rx, 1, 1000)==HAL_OK){
//		HAL_UART_Transmit(&huart1, &rx, 1, 1000);
//	}
//}
  HAL_UART_Transmit(&huart1, "**EPDM IS STARTING**\n", sizeof("**EPDM IS STARTING**"), 1000);
 80018fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001902:	2215      	movs	r2, #21
 8001904:	4927      	ldr	r1, [pc, #156]	; (80019a4 <main+0xd4>)
 8001906:	4828      	ldr	r0, [pc, #160]	; (80019a8 <main+0xd8>)
 8001908:	f004 fcaa 	bl	8006260 <HAL_UART_Transmit>


  while(OBC_HANDSHAKE_SUCESS ==0){
 800190c:	e00b      	b.n	8001926 <main+0x56>
	  memset(OBC_HANDSHAKE_RX, '\0', sizeof(OBC_HANDSHAKE_RX));
 800190e:	2207      	movs	r2, #7
 8001910:	2100      	movs	r1, #0
 8001912:	4826      	ldr	r0, [pc, #152]	; (80019ac <main+0xdc>)
 8001914:	f006 fbe2 	bl	80080dc <memset>
	  	memset(OBC_HANDSHAKE_TX, '\0', sizeof(OBC_HANDSHAKE_TX));
 8001918:	2207      	movs	r2, #7
 800191a:	2100      	movs	r1, #0
 800191c:	4824      	ldr	r0, [pc, #144]	; (80019b0 <main+0xe0>)
 800191e:	f006 fbdd 	bl	80080dc <memset>
  	 OBC_HANDSHAKE();
 8001922:	f7ff ff85 	bl	8001830 <OBC_HANDSHAKE>
  while(OBC_HANDSHAKE_SUCESS ==0){
 8001926:	4b23      	ldr	r3, [pc, #140]	; (80019b4 <main+0xe4>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0ef      	beq.n	800190e <main+0x3e>
   }

   while(OBC_CMD_RX_FLAG != 1){
 800192e:	e00e      	b.n	800194e <main+0x7e>
  	 OBC_HANDSHAKE();
 8001930:	f7ff ff7e 	bl	8001830 <OBC_HANDSHAKE>
  	 if(HAL_UART_Receive(&huart2, OBC_HANDSHAKE_RX, sizeof(OBC_HANDSHAKE_RX),1000) >0){
 8001934:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001938:	2207      	movs	r2, #7
 800193a:	491c      	ldr	r1, [pc, #112]	; (80019ac <main+0xdc>)
 800193c:	481e      	ldr	r0, [pc, #120]	; (80019b8 <main+0xe8>)
 800193e:	f004 fd28 	bl	8006392 <HAL_UART_Receive>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d002      	beq.n	800194e <main+0x7e>
  		 OBC_CMD_RX_FLAG = 1;
 8001948:	4b1c      	ldr	r3, [pc, #112]	; (80019bc <main+0xec>)
 800194a:	2201      	movs	r2, #1
 800194c:	701a      	strb	r2, [r3, #0]
   while(OBC_CMD_RX_FLAG != 1){
 800194e:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <main+0xec>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d1ec      	bne.n	8001930 <main+0x60>
  	 }

   }
   HAL_Delay(1000);
 8001956:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800195a:	f000 ff3b 	bl	80027d4 <HAL_Delay>

  HAL_GPIO_WritePin(GPIOB, MSN_EN1_Pin, SET); // Set PB9 high
 800195e:	2201      	movs	r2, #1
 8001960:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001964:	4816      	ldr	r0, [pc, #88]	; (80019c0 <main+0xf0>)
 8001966:	f001 fd43 	bl	80033f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, MSN_EN2_Pin, SET); // Set PB8 high
 800196a:	2201      	movs	r2, #1
 800196c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001970:	4813      	ldr	r0, [pc, #76]	; (80019c0 <main+0xf0>)
 8001972:	f001 fd3d 	bl	80033f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, MSN_EN3_Pin, SET); // Set PA15 high
 8001976:	2201      	movs	r2, #1
 8001978:	f44f 7180 	mov.w	r1, #256	; 0x100
 800197c:	4810      	ldr	r0, [pc, #64]	; (80019c0 <main+0xf0>)
 800197e:	f001 fd37 	bl	80033f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, MSN_EN4_Pin, SET); // Set PA8 high
 8001982:	2201      	movs	r2, #1
 8001984:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001988:	480d      	ldr	r0, [pc, #52]	; (80019c0 <main+0xf0>)
 800198a:	f001 fd31 	bl	80033f0 <HAL_GPIO_WritePin>
  uint8_t data[20];
// Read_ID(&hspi2, GPIOB, GPIO_PIN_12, data);
 //   HAL_Delay(100);
    HAL_UART_Transmit(&huart1, "STARTING DATA READING", sizeof("STARTING DATA READING"), 1000);
 800198e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001992:	2216      	movs	r2, #22
 8001994:	490b      	ldr	r1, [pc, #44]	; (80019c4 <main+0xf4>)
 8001996:	4804      	ldr	r0, [pc, #16]	; (80019a8 <main+0xd8>)
 8001998:	f004 fc62 	bl	8006260 <HAL_UART_Transmit>
	  READ_DATA();
 800199c:	f7ff fe90 	bl	80016c0 <READ_DATA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <main+0xd0>
 80019a2:	bf00      	nop
 80019a4:	0800c904 	.word	0x0800c904
 80019a8:	200005bc 	.word	0x200005bc
 80019ac:	200004e8 	.word	0x200004e8
 80019b0:	20000624 	.word	0x20000624
 80019b4:	20000252 	.word	0x20000252
 80019b8:	20000684 	.word	0x20000684
 80019bc:	20000251 	.word	0x20000251
 80019c0:	40010c00 	.word	0x40010c00
 80019c4:	0800c91c 	.word	0x0800c91c

080019c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b094      	sub	sp, #80	; 0x50
 80019cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019d2:	2228      	movs	r2, #40	; 0x28
 80019d4:	2100      	movs	r1, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f006 fb80 	bl	80080dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80019f8:	2309      	movs	r3, #9
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a02:	2300      	movs	r3, #0
 8001a04:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a06:	2301      	movs	r3, #1
 8001a08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001a18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a22:	4618      	mov	r0, r3
 8001a24:	f002 fe94 	bl	8004750 <HAL_RCC_OscConfig>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001a2e:	f000 f9e1 	bl	8001df4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a32:	230f      	movs	r3, #15
 8001a34:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a36:	2302      	movs	r3, #2
 8001a38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a42:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a44:	2300      	movs	r3, #0
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f003 f8fe 	bl	8004c50 <HAL_RCC_ClockConfig>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001a5a:	f000 f9cb 	bl	8001df4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8001a5e:	2311      	movs	r3, #17
 8001a60:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001a62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a66:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001a68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a6c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a6e:	1d3b      	adds	r3, r7, #4
 8001a70:	4618      	mov	r0, r3
 8001a72:	f003 fa87 	bl	8004f84 <HAL_RCCEx_PeriphCLKConfig>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001a7c:	f000 f9ba 	bl	8001df4 <Error_Handler>
  }
}
 8001a80:	bf00      	nop
 8001a82:	3750      	adds	r7, #80	; 0x50
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a8c:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <MX_RTC_Init+0x30>)
 8001a8e:	4a0b      	ldr	r2, [pc, #44]	; (8001abc <MX_RTC_Init+0x34>)
 8001a90:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <MX_RTC_Init+0x30>)
 8001a94:	f04f 32ff 	mov.w	r2, #4294967295
 8001a98:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001a9a:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <MX_RTC_Init+0x30>)
 8001a9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aa0:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001aa2:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <MX_RTC_Init+0x30>)
 8001aa4:	f003 fbe8 	bl	8005278 <HAL_RTC_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8001aae:	f000 f9a1 	bl	8001df4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200005fc 	.word	0x200005fc
 8001abc:	40002800 	.word	0x40002800

08001ac0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ac4:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <MX_SPI1_Init+0x64>)
 8001ac6:	4a18      	ldr	r2, [pc, #96]	; (8001b28 <MX_SPI1_Init+0x68>)
 8001ac8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001aca:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <MX_SPI1_Init+0x64>)
 8001acc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ad0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ad2:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <MX_SPI1_Init+0x64>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ad8:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <MX_SPI1_Init+0x64>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ade:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <MX_SPI1_Init+0x64>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ae4:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <MX_SPI1_Init+0x64>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001aea:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <MX_SPI1_Init+0x64>)
 8001aec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001af2:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <MX_SPI1_Init+0x64>)
 8001af4:	2220      	movs	r2, #32
 8001af6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001af8:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <MX_SPI1_Init+0x64>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <MX_SPI1_Init+0x64>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b04:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <MX_SPI1_Init+0x64>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <MX_SPI1_Init+0x64>)
 8001b0c:	220a      	movs	r2, #10
 8001b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b10:	4804      	ldr	r0, [pc, #16]	; (8001b24 <MX_SPI1_Init+0x64>)
 8001b12:	f003 fd3b 	bl	800558c <HAL_SPI_Init>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b1c:	f000 f96a 	bl	8001df4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	2000062c 	.word	0x2000062c
 8001b28:	40013000 	.word	0x40013000

08001b2c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001b30:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <MX_SPI2_Init+0x64>)
 8001b32:	4a18      	ldr	r2, [pc, #96]	; (8001b94 <MX_SPI2_Init+0x68>)
 8001b34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b36:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <MX_SPI2_Init+0x64>)
 8001b38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b3e:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <MX_SPI2_Init+0x64>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <MX_SPI2_Init+0x64>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <MX_SPI2_Init+0x64>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <MX_SPI2_Init+0x64>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <MX_SPI2_Init+0x64>)
 8001b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b5c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <MX_SPI2_Init+0x64>)
 8001b60:	2218      	movs	r2, #24
 8001b62:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b64:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <MX_SPI2_Init+0x64>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <MX_SPI2_Init+0x64>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b70:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <MX_SPI2_Init+0x64>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <MX_SPI2_Init+0x64>)
 8001b78:	220a      	movs	r2, #10
 8001b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b7c:	4804      	ldr	r0, [pc, #16]	; (8001b90 <MX_SPI2_Init+0x64>)
 8001b7e:	f003 fd05 	bl	800558c <HAL_SPI_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001b88:	f000 f934 	bl	8001df4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000490 	.word	0x20000490
 8001b94:	40003800 	.word	0x40003800

08001b98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b9c:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <MX_USART1_UART_Init+0x4c>)
 8001b9e:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <MX_USART1_UART_Init+0x50>)
 8001ba0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <MX_USART1_UART_Init+0x4c>)
 8001ba4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ba8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001baa:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <MX_USART1_UART_Init+0x4c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <MX_USART1_UART_Init+0x4c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <MX_USART1_UART_Init+0x4c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <MX_USART1_UART_Init+0x4c>)
 8001bbe:	220c      	movs	r2, #12
 8001bc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bc2:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <MX_USART1_UART_Init+0x4c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <MX_USART1_UART_Init+0x4c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bce:	4805      	ldr	r0, [pc, #20]	; (8001be4 <MX_USART1_UART_Init+0x4c>)
 8001bd0:	f004 faf9 	bl	80061c6 <HAL_UART_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001bda:	f000 f90b 	bl	8001df4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	200005bc 	.word	0x200005bc
 8001be8:	40013800 	.word	0x40013800

08001bec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001bf2:	4a12      	ldr	r2, [pc, #72]	; (8001c3c <MX_USART2_UART_Init+0x50>)
 8001bf4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001bf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c12:	220c      	movs	r2, #12
 8001c14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c16:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c22:	4805      	ldr	r0, [pc, #20]	; (8001c38 <MX_USART2_UART_Init+0x4c>)
 8001c24:	f004 facf 	bl	80061c6 <HAL_UART_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c2e:	f000 f8e1 	bl	8001df4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000684 	.word	0x20000684
 8001c3c:	40004400 	.word	0x40004400

08001c40 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001c44:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <MX_USB_PCD_Init+0x3c>)
 8001c46:	4a0e      	ldr	r2, [pc, #56]	; (8001c80 <MX_USB_PCD_Init+0x40>)
 8001c48:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001c4a:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <MX_USB_PCD_Init+0x3c>)
 8001c4c:	2208      	movs	r2, #8
 8001c4e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001c50:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <MX_USB_PCD_Init+0x3c>)
 8001c52:	2202      	movs	r2, #2
 8001c54:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001c56:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <MX_USB_PCD_Init+0x3c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001c5c:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <MX_USB_PCD_Init+0x3c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <MX_USB_PCD_Init+0x3c>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001c68:	4804      	ldr	r0, [pc, #16]	; (8001c7c <MX_USB_PCD_Init+0x3c>)
 8001c6a:	f001 fbd9 	bl	8003420 <HAL_PCD_Init>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001c74:	f000 f8be 	bl	8001df4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000708 	.word	0x20000708
 8001c80:	40005c00 	.word	0x40005c00

08001c84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c8a:	4b20      	ldr	r3, [pc, #128]	; (8001d0c <MX_DMA_Init+0x88>)
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	4a1f      	ldr	r2, [pc, #124]	; (8001d0c <MX_DMA_Init+0x88>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6153      	str	r3, [r2, #20]
 8001c96:	4b1d      	ldr	r3, [pc, #116]	; (8001d0c <MX_DMA_Init+0x88>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	607b      	str	r3, [r7, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	200c      	movs	r0, #12
 8001ca8:	f000 fe8f 	bl	80029ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001cac:	200c      	movs	r0, #12
 8001cae:	f000 fea8 	bl	8002a02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	200d      	movs	r0, #13
 8001cb8:	f000 fe87 	bl	80029ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001cbc:	200d      	movs	r0, #13
 8001cbe:	f000 fea0 	bl	8002a02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	200e      	movs	r0, #14
 8001cc8:	f000 fe7f 	bl	80029ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001ccc:	200e      	movs	r0, #14
 8001cce:	f000 fe98 	bl	8002a02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	200f      	movs	r0, #15
 8001cd8:	f000 fe77 	bl	80029ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001cdc:	200f      	movs	r0, #15
 8001cde:	f000 fe90 	bl	8002a02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	2010      	movs	r0, #16
 8001ce8:	f000 fe6f 	bl	80029ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001cec:	2010      	movs	r0, #16
 8001cee:	f000 fe88 	bl	8002a02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	2011      	movs	r0, #17
 8001cf8:	f000 fe67 	bl	80029ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001cfc:	2011      	movs	r0, #17
 8001cfe:	f000 fe80 	bl	8002a02 <HAL_NVIC_EnableIRQ>

}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40021000 	.word	0x40021000

08001d10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d16:	f107 0310 	add.w	r3, r7, #16
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]
 8001d20:	609a      	str	r2, [r3, #8]
 8001d22:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d24:	4b30      	ldr	r3, [pc, #192]	; (8001de8 <MX_GPIO_Init+0xd8>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	4a2f      	ldr	r2, [pc, #188]	; (8001de8 <MX_GPIO_Init+0xd8>)
 8001d2a:	f043 0320 	orr.w	r3, r3, #32
 8001d2e:	6193      	str	r3, [r2, #24]
 8001d30:	4b2d      	ldr	r3, [pc, #180]	; (8001de8 <MX_GPIO_Init+0xd8>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	f003 0320 	and.w	r3, r3, #32
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3c:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <MX_GPIO_Init+0xd8>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	4a29      	ldr	r2, [pc, #164]	; (8001de8 <MX_GPIO_Init+0xd8>)
 8001d42:	f043 0304 	orr.w	r3, r3, #4
 8001d46:	6193      	str	r3, [r2, #24]
 8001d48:	4b27      	ldr	r3, [pc, #156]	; (8001de8 <MX_GPIO_Init+0xd8>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d54:	4b24      	ldr	r3, [pc, #144]	; (8001de8 <MX_GPIO_Init+0xd8>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	4a23      	ldr	r2, [pc, #140]	; (8001de8 <MX_GPIO_Init+0xd8>)
 8001d5a:	f043 0308 	orr.w	r3, r3, #8
 8001d5e:	6193      	str	r3, [r2, #24]
 8001d60:	4b21      	ldr	r3, [pc, #132]	; (8001de8 <MX_GPIO_Init+0xd8>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS1_Pin|SS2_Pin|SS3_Pin|SS4_Pin
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f241 717f 	movw	r1, #6015	; 0x177f
 8001d72:	481e      	ldr	r0, [pc, #120]	; (8001dec <MX_GPIO_Init+0xdc>)
 8001d74:	f001 fb3c 	bl	80033f0 <HAL_GPIO_WritePin>
                          |SS_FM_Pin|DRDY4_Pin|DRDY3_Pin|DRDY2_Pin
                          |DRDY1_Pin|MSN_EN3_Pin|MSN_EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MSN_EN4_Pin|MSN_EN2_Pin, GPIO_PIN_RESET);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8001d7e:	481c      	ldr	r0, [pc, #112]	; (8001df0 <MX_GPIO_Init+0xe0>)
 8001d80:	f001 fb36 	bl	80033f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SS1_Pin SS2_Pin SS3_Pin SS4_Pin
                           SS_FM_Pin DRDY4_Pin DRDY3_Pin DRDY2_Pin
                           DRDY1_Pin */
  GPIO_InitStruct.Pin = SS1_Pin|SS2_Pin|SS3_Pin|SS4_Pin
 8001d84:	f241 437f 	movw	r3, #5247	; 0x147f
 8001d88:	613b      	str	r3, [r7, #16]
                          |SS_FM_Pin|DRDY4_Pin|DRDY3_Pin|DRDY2_Pin
                          |DRDY1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d92:	2302      	movs	r3, #2
 8001d94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d96:	f107 0310 	add.w	r3, r7, #16
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4813      	ldr	r0, [pc, #76]	; (8001dec <MX_GPIO_Init+0xdc>)
 8001d9e:	f001 f9a3 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MSN_EN4_Pin MSN_EN2_Pin */
  GPIO_InitStruct.Pin = MSN_EN4_Pin|MSN_EN2_Pin;
 8001da2:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001da6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da8:	2301      	movs	r3, #1
 8001daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dac:	2301      	movs	r3, #1
 8001dae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db0:	2302      	movs	r3, #2
 8001db2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db4:	f107 0310 	add.w	r3, r7, #16
 8001db8:	4619      	mov	r1, r3
 8001dba:	480d      	ldr	r0, [pc, #52]	; (8001df0 <MX_GPIO_Init+0xe0>)
 8001dbc:	f001 f994 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MSN_EN3_Pin MSN_EN1_Pin */
  GPIO_InitStruct.Pin = MSN_EN3_Pin|MSN_EN1_Pin;
 8001dc0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd2:	f107 0310 	add.w	r3, r7, #16
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4804      	ldr	r0, [pc, #16]	; (8001dec <MX_GPIO_Init+0xdc>)
 8001dda:	f001 f985 	bl	80030e8 <HAL_GPIO_Init>

}
 8001dde:	bf00      	nop
 8001de0:	3720      	adds	r7, #32
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40010c00 	.word	0x40010c00
 8001df0:	40010800 	.word	0x40010800

08001df4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001df8:	b672      	cpsid	i
}
 8001dfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dfc:	e7fe      	b.n	8001dfc <Error_Handler+0x8>
	...

08001e00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e06:	4b21      	ldr	r3, [pc, #132]	; (8001e8c <HAL_MspInit+0x8c>)
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	4a20      	ldr	r2, [pc, #128]	; (8001e8c <HAL_MspInit+0x8c>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6193      	str	r3, [r2, #24]
 8001e12:	4b1e      	ldr	r3, [pc, #120]	; (8001e8c <HAL_MspInit+0x8c>)
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e1e:	4b1b      	ldr	r3, [pc, #108]	; (8001e8c <HAL_MspInit+0x8c>)
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	4a1a      	ldr	r2, [pc, #104]	; (8001e8c <HAL_MspInit+0x8c>)
 8001e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e28:	61d3      	str	r3, [r2, #28]
 8001e2a:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <HAL_MspInit+0x8c>)
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e32:	607b      	str	r3, [r7, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8001e36:	2200      	movs	r2, #0
 8001e38:	2100      	movs	r1, #0
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	f000 fdc5 	bl	80029ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001e40:	2001      	movs	r0, #1
 8001e42:	f000 fdde 	bl	8002a02 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2100      	movs	r1, #0
 8001e4a:	2004      	movs	r0, #4
 8001e4c:	f000 fdbd 	bl	80029ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001e50:	2004      	movs	r0, #4
 8001e52:	f000 fdd6 	bl	8002a02 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2100      	movs	r1, #0
 8001e5a:	2005      	movs	r0, #5
 8001e5c:	f000 fdb5 	bl	80029ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001e60:	2005      	movs	r0, #5
 8001e62:	f000 fdce 	bl	8002a02 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e66:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <HAL_MspInit+0x90>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	4a04      	ldr	r2, [pc, #16]	; (8001e90 <HAL_MspInit+0x90>)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e82:	bf00      	nop
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40010000 	.word	0x40010000

08001e94 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a13      	ldr	r2, [pc, #76]	; (8001ef0 <HAL_RTC_MspInit+0x5c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d120      	bne.n	8001ee8 <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001ea6:	f002 fc2f 	bl	8004708 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001eaa:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_RTC_MspInit+0x60>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	4a11      	ldr	r2, [pc, #68]	; (8001ef4 <HAL_RTC_MspInit+0x60>)
 8001eb0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001eb4:	61d3      	str	r3, [r2, #28]
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <HAL_RTC_MspInit+0x60>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ec2:	4b0d      	ldr	r3, [pc, #52]	; (8001ef8 <HAL_RTC_MspInit+0x64>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2100      	movs	r1, #0
 8001ecc:	2003      	movs	r0, #3
 8001ece:	f000 fd7c 	bl	80029ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001ed2:	2003      	movs	r0, #3
 8001ed4:	f000 fd95 	bl	8002a02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2100      	movs	r1, #0
 8001edc:	2029      	movs	r0, #41	; 0x29
 8001ede:	f000 fd74 	bl	80029ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001ee2:	2029      	movs	r0, #41	; 0x29
 8001ee4:	f000 fd8d 	bl	8002a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ee8:	bf00      	nop
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40002800 	.word	0x40002800
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	4242043c 	.word	0x4242043c

08001efc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08a      	sub	sp, #40	; 0x28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f04:	f107 0318 	add.w	r3, r7, #24
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a66      	ldr	r2, [pc, #408]	; (80020b0 <HAL_SPI_MspInit+0x1b4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	f040 8085 	bne.w	8002028 <HAL_SPI_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f1e:	4b65      	ldr	r3, [pc, #404]	; (80020b4 <HAL_SPI_MspInit+0x1b8>)
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	4a64      	ldr	r2, [pc, #400]	; (80020b4 <HAL_SPI_MspInit+0x1b8>)
 8001f24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f28:	6193      	str	r3, [r2, #24]
 8001f2a:	4b62      	ldr	r3, [pc, #392]	; (80020b4 <HAL_SPI_MspInit+0x1b8>)
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f36:	4b5f      	ldr	r3, [pc, #380]	; (80020b4 <HAL_SPI_MspInit+0x1b8>)
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	4a5e      	ldr	r2, [pc, #376]	; (80020b4 <HAL_SPI_MspInit+0x1b8>)
 8001f3c:	f043 0304 	orr.w	r3, r3, #4
 8001f40:	6193      	str	r3, [r2, #24]
 8001f42:	4b5c      	ldr	r3, [pc, #368]	; (80020b4 <HAL_SPI_MspInit+0x1b8>)
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001f4e:	23a0      	movs	r3, #160	; 0xa0
 8001f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f52:	2302      	movs	r3, #2
 8001f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f56:	2303      	movs	r3, #3
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5a:	f107 0318 	add.w	r3, r7, #24
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4855      	ldr	r0, [pc, #340]	; (80020b8 <HAL_SPI_MspInit+0x1bc>)
 8001f62:	f001 f8c1 	bl	80030e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f66:	2340      	movs	r3, #64	; 0x40
 8001f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f72:	f107 0318 	add.w	r3, r7, #24
 8001f76:	4619      	mov	r1, r3
 8001f78:	484f      	ldr	r0, [pc, #316]	; (80020b8 <HAL_SPI_MspInit+0x1bc>)
 8001f7a:	f001 f8b5 	bl	80030e8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001f7e:	4b4f      	ldr	r3, [pc, #316]	; (80020bc <HAL_SPI_MspInit+0x1c0>)
 8001f80:	4a4f      	ldr	r2, [pc, #316]	; (80020c0 <HAL_SPI_MspInit+0x1c4>)
 8001f82:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f84:	4b4d      	ldr	r3, [pc, #308]	; (80020bc <HAL_SPI_MspInit+0x1c0>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f8a:	4b4c      	ldr	r3, [pc, #304]	; (80020bc <HAL_SPI_MspInit+0x1c0>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f90:	4b4a      	ldr	r3, [pc, #296]	; (80020bc <HAL_SPI_MspInit+0x1c0>)
 8001f92:	2280      	movs	r2, #128	; 0x80
 8001f94:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f96:	4b49      	ldr	r3, [pc, #292]	; (80020bc <HAL_SPI_MspInit+0x1c0>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f9c:	4b47      	ldr	r3, [pc, #284]	; (80020bc <HAL_SPI_MspInit+0x1c0>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001fa2:	4b46      	ldr	r3, [pc, #280]	; (80020bc <HAL_SPI_MspInit+0x1c0>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fa8:	4b44      	ldr	r3, [pc, #272]	; (80020bc <HAL_SPI_MspInit+0x1c0>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001fae:	4843      	ldr	r0, [pc, #268]	; (80020bc <HAL_SPI_MspInit+0x1c0>)
 8001fb0:	f000 fd42 	bl	8002a38 <HAL_DMA_Init>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_SPI_MspInit+0xc2>
    {
      Error_Handler();
 8001fba:	f7ff ff1b 	bl	8001df4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a3e      	ldr	r2, [pc, #248]	; (80020bc <HAL_SPI_MspInit+0x1c0>)
 8001fc2:	64da      	str	r2, [r3, #76]	; 0x4c
 8001fc4:	4a3d      	ldr	r2, [pc, #244]	; (80020bc <HAL_SPI_MspInit+0x1c0>)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001fca:	4b3e      	ldr	r3, [pc, #248]	; (80020c4 <HAL_SPI_MspInit+0x1c8>)
 8001fcc:	4a3e      	ldr	r2, [pc, #248]	; (80020c8 <HAL_SPI_MspInit+0x1cc>)
 8001fce:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fd0:	4b3c      	ldr	r3, [pc, #240]	; (80020c4 <HAL_SPI_MspInit+0x1c8>)
 8001fd2:	2210      	movs	r2, #16
 8001fd4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fd6:	4b3b      	ldr	r3, [pc, #236]	; (80020c4 <HAL_SPI_MspInit+0x1c8>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fdc:	4b39      	ldr	r3, [pc, #228]	; (80020c4 <HAL_SPI_MspInit+0x1c8>)
 8001fde:	2280      	movs	r2, #128	; 0x80
 8001fe0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fe2:	4b38      	ldr	r3, [pc, #224]	; (80020c4 <HAL_SPI_MspInit+0x1c8>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fe8:	4b36      	ldr	r3, [pc, #216]	; (80020c4 <HAL_SPI_MspInit+0x1c8>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001fee:	4b35      	ldr	r3, [pc, #212]	; (80020c4 <HAL_SPI_MspInit+0x1c8>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ff4:	4b33      	ldr	r3, [pc, #204]	; (80020c4 <HAL_SPI_MspInit+0x1c8>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001ffa:	4832      	ldr	r0, [pc, #200]	; (80020c4 <HAL_SPI_MspInit+0x1c8>)
 8001ffc:	f000 fd1c 	bl	8002a38 <HAL_DMA_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 8002006:	f7ff fef5 	bl	8001df4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a2d      	ldr	r2, [pc, #180]	; (80020c4 <HAL_SPI_MspInit+0x1c8>)
 800200e:	649a      	str	r2, [r3, #72]	; 0x48
 8002010:	4a2c      	ldr	r2, [pc, #176]	; (80020c4 <HAL_SPI_MspInit+0x1c8>)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002016:	2200      	movs	r2, #0
 8002018:	2100      	movs	r1, #0
 800201a:	2023      	movs	r0, #35	; 0x23
 800201c:	f000 fcd5 	bl	80029ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002020:	2023      	movs	r0, #35	; 0x23
 8002022:	f000 fcee 	bl	8002a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002026:	e03e      	b.n	80020a6 <HAL_SPI_MspInit+0x1aa>
  else if(hspi->Instance==SPI2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a27      	ldr	r2, [pc, #156]	; (80020cc <HAL_SPI_MspInit+0x1d0>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d139      	bne.n	80020a6 <HAL_SPI_MspInit+0x1aa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002032:	4b20      	ldr	r3, [pc, #128]	; (80020b4 <HAL_SPI_MspInit+0x1b8>)
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	4a1f      	ldr	r2, [pc, #124]	; (80020b4 <HAL_SPI_MspInit+0x1b8>)
 8002038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800203c:	61d3      	str	r3, [r2, #28]
 800203e:	4b1d      	ldr	r3, [pc, #116]	; (80020b4 <HAL_SPI_MspInit+0x1b8>)
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800204a:	4b1a      	ldr	r3, [pc, #104]	; (80020b4 <HAL_SPI_MspInit+0x1b8>)
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	4a19      	ldr	r2, [pc, #100]	; (80020b4 <HAL_SPI_MspInit+0x1b8>)
 8002050:	f043 0308 	orr.w	r3, r3, #8
 8002054:	6193      	str	r3, [r2, #24]
 8002056:	4b17      	ldr	r3, [pc, #92]	; (80020b4 <HAL_SPI_MspInit+0x1b8>)
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002062:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800206c:	2303      	movs	r3, #3
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002070:	f107 0318 	add.w	r3, r7, #24
 8002074:	4619      	mov	r1, r3
 8002076:	4816      	ldr	r0, [pc, #88]	; (80020d0 <HAL_SPI_MspInit+0x1d4>)
 8002078:	f001 f836 	bl	80030e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800207c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800208a:	f107 0318 	add.w	r3, r7, #24
 800208e:	4619      	mov	r1, r3
 8002090:	480f      	ldr	r0, [pc, #60]	; (80020d0 <HAL_SPI_MspInit+0x1d4>)
 8002092:	f001 f829 	bl	80030e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002096:	2200      	movs	r2, #0
 8002098:	2100      	movs	r1, #0
 800209a:	2024      	movs	r0, #36	; 0x24
 800209c:	f000 fc95 	bl	80029ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80020a0:	2024      	movs	r0, #36	; 0x24
 80020a2:	f000 fcae 	bl	8002a02 <HAL_NVIC_EnableIRQ>
}
 80020a6:	bf00      	nop
 80020a8:	3728      	adds	r7, #40	; 0x28
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40013000 	.word	0x40013000
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40010800 	.word	0x40010800
 80020bc:	200006c4 	.word	0x200006c4
 80020c0:	4002001c 	.word	0x4002001c
 80020c4:	200009f4 	.word	0x200009f4
 80020c8:	40020030 	.word	0x40020030
 80020cc:	40003800 	.word	0x40003800
 80020d0:	40010c00 	.word	0x40010c00

080020d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08a      	sub	sp, #40	; 0x28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	f107 0318 	add.w	r3, r7, #24
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a8c      	ldr	r2, [pc, #560]	; (8002320 <HAL_UART_MspInit+0x24c>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	f040 8087 	bne.w	8002204 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020f6:	4b8b      	ldr	r3, [pc, #556]	; (8002324 <HAL_UART_MspInit+0x250>)
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	4a8a      	ldr	r2, [pc, #552]	; (8002324 <HAL_UART_MspInit+0x250>)
 80020fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002100:	6193      	str	r3, [r2, #24]
 8002102:	4b88      	ldr	r3, [pc, #544]	; (8002324 <HAL_UART_MspInit+0x250>)
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210e:	4b85      	ldr	r3, [pc, #532]	; (8002324 <HAL_UART_MspInit+0x250>)
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	4a84      	ldr	r2, [pc, #528]	; (8002324 <HAL_UART_MspInit+0x250>)
 8002114:	f043 0304 	orr.w	r3, r3, #4
 8002118:	6193      	str	r3, [r2, #24]
 800211a:	4b82      	ldr	r3, [pc, #520]	; (8002324 <HAL_UART_MspInit+0x250>)
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	f003 0304 	and.w	r3, r3, #4
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002126:	f44f 7300 	mov.w	r3, #512	; 0x200
 800212a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212c:	2302      	movs	r3, #2
 800212e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002130:	2303      	movs	r3, #3
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002134:	f107 0318 	add.w	r3, r7, #24
 8002138:	4619      	mov	r1, r3
 800213a:	487b      	ldr	r0, [pc, #492]	; (8002328 <HAL_UART_MspInit+0x254>)
 800213c:	f000 ffd4 	bl	80030e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002140:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214e:	f107 0318 	add.w	r3, r7, #24
 8002152:	4619      	mov	r1, r3
 8002154:	4874      	ldr	r0, [pc, #464]	; (8002328 <HAL_UART_MspInit+0x254>)
 8002156:	f000 ffc7 	bl	80030e8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800215a:	4b74      	ldr	r3, [pc, #464]	; (800232c <HAL_UART_MspInit+0x258>)
 800215c:	4a74      	ldr	r2, [pc, #464]	; (8002330 <HAL_UART_MspInit+0x25c>)
 800215e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002160:	4b72      	ldr	r3, [pc, #456]	; (800232c <HAL_UART_MspInit+0x258>)
 8002162:	2200      	movs	r2, #0
 8002164:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002166:	4b71      	ldr	r3, [pc, #452]	; (800232c <HAL_UART_MspInit+0x258>)
 8002168:	2200      	movs	r2, #0
 800216a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800216c:	4b6f      	ldr	r3, [pc, #444]	; (800232c <HAL_UART_MspInit+0x258>)
 800216e:	2280      	movs	r2, #128	; 0x80
 8002170:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002172:	4b6e      	ldr	r3, [pc, #440]	; (800232c <HAL_UART_MspInit+0x258>)
 8002174:	2200      	movs	r2, #0
 8002176:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002178:	4b6c      	ldr	r3, [pc, #432]	; (800232c <HAL_UART_MspInit+0x258>)
 800217a:	2200      	movs	r2, #0
 800217c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800217e:	4b6b      	ldr	r3, [pc, #428]	; (800232c <HAL_UART_MspInit+0x258>)
 8002180:	2200      	movs	r2, #0
 8002182:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002184:	4b69      	ldr	r3, [pc, #420]	; (800232c <HAL_UART_MspInit+0x258>)
 8002186:	2200      	movs	r2, #0
 8002188:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800218a:	4868      	ldr	r0, [pc, #416]	; (800232c <HAL_UART_MspInit+0x258>)
 800218c:	f000 fc54 	bl	8002a38 <HAL_DMA_Init>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8002196:	f7ff fe2d 	bl	8001df4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a63      	ldr	r2, [pc, #396]	; (800232c <HAL_UART_MspInit+0x258>)
 800219e:	635a      	str	r2, [r3, #52]	; 0x34
 80021a0:	4a62      	ldr	r2, [pc, #392]	; (800232c <HAL_UART_MspInit+0x258>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80021a6:	4b63      	ldr	r3, [pc, #396]	; (8002334 <HAL_UART_MspInit+0x260>)
 80021a8:	4a63      	ldr	r2, [pc, #396]	; (8002338 <HAL_UART_MspInit+0x264>)
 80021aa:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021ac:	4b61      	ldr	r3, [pc, #388]	; (8002334 <HAL_UART_MspInit+0x260>)
 80021ae:	2210      	movs	r2, #16
 80021b0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021b2:	4b60      	ldr	r3, [pc, #384]	; (8002334 <HAL_UART_MspInit+0x260>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021b8:	4b5e      	ldr	r3, [pc, #376]	; (8002334 <HAL_UART_MspInit+0x260>)
 80021ba:	2280      	movs	r2, #128	; 0x80
 80021bc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021be:	4b5d      	ldr	r3, [pc, #372]	; (8002334 <HAL_UART_MspInit+0x260>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021c4:	4b5b      	ldr	r3, [pc, #364]	; (8002334 <HAL_UART_MspInit+0x260>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80021ca:	4b5a      	ldr	r3, [pc, #360]	; (8002334 <HAL_UART_MspInit+0x260>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021d0:	4b58      	ldr	r3, [pc, #352]	; (8002334 <HAL_UART_MspInit+0x260>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80021d6:	4857      	ldr	r0, [pc, #348]	; (8002334 <HAL_UART_MspInit+0x260>)
 80021d8:	f000 fc2e 	bl	8002a38 <HAL_DMA_Init>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80021e2:	f7ff fe07 	bl	8001df4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a52      	ldr	r2, [pc, #328]	; (8002334 <HAL_UART_MspInit+0x260>)
 80021ea:	631a      	str	r2, [r3, #48]	; 0x30
 80021ec:	4a51      	ldr	r2, [pc, #324]	; (8002334 <HAL_UART_MspInit+0x260>)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80021f2:	2200      	movs	r2, #0
 80021f4:	2100      	movs	r1, #0
 80021f6:	2025      	movs	r0, #37	; 0x25
 80021f8:	f000 fbe7 	bl	80029ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021fc:	2025      	movs	r0, #37	; 0x25
 80021fe:	f000 fc00 	bl	8002a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002202:	e089      	b.n	8002318 <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART2)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a4c      	ldr	r2, [pc, #304]	; (800233c <HAL_UART_MspInit+0x268>)
 800220a:	4293      	cmp	r3, r2
 800220c:	f040 8084 	bne.w	8002318 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002210:	4b44      	ldr	r3, [pc, #272]	; (8002324 <HAL_UART_MspInit+0x250>)
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	4a43      	ldr	r2, [pc, #268]	; (8002324 <HAL_UART_MspInit+0x250>)
 8002216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800221a:	61d3      	str	r3, [r2, #28]
 800221c:	4b41      	ldr	r3, [pc, #260]	; (8002324 <HAL_UART_MspInit+0x250>)
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002228:	4b3e      	ldr	r3, [pc, #248]	; (8002324 <HAL_UART_MspInit+0x250>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	4a3d      	ldr	r2, [pc, #244]	; (8002324 <HAL_UART_MspInit+0x250>)
 800222e:	f043 0304 	orr.w	r3, r3, #4
 8002232:	6193      	str	r3, [r2, #24]
 8002234:	4b3b      	ldr	r3, [pc, #236]	; (8002324 <HAL_UART_MspInit+0x250>)
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002240:	2304      	movs	r3, #4
 8002242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002244:	2302      	movs	r3, #2
 8002246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002248:	2303      	movs	r3, #3
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224c:	f107 0318 	add.w	r3, r7, #24
 8002250:	4619      	mov	r1, r3
 8002252:	4835      	ldr	r0, [pc, #212]	; (8002328 <HAL_UART_MspInit+0x254>)
 8002254:	f000 ff48 	bl	80030e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002258:	2308      	movs	r3, #8
 800225a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002264:	f107 0318 	add.w	r3, r7, #24
 8002268:	4619      	mov	r1, r3
 800226a:	482f      	ldr	r0, [pc, #188]	; (8002328 <HAL_UART_MspInit+0x254>)
 800226c:	f000 ff3c 	bl	80030e8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002270:	4b33      	ldr	r3, [pc, #204]	; (8002340 <HAL_UART_MspInit+0x26c>)
 8002272:	4a34      	ldr	r2, [pc, #208]	; (8002344 <HAL_UART_MspInit+0x270>)
 8002274:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002276:	4b32      	ldr	r3, [pc, #200]	; (8002340 <HAL_UART_MspInit+0x26c>)
 8002278:	2200      	movs	r2, #0
 800227a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800227c:	4b30      	ldr	r3, [pc, #192]	; (8002340 <HAL_UART_MspInit+0x26c>)
 800227e:	2200      	movs	r2, #0
 8002280:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002282:	4b2f      	ldr	r3, [pc, #188]	; (8002340 <HAL_UART_MspInit+0x26c>)
 8002284:	2280      	movs	r2, #128	; 0x80
 8002286:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002288:	4b2d      	ldr	r3, [pc, #180]	; (8002340 <HAL_UART_MspInit+0x26c>)
 800228a:	2200      	movs	r2, #0
 800228c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800228e:	4b2c      	ldr	r3, [pc, #176]	; (8002340 <HAL_UART_MspInit+0x26c>)
 8002290:	2200      	movs	r2, #0
 8002292:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002294:	4b2a      	ldr	r3, [pc, #168]	; (8002340 <HAL_UART_MspInit+0x26c>)
 8002296:	2200      	movs	r2, #0
 8002298:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800229a:	4b29      	ldr	r3, [pc, #164]	; (8002340 <HAL_UART_MspInit+0x26c>)
 800229c:	2200      	movs	r2, #0
 800229e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80022a0:	4827      	ldr	r0, [pc, #156]	; (8002340 <HAL_UART_MspInit+0x26c>)
 80022a2:	f000 fbc9 	bl	8002a38 <HAL_DMA_Init>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 80022ac:	f7ff fda2 	bl	8001df4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a23      	ldr	r2, [pc, #140]	; (8002340 <HAL_UART_MspInit+0x26c>)
 80022b4:	635a      	str	r2, [r3, #52]	; 0x34
 80022b6:	4a22      	ldr	r2, [pc, #136]	; (8002340 <HAL_UART_MspInit+0x26c>)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80022bc:	4b22      	ldr	r3, [pc, #136]	; (8002348 <HAL_UART_MspInit+0x274>)
 80022be:	4a23      	ldr	r2, [pc, #140]	; (800234c <HAL_UART_MspInit+0x278>)
 80022c0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022c2:	4b21      	ldr	r3, [pc, #132]	; (8002348 <HAL_UART_MspInit+0x274>)
 80022c4:	2210      	movs	r2, #16
 80022c6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022c8:	4b1f      	ldr	r3, [pc, #124]	; (8002348 <HAL_UART_MspInit+0x274>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022ce:	4b1e      	ldr	r3, [pc, #120]	; (8002348 <HAL_UART_MspInit+0x274>)
 80022d0:	2280      	movs	r2, #128	; 0x80
 80022d2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022d4:	4b1c      	ldr	r3, [pc, #112]	; (8002348 <HAL_UART_MspInit+0x274>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022da:	4b1b      	ldr	r3, [pc, #108]	; (8002348 <HAL_UART_MspInit+0x274>)
 80022dc:	2200      	movs	r2, #0
 80022de:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80022e0:	4b19      	ldr	r3, [pc, #100]	; (8002348 <HAL_UART_MspInit+0x274>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022e6:	4b18      	ldr	r3, [pc, #96]	; (8002348 <HAL_UART_MspInit+0x274>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80022ec:	4816      	ldr	r0, [pc, #88]	; (8002348 <HAL_UART_MspInit+0x274>)
 80022ee:	f000 fba3 	bl	8002a38 <HAL_DMA_Init>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <HAL_UART_MspInit+0x228>
      Error_Handler();
 80022f8:	f7ff fd7c 	bl	8001df4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a12      	ldr	r2, [pc, #72]	; (8002348 <HAL_UART_MspInit+0x274>)
 8002300:	631a      	str	r2, [r3, #48]	; 0x30
 8002302:	4a11      	ldr	r2, [pc, #68]	; (8002348 <HAL_UART_MspInit+0x274>)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002308:	2200      	movs	r2, #0
 800230a:	2100      	movs	r1, #0
 800230c:	2026      	movs	r0, #38	; 0x26
 800230e:	f000 fb5c 	bl	80029ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002312:	2026      	movs	r0, #38	; 0x26
 8002314:	f000 fb75 	bl	8002a02 <HAL_NVIC_EnableIRQ>
}
 8002318:	bf00      	nop
 800231a:	3728      	adds	r7, #40	; 0x28
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40013800 	.word	0x40013800
 8002324:	40021000 	.word	0x40021000
 8002328:	40010800 	.word	0x40010800
 800232c:	20000534 	.word	0x20000534
 8002330:	40020058 	.word	0x40020058
 8002334:	200004f0 	.word	0x200004f0
 8002338:	40020044 	.word	0x40020044
 800233c:	40004400 	.word	0x40004400
 8002340:	2000044c 	.word	0x2000044c
 8002344:	4002006c 	.word	0x4002006c
 8002348:	20000578 	.word	0x20000578
 800234c:	40020080 	.word	0x40020080

08002350 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a11      	ldr	r2, [pc, #68]	; (80023a4 <HAL_PCD_MspInit+0x54>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d11b      	bne.n	800239a <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002362:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <HAL_PCD_MspInit+0x58>)
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	4a10      	ldr	r2, [pc, #64]	; (80023a8 <HAL_PCD_MspInit+0x58>)
 8002368:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800236c:	61d3      	str	r3, [r2, #28]
 800236e:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <HAL_PCD_MspInit+0x58>)
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800237a:	2200      	movs	r2, #0
 800237c:	2100      	movs	r1, #0
 800237e:	2013      	movs	r0, #19
 8002380:	f000 fb23 	bl	80029ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8002384:	2013      	movs	r0, #19
 8002386:	f000 fb3c 	bl	8002a02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800238a:	2200      	movs	r2, #0
 800238c:	2100      	movs	r1, #0
 800238e:	2014      	movs	r0, #20
 8002390:	f000 fb1b 	bl	80029ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002394:	2014      	movs	r0, #20
 8002396:	f000 fb34 	bl	8002a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40005c00 	.word	0x40005c00
 80023a8:	40021000 	.word	0x40021000

080023ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023b0:	e7fe      	b.n	80023b0 <NMI_Handler+0x4>

080023b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023b6:	e7fe      	b.n	80023b6 <HardFault_Handler+0x4>

080023b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023bc:	e7fe      	b.n	80023bc <MemManage_Handler+0x4>

080023be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023be:	b480      	push	{r7}
 80023c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023c2:	e7fe      	b.n	80023c2 <BusFault_Handler+0x4>

080023c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023c8:	e7fe      	b.n	80023c8 <UsageFault_Handler+0x4>

080023ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr

080023d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023d6:	b480      	push	{r7}
 80023d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr

080023e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023e2:	b480      	push	{r7}
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr

080023ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023f2:	f000 f9d3 	bl	800279c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}

080023fa <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80023fe:	f002 f98f 	bl	8004720 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 800240c:	4802      	ldr	r0, [pc, #8]	; (8002418 <RTC_IRQHandler+0x10>)
 800240e:	f003 f877 	bl	8005500 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	200005fc 	.word	0x200005fc

0800241c <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8002420:	f000 fce0 	bl	8002de4 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}

08002428 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002438:	4802      	ldr	r0, [pc, #8]	; (8002444 <DMA1_Channel2_IRQHandler+0x10>)
 800243a:	f000 fbcd 	bl	8002bd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	200006c4 	.word	0x200006c4

08002448 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800244c:	4802      	ldr	r0, [pc, #8]	; (8002458 <DMA1_Channel3_IRQHandler+0x10>)
 800244e:	f000 fbc3 	bl	8002bd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	200009f4 	.word	0x200009f4

0800245c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002460:	4802      	ldr	r0, [pc, #8]	; (800246c <DMA1_Channel4_IRQHandler+0x10>)
 8002462:	f000 fbb9 	bl	8002bd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	200004f0 	.word	0x200004f0

08002470 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002474:	4802      	ldr	r0, [pc, #8]	; (8002480 <DMA1_Channel5_IRQHandler+0x10>)
 8002476:	f000 fbaf 	bl	8002bd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000534 	.word	0x20000534

08002484 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002488:	4802      	ldr	r0, [pc, #8]	; (8002494 <DMA1_Channel6_IRQHandler+0x10>)
 800248a:	f000 fba5 	bl	8002bd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	2000044c 	.word	0x2000044c

08002498 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800249c:	4802      	ldr	r0, [pc, #8]	; (80024a8 <DMA1_Channel7_IRQHandler+0x10>)
 800249e:	f000 fb9b 	bl	8002bd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000578 	.word	0x20000578

080024ac <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80024b0:	4802      	ldr	r0, [pc, #8]	; (80024bc <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80024b2:	f001 f8c0 	bl	8003636 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000708 	.word	0x20000708

080024c0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80024c4:	4802      	ldr	r0, [pc, #8]	; (80024d0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80024c6:	f001 f8b6 	bl	8003636 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000708 	.word	0x20000708

080024d4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80024d8:	4802      	ldr	r0, [pc, #8]	; (80024e4 <SPI1_IRQHandler+0x10>)
 80024da:	f003 fc97 	bl	8005e0c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	2000062c 	.word	0x2000062c

080024e8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80024ec:	4802      	ldr	r0, [pc, #8]	; (80024f8 <SPI2_IRQHandler+0x10>)
 80024ee:	f003 fc8d 	bl	8005e0c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000490 	.word	0x20000490

080024fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002500:	4802      	ldr	r0, [pc, #8]	; (800250c <USART1_IRQHandler+0x10>)
 8002502:	f003 ffed 	bl	80064e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	200005bc 	.word	0x200005bc

08002510 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002514:	4802      	ldr	r0, [pc, #8]	; (8002520 <USART2_IRQHandler+0x10>)
 8002516:	f003 ffe3 	bl	80064e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	20000684 	.word	0x20000684

08002524 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002528:	4802      	ldr	r0, [pc, #8]	; (8002534 <RTC_Alarm_IRQHandler+0x10>)
 800252a:	f002 ff3b 	bl	80053a4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	200005fc 	.word	0x200005fc

08002538 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
	return 1;
 800253c:	2301      	movs	r3, #1
}
 800253e:	4618      	mov	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr

08002546 <_kill>:

int _kill(int pid, int sig)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002550:	f005 fd72 	bl	8008038 <__errno>
 8002554:	4603      	mov	r3, r0
 8002556:	2216      	movs	r2, #22
 8002558:	601a      	str	r2, [r3, #0]
	return -1;
 800255a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <_exit>:

void _exit (int status)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800256e:	f04f 31ff 	mov.w	r1, #4294967295
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff ffe7 	bl	8002546 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002578:	e7fe      	b.n	8002578 <_exit+0x12>

0800257a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b086      	sub	sp, #24
 800257e:	af00      	add	r7, sp, #0
 8002580:	60f8      	str	r0, [r7, #12]
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	e00a      	b.n	80025a2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800258c:	f3af 8000 	nop.w
 8002590:	4601      	mov	r1, r0
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	1c5a      	adds	r2, r3, #1
 8002596:	60ba      	str	r2, [r7, #8]
 8002598:	b2ca      	uxtb	r2, r1
 800259a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	3301      	adds	r3, #1
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	dbf0      	blt.n	800258c <_read+0x12>
	}

return len;
 80025aa:	687b      	ldr	r3, [r7, #4]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	e009      	b.n	80025da <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	60ba      	str	r2, [r7, #8]
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	3301      	adds	r3, #1
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	429a      	cmp	r2, r3
 80025e0:	dbf1      	blt.n	80025c6 <_write+0x12>
	}
	return len;
 80025e2:	687b      	ldr	r3, [r7, #4]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <_close>:

int _close(int file)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
	return -1;
 80025f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr

08002602 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002612:	605a      	str	r2, [r3, #4]
	return 0;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <_isatty>:

int _isatty(int file)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
	return 1;
 8002628:	2301      	movs	r3, #1
}
 800262a:	4618      	mov	r0, r3
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr

08002634 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
	return 0;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002654:	4a14      	ldr	r2, [pc, #80]	; (80026a8 <_sbrk+0x5c>)
 8002656:	4b15      	ldr	r3, [pc, #84]	; (80026ac <_sbrk+0x60>)
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002660:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <_sbrk+0x64>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d102      	bne.n	800266e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002668:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <_sbrk+0x64>)
 800266a:	4a12      	ldr	r2, [pc, #72]	; (80026b4 <_sbrk+0x68>)
 800266c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800266e:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <_sbrk+0x64>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4413      	add	r3, r2
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	429a      	cmp	r2, r3
 800267a:	d207      	bcs.n	800268c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800267c:	f005 fcdc 	bl	8008038 <__errno>
 8002680:	4603      	mov	r3, r0
 8002682:	220c      	movs	r2, #12
 8002684:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002686:	f04f 33ff 	mov.w	r3, #4294967295
 800268a:	e009      	b.n	80026a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800268c:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <_sbrk+0x64>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002692:	4b07      	ldr	r3, [pc, #28]	; (80026b0 <_sbrk+0x64>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4413      	add	r3, r2
 800269a:	4a05      	ldr	r2, [pc, #20]	; (80026b0 <_sbrk+0x64>)
 800269c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800269e:	68fb      	ldr	r3, [r7, #12]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20005000 	.word	0x20005000
 80026ac:	00000400 	.word	0x00000400
 80026b0:	20000254 	.word	0x20000254
 80026b4:	20000a70 	.word	0x20000a70

080026b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026bc:	bf00      	nop
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr

080026c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026c4:	f7ff fff8 	bl	80026b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026c8:	480b      	ldr	r0, [pc, #44]	; (80026f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80026ca:	490c      	ldr	r1, [pc, #48]	; (80026fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80026cc:	4a0c      	ldr	r2, [pc, #48]	; (8002700 <LoopFillZerobss+0x16>)
  movs r3, #0
 80026ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026d0:	e002      	b.n	80026d8 <LoopCopyDataInit>

080026d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026d6:	3304      	adds	r3, #4

080026d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026dc:	d3f9      	bcc.n	80026d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026de:	4a09      	ldr	r2, [pc, #36]	; (8002704 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80026e0:	4c09      	ldr	r4, [pc, #36]	; (8002708 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e4:	e001      	b.n	80026ea <LoopFillZerobss>

080026e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e8:	3204      	adds	r2, #4

080026ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026ec:	d3fb      	bcc.n	80026e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026ee:	f005 fcbb 	bl	8008068 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026f2:	f7ff f8ed 	bl	80018d0 <main>
  bx lr
 80026f6:	4770      	bx	lr
  ldr r0, =_sdata
 80026f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026fc:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8002700:	0800ce24 	.word	0x0800ce24
  ldr r2, =_sbss
 8002704:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8002708:	20000a70 	.word	0x20000a70

0800270c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800270c:	e7fe      	b.n	800270c <ADC1_2_IRQHandler>
	...

08002710 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002714:	4b08      	ldr	r3, [pc, #32]	; (8002738 <HAL_Init+0x28>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a07      	ldr	r2, [pc, #28]	; (8002738 <HAL_Init+0x28>)
 800271a:	f043 0310 	orr.w	r3, r3, #16
 800271e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002720:	2003      	movs	r0, #3
 8002722:	f000 f947 	bl	80029b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002726:	200f      	movs	r0, #15
 8002728:	f000 f808 	bl	800273c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800272c:	f7ff fb68 	bl	8001e00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40022000 	.word	0x40022000

0800273c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002744:	4b12      	ldr	r3, [pc, #72]	; (8002790 <HAL_InitTick+0x54>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	4b12      	ldr	r3, [pc, #72]	; (8002794 <HAL_InitTick+0x58>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	4619      	mov	r1, r3
 800274e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002752:	fbb3 f3f1 	udiv	r3, r3, r1
 8002756:	fbb2 f3f3 	udiv	r3, r2, r3
 800275a:	4618      	mov	r0, r3
 800275c:	f000 f95f 	bl	8002a1e <HAL_SYSTICK_Config>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e00e      	b.n	8002788 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b0f      	cmp	r3, #15
 800276e:	d80a      	bhi.n	8002786 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002770:	2200      	movs	r2, #0
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	f04f 30ff 	mov.w	r0, #4294967295
 8002778:	f000 f927 	bl	80029ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800277c:	4a06      	ldr	r2, [pc, #24]	; (8002798 <HAL_InitTick+0x5c>)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002782:	2300      	movs	r3, #0
 8002784:	e000      	b.n	8002788 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
}
 8002788:	4618      	mov	r0, r3
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	20000048 	.word	0x20000048
 8002794:	20000050 	.word	0x20000050
 8002798:	2000004c 	.word	0x2000004c

0800279c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027a0:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <HAL_IncTick+0x1c>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	461a      	mov	r2, r3
 80027a6:	4b05      	ldr	r3, [pc, #20]	; (80027bc <HAL_IncTick+0x20>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4413      	add	r3, r2
 80027ac:	4a03      	ldr	r2, [pc, #12]	; (80027bc <HAL_IncTick+0x20>)
 80027ae:	6013      	str	r3, [r2, #0]
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr
 80027b8:	20000050 	.word	0x20000050
 80027bc:	20000a38 	.word	0x20000a38

080027c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return uwTick;
 80027c4:	4b02      	ldr	r3, [pc, #8]	; (80027d0 <HAL_GetTick+0x10>)
 80027c6:	681b      	ldr	r3, [r3, #0]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr
 80027d0:	20000a38 	.word	0x20000a38

080027d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027dc:	f7ff fff0 	bl	80027c0 <HAL_GetTick>
 80027e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ec:	d005      	beq.n	80027fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ee:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <HAL_Delay+0x44>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4413      	add	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027fa:	bf00      	nop
 80027fc:	f7ff ffe0 	bl	80027c0 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	429a      	cmp	r2, r3
 800280a:	d8f7      	bhi.n	80027fc <HAL_Delay+0x28>
  {
  }
}
 800280c:	bf00      	nop
 800280e:	bf00      	nop
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000050 	.word	0x20000050

0800281c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800282c:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <__NVIC_SetPriorityGrouping+0x44>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002838:	4013      	ands	r3, r2
 800283a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002844:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800284c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800284e:	4a04      	ldr	r2, [pc, #16]	; (8002860 <__NVIC_SetPriorityGrouping+0x44>)
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	60d3      	str	r3, [r2, #12]
}
 8002854:	bf00      	nop
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	e000ed00 	.word	0xe000ed00

08002864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002868:	4b04      	ldr	r3, [pc, #16]	; (800287c <__NVIC_GetPriorityGrouping+0x18>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	0a1b      	lsrs	r3, r3, #8
 800286e:	f003 0307 	and.w	r3, r3, #7
}
 8002872:	4618      	mov	r0, r3
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800288a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288e:	2b00      	cmp	r3, #0
 8002890:	db0b      	blt.n	80028aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	f003 021f 	and.w	r2, r3, #31
 8002898:	4906      	ldr	r1, [pc, #24]	; (80028b4 <__NVIC_EnableIRQ+0x34>)
 800289a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	2001      	movs	r0, #1
 80028a2:	fa00 f202 	lsl.w	r2, r0, r2
 80028a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr
 80028b4:	e000e100 	.word	0xe000e100

080028b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	6039      	str	r1, [r7, #0]
 80028c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	db0a      	blt.n	80028e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	490c      	ldr	r1, [pc, #48]	; (8002904 <__NVIC_SetPriority+0x4c>)
 80028d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d6:	0112      	lsls	r2, r2, #4
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	440b      	add	r3, r1
 80028dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e0:	e00a      	b.n	80028f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	4908      	ldr	r1, [pc, #32]	; (8002908 <__NVIC_SetPriority+0x50>)
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	3b04      	subs	r3, #4
 80028f0:	0112      	lsls	r2, r2, #4
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	440b      	add	r3, r1
 80028f6:	761a      	strb	r2, [r3, #24]
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	e000e100 	.word	0xe000e100
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800290c:	b480      	push	{r7}
 800290e:	b089      	sub	sp, #36	; 0x24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f1c3 0307 	rsb	r3, r3, #7
 8002926:	2b04      	cmp	r3, #4
 8002928:	bf28      	it	cs
 800292a:	2304      	movcs	r3, #4
 800292c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3304      	adds	r3, #4
 8002932:	2b06      	cmp	r3, #6
 8002934:	d902      	bls.n	800293c <NVIC_EncodePriority+0x30>
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3b03      	subs	r3, #3
 800293a:	e000      	b.n	800293e <NVIC_EncodePriority+0x32>
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002940:	f04f 32ff 	mov.w	r2, #4294967295
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43da      	mvns	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	401a      	ands	r2, r3
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002954:	f04f 31ff 	mov.w	r1, #4294967295
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	fa01 f303 	lsl.w	r3, r1, r3
 800295e:	43d9      	mvns	r1, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002964:	4313      	orrs	r3, r2
         );
}
 8002966:	4618      	mov	r0, r3
 8002968:	3724      	adds	r7, #36	; 0x24
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr

08002970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3b01      	subs	r3, #1
 800297c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002980:	d301      	bcc.n	8002986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002982:	2301      	movs	r3, #1
 8002984:	e00f      	b.n	80029a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002986:	4a0a      	ldr	r2, [pc, #40]	; (80029b0 <SysTick_Config+0x40>)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3b01      	subs	r3, #1
 800298c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800298e:	210f      	movs	r1, #15
 8002990:	f04f 30ff 	mov.w	r0, #4294967295
 8002994:	f7ff ff90 	bl	80028b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <SysTick_Config+0x40>)
 800299a:	2200      	movs	r2, #0
 800299c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800299e:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <SysTick_Config+0x40>)
 80029a0:	2207      	movs	r2, #7
 80029a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	e000e010 	.word	0xe000e010

080029b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff ff2d 	bl	800281c <__NVIC_SetPriorityGrouping>
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b086      	sub	sp, #24
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	4603      	mov	r3, r0
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029dc:	f7ff ff42 	bl	8002864 <__NVIC_GetPriorityGrouping>
 80029e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	68b9      	ldr	r1, [r7, #8]
 80029e6:	6978      	ldr	r0, [r7, #20]
 80029e8:	f7ff ff90 	bl	800290c <NVIC_EncodePriority>
 80029ec:	4602      	mov	r2, r0
 80029ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f2:	4611      	mov	r1, r2
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff5f 	bl	80028b8 <__NVIC_SetPriority>
}
 80029fa:	bf00      	nop
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4603      	mov	r3, r0
 8002a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff ff35 	bl	8002880 <__NVIC_EnableIRQ>
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff ffa2 	bl	8002970 <SysTick_Config>
 8002a2c:	4603      	mov	r3, r0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e043      	b.n	8002ad6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	461a      	mov	r2, r3
 8002a54:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <HAL_DMA_Init+0xa8>)
 8002a56:	4413      	add	r3, r2
 8002a58:	4a22      	ldr	r2, [pc, #136]	; (8002ae4 <HAL_DMA_Init+0xac>)
 8002a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5e:	091b      	lsrs	r3, r3, #4
 8002a60:	009a      	lsls	r2, r3, #2
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a1f      	ldr	r2, [pc, #124]	; (8002ae8 <HAL_DMA_Init+0xb0>)
 8002a6a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a82:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002a86:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aa8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr
 8002ae0:	bffdfff8 	.word	0xbffdfff8
 8002ae4:	cccccccd 	.word	0xcccccccd
 8002ae8:	40020000 	.word	0x40020000

08002aec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002af4:	2300      	movs	r3, #0
 8002af6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d005      	beq.n	8002b0e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2204      	movs	r2, #4
 8002b06:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	73fb      	strb	r3, [r7, #15]
 8002b0c:	e051      	b.n	8002bb2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 020e 	bic.w	r2, r2, #14
 8002b1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0201 	bic.w	r2, r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a22      	ldr	r2, [pc, #136]	; (8002bbc <HAL_DMA_Abort_IT+0xd0>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d029      	beq.n	8002b8c <HAL_DMA_Abort_IT+0xa0>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a20      	ldr	r2, [pc, #128]	; (8002bc0 <HAL_DMA_Abort_IT+0xd4>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d022      	beq.n	8002b88 <HAL_DMA_Abort_IT+0x9c>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a1f      	ldr	r2, [pc, #124]	; (8002bc4 <HAL_DMA_Abort_IT+0xd8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d01a      	beq.n	8002b82 <HAL_DMA_Abort_IT+0x96>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a1d      	ldr	r2, [pc, #116]	; (8002bc8 <HAL_DMA_Abort_IT+0xdc>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d012      	beq.n	8002b7c <HAL_DMA_Abort_IT+0x90>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a1c      	ldr	r2, [pc, #112]	; (8002bcc <HAL_DMA_Abort_IT+0xe0>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d00a      	beq.n	8002b76 <HAL_DMA_Abort_IT+0x8a>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a1a      	ldr	r2, [pc, #104]	; (8002bd0 <HAL_DMA_Abort_IT+0xe4>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d102      	bne.n	8002b70 <HAL_DMA_Abort_IT+0x84>
 8002b6a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b6e:	e00e      	b.n	8002b8e <HAL_DMA_Abort_IT+0xa2>
 8002b70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b74:	e00b      	b.n	8002b8e <HAL_DMA_Abort_IT+0xa2>
 8002b76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b7a:	e008      	b.n	8002b8e <HAL_DMA_Abort_IT+0xa2>
 8002b7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b80:	e005      	b.n	8002b8e <HAL_DMA_Abort_IT+0xa2>
 8002b82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b86:	e002      	b.n	8002b8e <HAL_DMA_Abort_IT+0xa2>
 8002b88:	2310      	movs	r3, #16
 8002b8a:	e000      	b.n	8002b8e <HAL_DMA_Abort_IT+0xa2>
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	4a11      	ldr	r2, [pc, #68]	; (8002bd4 <HAL_DMA_Abort_IT+0xe8>)
 8002b90:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	4798      	blx	r3
    } 
  }
  return status;
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40020008 	.word	0x40020008
 8002bc0:	4002001c 	.word	0x4002001c
 8002bc4:	40020030 	.word	0x40020030
 8002bc8:	40020044 	.word	0x40020044
 8002bcc:	40020058 	.word	0x40020058
 8002bd0:	4002006c 	.word	0x4002006c
 8002bd4:	40020000 	.word	0x40020000

08002bd8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	2204      	movs	r2, #4
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d04f      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0xc8>
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f003 0304 	and.w	r3, r3, #4
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d04a      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0320 	and.w	r3, r3, #32
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d107      	bne.n	8002c28 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0204 	bic.w	r2, r2, #4
 8002c26:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a66      	ldr	r2, [pc, #408]	; (8002dc8 <HAL_DMA_IRQHandler+0x1f0>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d029      	beq.n	8002c86 <HAL_DMA_IRQHandler+0xae>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a65      	ldr	r2, [pc, #404]	; (8002dcc <HAL_DMA_IRQHandler+0x1f4>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d022      	beq.n	8002c82 <HAL_DMA_IRQHandler+0xaa>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a63      	ldr	r2, [pc, #396]	; (8002dd0 <HAL_DMA_IRQHandler+0x1f8>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d01a      	beq.n	8002c7c <HAL_DMA_IRQHandler+0xa4>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a62      	ldr	r2, [pc, #392]	; (8002dd4 <HAL_DMA_IRQHandler+0x1fc>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d012      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x9e>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a60      	ldr	r2, [pc, #384]	; (8002dd8 <HAL_DMA_IRQHandler+0x200>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d00a      	beq.n	8002c70 <HAL_DMA_IRQHandler+0x98>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a5f      	ldr	r2, [pc, #380]	; (8002ddc <HAL_DMA_IRQHandler+0x204>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d102      	bne.n	8002c6a <HAL_DMA_IRQHandler+0x92>
 8002c64:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c68:	e00e      	b.n	8002c88 <HAL_DMA_IRQHandler+0xb0>
 8002c6a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c6e:	e00b      	b.n	8002c88 <HAL_DMA_IRQHandler+0xb0>
 8002c70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c74:	e008      	b.n	8002c88 <HAL_DMA_IRQHandler+0xb0>
 8002c76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c7a:	e005      	b.n	8002c88 <HAL_DMA_IRQHandler+0xb0>
 8002c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c80:	e002      	b.n	8002c88 <HAL_DMA_IRQHandler+0xb0>
 8002c82:	2340      	movs	r3, #64	; 0x40
 8002c84:	e000      	b.n	8002c88 <HAL_DMA_IRQHandler+0xb0>
 8002c86:	2304      	movs	r3, #4
 8002c88:	4a55      	ldr	r2, [pc, #340]	; (8002de0 <HAL_DMA_IRQHandler+0x208>)
 8002c8a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 8094 	beq.w	8002dbe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002c9e:	e08e      	b.n	8002dbe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	409a      	lsls	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d056      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x186>
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d051      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0320 	and.w	r3, r3, #32
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10b      	bne.n	8002ce0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 020a 	bic.w	r2, r2, #10
 8002cd6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a38      	ldr	r2, [pc, #224]	; (8002dc8 <HAL_DMA_IRQHandler+0x1f0>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d029      	beq.n	8002d3e <HAL_DMA_IRQHandler+0x166>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a37      	ldr	r2, [pc, #220]	; (8002dcc <HAL_DMA_IRQHandler+0x1f4>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d022      	beq.n	8002d3a <HAL_DMA_IRQHandler+0x162>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a35      	ldr	r2, [pc, #212]	; (8002dd0 <HAL_DMA_IRQHandler+0x1f8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d01a      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x15c>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a34      	ldr	r2, [pc, #208]	; (8002dd4 <HAL_DMA_IRQHandler+0x1fc>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d012      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x156>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a32      	ldr	r2, [pc, #200]	; (8002dd8 <HAL_DMA_IRQHandler+0x200>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d00a      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x150>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a31      	ldr	r2, [pc, #196]	; (8002ddc <HAL_DMA_IRQHandler+0x204>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d102      	bne.n	8002d22 <HAL_DMA_IRQHandler+0x14a>
 8002d1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d20:	e00e      	b.n	8002d40 <HAL_DMA_IRQHandler+0x168>
 8002d22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d26:	e00b      	b.n	8002d40 <HAL_DMA_IRQHandler+0x168>
 8002d28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d2c:	e008      	b.n	8002d40 <HAL_DMA_IRQHandler+0x168>
 8002d2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d32:	e005      	b.n	8002d40 <HAL_DMA_IRQHandler+0x168>
 8002d34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d38:	e002      	b.n	8002d40 <HAL_DMA_IRQHandler+0x168>
 8002d3a:	2320      	movs	r3, #32
 8002d3c:	e000      	b.n	8002d40 <HAL_DMA_IRQHandler+0x168>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	4a27      	ldr	r2, [pc, #156]	; (8002de0 <HAL_DMA_IRQHandler+0x208>)
 8002d42:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d034      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d5c:	e02f      	b.n	8002dbe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	2208      	movs	r2, #8
 8002d64:	409a      	lsls	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d028      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0x1e8>
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d023      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 020e 	bic.w	r2, r2, #14
 8002d86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d90:	2101      	movs	r1, #1
 8002d92:	fa01 f202 	lsl.w	r2, r1, r2
 8002d96:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d004      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	4798      	blx	r3
    }
  }
  return;
 8002dbe:	bf00      	nop
 8002dc0:	bf00      	nop
}
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40020008 	.word	0x40020008
 8002dcc:	4002001c 	.word	0x4002001c
 8002dd0:	40020030 	.word	0x40020030
 8002dd4:	40020044 	.word	0x40020044
 8002dd8:	40020058 	.word	0x40020058
 8002ddc:	4002006c 	.word	0x4002006c
 8002de0:	40020000 	.word	0x40020000

08002de4 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
    (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002dee:	4b6d      	ldr	r3, [pc, #436]	; (8002fa4 <HAL_FLASH_IRQHandler+0x1c0>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d105      	bne.n	8002e06 <HAL_FLASH_IRQHandler+0x22>
 8002dfa:	4b6a      	ldr	r3, [pc, #424]	; (8002fa4 <HAL_FLASH_IRQHandler+0x1c0>)
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00e      	beq.n	8002e24 <HAL_FLASH_IRQHandler+0x40>
#endif /* FLASH_BANK2_END */
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 8002e06:	4b68      	ldr	r3, [pc, #416]	; (8002fa8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 8002e0c:	4b66      	ldr	r3, [pc, #408]	; (8002fa8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8002e12:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 8002e14:	f000 f8f8 	bl	8003008 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 f8d0 	bl	8002fbe <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002e1e:	4b62      	ldr	r3, [pc, #392]	; (8002fa8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002e24:	4b5f      	ldr	r3, [pc, #380]	; (8002fa4 <HAL_FLASH_IRQHandler+0x1c0>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f003 0320 	and.w	r3, r3, #32
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 80a0 	beq.w	8002f72 <HAL_FLASH_IRQHandler+0x18e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002e32:	4b5c      	ldr	r3, [pc, #368]	; (8002fa4 <HAL_FLASH_IRQHandler+0x1c0>)
 8002e34:	2220      	movs	r2, #32
 8002e36:	60da      	str	r2, [r3, #12]
#endif /* FLASH_BANK2_END */
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8002e38:	4b5b      	ldr	r3, [pc, #364]	; (8002fa8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 8097 	beq.w	8002f72 <HAL_FLASH_IRQHandler+0x18e>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8002e44:	4b58      	ldr	r3, [pc, #352]	; (8002fa8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d12d      	bne.n	8002eaa <HAL_FLASH_IRQHandler+0xc6>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 8002e4e:	4b56      	ldr	r3, [pc, #344]	; (8002fa8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	4a54      	ldr	r2, [pc, #336]	; (8002fa8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002e56:	6053      	str	r3, [r2, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 8002e58:	4b53      	ldr	r3, [pc, #332]	; (8002fa8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d017      	beq.n	8002e90 <HAL_FLASH_IRQHandler+0xac>
        {
          addresstmp = pFlash.Address;
 8002e60:	4b51      	ldr	r3, [pc, #324]	; (8002fa8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f8a0 	bl	8002fac <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8002e6c:	4b4e      	ldr	r3, [pc, #312]	; (8002fa8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e74:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 8002e76:	4a4c      	ldr	r2, [pc, #304]	; (8002fa8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6093      	str	r3, [r2, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002e7c:	4b49      	ldr	r3, [pc, #292]	; (8002fa4 <HAL_FLASH_IRQHandler+0x1c0>)
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	4a48      	ldr	r2, [pc, #288]	; (8002fa4 <HAL_FLASH_IRQHandler+0x1c0>)
 8002e82:	f023 0302 	bic.w	r3, r3, #2
 8002e86:	6113      	str	r3, [r2, #16]

          FLASH_PageErase(addresstmp);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f90d 	bl	80030a8 <FLASH_PageErase>
 8002e8e:	e070      	b.n	8002f72 <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 8002e90:	f04f 33ff 	mov.w	r3, #4294967295
 8002e94:	607b      	str	r3, [r7, #4]
 8002e96:	4a44      	ldr	r2, [pc, #272]	; (8002fa8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6093      	str	r3, [r2, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002e9c:	4b42      	ldr	r3, [pc, #264]	; (8002fa8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f882 	bl	8002fac <HAL_FLASH_EndOfOperationCallback>
 8002ea8:	e063      	b.n	8002f72 <HAL_FLASH_IRQHandler+0x18e>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002eaa:	4b3f      	ldr	r3, [pc, #252]	; (8002fa8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d10c      	bne.n	8002ece <HAL_FLASH_IRQHandler+0xea>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002eb4:	4b3b      	ldr	r3, [pc, #236]	; (8002fa4 <HAL_FLASH_IRQHandler+0x1c0>)
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	4a3a      	ldr	r2, [pc, #232]	; (8002fa4 <HAL_FLASH_IRQHandler+0x1c0>)
 8002eba:	f023 0304 	bic.w	r3, r3, #4
 8002ebe:	6113      	str	r3, [r2, #16]
        if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
        {
#endif /* FLASH_BANK2_END */
          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0U);
 8002ec0:	2000      	movs	r0, #0
 8002ec2:	f000 f873 	bl	8002fac <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002ec6:	4b38      	ldr	r3, [pc, #224]	; (8002fa8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	701a      	strb	r2, [r3, #0]
 8002ecc:	e051      	b.n	8002f72 <HAL_FLASH_IRQHandler+0x18e>
      }
#endif /* FLASH_BANK2_END */
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 8002ece:	4b36      	ldr	r3, [pc, #216]	; (8002fa8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	4a34      	ldr	r2, [pc, #208]	; (8002fa8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002ed6:	6053      	str	r3, [r2, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 8002ed8:	4b33      	ldr	r3, [pc, #204]	; (8002fa8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d024      	beq.n	8002f2a <HAL_FLASH_IRQHandler+0x146>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2U;
 8002ee0:	4b31      	ldr	r3, [pc, #196]	; (8002fa8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	3302      	adds	r3, #2
 8002ee6:	4a30      	ldr	r2, [pc, #192]	; (8002fa8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002ee8:	6093      	str	r3, [r2, #8]
          addresstmp = pFlash.Address;
 8002eea:	4b2f      	ldr	r3, [pc, #188]	; (8002fa8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 8002ef0:	4b2d      	ldr	r3, [pc, #180]	; (8002fa8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002ef2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	0c02      	lsrs	r2, r0, #16
 8002f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002f04:	0c0b      	lsrs	r3, r1, #16
 8002f06:	4928      	ldr	r1, [pc, #160]	; (8002fa8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002f08:	e9c1 2304 	strd	r2, r3, [r1, #16]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002f0c:	4b25      	ldr	r3, [pc, #148]	; (8002fa4 <HAL_FLASH_IRQHandler+0x1c0>)
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	4a24      	ldr	r2, [pc, #144]	; (8002fa4 <HAL_FLASH_IRQHandler+0x1c0>)
 8002f12:	f023 0301 	bic.w	r3, r3, #1
 8002f16:	6113      	str	r3, [r2, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8002f18:	4b23      	ldr	r3, [pc, #140]	; (8002fa8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002f1a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002f1e:	b293      	uxth	r3, r2
 8002f20:	4619      	mov	r1, r3
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f854 	bl	8002fd0 <FLASH_Program_HalfWord>
 8002f28:	e023      	b.n	8002f72 <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 8002f2a:	4b1f      	ldr	r3, [pc, #124]	; (8002fa8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	d105      	bne.n	8002f40 <HAL_FLASH_IRQHandler+0x15c>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8002f34:	4b1c      	ldr	r3, [pc, #112]	; (8002fa8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 f837 	bl	8002fac <HAL_FLASH_EndOfOperationCallback>
 8002f3e:	e011      	b.n	8002f64 <HAL_FLASH_IRQHandler+0x180>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8002f40:	4b19      	ldr	r3, [pc, #100]	; (8002fa8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d106      	bne.n	8002f58 <HAL_FLASH_IRQHandler+0x174>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8002f4a:	4b17      	ldr	r3, [pc, #92]	; (8002fa8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	3b02      	subs	r3, #2
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 f82b 	bl	8002fac <HAL_FLASH_EndOfOperationCallback>
 8002f56:	e005      	b.n	8002f64 <HAL_FLASH_IRQHandler+0x180>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8002f58:	4b13      	ldr	r3, [pc, #76]	; (8002fa8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	3b06      	subs	r3, #6
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 f824 	bl	8002fac <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 8002f64:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002f66:	f04f 32ff 	mov.w	r2, #4294967295
 8002f6a:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002f6c:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#endif 

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002f72:	4b0d      	ldr	r3, [pc, #52]	; (8002fa8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10e      	bne.n	8002f9a <HAL_FLASH_IRQHandler+0x1b6>
  
    /* Disable End of FLASH Operation and Error source interrupts for both banks */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
#else
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8002f7c:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <HAL_FLASH_IRQHandler+0x1c0>)
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	4a08      	ldr	r2, [pc, #32]	; (8002fa4 <HAL_FLASH_IRQHandler+0x1c0>)
 8002f82:	f023 0307 	bic.w	r3, r3, #7
 8002f86:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8002f88:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <HAL_FLASH_IRQHandler+0x1c0>)
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	4a05      	ldr	r2, [pc, #20]	; (8002fa4 <HAL_FLASH_IRQHandler+0x1c0>)
 8002f8e:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 8002f92:	6113      	str	r3, [r2, #16]
#endif /* FLASH_BANK2_END */

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8002f94:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <HAL_FLASH_IRQHandler+0x1c4>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	761a      	strb	r2, [r3, #24]
  }
}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40022000 	.word	0x40022000
 8002fa8:	20000a40 	.word	0x20000a40

08002fac <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr

08002fbe <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr

08002fd0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002fdc:	4b08      	ldr	r3, [pc, #32]	; (8003000 <FLASH_Program_HalfWord+0x30>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002fe2:	4b08      	ldr	r3, [pc, #32]	; (8003004 <FLASH_Program_HalfWord+0x34>)
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	4a07      	ldr	r2, [pc, #28]	; (8003004 <FLASH_Program_HalfWord+0x34>)
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	887a      	ldrh	r2, [r7, #2]
 8002ff2:	801a      	strh	r2, [r3, #0]
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	20000a40 	.word	0x20000a40
 8003004:	40022000 	.word	0x40022000

08003008 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800300e:	2300      	movs	r3, #0
 8003010:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003012:	4b23      	ldr	r3, [pc, #140]	; (80030a0 <FLASH_SetErrorCode+0x98>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	f003 0310 	and.w	r3, r3, #16
 800301a:	2b00      	cmp	r3, #0
 800301c:	d009      	beq.n	8003032 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800301e:	4b21      	ldr	r3, [pc, #132]	; (80030a4 <FLASH_SetErrorCode+0x9c>)
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f043 0302 	orr.w	r3, r3, #2
 8003026:	4a1f      	ldr	r2, [pc, #124]	; (80030a4 <FLASH_SetErrorCode+0x9c>)
 8003028:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f043 0310 	orr.w	r3, r3, #16
 8003030:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003032:	4b1b      	ldr	r3, [pc, #108]	; (80030a0 <FLASH_SetErrorCode+0x98>)
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	f003 0304 	and.w	r3, r3, #4
 800303a:	2b00      	cmp	r3, #0
 800303c:	d009      	beq.n	8003052 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800303e:	4b19      	ldr	r3, [pc, #100]	; (80030a4 <FLASH_SetErrorCode+0x9c>)
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	4a17      	ldr	r2, [pc, #92]	; (80030a4 <FLASH_SetErrorCode+0x9c>)
 8003048:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f043 0304 	orr.w	r3, r3, #4
 8003050:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003052:	4b13      	ldr	r3, [pc, #76]	; (80030a0 <FLASH_SetErrorCode+0x98>)
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00b      	beq.n	8003076 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800305e:	4b11      	ldr	r3, [pc, #68]	; (80030a4 <FLASH_SetErrorCode+0x9c>)
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	f043 0304 	orr.w	r3, r3, #4
 8003066:	4a0f      	ldr	r2, [pc, #60]	; (80030a4 <FLASH_SetErrorCode+0x9c>)
 8003068:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800306a:	4b0d      	ldr	r3, [pc, #52]	; (80030a0 <FLASH_SetErrorCode+0x98>)
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	4a0c      	ldr	r2, [pc, #48]	; (80030a0 <FLASH_SetErrorCode+0x98>)
 8003070:	f023 0301 	bic.w	r3, r3, #1
 8003074:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f240 1201 	movw	r2, #257	; 0x101
 800307c:	4293      	cmp	r3, r2
 800307e:	d106      	bne.n	800308e <FLASH_SetErrorCode+0x86>
 8003080:	4b07      	ldr	r3, [pc, #28]	; (80030a0 <FLASH_SetErrorCode+0x98>)
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	4a06      	ldr	r2, [pc, #24]	; (80030a0 <FLASH_SetErrorCode+0x98>)
 8003086:	f023 0301 	bic.w	r3, r3, #1
 800308a:	61d3      	str	r3, [r2, #28]
}  
 800308c:	e002      	b.n	8003094 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800308e:	4a04      	ldr	r2, [pc, #16]	; (80030a0 <FLASH_SetErrorCode+0x98>)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	60d3      	str	r3, [r2, #12]
}  
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	bc80      	pop	{r7}
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	40022000 	.word	0x40022000
 80030a4:	20000a40 	.word	0x20000a40

080030a8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <FLASH_PageErase+0x38>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80030b6:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <FLASH_PageErase+0x3c>)
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	4a0a      	ldr	r2, [pc, #40]	; (80030e4 <FLASH_PageErase+0x3c>)
 80030bc:	f043 0302 	orr.w	r3, r3, #2
 80030c0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80030c2:	4a08      	ldr	r2, [pc, #32]	; (80030e4 <FLASH_PageErase+0x3c>)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80030c8:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <FLASH_PageErase+0x3c>)
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	4a05      	ldr	r2, [pc, #20]	; (80030e4 <FLASH_PageErase+0x3c>)
 80030ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030d2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	20000a40 	.word	0x20000a40
 80030e4:	40022000 	.word	0x40022000

080030e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b08b      	sub	sp, #44	; 0x2c
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030f2:	2300      	movs	r3, #0
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030f6:	2300      	movs	r3, #0
 80030f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030fa:	e169      	b.n	80033d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030fc:	2201      	movs	r2, #1
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	4013      	ands	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	429a      	cmp	r2, r3
 8003116:	f040 8158 	bne.w	80033ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	4a9a      	ldr	r2, [pc, #616]	; (8003388 <HAL_GPIO_Init+0x2a0>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d05e      	beq.n	80031e2 <HAL_GPIO_Init+0xfa>
 8003124:	4a98      	ldr	r2, [pc, #608]	; (8003388 <HAL_GPIO_Init+0x2a0>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d875      	bhi.n	8003216 <HAL_GPIO_Init+0x12e>
 800312a:	4a98      	ldr	r2, [pc, #608]	; (800338c <HAL_GPIO_Init+0x2a4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d058      	beq.n	80031e2 <HAL_GPIO_Init+0xfa>
 8003130:	4a96      	ldr	r2, [pc, #600]	; (800338c <HAL_GPIO_Init+0x2a4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d86f      	bhi.n	8003216 <HAL_GPIO_Init+0x12e>
 8003136:	4a96      	ldr	r2, [pc, #600]	; (8003390 <HAL_GPIO_Init+0x2a8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d052      	beq.n	80031e2 <HAL_GPIO_Init+0xfa>
 800313c:	4a94      	ldr	r2, [pc, #592]	; (8003390 <HAL_GPIO_Init+0x2a8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d869      	bhi.n	8003216 <HAL_GPIO_Init+0x12e>
 8003142:	4a94      	ldr	r2, [pc, #592]	; (8003394 <HAL_GPIO_Init+0x2ac>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d04c      	beq.n	80031e2 <HAL_GPIO_Init+0xfa>
 8003148:	4a92      	ldr	r2, [pc, #584]	; (8003394 <HAL_GPIO_Init+0x2ac>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d863      	bhi.n	8003216 <HAL_GPIO_Init+0x12e>
 800314e:	4a92      	ldr	r2, [pc, #584]	; (8003398 <HAL_GPIO_Init+0x2b0>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d046      	beq.n	80031e2 <HAL_GPIO_Init+0xfa>
 8003154:	4a90      	ldr	r2, [pc, #576]	; (8003398 <HAL_GPIO_Init+0x2b0>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d85d      	bhi.n	8003216 <HAL_GPIO_Init+0x12e>
 800315a:	2b12      	cmp	r3, #18
 800315c:	d82a      	bhi.n	80031b4 <HAL_GPIO_Init+0xcc>
 800315e:	2b12      	cmp	r3, #18
 8003160:	d859      	bhi.n	8003216 <HAL_GPIO_Init+0x12e>
 8003162:	a201      	add	r2, pc, #4	; (adr r2, 8003168 <HAL_GPIO_Init+0x80>)
 8003164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003168:	080031e3 	.word	0x080031e3
 800316c:	080031bd 	.word	0x080031bd
 8003170:	080031cf 	.word	0x080031cf
 8003174:	08003211 	.word	0x08003211
 8003178:	08003217 	.word	0x08003217
 800317c:	08003217 	.word	0x08003217
 8003180:	08003217 	.word	0x08003217
 8003184:	08003217 	.word	0x08003217
 8003188:	08003217 	.word	0x08003217
 800318c:	08003217 	.word	0x08003217
 8003190:	08003217 	.word	0x08003217
 8003194:	08003217 	.word	0x08003217
 8003198:	08003217 	.word	0x08003217
 800319c:	08003217 	.word	0x08003217
 80031a0:	08003217 	.word	0x08003217
 80031a4:	08003217 	.word	0x08003217
 80031a8:	08003217 	.word	0x08003217
 80031ac:	080031c5 	.word	0x080031c5
 80031b0:	080031d9 	.word	0x080031d9
 80031b4:	4a79      	ldr	r2, [pc, #484]	; (800339c <HAL_GPIO_Init+0x2b4>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d013      	beq.n	80031e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80031ba:	e02c      	b.n	8003216 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	623b      	str	r3, [r7, #32]
          break;
 80031c2:	e029      	b.n	8003218 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	3304      	adds	r3, #4
 80031ca:	623b      	str	r3, [r7, #32]
          break;
 80031cc:	e024      	b.n	8003218 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	3308      	adds	r3, #8
 80031d4:	623b      	str	r3, [r7, #32]
          break;
 80031d6:	e01f      	b.n	8003218 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	330c      	adds	r3, #12
 80031de:	623b      	str	r3, [r7, #32]
          break;
 80031e0:	e01a      	b.n	8003218 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d102      	bne.n	80031f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031ea:	2304      	movs	r3, #4
 80031ec:	623b      	str	r3, [r7, #32]
          break;
 80031ee:	e013      	b.n	8003218 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d105      	bne.n	8003204 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031f8:	2308      	movs	r3, #8
 80031fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69fa      	ldr	r2, [r7, #28]
 8003200:	611a      	str	r2, [r3, #16]
          break;
 8003202:	e009      	b.n	8003218 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003204:	2308      	movs	r3, #8
 8003206:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	69fa      	ldr	r2, [r7, #28]
 800320c:	615a      	str	r2, [r3, #20]
          break;
 800320e:	e003      	b.n	8003218 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003210:	2300      	movs	r3, #0
 8003212:	623b      	str	r3, [r7, #32]
          break;
 8003214:	e000      	b.n	8003218 <HAL_GPIO_Init+0x130>
          break;
 8003216:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	2bff      	cmp	r3, #255	; 0xff
 800321c:	d801      	bhi.n	8003222 <HAL_GPIO_Init+0x13a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	e001      	b.n	8003226 <HAL_GPIO_Init+0x13e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3304      	adds	r3, #4
 8003226:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	2bff      	cmp	r3, #255	; 0xff
 800322c:	d802      	bhi.n	8003234 <HAL_GPIO_Init+0x14c>
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	e002      	b.n	800323a <HAL_GPIO_Init+0x152>
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	3b08      	subs	r3, #8
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	210f      	movs	r1, #15
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	fa01 f303 	lsl.w	r3, r1, r3
 8003248:	43db      	mvns	r3, r3
 800324a:	401a      	ands	r2, r3
 800324c:	6a39      	ldr	r1, [r7, #32]
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	fa01 f303 	lsl.w	r3, r1, r3
 8003254:	431a      	orrs	r2, r3
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 80b1 	beq.w	80033ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003268:	4b4d      	ldr	r3, [pc, #308]	; (80033a0 <HAL_GPIO_Init+0x2b8>)
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	4a4c      	ldr	r2, [pc, #304]	; (80033a0 <HAL_GPIO_Init+0x2b8>)
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	6193      	str	r3, [r2, #24]
 8003274:	4b4a      	ldr	r3, [pc, #296]	; (80033a0 <HAL_GPIO_Init+0x2b8>)
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003280:	4a48      	ldr	r2, [pc, #288]	; (80033a4 <HAL_GPIO_Init+0x2bc>)
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	089b      	lsrs	r3, r3, #2
 8003286:	3302      	adds	r3, #2
 8003288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800328c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	f003 0303 	and.w	r3, r3, #3
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	220f      	movs	r2, #15
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	43db      	mvns	r3, r3
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4013      	ands	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a40      	ldr	r2, [pc, #256]	; (80033a8 <HAL_GPIO_Init+0x2c0>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d013      	beq.n	80032d4 <HAL_GPIO_Init+0x1ec>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a3f      	ldr	r2, [pc, #252]	; (80033ac <HAL_GPIO_Init+0x2c4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d00d      	beq.n	80032d0 <HAL_GPIO_Init+0x1e8>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a3e      	ldr	r2, [pc, #248]	; (80033b0 <HAL_GPIO_Init+0x2c8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d007      	beq.n	80032cc <HAL_GPIO_Init+0x1e4>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a3d      	ldr	r2, [pc, #244]	; (80033b4 <HAL_GPIO_Init+0x2cc>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d101      	bne.n	80032c8 <HAL_GPIO_Init+0x1e0>
 80032c4:	2303      	movs	r3, #3
 80032c6:	e006      	b.n	80032d6 <HAL_GPIO_Init+0x1ee>
 80032c8:	2304      	movs	r3, #4
 80032ca:	e004      	b.n	80032d6 <HAL_GPIO_Init+0x1ee>
 80032cc:	2302      	movs	r3, #2
 80032ce:	e002      	b.n	80032d6 <HAL_GPIO_Init+0x1ee>
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <HAL_GPIO_Init+0x1ee>
 80032d4:	2300      	movs	r3, #0
 80032d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d8:	f002 0203 	and.w	r2, r2, #3
 80032dc:	0092      	lsls	r2, r2, #2
 80032de:	4093      	lsls	r3, r2
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80032e6:	492f      	ldr	r1, [pc, #188]	; (80033a4 <HAL_GPIO_Init+0x2bc>)
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	089b      	lsrs	r3, r3, #2
 80032ec:	3302      	adds	r3, #2
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d006      	beq.n	800330e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003300:	4b2d      	ldr	r3, [pc, #180]	; (80033b8 <HAL_GPIO_Init+0x2d0>)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	492c      	ldr	r1, [pc, #176]	; (80033b8 <HAL_GPIO_Init+0x2d0>)
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	4313      	orrs	r3, r2
 800330a:	600b      	str	r3, [r1, #0]
 800330c:	e006      	b.n	800331c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800330e:	4b2a      	ldr	r3, [pc, #168]	; (80033b8 <HAL_GPIO_Init+0x2d0>)
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	43db      	mvns	r3, r3
 8003316:	4928      	ldr	r1, [pc, #160]	; (80033b8 <HAL_GPIO_Init+0x2d0>)
 8003318:	4013      	ands	r3, r2
 800331a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d006      	beq.n	8003336 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003328:	4b23      	ldr	r3, [pc, #140]	; (80033b8 <HAL_GPIO_Init+0x2d0>)
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	4922      	ldr	r1, [pc, #136]	; (80033b8 <HAL_GPIO_Init+0x2d0>)
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	4313      	orrs	r3, r2
 8003332:	604b      	str	r3, [r1, #4]
 8003334:	e006      	b.n	8003344 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003336:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <HAL_GPIO_Init+0x2d0>)
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	43db      	mvns	r3, r3
 800333e:	491e      	ldr	r1, [pc, #120]	; (80033b8 <HAL_GPIO_Init+0x2d0>)
 8003340:	4013      	ands	r3, r2
 8003342:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d006      	beq.n	800335e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003350:	4b19      	ldr	r3, [pc, #100]	; (80033b8 <HAL_GPIO_Init+0x2d0>)
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	4918      	ldr	r1, [pc, #96]	; (80033b8 <HAL_GPIO_Init+0x2d0>)
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	4313      	orrs	r3, r2
 800335a:	608b      	str	r3, [r1, #8]
 800335c:	e006      	b.n	800336c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800335e:	4b16      	ldr	r3, [pc, #88]	; (80033b8 <HAL_GPIO_Init+0x2d0>)
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	43db      	mvns	r3, r3
 8003366:	4914      	ldr	r1, [pc, #80]	; (80033b8 <HAL_GPIO_Init+0x2d0>)
 8003368:	4013      	ands	r3, r2
 800336a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d021      	beq.n	80033bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003378:	4b0f      	ldr	r3, [pc, #60]	; (80033b8 <HAL_GPIO_Init+0x2d0>)
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	490e      	ldr	r1, [pc, #56]	; (80033b8 <HAL_GPIO_Init+0x2d0>)
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	4313      	orrs	r3, r2
 8003382:	60cb      	str	r3, [r1, #12]
 8003384:	e021      	b.n	80033ca <HAL_GPIO_Init+0x2e2>
 8003386:	bf00      	nop
 8003388:	10320000 	.word	0x10320000
 800338c:	10310000 	.word	0x10310000
 8003390:	10220000 	.word	0x10220000
 8003394:	10210000 	.word	0x10210000
 8003398:	10120000 	.word	0x10120000
 800339c:	10110000 	.word	0x10110000
 80033a0:	40021000 	.word	0x40021000
 80033a4:	40010000 	.word	0x40010000
 80033a8:	40010800 	.word	0x40010800
 80033ac:	40010c00 	.word	0x40010c00
 80033b0:	40011000 	.word	0x40011000
 80033b4:	40011400 	.word	0x40011400
 80033b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033bc:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <HAL_GPIO_Init+0x304>)
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	43db      	mvns	r3, r3
 80033c4:	4909      	ldr	r1, [pc, #36]	; (80033ec <HAL_GPIO_Init+0x304>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	3301      	adds	r3, #1
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	fa22 f303 	lsr.w	r3, r2, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f47f ae8e 	bne.w	80030fc <HAL_GPIO_Init+0x14>
  }
}
 80033e0:	bf00      	nop
 80033e2:	bf00      	nop
 80033e4:	372c      	adds	r7, #44	; 0x2c
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr
 80033ec:	40010400 	.word	0x40010400

080033f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	460b      	mov	r3, r1
 80033fa:	807b      	strh	r3, [r7, #2]
 80033fc:	4613      	mov	r3, r2
 80033fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003400:	787b      	ldrb	r3, [r7, #1]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003406:	887a      	ldrh	r2, [r7, #2]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800340c:	e003      	b.n	8003416 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800340e:	887b      	ldrh	r3, [r7, #2]
 8003410:	041a      	lsls	r2, r3, #16
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	611a      	str	r2, [r3, #16]
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	bc80      	pop	{r7}
 800341e:	4770      	bx	lr

08003420 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003422:	b08b      	sub	sp, #44	; 0x2c
 8003424:	af06      	add	r7, sp, #24
 8003426:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e0fd      	b.n	800362e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d106      	bne.n	800344c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7fe ff82 	bl	8002350 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2203      	movs	r2, #3
 8003450:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f003 fba9 	bl	8006bb0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	603b      	str	r3, [r7, #0]
 8003464:	687e      	ldr	r6, [r7, #4]
 8003466:	466d      	mov	r5, sp
 8003468:	f106 0410 	add.w	r4, r6, #16
 800346c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800346e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003470:	6823      	ldr	r3, [r4, #0]
 8003472:	602b      	str	r3, [r5, #0]
 8003474:	1d33      	adds	r3, r6, #4
 8003476:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003478:	6838      	ldr	r0, [r7, #0]
 800347a:	f003 fb89 	bl	8006b90 <USB_CoreInit>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d005      	beq.n	8003490 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e0ce      	b.n	800362e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2100      	movs	r1, #0
 8003496:	4618      	mov	r0, r3
 8003498:	f003 fba4 	bl	8006be4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800349c:	2300      	movs	r3, #0
 800349e:	73fb      	strb	r3, [r7, #15]
 80034a0:	e04c      	b.n	800353c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034a2:	7bfb      	ldrb	r3, [r7, #15]
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	1c5a      	adds	r2, r3, #1
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	440b      	add	r3, r1
 80034b2:	3301      	adds	r3, #1
 80034b4:	2201      	movs	r2, #1
 80034b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	4613      	mov	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	440b      	add	r3, r1
 80034c8:	7bfa      	ldrb	r2, [r7, #15]
 80034ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034cc:	7bfa      	ldrb	r2, [r7, #15]
 80034ce:	7bfb      	ldrb	r3, [r7, #15]
 80034d0:	b298      	uxth	r0, r3
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	440b      	add	r3, r1
 80034de:	3336      	adds	r3, #54	; 0x36
 80034e0:	4602      	mov	r2, r0
 80034e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	1c5a      	adds	r2, r3, #1
 80034ea:	4613      	mov	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4413      	add	r3, r2
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	440b      	add	r3, r1
 80034f4:	3303      	adds	r3, #3
 80034f6:	2200      	movs	r2, #0
 80034f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034fa:	7bfa      	ldrb	r2, [r7, #15]
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	440b      	add	r3, r1
 8003508:	3338      	adds	r3, #56	; 0x38
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800350e:	7bfa      	ldrb	r2, [r7, #15]
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	4613      	mov	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	440b      	add	r3, r1
 800351c:	333c      	adds	r3, #60	; 0x3c
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003522:	7bfa      	ldrb	r2, [r7, #15]
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	4613      	mov	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	440b      	add	r3, r1
 8003530:	3340      	adds	r3, #64	; 0x40
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003536:	7bfb      	ldrb	r3, [r7, #15]
 8003538:	3301      	adds	r3, #1
 800353a:	73fb      	strb	r3, [r7, #15]
 800353c:	7bfa      	ldrb	r2, [r7, #15]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	429a      	cmp	r2, r3
 8003544:	d3ad      	bcc.n	80034a2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003546:	2300      	movs	r3, #0
 8003548:	73fb      	strb	r3, [r7, #15]
 800354a:	e044      	b.n	80035d6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800354c:	7bfa      	ldrb	r2, [r7, #15]
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	440b      	add	r3, r1
 800355a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800355e:	2200      	movs	r2, #0
 8003560:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003562:	7bfa      	ldrb	r2, [r7, #15]
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	440b      	add	r3, r1
 8003570:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003574:	7bfa      	ldrb	r2, [r7, #15]
 8003576:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003578:	7bfa      	ldrb	r2, [r7, #15]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	440b      	add	r3, r1
 8003586:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800358a:	2200      	movs	r2, #0
 800358c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800358e:	7bfa      	ldrb	r2, [r7, #15]
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	440b      	add	r3, r1
 800359c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035a4:	7bfa      	ldrb	r2, [r7, #15]
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	440b      	add	r3, r1
 80035b2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035ba:	7bfa      	ldrb	r2, [r7, #15]
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4413      	add	r3, r2
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	440b      	add	r3, r1
 80035c8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
 80035d2:	3301      	adds	r3, #1
 80035d4:	73fb      	strb	r3, [r7, #15]
 80035d6:	7bfa      	ldrb	r2, [r7, #15]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d3b5      	bcc.n	800354c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	603b      	str	r3, [r7, #0]
 80035e6:	687e      	ldr	r6, [r7, #4]
 80035e8:	466d      	mov	r5, sp
 80035ea:	f106 0410 	add.w	r4, r6, #16
 80035ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035f2:	6823      	ldr	r3, [r4, #0]
 80035f4:	602b      	str	r3, [r5, #0]
 80035f6:	1d33      	adds	r3, r6, #4
 80035f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035fa:	6838      	ldr	r0, [r7, #0]
 80035fc:	f003 fafe 	bl	8006bfc <USB_DevInit>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d005      	beq.n	8003612 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2202      	movs	r2, #2
 800360a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e00d      	b.n	800362e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f004 fc3b 	bl	8007ea2 <USB_DevDisconnect>

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003636 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b088      	sub	sp, #32
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f004 fc37 	bl	8007eb6 <USB_ReadInterrupts>
 8003648:	4603      	mov	r3, r0
 800364a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800364e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003652:	d102      	bne.n	800365a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f9ab 	bl	80039b0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f004 fc29 	bl	8007eb6 <USB_ReadInterrupts>
 8003664:	4603      	mov	r3, r0
 8003666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800366a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800366e:	d112      	bne.n	8003696 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003678:	b29a      	uxth	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003682:	b292      	uxth	r2, r2
 8003684:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f951 	bl	8003930 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800368e:	2100      	movs	r1, #0
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 f968 	bl	8003966 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f004 fc0b 	bl	8007eb6 <USB_ReadInterrupts>
 80036a0:	4603      	mov	r3, r0
 80036a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036aa:	d10b      	bne.n	80036c4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036be:	b292      	uxth	r2, r2
 80036c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f004 fbf4 	bl	8007eb6 <USB_ReadInterrupts>
 80036ce:	4603      	mov	r3, r0
 80036d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036d8:	d10b      	bne.n	80036f2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036ec:	b292      	uxth	r2, r2
 80036ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f004 fbdd 	bl	8007eb6 <USB_ReadInterrupts>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003706:	d126      	bne.n	8003756 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003710:	b29a      	uxth	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0204 	bic.w	r2, r2, #4
 800371a:	b292      	uxth	r2, r2
 800371c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003728:	b29a      	uxth	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 0208 	bic.w	r2, r2, #8
 8003732:	b292      	uxth	r2, r2
 8003734:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f90b 	bl	8003954 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003746:	b29a      	uxth	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003750:	b292      	uxth	r2, r2
 8003752:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f004 fbab 	bl	8007eb6 <USB_ReadInterrupts>
 8003760:	4603      	mov	r3, r0
 8003762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003766:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800376a:	f040 8084 	bne.w	8003876 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800376e:	2300      	movs	r3, #0
 8003770:	77fb      	strb	r3, [r7, #31]
 8003772:	e011      	b.n	8003798 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	461a      	mov	r2, r3
 800377a:	7ffb      	ldrb	r3, [r7, #31]
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	441a      	add	r2, r3
 8003780:	7ffb      	ldrb	r3, [r7, #31]
 8003782:	8812      	ldrh	r2, [r2, #0]
 8003784:	b292      	uxth	r2, r2
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	f107 0120 	add.w	r1, r7, #32
 800378c:	440b      	add	r3, r1
 800378e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8003792:	7ffb      	ldrb	r3, [r7, #31]
 8003794:	3301      	adds	r3, #1
 8003796:	77fb      	strb	r3, [r7, #31]
 8003798:	7ffb      	ldrb	r3, [r7, #31]
 800379a:	2b07      	cmp	r3, #7
 800379c:	d9ea      	bls.n	8003774 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f042 0201 	orr.w	r2, r2, #1
 80037b0:	b292      	uxth	r2, r2
 80037b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80037be:	b29a      	uxth	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0201 	bic.w	r2, r2, #1
 80037c8:	b292      	uxth	r2, r2
 80037ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80037ce:	bf00      	nop
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037d8:	b29b      	uxth	r3, r3
 80037da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0f6      	beq.n	80037d0 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037f4:	b292      	uxth	r2, r2
 80037f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80037fa:	2300      	movs	r3, #0
 80037fc:	77fb      	strb	r3, [r7, #31]
 80037fe:	e010      	b.n	8003822 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003800:	7ffb      	ldrb	r3, [r7, #31]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6812      	ldr	r2, [r2, #0]
 8003806:	4611      	mov	r1, r2
 8003808:	7ffa      	ldrb	r2, [r7, #31]
 800380a:	0092      	lsls	r2, r2, #2
 800380c:	440a      	add	r2, r1
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	f107 0120 	add.w	r1, r7, #32
 8003814:	440b      	add	r3, r1
 8003816:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800381a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800381c:	7ffb      	ldrb	r3, [r7, #31]
 800381e:	3301      	adds	r3, #1
 8003820:	77fb      	strb	r3, [r7, #31]
 8003822:	7ffb      	ldrb	r3, [r7, #31]
 8003824:	2b07      	cmp	r3, #7
 8003826:	d9eb      	bls.n	8003800 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003830:	b29a      	uxth	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0208 	orr.w	r2, r2, #8
 800383a:	b292      	uxth	r2, r2
 800383c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003848:	b29a      	uxth	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003852:	b292      	uxth	r2, r2
 8003854:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003860:	b29a      	uxth	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0204 	orr.w	r2, r2, #4
 800386a:	b292      	uxth	r2, r2
 800386c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f866 	bl	8003942 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f004 fb1b 	bl	8007eb6 <USB_ReadInterrupts>
 8003880:	4603      	mov	r3, r0
 8003882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800388a:	d10e      	bne.n	80038aa <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003894:	b29a      	uxth	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800389e:	b292      	uxth	r2, r2
 80038a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f83a 	bl	800391e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f004 fb01 	bl	8007eb6 <USB_ReadInterrupts>
 80038b4:	4603      	mov	r3, r0
 80038b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038be:	d10b      	bne.n	80038d8 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038d2:	b292      	uxth	r2, r2
 80038d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80038d8:	bf00      	nop
 80038da:	3720      	adds	r7, #32
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc80      	pop	{r7}
 80038f4:	4770      	bx	lr

080038f6 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	460b      	mov	r3, r1
 8003900:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	bc80      	pop	{r7}
 800390a:	4770      	bx	lr

0800390c <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	bc80      	pop	{r7}
 800391c:	4770      	bx	lr

0800391e <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	bc80      	pop	{r7}
 800392e:	4770      	bx	lr

08003930 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	bc80      	pop	{r7}
 8003940:	4770      	bx	lr

08003942 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003942:	b480      	push	{r7}
 8003944:	b083      	sub	sp, #12
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr

08003954 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	bc80      	pop	{r7}
 8003964:	4770      	bx	lr

08003966 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b082      	sub	sp, #8
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	460b      	mov	r3, r1
 8003970:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_PCD_SetAddress+0x1a>
 800397c:	2302      	movs	r3, #2
 800397e:	e013      	b.n	80039a8 <HAL_PCD_SetAddress+0x42>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	78fa      	ldrb	r2, [r7, #3]
 800398c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	78fa      	ldrb	r2, [r7, #3]
 8003996:	4611      	mov	r1, r2
 8003998:	4618      	mov	r0, r3
 800399a:	f004 fa6f 	bl	8007e7c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b08e      	sub	sp, #56	; 0x38
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80039b8:	e2df      	b.n	8003f7a <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039c2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80039c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	f003 030f 	and.w	r3, r3, #15
 80039cc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80039d0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f040 8158 	bne.w	8003c8a <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80039da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80039dc:	f003 0310 	and.w	r3, r3, #16
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d152      	bne.n	8003a8a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80039f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f4:	81fb      	strh	r3, [r7, #14]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	89fb      	ldrh	r3, [r7, #14]
 80039fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3328      	adds	r3, #40	; 0x28
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	461a      	mov	r2, r3
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	4413      	add	r3, r2
 8003a22:	3302      	adds	r3, #2
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6812      	ldr	r2, [r2, #0]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a30:	881b      	ldrh	r3, [r3, #0]
 8003a32:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	695a      	ldr	r2, [r3, #20]
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	441a      	add	r2, r3
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003a48:	2100      	movs	r1, #0
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff ff53 	bl	80038f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 828e 	beq.w	8003f7a <PCD_EP_ISR_Handler+0x5ca>
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f040 8289 	bne.w	8003f7a <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	b292      	uxth	r2, r2
 8003a7c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003a88:	e277      	b.n	8003f7a <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	881b      	ldrh	r3, [r3, #0]
 8003a98:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003a9a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003a9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d034      	beq.n	8003b0e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	461a      	mov	r2, r3
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	3306      	adds	r3, #6
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6818      	ldr	r0, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	f004 fa3b 	bl	8007f5e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	881b      	ldrh	r3, [r3, #0]
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003af4:	4013      	ands	r3, r2
 8003af6:	823b      	strh	r3, [r7, #16]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	8a3a      	ldrh	r2, [r7, #16]
 8003afe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b02:	b292      	uxth	r2, r2
 8003b04:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7ff ff00 	bl	800390c <HAL_PCD_SetupStageCallback>
 8003b0c:	e235      	b.n	8003f7a <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003b0e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f280 8231 	bge.w	8003f7a <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	881b      	ldrh	r3, [r3, #0]
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003b24:	4013      	ands	r3, r2
 8003b26:	83bb      	strh	r3, [r7, #28]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	8bba      	ldrh	r2, [r7, #28]
 8003b2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b32:	b292      	uxth	r2, r2
 8003b34:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	461a      	mov	r2, r3
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	4413      	add	r3, r2
 8003b4a:	3306      	adds	r3, #6
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6812      	ldr	r2, [r2, #0]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b58:	881b      	ldrh	r3, [r3, #0]
 8003b5a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d019      	beq.n	8003b9e <PCD_EP_ISR_Handler+0x1ee>
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d015      	beq.n	8003b9e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6818      	ldr	r0, [r3, #0]
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	6959      	ldr	r1, [r3, #20]
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	f004 f9eb 	bl	8007f5e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	695a      	ldr	r2, [r3, #20]
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	441a      	add	r2, r3
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003b96:	2100      	movs	r1, #0
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7ff fea1 	bl	80038e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	61bb      	str	r3, [r7, #24]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	461a      	mov	r2, r3
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	61bb      	str	r3, [r7, #24]
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003bbc:	617b      	str	r3, [r7, #20]
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d112      	bne.n	8003bec <PCD_EP_ISR_Handler+0x23c>
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	881b      	ldrh	r3, [r3, #0]
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	801a      	strh	r2, [r3, #0]
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003be0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	801a      	strh	r2, [r3, #0]
 8003bea:	e02f      	b.n	8003c4c <PCD_EP_ISR_Handler+0x29c>
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	2b3e      	cmp	r3, #62	; 0x3e
 8003bf2:	d813      	bhi.n	8003c1c <PCD_EP_ISR_Handler+0x26c>
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	085b      	lsrs	r3, r3, #1
 8003bfa:	633b      	str	r3, [r7, #48]	; 0x30
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <PCD_EP_ISR_Handler+0x25e>
 8003c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	029b      	lsls	r3, r3, #10
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	801a      	strh	r2, [r3, #0]
 8003c1a:	e017      	b.n	8003c4c <PCD_EP_ISR_Handler+0x29c>
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	095b      	lsrs	r3, r3, #5
 8003c22:	633b      	str	r3, [r7, #48]	; 0x30
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	f003 031f 	and.w	r3, r3, #31
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d102      	bne.n	8003c36 <PCD_EP_ISR_Handler+0x286>
 8003c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c32:	3b01      	subs	r3, #1
 8003c34:	633b      	str	r3, [r7, #48]	; 0x30
 8003c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	029b      	lsls	r3, r3, #10
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	881b      	ldrh	r3, [r3, #0]
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c5c:	827b      	strh	r3, [r7, #18]
 8003c5e:	8a7b      	ldrh	r3, [r7, #18]
 8003c60:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003c64:	827b      	strh	r3, [r7, #18]
 8003c66:	8a7b      	ldrh	r3, [r7, #18]
 8003c68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c6c:	827b      	strh	r3, [r7, #18]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	8a7b      	ldrh	r3, [r7, #18]
 8003c74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	8013      	strh	r3, [r2, #0]
 8003c88:	e177      	b.n	8003f7a <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003c9c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f280 80ea 	bge.w	8003e7a <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	461a      	mov	r2, r3
 8003cac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4413      	add	r3, r2
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	853b      	strh	r3, [r7, #40]	; 0x28
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003cd0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cd4:	b292      	uxth	r2, r2
 8003cd6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003cd8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003cdc:	4613      	mov	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4413      	add	r3, r2
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	4413      	add	r3, r2
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	7b1b      	ldrb	r3, [r3, #12]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d122      	bne.n	8003d3c <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	461a      	mov	r2, r3
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	4413      	add	r3, r2
 8003d0a:	3306      	adds	r3, #6
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6812      	ldr	r2, [r2, #0]
 8003d12:	4413      	add	r3, r2
 8003d14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d1e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003d20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 8087 	beq.w	8003e36 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6818      	ldr	r0, [r3, #0]
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	6959      	ldr	r1, [r3, #20]
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	88da      	ldrh	r2, [r3, #6]
 8003d34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d36:	f004 f912 	bl	8007f5e <USB_ReadPMA>
 8003d3a:	e07c      	b.n	8003e36 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	78db      	ldrb	r3, [r3, #3]
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d108      	bne.n	8003d56 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003d44:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d46:	461a      	mov	r2, r3
 8003d48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f923 	bl	8003f96 <HAL_PCD_EP_DB_Receive>
 8003d50:	4603      	mov	r3, r0
 8003d52:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003d54:	e06f      	b.n	8003e36 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d70:	847b      	strh	r3, [r7, #34]	; 0x22
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	441a      	add	r2, r3
 8003d80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4413      	add	r3, r2
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d021      	beq.n	8003df4 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	461a      	mov	r2, r3
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	4413      	add	r3, r2
 8003dc4:	3302      	adds	r3, #2
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6812      	ldr	r2, [r2, #0]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dd2:	881b      	ldrh	r3, [r3, #0]
 8003dd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dd8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003dda:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d02a      	beq.n	8003e36 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6818      	ldr	r0, [r3, #0]
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	6959      	ldr	r1, [r3, #20]
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	891a      	ldrh	r2, [r3, #8]
 8003dec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003dee:	f004 f8b6 	bl	8007f5e <USB_ReadPMA>
 8003df2:	e020      	b.n	8003e36 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	461a      	mov	r2, r3
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	4413      	add	r3, r2
 8003e08:	3306      	adds	r3, #6
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6812      	ldr	r2, [r2, #0]
 8003e10:	4413      	add	r3, r2
 8003e12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e1c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003e1e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d008      	beq.n	8003e36 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6818      	ldr	r0, [r3, #0]
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	6959      	ldr	r1, [r3, #20]
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	895a      	ldrh	r2, [r3, #10]
 8003e30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e32:	f004 f894 	bl	8007f5e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	69da      	ldr	r2, [r3, #28]
 8003e3a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e3c:	441a      	add	r2, r3
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	695a      	ldr	r2, [r3, #20]
 8003e46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e48:	441a      	add	r2, r3
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d004      	beq.n	8003e60 <PCD_EP_ISR_Handler+0x4b0>
 8003e56:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d206      	bcs.n	8003e6e <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	4619      	mov	r1, r3
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7ff fd3a 	bl	80038e0 <HAL_PCD_DataOutStageCallback>
 8003e6c:	e005      	b.n	8003e7a <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e74:	4618      	mov	r0, r3
 8003e76:	f002 fee1 	bl	8006c3c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003e7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d07a      	beq.n	8003f7a <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8003e84:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003e88:	1c5a      	adds	r2, r3, #1
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	4413      	add	r3, r2
 8003e96:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb2:	843b      	strh	r3, [r7, #32]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	441a      	add	r2, r3
 8003ec2:	8c3b      	ldrh	r3, [r7, #32]
 8003ec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	78db      	ldrb	r3, [r3, #3]
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d108      	bne.n	8003eea <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d146      	bne.n	8003f6e <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003ee0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d141      	bne.n	8003f6e <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	4413      	add	r3, r2
 8003efe:	3302      	adds	r3, #2
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6812      	ldr	r2, [r2, #0]
 8003f06:	4413      	add	r3, r2
 8003f08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f12:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	699a      	ldr	r2, [r3, #24]
 8003f18:	8bfb      	ldrh	r3, [r7, #30]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d906      	bls.n	8003f2c <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	699a      	ldr	r2, [r3, #24]
 8003f22:	8bfb      	ldrh	r3, [r7, #30]
 8003f24:	1ad2      	subs	r2, r2, r3
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	619a      	str	r2, [r3, #24]
 8003f2a:	e002      	b.n	8003f32 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	2200      	movs	r2, #0
 8003f30:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d106      	bne.n	8003f48 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	4619      	mov	r1, r3
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7ff fcd8 	bl	80038f6 <HAL_PCD_DataInStageCallback>
 8003f46:	e018      	b.n	8003f7a <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	695a      	ldr	r2, [r3, #20]
 8003f4c:	8bfb      	ldrh	r3, [r7, #30]
 8003f4e:	441a      	add	r2, r3
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	69da      	ldr	r2, [r3, #28]
 8003f58:	8bfb      	ldrh	r3, [r7, #30]
 8003f5a:	441a      	add	r2, r3
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f66:	4618      	mov	r0, r3
 8003f68:	f002 fe68 	bl	8006c3c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003f6c:	e005      	b.n	8003f7a <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003f6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003f70:	461a      	mov	r2, r3
 8003f72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f91b 	bl	80041b0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	b21b      	sxth	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f6ff ad17 	blt.w	80039ba <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3738      	adds	r7, #56	; 0x38
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b088      	sub	sp, #32
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003fa4:	88fb      	ldrh	r3, [r7, #6]
 8003fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d07e      	beq.n	80040ac <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	461a      	mov	r2, r3
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	3302      	adds	r3, #2
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	6812      	ldr	r2, [r2, #0]
 8003fca:	4413      	add	r3, r2
 8003fcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fd6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	699a      	ldr	r2, [r3, #24]
 8003fdc:	8b7b      	ldrh	r3, [r7, #26]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d306      	bcc.n	8003ff0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	699a      	ldr	r2, [r3, #24]
 8003fe6:	8b7b      	ldrh	r3, [r7, #26]
 8003fe8:	1ad2      	subs	r2, r2, r3
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	619a      	str	r2, [r3, #24]
 8003fee:	e002      	b.n	8003ff6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d123      	bne.n	8004046 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	461a      	mov	r2, r3
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	881b      	ldrh	r3, [r3, #0]
 800400e:	b29b      	uxth	r3, r3
 8004010:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004018:	833b      	strh	r3, [r7, #24]
 800401a:	8b3b      	ldrh	r3, [r7, #24]
 800401c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004020:	833b      	strh	r3, [r7, #24]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	461a      	mov	r2, r3
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	441a      	add	r2, r3
 8004030:	8b3b      	ldrh	r3, [r7, #24]
 8004032:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004036:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800403a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800403e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004042:	b29b      	uxth	r3, r3
 8004044:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004046:	88fb      	ldrh	r3, [r7, #6]
 8004048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404c:	2b00      	cmp	r3, #0
 800404e:	d01f      	beq.n	8004090 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	461a      	mov	r2, r3
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4413      	add	r3, r2
 800405e:	881b      	ldrh	r3, [r3, #0]
 8004060:	b29b      	uxth	r3, r3
 8004062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800406a:	82fb      	strh	r3, [r7, #22]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	461a      	mov	r2, r3
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	441a      	add	r2, r3
 800407a:	8afb      	ldrh	r3, [r7, #22]
 800407c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004080:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004084:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004088:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800408c:	b29b      	uxth	r3, r3
 800408e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004090:	8b7b      	ldrh	r3, [r7, #26]
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 8087 	beq.w	80041a6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6818      	ldr	r0, [r3, #0]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	6959      	ldr	r1, [r3, #20]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	891a      	ldrh	r2, [r3, #8]
 80040a4:	8b7b      	ldrh	r3, [r7, #26]
 80040a6:	f003 ff5a 	bl	8007f5e <USB_ReadPMA>
 80040aa:	e07c      	b.n	80041a6 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	461a      	mov	r2, r3
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	4413      	add	r3, r2
 80040c0:	3306      	adds	r3, #6
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	6812      	ldr	r2, [r2, #0]
 80040c8:	4413      	add	r3, r2
 80040ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040d4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	699a      	ldr	r2, [r3, #24]
 80040da:	8b7b      	ldrh	r3, [r7, #26]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d306      	bcc.n	80040ee <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	699a      	ldr	r2, [r3, #24]
 80040e4:	8b7b      	ldrh	r3, [r7, #26]
 80040e6:	1ad2      	subs	r2, r2, r3
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	619a      	str	r2, [r3, #24]
 80040ec:	e002      	b.n	80040f4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2200      	movs	r2, #0
 80040f2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d123      	bne.n	8004144 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	461a      	mov	r2, r3
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	b29b      	uxth	r3, r3
 800410e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004116:	83fb      	strh	r3, [r7, #30]
 8004118:	8bfb      	ldrh	r3, [r7, #30]
 800411a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800411e:	83fb      	strh	r3, [r7, #30]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	461a      	mov	r2, r3
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	441a      	add	r2, r3
 800412e:	8bfb      	ldrh	r3, [r7, #30]
 8004130:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004134:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800413c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004140:	b29b      	uxth	r3, r3
 8004142:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004144:	88fb      	ldrh	r3, [r7, #6]
 8004146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414a:	2b00      	cmp	r3, #0
 800414c:	d11f      	bne.n	800418e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	461a      	mov	r2, r3
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	b29b      	uxth	r3, r3
 8004160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004168:	83bb      	strh	r3, [r7, #28]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	461a      	mov	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	441a      	add	r2, r3
 8004178:	8bbb      	ldrh	r3, [r7, #28]
 800417a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800417e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004186:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800418a:	b29b      	uxth	r3, r3
 800418c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800418e:	8b7b      	ldrh	r3, [r7, #26]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d008      	beq.n	80041a6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6818      	ldr	r0, [r3, #0]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	6959      	ldr	r1, [r3, #20]
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	895a      	ldrh	r2, [r3, #10]
 80041a0:	8b7b      	ldrh	r3, [r7, #26]
 80041a2:	f003 fedc 	bl	8007f5e <USB_ReadPMA>
    }
  }

  return count;
 80041a6:	8b7b      	ldrh	r3, [r7, #26]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3720      	adds	r7, #32
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b094      	sub	sp, #80	; 0x50
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	4613      	mov	r3, r2
 80041bc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80041be:	88fb      	ldrh	r3, [r7, #6]
 80041c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 8138 	beq.w	800443a <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	461a      	mov	r2, r3
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	4413      	add	r3, r2
 80041de:	3302      	adds	r3, #2
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	6812      	ldr	r2, [r2, #0]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041f2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	699a      	ldr	r2, [r3, #24]
 80041fa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80041fe:	429a      	cmp	r2, r3
 8004200:	d907      	bls.n	8004212 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	699a      	ldr	r2, [r3, #24]
 8004206:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800420a:	1ad2      	subs	r2, r2, r3
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	619a      	str	r2, [r3, #24]
 8004210:	e002      	b.n	8004218 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	2200      	movs	r2, #0
 8004216:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d12c      	bne.n	800427a <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	4619      	mov	r1, r3
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f7ff fb65 	bl	80038f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800422c:	88fb      	ldrh	r3, [r7, #6]
 800422e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 823a 	beq.w	80046ac <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	461a      	mov	r2, r3
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	881b      	ldrh	r3, [r3, #0]
 8004248:	b29b      	uxth	r3, r3
 800424a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800424e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004252:	82fb      	strh	r3, [r7, #22]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	461a      	mov	r2, r3
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	441a      	add	r2, r3
 8004262:	8afb      	ldrh	r3, [r7, #22]
 8004264:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004268:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800426c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004274:	b29b      	uxth	r3, r3
 8004276:	8013      	strh	r3, [r2, #0]
 8004278:	e218      	b.n	80046ac <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800427a:	88fb      	ldrh	r3, [r7, #6]
 800427c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d01f      	beq.n	80042c4 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	461a      	mov	r2, r3
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	881b      	ldrh	r3, [r3, #0]
 8004294:	b29b      	uxth	r3, r3
 8004296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800429a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800429e:	857b      	strh	r3, [r7, #42]	; 0x2a
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	461a      	mov	r2, r3
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	441a      	add	r2, r3
 80042ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80042b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	f040 81ee 	bne.w	80046ac <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	695a      	ldr	r2, [r3, #20]
 80042d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80042d8:	441a      	add	r2, r3
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	69da      	ldr	r2, [r3, #28]
 80042e2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80042e6:	441a      	add	r2, r3
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	6a1a      	ldr	r2, [r3, #32]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d309      	bcc.n	800430c <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	6a1a      	ldr	r2, [r3, #32]
 8004302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004304:	1ad2      	subs	r2, r2, r3
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	621a      	str	r2, [r3, #32]
 800430a:	e015      	b.n	8004338 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d107      	bne.n	8004324 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8004314:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004318:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004322:	e009      	b.n	8004338 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2200      	movs	r2, #0
 8004336:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	785b      	ldrb	r3, [r3, #1]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d155      	bne.n	80043ec <HAL_PCD_EP_DB_Transmit+0x23c>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	61fb      	str	r3, [r7, #28]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800434e:	b29b      	uxth	r3, r3
 8004350:	461a      	mov	r2, r3
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	4413      	add	r3, r2
 8004356:	61fb      	str	r3, [r7, #28]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	011a      	lsls	r2, r3, #4
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	4413      	add	r3, r2
 8004362:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004366:	61bb      	str	r3, [r7, #24]
 8004368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800436a:	2b00      	cmp	r3, #0
 800436c:	d112      	bne.n	8004394 <HAL_PCD_EP_DB_Transmit+0x1e4>
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	b29b      	uxth	r3, r3
 8004374:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004378:	b29a      	uxth	r2, r3
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	801a      	strh	r2, [r3, #0]
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	b29b      	uxth	r3, r3
 8004384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800438c:	b29a      	uxth	r2, r3
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	801a      	strh	r2, [r3, #0]
 8004392:	e047      	b.n	8004424 <HAL_PCD_EP_DB_Transmit+0x274>
 8004394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004396:	2b3e      	cmp	r3, #62	; 0x3e
 8004398:	d811      	bhi.n	80043be <HAL_PCD_EP_DB_Transmit+0x20e>
 800439a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800439c:	085b      	lsrs	r3, r3, #1
 800439e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d002      	beq.n	80043b0 <HAL_PCD_EP_DB_Transmit+0x200>
 80043aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ac:	3301      	adds	r3, #1
 80043ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	029b      	lsls	r3, r3, #10
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	801a      	strh	r2, [r3, #0]
 80043bc:	e032      	b.n	8004424 <HAL_PCD_EP_DB_Transmit+0x274>
 80043be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043c0:	095b      	lsrs	r3, r3, #5
 80043c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043c6:	f003 031f 	and.w	r3, r3, #31
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d102      	bne.n	80043d4 <HAL_PCD_EP_DB_Transmit+0x224>
 80043ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d0:	3b01      	subs	r3, #1
 80043d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	029b      	lsls	r3, r3, #10
 80043da:	b29b      	uxth	r3, r3
 80043dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	801a      	strh	r2, [r3, #0]
 80043ea:	e01b      	b.n	8004424 <HAL_PCD_EP_DB_Transmit+0x274>
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	785b      	ldrb	r3, [r3, #1]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d117      	bne.n	8004424 <HAL_PCD_EP_DB_Transmit+0x274>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004402:	b29b      	uxth	r3, r3
 8004404:	461a      	mov	r2, r3
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	4413      	add	r3, r2
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	011a      	lsls	r2, r3, #4
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	4413      	add	r3, r2
 8004416:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800441a:	623b      	str	r3, [r7, #32]
 800441c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800441e:	b29a      	uxth	r2, r3
 8004420:	6a3b      	ldr	r3, [r7, #32]
 8004422:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6818      	ldr	r0, [r3, #0]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	6959      	ldr	r1, [r3, #20]
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	891a      	ldrh	r2, [r3, #8]
 8004430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004432:	b29b      	uxth	r3, r3
 8004434:	f003 fd4e 	bl	8007ed4 <USB_WritePMA>
 8004438:	e138      	b.n	80046ac <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004442:	b29b      	uxth	r3, r3
 8004444:	461a      	mov	r2, r3
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	4413      	add	r3, r2
 800444e:	3306      	adds	r3, #6
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	6812      	ldr	r2, [r2, #0]
 8004456:	4413      	add	r3, r2
 8004458:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004462:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	699a      	ldr	r2, [r3, #24]
 800446a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800446e:	429a      	cmp	r2, r3
 8004470:	d307      	bcc.n	8004482 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	699a      	ldr	r2, [r3, #24]
 8004476:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800447a:	1ad2      	subs	r2, r2, r3
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	619a      	str	r2, [r3, #24]
 8004480:	e002      	b.n	8004488 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2200      	movs	r2, #0
 8004486:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d12e      	bne.n	80044ee <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	4619      	mov	r1, r3
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f7ff fa2d 	bl	80038f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800449c:	88fb      	ldrh	r3, [r7, #6]
 800449e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f040 8102 	bne.w	80046ac <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	461a      	mov	r2, r3
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	881b      	ldrh	r3, [r3, #0]
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	461a      	mov	r2, r3
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	441a      	add	r2, r3
 80044d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80044d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	8013      	strh	r3, [r2, #0]
 80044ec:	e0de      	b.n	80046ac <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80044ee:	88fb      	ldrh	r3, [r7, #6]
 80044f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d11f      	bne.n	8004538 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	461a      	mov	r2, r3
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	b29b      	uxth	r3, r3
 800450a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800450e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004512:	867b      	strh	r3, [r7, #50]	; 0x32
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	461a      	mov	r2, r3
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	441a      	add	r2, r3
 8004522:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004524:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004528:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800452c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004534:	b29b      	uxth	r3, r3
 8004536:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800453e:	2b01      	cmp	r3, #1
 8004540:	f040 80b4 	bne.w	80046ac <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	695a      	ldr	r2, [r3, #20]
 8004548:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800454c:	441a      	add	r2, r3
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	69da      	ldr	r2, [r3, #28]
 8004556:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800455a:	441a      	add	r2, r3
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	6a1a      	ldr	r2, [r3, #32]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	429a      	cmp	r2, r3
 800456a:	d309      	bcc.n	8004580 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	6a1a      	ldr	r2, [r3, #32]
 8004576:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004578:	1ad2      	subs	r2, r2, r3
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	621a      	str	r2, [r3, #32]
 800457e:	e015      	b.n	80045ac <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d107      	bne.n	8004598 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8004588:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800458c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004596:	e009      	b.n	80045ac <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2200      	movs	r2, #0
 80045a2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	643b      	str	r3, [r7, #64]	; 0x40
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	785b      	ldrb	r3, [r3, #1]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d155      	bne.n	8004666 <HAL_PCD_EP_DB_Transmit+0x4b6>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	63bb      	str	r3, [r7, #56]	; 0x38
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	461a      	mov	r2, r3
 80045cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ce:	4413      	add	r3, r2
 80045d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	011a      	lsls	r2, r3, #4
 80045d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045da:	4413      	add	r3, r2
 80045dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045e0:	637b      	str	r3, [r7, #52]	; 0x34
 80045e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d112      	bne.n	800460e <HAL_PCD_EP_DB_Transmit+0x45e>
 80045e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ea:	881b      	ldrh	r3, [r3, #0]
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045f6:	801a      	strh	r2, [r3, #0]
 80045f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004602:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004606:	b29a      	uxth	r2, r3
 8004608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800460a:	801a      	strh	r2, [r3, #0]
 800460c:	e044      	b.n	8004698 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800460e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004610:	2b3e      	cmp	r3, #62	; 0x3e
 8004612:	d811      	bhi.n	8004638 <HAL_PCD_EP_DB_Transmit+0x488>
 8004614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004616:	085b      	lsrs	r3, r3, #1
 8004618:	64fb      	str	r3, [r7, #76]	; 0x4c
 800461a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b00      	cmp	r3, #0
 8004622:	d002      	beq.n	800462a <HAL_PCD_EP_DB_Transmit+0x47a>
 8004624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004626:	3301      	adds	r3, #1
 8004628:	64fb      	str	r3, [r7, #76]	; 0x4c
 800462a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800462c:	b29b      	uxth	r3, r3
 800462e:	029b      	lsls	r3, r3, #10
 8004630:	b29a      	uxth	r2, r3
 8004632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004634:	801a      	strh	r2, [r3, #0]
 8004636:	e02f      	b.n	8004698 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800463a:	095b      	lsrs	r3, r3, #5
 800463c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800463e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004640:	f003 031f 	and.w	r3, r3, #31
 8004644:	2b00      	cmp	r3, #0
 8004646:	d102      	bne.n	800464e <HAL_PCD_EP_DB_Transmit+0x49e>
 8004648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800464a:	3b01      	subs	r3, #1
 800464c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800464e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004650:	b29b      	uxth	r3, r3
 8004652:	029b      	lsls	r3, r3, #10
 8004654:	b29b      	uxth	r3, r3
 8004656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800465a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800465e:	b29a      	uxth	r2, r3
 8004660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004662:	801a      	strh	r2, [r3, #0]
 8004664:	e018      	b.n	8004698 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	785b      	ldrb	r3, [r3, #1]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d114      	bne.n	8004698 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004676:	b29b      	uxth	r3, r3
 8004678:	461a      	mov	r2, r3
 800467a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800467c:	4413      	add	r3, r2
 800467e:	643b      	str	r3, [r7, #64]	; 0x40
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	011a      	lsls	r2, r3, #4
 8004686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004688:	4413      	add	r3, r2
 800468a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800468e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004692:	b29a      	uxth	r2, r3
 8004694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004696:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6818      	ldr	r0, [r3, #0]
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	6959      	ldr	r1, [r3, #20]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	895a      	ldrh	r2, [r3, #10]
 80046a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	f003 fc14 	bl	8007ed4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	461a      	mov	r2, r3
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	b29b      	uxth	r3, r3
 80046be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046c6:	82bb      	strh	r3, [r7, #20]
 80046c8:	8abb      	ldrh	r3, [r7, #20]
 80046ca:	f083 0310 	eor.w	r3, r3, #16
 80046ce:	82bb      	strh	r3, [r7, #20]
 80046d0:	8abb      	ldrh	r3, [r7, #20]
 80046d2:	f083 0320 	eor.w	r3, r3, #32
 80046d6:	82bb      	strh	r3, [r7, #20]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	461a      	mov	r2, r3
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	441a      	add	r2, r3
 80046e6:	8abb      	ldrh	r3, [r7, #20]
 80046e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3750      	adds	r7, #80	; 0x50
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
	...

08004708 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004708:	b480      	push	{r7}
 800470a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800470c:	4b03      	ldr	r3, [pc, #12]	; (800471c <HAL_PWR_EnableBkUpAccess+0x14>)
 800470e:	2201      	movs	r2, #1
 8004710:	601a      	str	r2, [r3, #0]
}
 8004712:	bf00      	nop
 8004714:	46bd      	mov	sp, r7
 8004716:	bc80      	pop	{r7}
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	420e0020 	.word	0x420e0020

08004720 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8004724:	4b06      	ldr	r3, [pc, #24]	; (8004740 <HAL_PWR_PVD_IRQHandler+0x20>)
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8004730:	f000 f808 	bl	8004744 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8004734:	4b02      	ldr	r3, [pc, #8]	; (8004740 <HAL_PWR_PVD_IRQHandler+0x20>)
 8004736:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800473a:	615a      	str	r2, [r3, #20]
  }
}
 800473c:	bf00      	nop
 800473e:	bd80      	pop	{r7, pc}
 8004740:	40010400 	.word	0x40010400

08004744 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8004748:	bf00      	nop
 800474a:	46bd      	mov	sp, r7
 800474c:	bc80      	pop	{r7}
 800474e:	4770      	bx	lr

08004750 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e26c      	b.n	8004c3c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 8087 	beq.w	800487e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004770:	4b92      	ldr	r3, [pc, #584]	; (80049bc <HAL_RCC_OscConfig+0x26c>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f003 030c 	and.w	r3, r3, #12
 8004778:	2b04      	cmp	r3, #4
 800477a:	d00c      	beq.n	8004796 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800477c:	4b8f      	ldr	r3, [pc, #572]	; (80049bc <HAL_RCC_OscConfig+0x26c>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f003 030c 	and.w	r3, r3, #12
 8004784:	2b08      	cmp	r3, #8
 8004786:	d112      	bne.n	80047ae <HAL_RCC_OscConfig+0x5e>
 8004788:	4b8c      	ldr	r3, [pc, #560]	; (80049bc <HAL_RCC_OscConfig+0x26c>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004794:	d10b      	bne.n	80047ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004796:	4b89      	ldr	r3, [pc, #548]	; (80049bc <HAL_RCC_OscConfig+0x26c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d06c      	beq.n	800487c <HAL_RCC_OscConfig+0x12c>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d168      	bne.n	800487c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e246      	b.n	8004c3c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047b6:	d106      	bne.n	80047c6 <HAL_RCC_OscConfig+0x76>
 80047b8:	4b80      	ldr	r3, [pc, #512]	; (80049bc <HAL_RCC_OscConfig+0x26c>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a7f      	ldr	r2, [pc, #508]	; (80049bc <HAL_RCC_OscConfig+0x26c>)
 80047be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047c2:	6013      	str	r3, [r2, #0]
 80047c4:	e02e      	b.n	8004824 <HAL_RCC_OscConfig+0xd4>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10c      	bne.n	80047e8 <HAL_RCC_OscConfig+0x98>
 80047ce:	4b7b      	ldr	r3, [pc, #492]	; (80049bc <HAL_RCC_OscConfig+0x26c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a7a      	ldr	r2, [pc, #488]	; (80049bc <HAL_RCC_OscConfig+0x26c>)
 80047d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047d8:	6013      	str	r3, [r2, #0]
 80047da:	4b78      	ldr	r3, [pc, #480]	; (80049bc <HAL_RCC_OscConfig+0x26c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a77      	ldr	r2, [pc, #476]	; (80049bc <HAL_RCC_OscConfig+0x26c>)
 80047e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047e4:	6013      	str	r3, [r2, #0]
 80047e6:	e01d      	b.n	8004824 <HAL_RCC_OscConfig+0xd4>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047f0:	d10c      	bne.n	800480c <HAL_RCC_OscConfig+0xbc>
 80047f2:	4b72      	ldr	r3, [pc, #456]	; (80049bc <HAL_RCC_OscConfig+0x26c>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a71      	ldr	r2, [pc, #452]	; (80049bc <HAL_RCC_OscConfig+0x26c>)
 80047f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	4b6f      	ldr	r3, [pc, #444]	; (80049bc <HAL_RCC_OscConfig+0x26c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a6e      	ldr	r2, [pc, #440]	; (80049bc <HAL_RCC_OscConfig+0x26c>)
 8004804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004808:	6013      	str	r3, [r2, #0]
 800480a:	e00b      	b.n	8004824 <HAL_RCC_OscConfig+0xd4>
 800480c:	4b6b      	ldr	r3, [pc, #428]	; (80049bc <HAL_RCC_OscConfig+0x26c>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a6a      	ldr	r2, [pc, #424]	; (80049bc <HAL_RCC_OscConfig+0x26c>)
 8004812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004816:	6013      	str	r3, [r2, #0]
 8004818:	4b68      	ldr	r3, [pc, #416]	; (80049bc <HAL_RCC_OscConfig+0x26c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a67      	ldr	r2, [pc, #412]	; (80049bc <HAL_RCC_OscConfig+0x26c>)
 800481e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004822:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d013      	beq.n	8004854 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800482c:	f7fd ffc8 	bl	80027c0 <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004834:	f7fd ffc4 	bl	80027c0 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b64      	cmp	r3, #100	; 0x64
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e1fa      	b.n	8004c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004846:	4b5d      	ldr	r3, [pc, #372]	; (80049bc <HAL_RCC_OscConfig+0x26c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0f0      	beq.n	8004834 <HAL_RCC_OscConfig+0xe4>
 8004852:	e014      	b.n	800487e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004854:	f7fd ffb4 	bl	80027c0 <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800485c:	f7fd ffb0 	bl	80027c0 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b64      	cmp	r3, #100	; 0x64
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e1e6      	b.n	8004c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800486e:	4b53      	ldr	r3, [pc, #332]	; (80049bc <HAL_RCC_OscConfig+0x26c>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1f0      	bne.n	800485c <HAL_RCC_OscConfig+0x10c>
 800487a:	e000      	b.n	800487e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800487c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d063      	beq.n	8004952 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800488a:	4b4c      	ldr	r3, [pc, #304]	; (80049bc <HAL_RCC_OscConfig+0x26c>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f003 030c 	and.w	r3, r3, #12
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00b      	beq.n	80048ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004896:	4b49      	ldr	r3, [pc, #292]	; (80049bc <HAL_RCC_OscConfig+0x26c>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f003 030c 	and.w	r3, r3, #12
 800489e:	2b08      	cmp	r3, #8
 80048a0:	d11c      	bne.n	80048dc <HAL_RCC_OscConfig+0x18c>
 80048a2:	4b46      	ldr	r3, [pc, #280]	; (80049bc <HAL_RCC_OscConfig+0x26c>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d116      	bne.n	80048dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ae:	4b43      	ldr	r3, [pc, #268]	; (80049bc <HAL_RCC_OscConfig+0x26c>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d005      	beq.n	80048c6 <HAL_RCC_OscConfig+0x176>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d001      	beq.n	80048c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e1ba      	b.n	8004c3c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048c6:	4b3d      	ldr	r3, [pc, #244]	; (80049bc <HAL_RCC_OscConfig+0x26c>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	4939      	ldr	r1, [pc, #228]	; (80049bc <HAL_RCC_OscConfig+0x26c>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048da:	e03a      	b.n	8004952 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d020      	beq.n	8004926 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048e4:	4b36      	ldr	r3, [pc, #216]	; (80049c0 <HAL_RCC_OscConfig+0x270>)
 80048e6:	2201      	movs	r2, #1
 80048e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ea:	f7fd ff69 	bl	80027c0 <HAL_GetTick>
 80048ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f0:	e008      	b.n	8004904 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048f2:	f7fd ff65 	bl	80027c0 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e19b      	b.n	8004c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004904:	4b2d      	ldr	r3, [pc, #180]	; (80049bc <HAL_RCC_OscConfig+0x26c>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0f0      	beq.n	80048f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004910:	4b2a      	ldr	r3, [pc, #168]	; (80049bc <HAL_RCC_OscConfig+0x26c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	00db      	lsls	r3, r3, #3
 800491e:	4927      	ldr	r1, [pc, #156]	; (80049bc <HAL_RCC_OscConfig+0x26c>)
 8004920:	4313      	orrs	r3, r2
 8004922:	600b      	str	r3, [r1, #0]
 8004924:	e015      	b.n	8004952 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004926:	4b26      	ldr	r3, [pc, #152]	; (80049c0 <HAL_RCC_OscConfig+0x270>)
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800492c:	f7fd ff48 	bl	80027c0 <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004934:	f7fd ff44 	bl	80027c0 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e17a      	b.n	8004c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004946:	4b1d      	ldr	r3, [pc, #116]	; (80049bc <HAL_RCC_OscConfig+0x26c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1f0      	bne.n	8004934 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0308 	and.w	r3, r3, #8
 800495a:	2b00      	cmp	r3, #0
 800495c:	d03a      	beq.n	80049d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d019      	beq.n	800499a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004966:	4b17      	ldr	r3, [pc, #92]	; (80049c4 <HAL_RCC_OscConfig+0x274>)
 8004968:	2201      	movs	r2, #1
 800496a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800496c:	f7fd ff28 	bl	80027c0 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004974:	f7fd ff24 	bl	80027c0 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e15a      	b.n	8004c3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004986:	4b0d      	ldr	r3, [pc, #52]	; (80049bc <HAL_RCC_OscConfig+0x26c>)
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0f0      	beq.n	8004974 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004992:	2001      	movs	r0, #1
 8004994:	f000 fad8 	bl	8004f48 <RCC_Delay>
 8004998:	e01c      	b.n	80049d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800499a:	4b0a      	ldr	r3, [pc, #40]	; (80049c4 <HAL_RCC_OscConfig+0x274>)
 800499c:	2200      	movs	r2, #0
 800499e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049a0:	f7fd ff0e 	bl	80027c0 <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049a6:	e00f      	b.n	80049c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049a8:	f7fd ff0a 	bl	80027c0 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d908      	bls.n	80049c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e140      	b.n	8004c3c <HAL_RCC_OscConfig+0x4ec>
 80049ba:	bf00      	nop
 80049bc:	40021000 	.word	0x40021000
 80049c0:	42420000 	.word	0x42420000
 80049c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049c8:	4b9e      	ldr	r3, [pc, #632]	; (8004c44 <HAL_RCC_OscConfig+0x4f4>)
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1e9      	bne.n	80049a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 80a6 	beq.w	8004b2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049e2:	2300      	movs	r3, #0
 80049e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049e6:	4b97      	ldr	r3, [pc, #604]	; (8004c44 <HAL_RCC_OscConfig+0x4f4>)
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10d      	bne.n	8004a0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049f2:	4b94      	ldr	r3, [pc, #592]	; (8004c44 <HAL_RCC_OscConfig+0x4f4>)
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	4a93      	ldr	r2, [pc, #588]	; (8004c44 <HAL_RCC_OscConfig+0x4f4>)
 80049f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049fc:	61d3      	str	r3, [r2, #28]
 80049fe:	4b91      	ldr	r3, [pc, #580]	; (8004c44 <HAL_RCC_OscConfig+0x4f4>)
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a06:	60bb      	str	r3, [r7, #8]
 8004a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a0e:	4b8e      	ldr	r3, [pc, #568]	; (8004c48 <HAL_RCC_OscConfig+0x4f8>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d118      	bne.n	8004a4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a1a:	4b8b      	ldr	r3, [pc, #556]	; (8004c48 <HAL_RCC_OscConfig+0x4f8>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a8a      	ldr	r2, [pc, #552]	; (8004c48 <HAL_RCC_OscConfig+0x4f8>)
 8004a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a26:	f7fd fecb 	bl	80027c0 <HAL_GetTick>
 8004a2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a2c:	e008      	b.n	8004a40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a2e:	f7fd fec7 	bl	80027c0 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	2b64      	cmp	r3, #100	; 0x64
 8004a3a:	d901      	bls.n	8004a40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e0fd      	b.n	8004c3c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a40:	4b81      	ldr	r3, [pc, #516]	; (8004c48 <HAL_RCC_OscConfig+0x4f8>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0f0      	beq.n	8004a2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d106      	bne.n	8004a62 <HAL_RCC_OscConfig+0x312>
 8004a54:	4b7b      	ldr	r3, [pc, #492]	; (8004c44 <HAL_RCC_OscConfig+0x4f4>)
 8004a56:	6a1b      	ldr	r3, [r3, #32]
 8004a58:	4a7a      	ldr	r2, [pc, #488]	; (8004c44 <HAL_RCC_OscConfig+0x4f4>)
 8004a5a:	f043 0301 	orr.w	r3, r3, #1
 8004a5e:	6213      	str	r3, [r2, #32]
 8004a60:	e02d      	b.n	8004abe <HAL_RCC_OscConfig+0x36e>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10c      	bne.n	8004a84 <HAL_RCC_OscConfig+0x334>
 8004a6a:	4b76      	ldr	r3, [pc, #472]	; (8004c44 <HAL_RCC_OscConfig+0x4f4>)
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	4a75      	ldr	r2, [pc, #468]	; (8004c44 <HAL_RCC_OscConfig+0x4f4>)
 8004a70:	f023 0301 	bic.w	r3, r3, #1
 8004a74:	6213      	str	r3, [r2, #32]
 8004a76:	4b73      	ldr	r3, [pc, #460]	; (8004c44 <HAL_RCC_OscConfig+0x4f4>)
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	4a72      	ldr	r2, [pc, #456]	; (8004c44 <HAL_RCC_OscConfig+0x4f4>)
 8004a7c:	f023 0304 	bic.w	r3, r3, #4
 8004a80:	6213      	str	r3, [r2, #32]
 8004a82:	e01c      	b.n	8004abe <HAL_RCC_OscConfig+0x36e>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	2b05      	cmp	r3, #5
 8004a8a:	d10c      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x356>
 8004a8c:	4b6d      	ldr	r3, [pc, #436]	; (8004c44 <HAL_RCC_OscConfig+0x4f4>)
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	4a6c      	ldr	r2, [pc, #432]	; (8004c44 <HAL_RCC_OscConfig+0x4f4>)
 8004a92:	f043 0304 	orr.w	r3, r3, #4
 8004a96:	6213      	str	r3, [r2, #32]
 8004a98:	4b6a      	ldr	r3, [pc, #424]	; (8004c44 <HAL_RCC_OscConfig+0x4f4>)
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	4a69      	ldr	r2, [pc, #420]	; (8004c44 <HAL_RCC_OscConfig+0x4f4>)
 8004a9e:	f043 0301 	orr.w	r3, r3, #1
 8004aa2:	6213      	str	r3, [r2, #32]
 8004aa4:	e00b      	b.n	8004abe <HAL_RCC_OscConfig+0x36e>
 8004aa6:	4b67      	ldr	r3, [pc, #412]	; (8004c44 <HAL_RCC_OscConfig+0x4f4>)
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	4a66      	ldr	r2, [pc, #408]	; (8004c44 <HAL_RCC_OscConfig+0x4f4>)
 8004aac:	f023 0301 	bic.w	r3, r3, #1
 8004ab0:	6213      	str	r3, [r2, #32]
 8004ab2:	4b64      	ldr	r3, [pc, #400]	; (8004c44 <HAL_RCC_OscConfig+0x4f4>)
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	4a63      	ldr	r2, [pc, #396]	; (8004c44 <HAL_RCC_OscConfig+0x4f4>)
 8004ab8:	f023 0304 	bic.w	r3, r3, #4
 8004abc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d015      	beq.n	8004af2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ac6:	f7fd fe7b 	bl	80027c0 <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004acc:	e00a      	b.n	8004ae4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ace:	f7fd fe77 	bl	80027c0 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e0ab      	b.n	8004c3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae4:	4b57      	ldr	r3, [pc, #348]	; (8004c44 <HAL_RCC_OscConfig+0x4f4>)
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0ee      	beq.n	8004ace <HAL_RCC_OscConfig+0x37e>
 8004af0:	e014      	b.n	8004b1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004af2:	f7fd fe65 	bl	80027c0 <HAL_GetTick>
 8004af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004af8:	e00a      	b.n	8004b10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004afa:	f7fd fe61 	bl	80027c0 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e095      	b.n	8004c3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b10:	4b4c      	ldr	r3, [pc, #304]	; (8004c44 <HAL_RCC_OscConfig+0x4f4>)
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1ee      	bne.n	8004afa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b1c:	7dfb      	ldrb	r3, [r7, #23]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d105      	bne.n	8004b2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b22:	4b48      	ldr	r3, [pc, #288]	; (8004c44 <HAL_RCC_OscConfig+0x4f4>)
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	4a47      	ldr	r2, [pc, #284]	; (8004c44 <HAL_RCC_OscConfig+0x4f4>)
 8004b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f000 8081 	beq.w	8004c3a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b38:	4b42      	ldr	r3, [pc, #264]	; (8004c44 <HAL_RCC_OscConfig+0x4f4>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f003 030c 	and.w	r3, r3, #12
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	d061      	beq.n	8004c08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	69db      	ldr	r3, [r3, #28]
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d146      	bne.n	8004bda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b4c:	4b3f      	ldr	r3, [pc, #252]	; (8004c4c <HAL_RCC_OscConfig+0x4fc>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b52:	f7fd fe35 	bl	80027c0 <HAL_GetTick>
 8004b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b58:	e008      	b.n	8004b6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b5a:	f7fd fe31 	bl	80027c0 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e067      	b.n	8004c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b6c:	4b35      	ldr	r3, [pc, #212]	; (8004c44 <HAL_RCC_OscConfig+0x4f4>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1f0      	bne.n	8004b5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b80:	d108      	bne.n	8004b94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b82:	4b30      	ldr	r3, [pc, #192]	; (8004c44 <HAL_RCC_OscConfig+0x4f4>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	492d      	ldr	r1, [pc, #180]	; (8004c44 <HAL_RCC_OscConfig+0x4f4>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b94:	4b2b      	ldr	r3, [pc, #172]	; (8004c44 <HAL_RCC_OscConfig+0x4f4>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a19      	ldr	r1, [r3, #32]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	430b      	orrs	r3, r1
 8004ba6:	4927      	ldr	r1, [pc, #156]	; (8004c44 <HAL_RCC_OscConfig+0x4f4>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bac:	4b27      	ldr	r3, [pc, #156]	; (8004c4c <HAL_RCC_OscConfig+0x4fc>)
 8004bae:	2201      	movs	r2, #1
 8004bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb2:	f7fd fe05 	bl	80027c0 <HAL_GetTick>
 8004bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bb8:	e008      	b.n	8004bcc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bba:	f7fd fe01 	bl	80027c0 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d901      	bls.n	8004bcc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e037      	b.n	8004c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bcc:	4b1d      	ldr	r3, [pc, #116]	; (8004c44 <HAL_RCC_OscConfig+0x4f4>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d0f0      	beq.n	8004bba <HAL_RCC_OscConfig+0x46a>
 8004bd8:	e02f      	b.n	8004c3a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bda:	4b1c      	ldr	r3, [pc, #112]	; (8004c4c <HAL_RCC_OscConfig+0x4fc>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be0:	f7fd fdee 	bl	80027c0 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004be8:	f7fd fdea 	bl	80027c0 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e020      	b.n	8004c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bfa:	4b12      	ldr	r3, [pc, #72]	; (8004c44 <HAL_RCC_OscConfig+0x4f4>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1f0      	bne.n	8004be8 <HAL_RCC_OscConfig+0x498>
 8004c06:	e018      	b.n	8004c3a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	69db      	ldr	r3, [r3, #28]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d101      	bne.n	8004c14 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e013      	b.n	8004c3c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c14:	4b0b      	ldr	r3, [pc, #44]	; (8004c44 <HAL_RCC_OscConfig+0x4f4>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d106      	bne.n	8004c36 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d001      	beq.n	8004c3a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e000      	b.n	8004c3c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	40021000 	.word	0x40021000
 8004c48:	40007000 	.word	0x40007000
 8004c4c:	42420060 	.word	0x42420060

08004c50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e0d0      	b.n	8004e06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c64:	4b6a      	ldr	r3, [pc, #424]	; (8004e10 <HAL_RCC_ClockConfig+0x1c0>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d910      	bls.n	8004c94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c72:	4b67      	ldr	r3, [pc, #412]	; (8004e10 <HAL_RCC_ClockConfig+0x1c0>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f023 0207 	bic.w	r2, r3, #7
 8004c7a:	4965      	ldr	r1, [pc, #404]	; (8004e10 <HAL_RCC_ClockConfig+0x1c0>)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c82:	4b63      	ldr	r3, [pc, #396]	; (8004e10 <HAL_RCC_ClockConfig+0x1c0>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0307 	and.w	r3, r3, #7
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d001      	beq.n	8004c94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e0b8      	b.n	8004e06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d020      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d005      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cac:	4b59      	ldr	r3, [pc, #356]	; (8004e14 <HAL_RCC_ClockConfig+0x1c4>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	4a58      	ldr	r2, [pc, #352]	; (8004e14 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004cb6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0308 	and.w	r3, r3, #8
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d005      	beq.n	8004cd0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cc4:	4b53      	ldr	r3, [pc, #332]	; (8004e14 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	4a52      	ldr	r2, [pc, #328]	; (8004e14 <HAL_RCC_ClockConfig+0x1c4>)
 8004cca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004cce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cd0:	4b50      	ldr	r3, [pc, #320]	; (8004e14 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	494d      	ldr	r1, [pc, #308]	; (8004e14 <HAL_RCC_ClockConfig+0x1c4>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d040      	beq.n	8004d70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d107      	bne.n	8004d06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cf6:	4b47      	ldr	r3, [pc, #284]	; (8004e14 <HAL_RCC_ClockConfig+0x1c4>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d115      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e07f      	b.n	8004e06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d107      	bne.n	8004d1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d0e:	4b41      	ldr	r3, [pc, #260]	; (8004e14 <HAL_RCC_ClockConfig+0x1c4>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d109      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e073      	b.n	8004e06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d1e:	4b3d      	ldr	r3, [pc, #244]	; (8004e14 <HAL_RCC_ClockConfig+0x1c4>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e06b      	b.n	8004e06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d2e:	4b39      	ldr	r3, [pc, #228]	; (8004e14 <HAL_RCC_ClockConfig+0x1c4>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f023 0203 	bic.w	r2, r3, #3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	4936      	ldr	r1, [pc, #216]	; (8004e14 <HAL_RCC_ClockConfig+0x1c4>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d40:	f7fd fd3e 	bl	80027c0 <HAL_GetTick>
 8004d44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d46:	e00a      	b.n	8004d5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d48:	f7fd fd3a 	bl	80027c0 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e053      	b.n	8004e06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d5e:	4b2d      	ldr	r3, [pc, #180]	; (8004e14 <HAL_RCC_ClockConfig+0x1c4>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f003 020c 	and.w	r2, r3, #12
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d1eb      	bne.n	8004d48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d70:	4b27      	ldr	r3, [pc, #156]	; (8004e10 <HAL_RCC_ClockConfig+0x1c0>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d210      	bcs.n	8004da0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d7e:	4b24      	ldr	r3, [pc, #144]	; (8004e10 <HAL_RCC_ClockConfig+0x1c0>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f023 0207 	bic.w	r2, r3, #7
 8004d86:	4922      	ldr	r1, [pc, #136]	; (8004e10 <HAL_RCC_ClockConfig+0x1c0>)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d8e:	4b20      	ldr	r3, [pc, #128]	; (8004e10 <HAL_RCC_ClockConfig+0x1c0>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d001      	beq.n	8004da0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e032      	b.n	8004e06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d008      	beq.n	8004dbe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dac:	4b19      	ldr	r3, [pc, #100]	; (8004e14 <HAL_RCC_ClockConfig+0x1c4>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	4916      	ldr	r1, [pc, #88]	; (8004e14 <HAL_RCC_ClockConfig+0x1c4>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0308 	and.w	r3, r3, #8
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d009      	beq.n	8004dde <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004dca:	4b12      	ldr	r3, [pc, #72]	; (8004e14 <HAL_RCC_ClockConfig+0x1c4>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	490e      	ldr	r1, [pc, #56]	; (8004e14 <HAL_RCC_ClockConfig+0x1c4>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004dde:	f000 f821 	bl	8004e24 <HAL_RCC_GetSysClockFreq>
 8004de2:	4602      	mov	r2, r0
 8004de4:	4b0b      	ldr	r3, [pc, #44]	; (8004e14 <HAL_RCC_ClockConfig+0x1c4>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	091b      	lsrs	r3, r3, #4
 8004dea:	f003 030f 	and.w	r3, r3, #15
 8004dee:	490a      	ldr	r1, [pc, #40]	; (8004e18 <HAL_RCC_ClockConfig+0x1c8>)
 8004df0:	5ccb      	ldrb	r3, [r1, r3]
 8004df2:	fa22 f303 	lsr.w	r3, r2, r3
 8004df6:	4a09      	ldr	r2, [pc, #36]	; (8004e1c <HAL_RCC_ClockConfig+0x1cc>)
 8004df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004dfa:	4b09      	ldr	r3, [pc, #36]	; (8004e20 <HAL_RCC_ClockConfig+0x1d0>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7fd fc9c 	bl	800273c <HAL_InitTick>

  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	40022000 	.word	0x40022000
 8004e14:	40021000 	.word	0x40021000
 8004e18:	0800c954 	.word	0x0800c954
 8004e1c:	20000048 	.word	0x20000048
 8004e20:	2000004c 	.word	0x2000004c

08004e24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e24:	b490      	push	{r4, r7}
 8004e26:	b08a      	sub	sp, #40	; 0x28
 8004e28:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004e2a:	4b2a      	ldr	r3, [pc, #168]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004e2c:	1d3c      	adds	r4, r7, #4
 8004e2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004e34:	f240 2301 	movw	r3, #513	; 0x201
 8004e38:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	61fb      	str	r3, [r7, #28]
 8004e3e:	2300      	movs	r3, #0
 8004e40:	61bb      	str	r3, [r7, #24]
 8004e42:	2300      	movs	r3, #0
 8004e44:	627b      	str	r3, [r7, #36]	; 0x24
 8004e46:	2300      	movs	r3, #0
 8004e48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004e4e:	4b22      	ldr	r3, [pc, #136]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	f003 030c 	and.w	r3, r3, #12
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	d002      	beq.n	8004e64 <HAL_RCC_GetSysClockFreq+0x40>
 8004e5e:	2b08      	cmp	r3, #8
 8004e60:	d003      	beq.n	8004e6a <HAL_RCC_GetSysClockFreq+0x46>
 8004e62:	e02d      	b.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e64:	4b1d      	ldr	r3, [pc, #116]	; (8004edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e66:	623b      	str	r3, [r7, #32]
      break;
 8004e68:	e02d      	b.n	8004ec6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	0c9b      	lsrs	r3, r3, #18
 8004e6e:	f003 030f 	and.w	r3, r3, #15
 8004e72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004e76:	4413      	add	r3, r2
 8004e78:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004e7c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d013      	beq.n	8004eb0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e88:	4b13      	ldr	r3, [pc, #76]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	0c5b      	lsrs	r3, r3, #17
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004e96:	4413      	add	r3, r2
 8004e98:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004e9c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	4a0e      	ldr	r2, [pc, #56]	; (8004edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ea2:	fb02 f203 	mul.w	r2, r2, r3
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eac:	627b      	str	r3, [r7, #36]	; 0x24
 8004eae:	e004      	b.n	8004eba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	4a0b      	ldr	r2, [pc, #44]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004eb4:	fb02 f303 	mul.w	r3, r2, r3
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	623b      	str	r3, [r7, #32]
      break;
 8004ebe:	e002      	b.n	8004ec6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ec0:	4b06      	ldr	r3, [pc, #24]	; (8004edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ec2:	623b      	str	r3, [r7, #32]
      break;
 8004ec4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3728      	adds	r7, #40	; 0x28
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bc90      	pop	{r4, r7}
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	0800c934 	.word	0x0800c934
 8004ed8:	40021000 	.word	0x40021000
 8004edc:	007a1200 	.word	0x007a1200
 8004ee0:	003d0900 	.word	0x003d0900

08004ee4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ee8:	4b02      	ldr	r3, [pc, #8]	; (8004ef4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004eea:	681b      	ldr	r3, [r3, #0]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bc80      	pop	{r7}
 8004ef2:	4770      	bx	lr
 8004ef4:	20000048 	.word	0x20000048

08004ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004efc:	f7ff fff2 	bl	8004ee4 <HAL_RCC_GetHCLKFreq>
 8004f00:	4602      	mov	r2, r0
 8004f02:	4b05      	ldr	r3, [pc, #20]	; (8004f18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	0a1b      	lsrs	r3, r3, #8
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	4903      	ldr	r1, [pc, #12]	; (8004f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f0e:	5ccb      	ldrb	r3, [r1, r3]
 8004f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	40021000 	.word	0x40021000
 8004f1c:	0800c964 	.word	0x0800c964

08004f20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f24:	f7ff ffde 	bl	8004ee4 <HAL_RCC_GetHCLKFreq>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	4b05      	ldr	r3, [pc, #20]	; (8004f40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	0adb      	lsrs	r3, r3, #11
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	4903      	ldr	r1, [pc, #12]	; (8004f44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f36:	5ccb      	ldrb	r3, [r1, r3]
 8004f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40021000 	.word	0x40021000
 8004f44:	0800c964 	.word	0x0800c964

08004f48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f50:	4b0a      	ldr	r3, [pc, #40]	; (8004f7c <RCC_Delay+0x34>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a0a      	ldr	r2, [pc, #40]	; (8004f80 <RCC_Delay+0x38>)
 8004f56:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5a:	0a5b      	lsrs	r3, r3, #9
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	fb02 f303 	mul.w	r3, r2, r3
 8004f62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004f64:	bf00      	nop
  }
  while (Delay --);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	1e5a      	subs	r2, r3, #1
 8004f6a:	60fa      	str	r2, [r7, #12]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1f9      	bne.n	8004f64 <RCC_Delay+0x1c>
}
 8004f70:	bf00      	nop
 8004f72:	bf00      	nop
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bc80      	pop	{r7}
 8004f7a:	4770      	bx	lr
 8004f7c:	20000048 	.word	0x20000048
 8004f80:	10624dd3 	.word	0x10624dd3

08004f84 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	613b      	str	r3, [r7, #16]
 8004f90:	2300      	movs	r3, #0
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d07d      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fa4:	4b4f      	ldr	r3, [pc, #316]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10d      	bne.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fb0:	4b4c      	ldr	r3, [pc, #304]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fb2:	69db      	ldr	r3, [r3, #28]
 8004fb4:	4a4b      	ldr	r2, [pc, #300]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fba:	61d3      	str	r3, [r2, #28]
 8004fbc:	4b49      	ldr	r3, [pc, #292]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fbe:	69db      	ldr	r3, [r3, #28]
 8004fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc4:	60bb      	str	r3, [r7, #8]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fcc:	4b46      	ldr	r3, [pc, #280]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d118      	bne.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fd8:	4b43      	ldr	r3, [pc, #268]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a42      	ldr	r2, [pc, #264]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fe2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fe4:	f7fd fbec 	bl	80027c0 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fea:	e008      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fec:	f7fd fbe8 	bl	80027c0 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b64      	cmp	r3, #100	; 0x64
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e06d      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ffe:	4b3a      	ldr	r3, [pc, #232]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005006:	2b00      	cmp	r3, #0
 8005008:	d0f0      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800500a:	4b36      	ldr	r3, [pc, #216]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005012:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d02e      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	429a      	cmp	r2, r3
 8005026:	d027      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005028:	4b2e      	ldr	r3, [pc, #184]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005030:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005032:	4b2e      	ldr	r3, [pc, #184]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005034:	2201      	movs	r2, #1
 8005036:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005038:	4b2c      	ldr	r3, [pc, #176]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800503a:	2200      	movs	r2, #0
 800503c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800503e:	4a29      	ldr	r2, [pc, #164]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b00      	cmp	r3, #0
 800504c:	d014      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800504e:	f7fd fbb7 	bl	80027c0 <HAL_GetTick>
 8005052:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005054:	e00a      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005056:	f7fd fbb3 	bl	80027c0 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	f241 3288 	movw	r2, #5000	; 0x1388
 8005064:	4293      	cmp	r3, r2
 8005066:	d901      	bls.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e036      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800506c:	4b1d      	ldr	r3, [pc, #116]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0ee      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005078:	4b1a      	ldr	r3, [pc, #104]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	4917      	ldr	r1, [pc, #92]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005086:	4313      	orrs	r3, r2
 8005088:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800508a:	7dfb      	ldrb	r3, [r7, #23]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d105      	bne.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005090:	4b14      	ldr	r3, [pc, #80]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005092:	69db      	ldr	r3, [r3, #28]
 8005094:	4a13      	ldr	r2, [pc, #76]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800509a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d008      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050a8:	4b0e      	ldr	r3, [pc, #56]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	490b      	ldr	r1, [pc, #44]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0310 	and.w	r3, r3, #16
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d008      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050c6:	4b07      	ldr	r3, [pc, #28]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	4904      	ldr	r1, [pc, #16]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3718      	adds	r7, #24
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	40021000 	.word	0x40021000
 80050e8:	40007000 	.word	0x40007000
 80050ec:	42420440 	.word	0x42420440

080050f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80050f0:	b590      	push	{r4, r7, lr}
 80050f2:	b08d      	sub	sp, #52	; 0x34
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80050f8:	4b5a      	ldr	r3, [pc, #360]	; (8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80050fa:	f107 040c 	add.w	r4, r7, #12
 80050fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005100:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005104:	f240 2301 	movw	r3, #513	; 0x201
 8005108:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	627b      	str	r3, [r7, #36]	; 0x24
 800510e:	2300      	movs	r3, #0
 8005110:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005112:	2300      	movs	r3, #0
 8005114:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	61fb      	str	r3, [r7, #28]
 800511a:	2300      	movs	r3, #0
 800511c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b10      	cmp	r3, #16
 8005122:	d00a      	beq.n	800513a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b10      	cmp	r3, #16
 8005128:	f200 8091 	bhi.w	800524e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d04c      	beq.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b02      	cmp	r3, #2
 8005136:	d07c      	beq.n	8005232 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005138:	e089      	b.n	800524e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 800513a:	4b4b      	ldr	r3, [pc, #300]	; (8005268 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005140:	4b49      	ldr	r3, [pc, #292]	; (8005268 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 8082 	beq.w	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	0c9b      	lsrs	r3, r3, #18
 8005152:	f003 030f 	and.w	r3, r3, #15
 8005156:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800515a:	4413      	add	r3, r2
 800515c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005160:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d018      	beq.n	800519e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800516c:	4b3e      	ldr	r3, [pc, #248]	; (8005268 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	0c5b      	lsrs	r3, r3, #17
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800517a:	4413      	add	r3, r2
 800517c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005180:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00d      	beq.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800518c:	4a37      	ldr	r2, [pc, #220]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	fbb2 f2f3 	udiv	r2, r2, r3
 8005194:	6a3b      	ldr	r3, [r7, #32]
 8005196:	fb02 f303 	mul.w	r3, r2, r3
 800519a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800519c:	e004      	b.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	4a33      	ldr	r2, [pc, #204]	; (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80051a2:	fb02 f303 	mul.w	r3, r2, r3
 80051a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80051a8:	4b2f      	ldr	r3, [pc, #188]	; (8005268 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051b4:	d102      	bne.n	80051bc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 80051b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80051ba:	e04a      	b.n	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 80051bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051be:	005b      	lsls	r3, r3, #1
 80051c0:	4a2c      	ldr	r2, [pc, #176]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 80051c2:	fba2 2303 	umull	r2, r3, r2, r3
 80051c6:	085b      	lsrs	r3, r3, #1
 80051c8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80051ca:	e042      	b.n	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 80051cc:	4b26      	ldr	r3, [pc, #152]	; (8005268 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051dc:	d108      	bne.n	80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d003      	beq.n	80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 80051e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ee:	e01f      	b.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051fa:	d109      	bne.n	8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80051fc:	4b1a      	ldr	r3, [pc, #104]	; (8005268 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	2b00      	cmp	r3, #0
 8005206:	d003      	beq.n	8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8005208:	f649 4340 	movw	r3, #40000	; 0x9c40
 800520c:	62bb      	str	r3, [r7, #40]	; 0x28
 800520e:	e00f      	b.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005216:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800521a:	d11c      	bne.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800521c:	4b12      	ldr	r3, [pc, #72]	; (8005268 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d016      	beq.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8005228:	f24f 4324 	movw	r3, #62500	; 0xf424
 800522c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800522e:	e012      	b.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8005230:	e011      	b.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005232:	f7ff fe75 	bl	8004f20 <HAL_RCC_GetPCLK2Freq>
 8005236:	4602      	mov	r2, r0
 8005238:	4b0b      	ldr	r3, [pc, #44]	; (8005268 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	0b9b      	lsrs	r3, r3, #14
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	3301      	adds	r3, #1
 8005244:	005b      	lsls	r3, r3, #1
 8005246:	fbb2 f3f3 	udiv	r3, r2, r3
 800524a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800524c:	e004      	b.n	8005258 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800524e:	bf00      	nop
 8005250:	e002      	b.n	8005258 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8005252:	bf00      	nop
 8005254:	e000      	b.n	8005258 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8005256:	bf00      	nop
    }
  }
  return (frequency);
 8005258:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800525a:	4618      	mov	r0, r3
 800525c:	3734      	adds	r7, #52	; 0x34
 800525e:	46bd      	mov	sp, r7
 8005260:	bd90      	pop	{r4, r7, pc}
 8005262:	bf00      	nop
 8005264:	0800c944 	.word	0x0800c944
 8005268:	40021000 	.word	0x40021000
 800526c:	007a1200 	.word	0x007a1200
 8005270:	003d0900 	.word	0x003d0900
 8005274:	aaaaaaab 	.word	0xaaaaaaab

08005278 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8005280:	2300      	movs	r3, #0
 8005282:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e084      	b.n	8005398 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	7c5b      	ldrb	r3, [r3, #17]
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	d105      	bne.n	80052a4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f7fc fdf8 	bl	8001e94 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2202      	movs	r2, #2
 80052a8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f8ab 	bl	8005406 <HAL_RTC_WaitForSynchro>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d004      	beq.n	80052c0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2204      	movs	r2, #4
 80052ba:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e06b      	b.n	8005398 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 f8cd 	bl	8005460 <RTC_EnterInitMode>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d004      	beq.n	80052d6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2204      	movs	r2, #4
 80052d0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e060      	b.n	8005398 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0207 	bic.w	r2, r2, #7
 80052e4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d005      	beq.n	80052fa <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80052ee:	4b2c      	ldr	r3, [pc, #176]	; (80053a0 <HAL_RTC_Init+0x128>)
 80052f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f2:	4a2b      	ldr	r2, [pc, #172]	; (80053a0 <HAL_RTC_Init+0x128>)
 80052f4:	f023 0301 	bic.w	r3, r3, #1
 80052f8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80052fa:	4b29      	ldr	r3, [pc, #164]	; (80053a0 <HAL_RTC_Init+0x128>)
 80052fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fe:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	4926      	ldr	r1, [pc, #152]	; (80053a0 <HAL_RTC_Init+0x128>)
 8005308:	4313      	orrs	r3, r2
 800530a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005314:	d003      	beq.n	800531e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	60fb      	str	r3, [r7, #12]
 800531c:	e00e      	b.n	800533c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800531e:	2001      	movs	r0, #1
 8005320:	f7ff fee6 	bl	80050f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005324:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d104      	bne.n	8005336 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2204      	movs	r2, #4
 8005330:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e030      	b.n	8005398 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	3b01      	subs	r3, #1
 800533a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f023 010f 	bic.w	r1, r3, #15
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	0c1a      	lsrs	r2, r3, #16
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	0c1b      	lsrs	r3, r3, #16
 800535a:	041b      	lsls	r3, r3, #16
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	b291      	uxth	r1, r2
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	6812      	ldr	r2, [r2, #0]
 8005364:	430b      	orrs	r3, r1
 8005366:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f8a1 	bl	80054b0 <RTC_ExitInitMode>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d004      	beq.n	800537e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2204      	movs	r2, #4
 8005378:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e00c      	b.n	8005398 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8005396:	2300      	movs	r3, #0
  }
}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	40006c00 	.word	0x40006c00

080053a4 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00e      	beq.n	80053d8 <HAL_RTC_AlarmIRQHandler+0x34>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d007      	beq.n	80053d8 <HAL_RTC_AlarmIRQHandler+0x34>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f813 	bl	80053f4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f06f 0202 	mvn.w	r2, #2
 80053d6:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80053d8:	4b05      	ldr	r3, [pc, #20]	; (80053f0 <HAL_RTC_AlarmIRQHandler+0x4c>)
 80053da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80053de:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	745a      	strb	r2, [r3, #17]
}
 80053e6:	bf00      	nop
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	40010400 	.word	0x40010400

080053f4 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	bc80      	pop	{r7}
 8005404:	4770      	bx	lr

08005406 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b084      	sub	sp, #16
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800540e:	2300      	movs	r3, #0
 8005410:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e01d      	b.n	8005458 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 0208 	bic.w	r2, r2, #8
 800542a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800542c:	f7fd f9c8 	bl	80027c0 <HAL_GetTick>
 8005430:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005432:	e009      	b.n	8005448 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005434:	f7fd f9c4 	bl	80027c0 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005442:	d901      	bls.n	8005448 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e007      	b.n	8005458 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	2b00      	cmp	r3, #0
 8005454:	d0ee      	beq.n	8005434 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800546c:	f7fd f9a8 	bl	80027c0 <HAL_GetTick>
 8005470:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005472:	e009      	b.n	8005488 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005474:	f7fd f9a4 	bl	80027c0 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005482:	d901      	bls.n	8005488 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e00f      	b.n	80054a8 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f003 0320 	and.w	r3, r3, #32
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0ee      	beq.n	8005474 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f042 0210 	orr.w	r2, r2, #16
 80054a4:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054b8:	2300      	movs	r3, #0
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f022 0210 	bic.w	r2, r2, #16
 80054ca:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80054cc:	f7fd f978 	bl	80027c0 <HAL_GetTick>
 80054d0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80054d2:	e009      	b.n	80054e8 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80054d4:	f7fd f974 	bl	80027c0 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054e2:	d901      	bls.n	80054e8 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e007      	b.n	80054f8 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f003 0320 	and.w	r3, r3, #32
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0ee      	beq.n	80054d4 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d024      	beq.n	8005560 <HAL_RTCEx_RTCIRQHandler+0x60>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	2b00      	cmp	r3, #0
 8005522:	d01d      	beq.n	8005560 <HAL_RTCEx_RTCIRQHandler+0x60>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f003 0304 	and.w	r3, r3, #4
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00b      	beq.n	800554a <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f821 	bl	800557a <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f06f 0204 	mvn.w	r2, #4
 8005540:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2204      	movs	r2, #4
 8005546:	745a      	strb	r2, [r3, #17]
 8005548:	e005      	b.n	8005556 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f80c 	bl	8005568 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f06f 0201 	mvn.w	r2, #1
 800555e:	605a      	str	r2, [r3, #4]
    }
  }
}
 8005560:	bf00      	nop
 8005562:	3708      	adds	r7, #8
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	bc80      	pop	{r7}
 8005578:	4770      	bx	lr

0800557a <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8005582:	bf00      	nop
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	bc80      	pop	{r7}
 800558a:	4770      	bx	lr

0800558c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e053      	b.n	8005646 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d106      	bne.n	80055be <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f7fc fc9f 	bl	8001efc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2202      	movs	r2, #2
 80055c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055d4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685a      	ldr	r2, [r3, #4]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	431a      	orrs	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	431a      	orrs	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	431a      	orrs	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055fa:	431a      	orrs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	431a      	orrs	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	ea42 0103 	orr.w	r1, r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	430a      	orrs	r2, r1
 8005614:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	0c1a      	lsrs	r2, r3, #16
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f002 0204 	and.w	r2, r2, #4
 8005624:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	69da      	ldr	r2, [r3, #28]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005634:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b088      	sub	sp, #32
 8005652:	af00      	add	r7, sp, #0
 8005654:	60f8      	str	r0, [r7, #12]
 8005656:	60b9      	str	r1, [r7, #8]
 8005658:	603b      	str	r3, [r7, #0]
 800565a:	4613      	mov	r3, r2
 800565c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800565e:	2300      	movs	r3, #0
 8005660:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005668:	2b01      	cmp	r3, #1
 800566a:	d101      	bne.n	8005670 <HAL_SPI_Transmit+0x22>
 800566c:	2302      	movs	r3, #2
 800566e:	e11e      	b.n	80058ae <HAL_SPI_Transmit+0x260>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005678:	f7fd f8a2 	bl	80027c0 <HAL_GetTick>
 800567c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800567e:	88fb      	ldrh	r3, [r7, #6]
 8005680:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b01      	cmp	r3, #1
 800568c:	d002      	beq.n	8005694 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800568e:	2302      	movs	r3, #2
 8005690:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005692:	e103      	b.n	800589c <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d002      	beq.n	80056a0 <HAL_SPI_Transmit+0x52>
 800569a:	88fb      	ldrh	r3, [r7, #6]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d102      	bne.n	80056a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80056a4:	e0fa      	b.n	800589c <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2203      	movs	r2, #3
 80056aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	88fa      	ldrh	r2, [r7, #6]
 80056be:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	88fa      	ldrh	r2, [r7, #6]
 80056c4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ec:	d107      	bne.n	80056fe <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005708:	2b40      	cmp	r3, #64	; 0x40
 800570a:	d007      	beq.n	800571c <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800571a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005724:	d14b      	bne.n	80057be <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d002      	beq.n	8005734 <HAL_SPI_Transmit+0xe6>
 800572e:	8afb      	ldrh	r3, [r7, #22]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d13e      	bne.n	80057b2 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005738:	881a      	ldrh	r2, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005744:	1c9a      	adds	r2, r3, #2
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800574e:	b29b      	uxth	r3, r3
 8005750:	3b01      	subs	r3, #1
 8005752:	b29a      	uxth	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005758:	e02b      	b.n	80057b2 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f003 0302 	and.w	r3, r3, #2
 8005764:	2b02      	cmp	r3, #2
 8005766:	d112      	bne.n	800578e <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576c:	881a      	ldrh	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005778:	1c9a      	adds	r2, r3, #2
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005782:	b29b      	uxth	r3, r3
 8005784:	3b01      	subs	r3, #1
 8005786:	b29a      	uxth	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	86da      	strh	r2, [r3, #54]	; 0x36
 800578c:	e011      	b.n	80057b2 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800578e:	f7fd f817 	bl	80027c0 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	429a      	cmp	r2, r3
 800579c:	d803      	bhi.n	80057a6 <HAL_SPI_Transmit+0x158>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a4:	d102      	bne.n	80057ac <HAL_SPI_Transmit+0x15e>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d102      	bne.n	80057b2 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057b0:	e074      	b.n	800589c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1ce      	bne.n	800575a <HAL_SPI_Transmit+0x10c>
 80057bc:	e04c      	b.n	8005858 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d002      	beq.n	80057cc <HAL_SPI_Transmit+0x17e>
 80057c6:	8afb      	ldrh	r3, [r7, #22]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d140      	bne.n	800584e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	330c      	adds	r3, #12
 80057d6:	7812      	ldrb	r2, [r2, #0]
 80057d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057de:	1c5a      	adds	r2, r3, #1
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	3b01      	subs	r3, #1
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80057f2:	e02c      	b.n	800584e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d113      	bne.n	800582a <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	330c      	adds	r3, #12
 800580c:	7812      	ldrb	r2, [r2, #0]
 800580e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005814:	1c5a      	adds	r2, r3, #1
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800581e:	b29b      	uxth	r3, r3
 8005820:	3b01      	subs	r3, #1
 8005822:	b29a      	uxth	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	86da      	strh	r2, [r3, #54]	; 0x36
 8005828:	e011      	b.n	800584e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800582a:	f7fc ffc9 	bl	80027c0 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	429a      	cmp	r2, r3
 8005838:	d803      	bhi.n	8005842 <HAL_SPI_Transmit+0x1f4>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005840:	d102      	bne.n	8005848 <HAL_SPI_Transmit+0x1fa>
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d102      	bne.n	800584e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800584c:	e026      	b.n	800589c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005852:	b29b      	uxth	r3, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1cd      	bne.n	80057f4 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	6839      	ldr	r1, [r7, #0]
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f000 fc94 	bl	800618a <SPI_EndRxTxTransaction>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2220      	movs	r2, #32
 800586c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10a      	bne.n	800588c <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005876:	2300      	movs	r3, #0
 8005878:	613b      	str	r3, [r7, #16]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	613b      	str	r3, [r7, #16]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	613b      	str	r3, [r7, #16]
 800588a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	77fb      	strb	r3, [r7, #31]
 8005898:	e000      	b.n	800589c <HAL_SPI_Transmit+0x24e>
  }

error:
 800589a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80058ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3720      	adds	r7, #32
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b088      	sub	sp, #32
 80058ba:	af02      	add	r7, sp, #8
 80058bc:	60f8      	str	r0, [r7, #12]
 80058be:	60b9      	str	r1, [r7, #8]
 80058c0:	603b      	str	r3, [r7, #0]
 80058c2:	4613      	mov	r3, r2
 80058c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058c6:	2300      	movs	r3, #0
 80058c8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058d2:	d112      	bne.n	80058fa <HAL_SPI_Receive+0x44>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10e      	bne.n	80058fa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2204      	movs	r2, #4
 80058e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80058e4:	88fa      	ldrh	r2, [r7, #6]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	4613      	mov	r3, r2
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	68b9      	ldr	r1, [r7, #8]
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f000 f8e9 	bl	8005ac8 <HAL_SPI_TransmitReceive>
 80058f6:	4603      	mov	r3, r0
 80058f8:	e0e2      	b.n	8005ac0 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005900:	2b01      	cmp	r3, #1
 8005902:	d101      	bne.n	8005908 <HAL_SPI_Receive+0x52>
 8005904:	2302      	movs	r3, #2
 8005906:	e0db      	b.n	8005ac0 <HAL_SPI_Receive+0x20a>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005910:	f7fc ff56 	bl	80027c0 <HAL_GetTick>
 8005914:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b01      	cmp	r3, #1
 8005920:	d002      	beq.n	8005928 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005922:	2302      	movs	r3, #2
 8005924:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005926:	e0c2      	b.n	8005aae <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d002      	beq.n	8005934 <HAL_SPI_Receive+0x7e>
 800592e:	88fb      	ldrh	r3, [r7, #6]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d102      	bne.n	800593a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005938:	e0b9      	b.n	8005aae <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2204      	movs	r2, #4
 800593e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	88fa      	ldrh	r2, [r7, #6]
 8005952:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	88fa      	ldrh	r2, [r7, #6]
 8005958:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005980:	d107      	bne.n	8005992 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005990:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599c:	2b40      	cmp	r3, #64	; 0x40
 800599e:	d007      	beq.n	80059b0 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059ae:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d162      	bne.n	8005a7e <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80059b8:	e02e      	b.n	8005a18 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d115      	bne.n	80059f4 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f103 020c 	add.w	r2, r3, #12
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d4:	7812      	ldrb	r2, [r2, #0]
 80059d6:	b2d2      	uxtb	r2, r2
 80059d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	3b01      	subs	r3, #1
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059f2:	e011      	b.n	8005a18 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059f4:	f7fc fee4 	bl	80027c0 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d803      	bhi.n	8005a0c <HAL_SPI_Receive+0x156>
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0a:	d102      	bne.n	8005a12 <HAL_SPI_Receive+0x15c>
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d102      	bne.n	8005a18 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005a16:	e04a      	b.n	8005aae <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1cb      	bne.n	80059ba <HAL_SPI_Receive+0x104>
 8005a22:	e031      	b.n	8005a88 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d113      	bne.n	8005a5a <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68da      	ldr	r2, [r3, #12]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3c:	b292      	uxth	r2, r2
 8005a3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a44:	1c9a      	adds	r2, r3, #2
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	3b01      	subs	r3, #1
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a58:	e011      	b.n	8005a7e <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a5a:	f7fc feb1 	bl	80027c0 <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d803      	bhi.n	8005a72 <HAL_SPI_Receive+0x1bc>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a70:	d102      	bne.n	8005a78 <HAL_SPI_Receive+0x1c2>
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d102      	bne.n	8005a7e <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005a7c:	e017      	b.n	8005aae <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1cd      	bne.n	8005a24 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	6839      	ldr	r1, [r7, #0]
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f000 fb2a 	bl	80060e6 <SPI_EndRxTransaction>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d002      	beq.n	8005aac <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	75fb      	strb	r3, [r7, #23]
 8005aaa:	e000      	b.n	8005aae <HAL_SPI_Receive+0x1f8>
  }

error :
 8005aac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3718      	adds	r7, #24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b08c      	sub	sp, #48	; 0x30
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
 8005ad4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d101      	bne.n	8005aee <HAL_SPI_TransmitReceive+0x26>
 8005aea:	2302      	movs	r3, #2
 8005aec:	e18a      	b.n	8005e04 <HAL_SPI_TransmitReceive+0x33c>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005af6:	f7fc fe63 	bl	80027c0 <HAL_GetTick>
 8005afa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005b0c:	887b      	ldrh	r3, [r7, #2]
 8005b0e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d00f      	beq.n	8005b38 <HAL_SPI_TransmitReceive+0x70>
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b1e:	d107      	bne.n	8005b30 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d103      	bne.n	8005b30 <HAL_SPI_TransmitReceive+0x68>
 8005b28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b2c:	2b04      	cmp	r3, #4
 8005b2e:	d003      	beq.n	8005b38 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005b30:	2302      	movs	r3, #2
 8005b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005b36:	e15b      	b.n	8005df0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d005      	beq.n	8005b4a <HAL_SPI_TransmitReceive+0x82>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d002      	beq.n	8005b4a <HAL_SPI_TransmitReceive+0x82>
 8005b44:	887b      	ldrh	r3, [r7, #2]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d103      	bne.n	8005b52 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005b50:	e14e      	b.n	8005df0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b04      	cmp	r3, #4
 8005b5c:	d003      	beq.n	8005b66 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2205      	movs	r2, #5
 8005b62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	887a      	ldrh	r2, [r7, #2]
 8005b76:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	887a      	ldrh	r2, [r7, #2]
 8005b7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	887a      	ldrh	r2, [r7, #2]
 8005b88:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	887a      	ldrh	r2, [r7, #2]
 8005b8e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba6:	2b40      	cmp	r3, #64	; 0x40
 8005ba8:	d007      	beq.n	8005bba <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bb8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bc2:	d178      	bne.n	8005cb6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d002      	beq.n	8005bd2 <HAL_SPI_TransmitReceive+0x10a>
 8005bcc:	8b7b      	ldrh	r3, [r7, #26]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d166      	bne.n	8005ca0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd6:	881a      	ldrh	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be2:	1c9a      	adds	r2, r3, #2
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bf6:	e053      	b.n	8005ca0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d11b      	bne.n	8005c3e <HAL_SPI_TransmitReceive+0x176>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d016      	beq.n	8005c3e <HAL_SPI_TransmitReceive+0x176>
 8005c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d113      	bne.n	8005c3e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1a:	881a      	ldrh	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c26:	1c9a      	adds	r2, r3, #2
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d119      	bne.n	8005c80 <HAL_SPI_TransmitReceive+0x1b8>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d014      	beq.n	8005c80 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68da      	ldr	r2, [r3, #12]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c60:	b292      	uxth	r2, r2
 8005c62:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c68:	1c9a      	adds	r2, r3, #2
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	3b01      	subs	r3, #1
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c80:	f7fc fd9e 	bl	80027c0 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d807      	bhi.n	8005ca0 <HAL_SPI_TransmitReceive+0x1d8>
 8005c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c96:	d003      	beq.n	8005ca0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c9e:	e0a7      	b.n	8005df0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1a6      	bne.n	8005bf8 <HAL_SPI_TransmitReceive+0x130>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1a1      	bne.n	8005bf8 <HAL_SPI_TransmitReceive+0x130>
 8005cb4:	e07c      	b.n	8005db0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <HAL_SPI_TransmitReceive+0x1fc>
 8005cbe:	8b7b      	ldrh	r3, [r7, #26]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d16b      	bne.n	8005d9c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	330c      	adds	r3, #12
 8005cce:	7812      	ldrb	r2, [r2, #0]
 8005cd0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd6:	1c5a      	adds	r2, r3, #1
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cea:	e057      	b.n	8005d9c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d11c      	bne.n	8005d34 <HAL_SPI_TransmitReceive+0x26c>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d017      	beq.n	8005d34 <HAL_SPI_TransmitReceive+0x26c>
 8005d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d114      	bne.n	8005d34 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	330c      	adds	r3, #12
 8005d14:	7812      	ldrb	r2, [r2, #0]
 8005d16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1c:	1c5a      	adds	r2, r3, #1
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d30:	2300      	movs	r3, #0
 8005d32:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d119      	bne.n	8005d76 <HAL_SPI_TransmitReceive+0x2ae>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d014      	beq.n	8005d76 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68da      	ldr	r2, [r3, #12]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d56:	b2d2      	uxtb	r2, r2
 8005d58:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5e:	1c5a      	adds	r2, r3, #1
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d72:	2301      	movs	r3, #1
 8005d74:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d76:	f7fc fd23 	bl	80027c0 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d803      	bhi.n	8005d8e <HAL_SPI_TransmitReceive+0x2c6>
 8005d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8c:	d102      	bne.n	8005d94 <HAL_SPI_TransmitReceive+0x2cc>
 8005d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d103      	bne.n	8005d9c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005d9a:	e029      	b.n	8005df0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1a2      	bne.n	8005cec <HAL_SPI_TransmitReceive+0x224>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d19d      	bne.n	8005cec <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005db2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f000 f9e8 	bl	800618a <SPI_EndRxTxTransaction>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d006      	beq.n	8005dce <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005dcc:	e010      	b.n	8005df0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d10b      	bne.n	8005dee <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	617b      	str	r3, [r7, #20]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	617b      	str	r3, [r7, #20]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	617b      	str	r3, [r7, #20]
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	e000      	b.n	8005df0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005dee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3730      	adds	r7, #48	; 0x30
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b088      	sub	sp, #32
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	099b      	lsrs	r3, r3, #6
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10f      	bne.n	8005e50 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00a      	beq.n	8005e50 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	099b      	lsrs	r3, r3, #6
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d004      	beq.n	8005e50 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	4798      	blx	r3
    return;
 8005e4e:	e0be      	b.n	8005fce <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	085b      	lsrs	r3, r3, #1
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00a      	beq.n	8005e72 <HAL_SPI_IRQHandler+0x66>
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	09db      	lsrs	r3, r3, #7
 8005e60:	f003 0301 	and.w	r3, r3, #1
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d004      	beq.n	8005e72 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	4798      	blx	r3
    return;
 8005e70:	e0ad      	b.n	8005fce <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	095b      	lsrs	r3, r3, #5
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d106      	bne.n	8005e8c <HAL_SPI_IRQHandler+0x80>
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	099b      	lsrs	r3, r3, #6
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f000 80a1 	beq.w	8005fce <HAL_SPI_IRQHandler+0x1c2>
       && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	095b      	lsrs	r3, r3, #5
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f000 809a 	beq.w	8005fce <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	099b      	lsrs	r3, r3, #6
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d023      	beq.n	8005eee <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	d011      	beq.n	8005ed6 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb6:	f043 0204 	orr.w	r2, r3, #4
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	617b      	str	r3, [r7, #20]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	617b      	str	r3, [r7, #20]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	617b      	str	r3, [r7, #20]
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	e00b      	b.n	8005eee <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	613b      	str	r3, [r7, #16]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	613b      	str	r3, [r7, #16]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	613b      	str	r3, [r7, #16]
 8005eea:	693b      	ldr	r3, [r7, #16]
        return;
 8005eec:	e06f      	b.n	8005fce <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	095b      	lsrs	r3, r3, #5
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d014      	beq.n	8005f24 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005efe:	f043 0201 	orr.w	r2, r3, #1
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005f06:	2300      	movs	r3, #0
 8005f08:	60fb      	str	r3, [r7, #12]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	60fb      	str	r3, [r7, #12]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d04f      	beq.n	8005fcc <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f3a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d104      	bne.n	8005f58 <HAL_SPI_IRQHandler+0x14c>
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	f003 0301 	and.w	r3, r3, #1
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d034      	beq.n	8005fc2 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 0203 	bic.w	r2, r2, #3
 8005f66:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d011      	beq.n	8005f94 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f74:	4a17      	ldr	r2, [pc, #92]	; (8005fd4 <HAL_SPI_IRQHandler+0x1c8>)
 8005f76:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7fc fdb5 	bl	8002aec <HAL_DMA_Abort_IT>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d005      	beq.n	8005f94 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f8c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d016      	beq.n	8005fca <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fa0:	4a0c      	ldr	r2, [pc, #48]	; (8005fd4 <HAL_SPI_IRQHandler+0x1c8>)
 8005fa2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7fc fd9f 	bl	8002aec <HAL_DMA_Abort_IT>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00a      	beq.n	8005fca <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005fc0:	e003      	b.n	8005fca <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f808 	bl	8005fd8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005fc8:	e000      	b.n	8005fcc <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8005fca:	bf00      	nop
    return;
 8005fcc:	bf00      	nop
  }
}
 8005fce:	3720      	adds	r7, #32
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	08005feb 	.word	0x08005feb

08005fd8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bc80      	pop	{r7}
 8005fe8:	4770      	bx	lr

08005fea <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b084      	sub	sp, #16
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff6:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f7ff ffe7 	bl	8005fd8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800600a:	bf00      	nop
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b084      	sub	sp, #16
 8006016:	af00      	add	r7, sp, #0
 8006018:	60f8      	str	r0, [r7, #12]
 800601a:	60b9      	str	r1, [r7, #8]
 800601c:	603b      	str	r3, [r7, #0]
 800601e:	4613      	mov	r3, r2
 8006020:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006022:	e04c      	b.n	80060be <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602a:	d048      	beq.n	80060be <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800602c:	f7fc fbc8 	bl	80027c0 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	683a      	ldr	r2, [r7, #0]
 8006038:	429a      	cmp	r2, r3
 800603a:	d902      	bls.n	8006042 <SPI_WaitFlagStateUntilTimeout+0x30>
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d13d      	bne.n	80060be <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006050:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800605a:	d111      	bne.n	8006080 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006064:	d004      	beq.n	8006070 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800606e:	d107      	bne.n	8006080 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800607e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006088:	d10f      	bne.n	80060aa <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006098:	601a      	str	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e00f      	b.n	80060de <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	689a      	ldr	r2, [r3, #8]
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	4013      	ands	r3, r2
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	bf0c      	ite	eq
 80060ce:	2301      	moveq	r3, #1
 80060d0:	2300      	movne	r3, #0
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	461a      	mov	r2, r3
 80060d6:	79fb      	ldrb	r3, [r7, #7]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d1a3      	bne.n	8006024 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b086      	sub	sp, #24
 80060ea:	af02      	add	r7, sp, #8
 80060ec:	60f8      	str	r0, [r7, #12]
 80060ee:	60b9      	str	r1, [r7, #8]
 80060f0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060fa:	d111      	bne.n	8006120 <SPI_EndRxTransaction+0x3a>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006104:	d004      	beq.n	8006110 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800610e:	d107      	bne.n	8006120 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800611e:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006128:	d117      	bne.n	800615a <SPI_EndRxTransaction+0x74>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006132:	d112      	bne.n	800615a <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2200      	movs	r2, #0
 800613c:	2101      	movs	r1, #1
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f7ff ff67 	bl	8006012 <SPI_WaitFlagStateUntilTimeout>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d01a      	beq.n	8006180 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800614e:	f043 0220 	orr.w	r2, r3, #32
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e013      	b.n	8006182 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	2200      	movs	r2, #0
 8006162:	2180      	movs	r1, #128	; 0x80
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f7ff ff54 	bl	8006012 <SPI_WaitFlagStateUntilTimeout>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d007      	beq.n	8006180 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006174:	f043 0220 	orr.w	r2, r3, #32
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e000      	b.n	8006182 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b086      	sub	sp, #24
 800618e:	af02      	add	r7, sp, #8
 8006190:	60f8      	str	r0, [r7, #12]
 8006192:	60b9      	str	r1, [r7, #8]
 8006194:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	2200      	movs	r2, #0
 800619e:	2180      	movs	r1, #128	; 0x80
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f7ff ff36 	bl	8006012 <SPI_WaitFlagStateUntilTimeout>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d007      	beq.n	80061bc <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b0:	f043 0220 	orr.w	r2, r3, #32
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e000      	b.n	80061be <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b082      	sub	sp, #8
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e03f      	b.n	8006258 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d106      	bne.n	80061f2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7fb ff71 	bl	80020d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2224      	movs	r2, #36	; 0x24
 80061f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68da      	ldr	r2, [r3, #12]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006208:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 fbe6 	bl	80069dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	691a      	ldr	r2, [r3, #16]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800621e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	695a      	ldr	r2, [r3, #20]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800622e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68da      	ldr	r2, [r3, #12]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800623e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2220      	movs	r2, #32
 800624a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2220      	movs	r2, #32
 8006252:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b088      	sub	sp, #32
 8006264:	af02      	add	r7, sp, #8
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	603b      	str	r3, [r7, #0]
 800626c:	4613      	mov	r3, r2
 800626e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006270:	2300      	movs	r3, #0
 8006272:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b20      	cmp	r3, #32
 800627e:	f040 8083 	bne.w	8006388 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d002      	beq.n	800628e <HAL_UART_Transmit+0x2e>
 8006288:	88fb      	ldrh	r3, [r7, #6]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e07b      	b.n	800638a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006298:	2b01      	cmp	r3, #1
 800629a:	d101      	bne.n	80062a0 <HAL_UART_Transmit+0x40>
 800629c:	2302      	movs	r3, #2
 800629e:	e074      	b.n	800638a <HAL_UART_Transmit+0x12a>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2221      	movs	r2, #33	; 0x21
 80062b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80062b6:	f7fc fa83 	bl	80027c0 <HAL_GetTick>
 80062ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	88fa      	ldrh	r2, [r7, #6]
 80062c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	88fa      	ldrh	r2, [r7, #6]
 80062c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80062c8:	e042      	b.n	8006350 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	3b01      	subs	r3, #1
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062e0:	d122      	bne.n	8006328 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	9300      	str	r3, [sp, #0]
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	2200      	movs	r2, #0
 80062ea:	2180      	movs	r1, #128	; 0x80
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f000 fa0c 	bl	800670a <UART_WaitOnFlagUntilTimeout>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e046      	b.n	800638a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	881b      	ldrh	r3, [r3, #0]
 8006304:	461a      	mov	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800630e:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d103      	bne.n	8006320 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	3302      	adds	r3, #2
 800631c:	60bb      	str	r3, [r7, #8]
 800631e:	e017      	b.n	8006350 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	3301      	adds	r3, #1
 8006324:	60bb      	str	r3, [r7, #8]
 8006326:	e013      	b.n	8006350 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	2200      	movs	r2, #0
 8006330:	2180      	movs	r1, #128	; 0x80
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f000 f9e9 	bl	800670a <UART_WaitOnFlagUntilTimeout>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e023      	b.n	800638a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	1c5a      	adds	r2, r3, #1
 8006346:	60ba      	str	r2, [r7, #8]
 8006348:	781a      	ldrb	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006354:	b29b      	uxth	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1b7      	bne.n	80062ca <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	2200      	movs	r2, #0
 8006362:	2140      	movs	r1, #64	; 0x40
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f000 f9d0 	bl	800670a <UART_WaitOnFlagUntilTimeout>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e00a      	b.n	800638a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2220      	movs	r2, #32
 8006378:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8006384:	2300      	movs	r3, #0
 8006386:	e000      	b.n	800638a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006388:	2302      	movs	r3, #2
  }
}
 800638a:	4618      	mov	r0, r3
 800638c:	3718      	adds	r7, #24
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b088      	sub	sp, #32
 8006396:	af02      	add	r7, sp, #8
 8006398:	60f8      	str	r0, [r7, #12]
 800639a:	60b9      	str	r1, [r7, #8]
 800639c:	603b      	str	r3, [r7, #0]
 800639e:	4613      	mov	r3, r2
 80063a0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b20      	cmp	r3, #32
 80063b0:	f040 8090 	bne.w	80064d4 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d002      	beq.n	80063c0 <HAL_UART_Receive+0x2e>
 80063ba:	88fb      	ldrh	r3, [r7, #6]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d101      	bne.n	80063c4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e088      	b.n	80064d6 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d101      	bne.n	80063d2 <HAL_UART_Receive+0x40>
 80063ce:	2302      	movs	r3, #2
 80063d0:	e081      	b.n	80064d6 <HAL_UART_Receive+0x144>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2222      	movs	r2, #34	; 0x22
 80063e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80063e8:	f7fc f9ea 	bl	80027c0 <HAL_GetTick>
 80063ec:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	88fa      	ldrh	r2, [r7, #6]
 80063f2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	88fa      	ldrh	r2, [r7, #6]
 80063f8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80063fa:	e05c      	b.n	80064b6 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006400:	b29b      	uxth	r3, r3
 8006402:	3b01      	subs	r3, #1
 8006404:	b29a      	uxth	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006412:	d12b      	bne.n	800646c <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	2200      	movs	r2, #0
 800641c:	2120      	movs	r1, #32
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f000 f973 	bl	800670a <UART_WaitOnFlagUntilTimeout>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d001      	beq.n	800642e <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e053      	b.n	80064d6 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10c      	bne.n	8006454 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	b29b      	uxth	r3, r3
 8006442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006446:	b29a      	uxth	r2, r3
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	3302      	adds	r3, #2
 8006450:	60bb      	str	r3, [r7, #8]
 8006452:	e030      	b.n	80064b6 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	b29b      	uxth	r3, r3
 800645c:	b2db      	uxtb	r3, r3
 800645e:	b29a      	uxth	r2, r3
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	3301      	adds	r3, #1
 8006468:	60bb      	str	r3, [r7, #8]
 800646a:	e024      	b.n	80064b6 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	2200      	movs	r2, #0
 8006474:	2120      	movs	r1, #32
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 f947 	bl	800670a <UART_WaitOnFlagUntilTimeout>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d001      	beq.n	8006486 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e027      	b.n	80064d6 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d108      	bne.n	80064a0 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	6859      	ldr	r1, [r3, #4]
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	1c5a      	adds	r2, r3, #1
 8006498:	60ba      	str	r2, [r7, #8]
 800649a:	b2ca      	uxtb	r2, r1
 800649c:	701a      	strb	r2, [r3, #0]
 800649e:	e00a      	b.n	80064b6 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	b2da      	uxtb	r2, r3
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	1c59      	adds	r1, r3, #1
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80064b2:	b2d2      	uxtb	r2, r2
 80064b4:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d19d      	bne.n	80063fc <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2220      	movs	r2, #32
 80064c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80064d0:	2300      	movs	r3, #0
 80064d2:	e000      	b.n	80064d6 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80064d4:	2302      	movs	r3, #2
  }
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
	...

080064e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b088      	sub	sp, #32
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006500:	2300      	movs	r3, #0
 8006502:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006504:	2300      	movs	r3, #0
 8006506:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	f003 030f 	and.w	r3, r3, #15
 800650e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10d      	bne.n	8006532 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	f003 0320 	and.w	r3, r3, #32
 800651c:	2b00      	cmp	r3, #0
 800651e:	d008      	beq.n	8006532 <HAL_UART_IRQHandler+0x52>
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	f003 0320 	and.w	r3, r3, #32
 8006526:	2b00      	cmp	r3, #0
 8006528:	d003      	beq.n	8006532 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f9d5 	bl	80068da <UART_Receive_IT>
      return;
 8006530:	e0cb      	b.n	80066ca <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 80ab 	beq.w	8006690 <HAL_UART_IRQHandler+0x1b0>
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b00      	cmp	r3, #0
 8006542:	d105      	bne.n	8006550 <HAL_UART_IRQHandler+0x70>
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800654a:	2b00      	cmp	r3, #0
 800654c:	f000 80a0 	beq.w	8006690 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <HAL_UART_IRQHandler+0x90>
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006560:	2b00      	cmp	r3, #0
 8006562:	d005      	beq.n	8006570 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006568:	f043 0201 	orr.w	r2, r3, #1
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	f003 0304 	and.w	r3, r3, #4
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00a      	beq.n	8006590 <HAL_UART_IRQHandler+0xb0>
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f003 0301 	and.w	r3, r3, #1
 8006580:	2b00      	cmp	r3, #0
 8006582:	d005      	beq.n	8006590 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006588:	f043 0202 	orr.w	r2, r3, #2
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	f003 0302 	and.w	r3, r3, #2
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00a      	beq.n	80065b0 <HAL_UART_IRQHandler+0xd0>
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f003 0301 	and.w	r3, r3, #1
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d005      	beq.n	80065b0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a8:	f043 0204 	orr.w	r2, r3, #4
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	f003 0308 	and.w	r3, r3, #8
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00a      	beq.n	80065d0 <HAL_UART_IRQHandler+0xf0>
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d005      	beq.n	80065d0 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c8:	f043 0208 	orr.w	r2, r3, #8
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d077      	beq.n	80066c8 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	f003 0320 	and.w	r3, r3, #32
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d007      	beq.n	80065f2 <HAL_UART_IRQHandler+0x112>
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	f003 0320 	and.w	r3, r3, #32
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d002      	beq.n	80065f2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 f974 	bl	80068da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	bf14      	ite	ne
 8006600:	2301      	movne	r3, #1
 8006602:	2300      	moveq	r3, #0
 8006604:	b2db      	uxtb	r3, r3
 8006606:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800660c:	f003 0308 	and.w	r3, r3, #8
 8006610:	2b00      	cmp	r3, #0
 8006612:	d102      	bne.n	800661a <HAL_UART_IRQHandler+0x13a>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d031      	beq.n	800667e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f8bf 	bl	800679e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800662a:	2b00      	cmp	r3, #0
 800662c:	d023      	beq.n	8006676 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	695a      	ldr	r2, [r3, #20]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800663c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006642:	2b00      	cmp	r3, #0
 8006644:	d013      	beq.n	800666e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800664a:	4a21      	ldr	r2, [pc, #132]	; (80066d0 <HAL_UART_IRQHandler+0x1f0>)
 800664c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006652:	4618      	mov	r0, r3
 8006654:	f7fc fa4a 	bl	8002aec <HAL_DMA_Abort_IT>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d016      	beq.n	800668c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006668:	4610      	mov	r0, r2
 800666a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800666c:	e00e      	b.n	800668c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f842 	bl	80066f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006674:	e00a      	b.n	800668c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f83e 	bl	80066f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800667c:	e006      	b.n	800668c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f83a 	bl	80066f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800668a:	e01d      	b.n	80066c8 <HAL_UART_IRQHandler+0x1e8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800668c:	bf00      	nop
    return;
 800668e:	e01b      	b.n	80066c8 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006696:	2b00      	cmp	r3, #0
 8006698:	d008      	beq.n	80066ac <HAL_UART_IRQHandler+0x1cc>
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d003      	beq.n	80066ac <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 f8ab 	bl	8006800 <UART_Transmit_IT>
    return;
 80066aa:	e00e      	b.n	80066ca <HAL_UART_IRQHandler+0x1ea>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d009      	beq.n	80066ca <HAL_UART_IRQHandler+0x1ea>
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d004      	beq.n	80066ca <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f8f2 	bl	80068aa <UART_EndTransmit_IT>
    return;
 80066c6:	e000      	b.n	80066ca <HAL_UART_IRQHandler+0x1ea>
    return;
 80066c8:	bf00      	nop
  }
}
 80066ca:	3720      	adds	r7, #32
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	080067d9 	.word	0x080067d9

080066d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bc80      	pop	{r7}
 80066e4:	4770      	bx	lr

080066e6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b083      	sub	sp, #12
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80066ee:	bf00      	nop
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bc80      	pop	{r7}
 80066f6:	4770      	bx	lr

080066f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	bc80      	pop	{r7}
 8006708:	4770      	bx	lr

0800670a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b084      	sub	sp, #16
 800670e:	af00      	add	r7, sp, #0
 8006710:	60f8      	str	r0, [r7, #12]
 8006712:	60b9      	str	r1, [r7, #8]
 8006714:	603b      	str	r3, [r7, #0]
 8006716:	4613      	mov	r3, r2
 8006718:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800671a:	e02c      	b.n	8006776 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006722:	d028      	beq.n	8006776 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d007      	beq.n	800673a <UART_WaitOnFlagUntilTimeout+0x30>
 800672a:	f7fc f849 	bl	80027c0 <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	429a      	cmp	r2, r3
 8006738:	d21d      	bcs.n	8006776 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68da      	ldr	r2, [r3, #12]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006748:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	695a      	ldr	r2, [r3, #20]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f022 0201 	bic.w	r2, r2, #1
 8006758:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2220      	movs	r2, #32
 800675e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2220      	movs	r2, #32
 8006766:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e00f      	b.n	8006796 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	4013      	ands	r3, r2
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	429a      	cmp	r2, r3
 8006784:	bf0c      	ite	eq
 8006786:	2301      	moveq	r3, #1
 8006788:	2300      	movne	r3, #0
 800678a:	b2db      	uxtb	r3, r3
 800678c:	461a      	mov	r2, r3
 800678e:	79fb      	ldrb	r3, [r7, #7]
 8006790:	429a      	cmp	r2, r3
 8006792:	d0c3      	beq.n	800671c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800679e:	b480      	push	{r7}
 80067a0:	b083      	sub	sp, #12
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68da      	ldr	r2, [r3, #12]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80067b4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	695a      	ldr	r2, [r3, #20]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f022 0201 	bic.w	r2, r2, #1
 80067c4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2220      	movs	r2, #32
 80067ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80067ce:	bf00      	nop
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bc80      	pop	{r7}
 80067d6:	4770      	bx	lr

080067d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f7ff ff80 	bl	80066f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067f8:	bf00      	nop
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b21      	cmp	r3, #33	; 0x21
 8006812:	d144      	bne.n	800689e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800681c:	d11a      	bne.n	8006854 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	881b      	ldrh	r3, [r3, #0]
 8006828:	461a      	mov	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006832:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d105      	bne.n	8006848 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a1b      	ldr	r3, [r3, #32]
 8006840:	1c9a      	adds	r2, r3, #2
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	621a      	str	r2, [r3, #32]
 8006846:	e00e      	b.n	8006866 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	1c5a      	adds	r2, r3, #1
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	621a      	str	r2, [r3, #32]
 8006852:	e008      	b.n	8006866 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a1b      	ldr	r3, [r3, #32]
 8006858:	1c59      	adds	r1, r3, #1
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	6211      	str	r1, [r2, #32]
 800685e:	781a      	ldrb	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800686a:	b29b      	uxth	r3, r3
 800686c:	3b01      	subs	r3, #1
 800686e:	b29b      	uxth	r3, r3
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	4619      	mov	r1, r3
 8006874:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10f      	bne.n	800689a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68da      	ldr	r2, [r3, #12]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006888:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68da      	ldr	r2, [r3, #12]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006898:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800689a:	2300      	movs	r3, #0
 800689c:	e000      	b.n	80068a0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800689e:	2302      	movs	r3, #2
  }
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bc80      	pop	{r7}
 80068a8:	4770      	bx	lr

080068aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b082      	sub	sp, #8
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68da      	ldr	r2, [r3, #12]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2220      	movs	r2, #32
 80068c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7ff ff02 	bl	80066d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b084      	sub	sp, #16
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b22      	cmp	r3, #34	; 0x22
 80068ec:	d171      	bne.n	80069d2 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068f6:	d123      	bne.n	8006940 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fc:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10e      	bne.n	8006924 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	b29b      	uxth	r3, r3
 800690e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006912:	b29a      	uxth	r2, r3
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691c:	1c9a      	adds	r2, r3, #2
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	629a      	str	r2, [r3, #40]	; 0x28
 8006922:	e029      	b.n	8006978 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	b29b      	uxth	r3, r3
 800692c:	b2db      	uxtb	r3, r3
 800692e:	b29a      	uxth	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006938:	1c5a      	adds	r2, r3, #1
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	629a      	str	r2, [r3, #40]	; 0x28
 800693e:	e01b      	b.n	8006978 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d10a      	bne.n	800695e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6858      	ldr	r0, [r3, #4]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006952:	1c59      	adds	r1, r3, #1
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	6291      	str	r1, [r2, #40]	; 0x28
 8006958:	b2c2      	uxtb	r2, r0
 800695a:	701a      	strb	r2, [r3, #0]
 800695c:	e00c      	b.n	8006978 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	b2da      	uxtb	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800696a:	1c58      	adds	r0, r3, #1
 800696c:	6879      	ldr	r1, [r7, #4]
 800696e:	6288      	str	r0, [r1, #40]	; 0x28
 8006970:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006974:	b2d2      	uxtb	r2, r2
 8006976:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800697c:	b29b      	uxth	r3, r3
 800697e:	3b01      	subs	r3, #1
 8006980:	b29b      	uxth	r3, r3
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	4619      	mov	r1, r3
 8006986:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006988:	2b00      	cmp	r3, #0
 800698a:	d120      	bne.n	80069ce <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68da      	ldr	r2, [r3, #12]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f022 0220 	bic.w	r2, r2, #32
 800699a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68da      	ldr	r2, [r3, #12]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	695a      	ldr	r2, [r3, #20]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f022 0201 	bic.w	r2, r2, #1
 80069ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2220      	movs	r2, #32
 80069c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f7ff fe8e 	bl	80066e6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	e002      	b.n	80069d4 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80069ce:	2300      	movs	r3, #0
 80069d0:	e000      	b.n	80069d4 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80069d2:	2302      	movs	r3, #2
  }
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68da      	ldr	r2, [r3, #12]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	430a      	orrs	r2, r1
 80069f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	689a      	ldr	r2, [r3, #8]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	431a      	orrs	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006a16:	f023 030c 	bic.w	r3, r3, #12
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	6812      	ldr	r2, [r2, #0]
 8006a1e:	68f9      	ldr	r1, [r7, #12]
 8006a20:	430b      	orrs	r3, r1
 8006a22:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	699a      	ldr	r2, [r3, #24]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	430a      	orrs	r2, r1
 8006a38:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a52      	ldr	r2, [pc, #328]	; (8006b88 <UART_SetConfig+0x1ac>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d14e      	bne.n	8006ae2 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006a44:	f7fe fa6c 	bl	8004f20 <HAL_RCC_GetPCLK2Freq>
 8006a48:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a4a:	68ba      	ldr	r2, [r7, #8]
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4413      	add	r3, r2
 8006a52:	009a      	lsls	r2, r3, #2
 8006a54:	441a      	add	r2, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a60:	4a4a      	ldr	r2, [pc, #296]	; (8006b8c <UART_SetConfig+0x1b0>)
 8006a62:	fba2 2303 	umull	r2, r3, r2, r3
 8006a66:	095b      	lsrs	r3, r3, #5
 8006a68:	0119      	lsls	r1, r3, #4
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4413      	add	r3, r2
 8006a72:	009a      	lsls	r2, r3, #2
 8006a74:	441a      	add	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a80:	4b42      	ldr	r3, [pc, #264]	; (8006b8c <UART_SetConfig+0x1b0>)
 8006a82:	fba3 0302 	umull	r0, r3, r3, r2
 8006a86:	095b      	lsrs	r3, r3, #5
 8006a88:	2064      	movs	r0, #100	; 0x64
 8006a8a:	fb00 f303 	mul.w	r3, r0, r3
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	011b      	lsls	r3, r3, #4
 8006a92:	3332      	adds	r3, #50	; 0x32
 8006a94:	4a3d      	ldr	r2, [pc, #244]	; (8006b8c <UART_SetConfig+0x1b0>)
 8006a96:	fba2 2303 	umull	r2, r3, r2, r3
 8006a9a:	095b      	lsrs	r3, r3, #5
 8006a9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006aa0:	4419      	add	r1, r3
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	009a      	lsls	r2, r3, #2
 8006aac:	441a      	add	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ab8:	4b34      	ldr	r3, [pc, #208]	; (8006b8c <UART_SetConfig+0x1b0>)
 8006aba:	fba3 0302 	umull	r0, r3, r3, r2
 8006abe:	095b      	lsrs	r3, r3, #5
 8006ac0:	2064      	movs	r0, #100	; 0x64
 8006ac2:	fb00 f303 	mul.w	r3, r0, r3
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	011b      	lsls	r3, r3, #4
 8006aca:	3332      	adds	r3, #50	; 0x32
 8006acc:	4a2f      	ldr	r2, [pc, #188]	; (8006b8c <UART_SetConfig+0x1b0>)
 8006ace:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad2:	095b      	lsrs	r3, r3, #5
 8006ad4:	f003 020f 	and.w	r2, r3, #15
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	440a      	add	r2, r1
 8006ade:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8006ae0:	e04d      	b.n	8006b7e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8006ae2:	f7fe fa09 	bl	8004ef8 <HAL_RCC_GetPCLK1Freq>
 8006ae6:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	4613      	mov	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	009a      	lsls	r2, r3, #2
 8006af2:	441a      	add	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006afe:	4a23      	ldr	r2, [pc, #140]	; (8006b8c <UART_SetConfig+0x1b0>)
 8006b00:	fba2 2303 	umull	r2, r3, r2, r3
 8006b04:	095b      	lsrs	r3, r3, #5
 8006b06:	0119      	lsls	r1, r3, #4
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4413      	add	r3, r2
 8006b10:	009a      	lsls	r2, r3, #2
 8006b12:	441a      	add	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b1e:	4b1b      	ldr	r3, [pc, #108]	; (8006b8c <UART_SetConfig+0x1b0>)
 8006b20:	fba3 0302 	umull	r0, r3, r3, r2
 8006b24:	095b      	lsrs	r3, r3, #5
 8006b26:	2064      	movs	r0, #100	; 0x64
 8006b28:	fb00 f303 	mul.w	r3, r0, r3
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	011b      	lsls	r3, r3, #4
 8006b30:	3332      	adds	r3, #50	; 0x32
 8006b32:	4a16      	ldr	r2, [pc, #88]	; (8006b8c <UART_SetConfig+0x1b0>)
 8006b34:	fba2 2303 	umull	r2, r3, r2, r3
 8006b38:	095b      	lsrs	r3, r3, #5
 8006b3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b3e:	4419      	add	r1, r3
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	4613      	mov	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	009a      	lsls	r2, r3, #2
 8006b4a:	441a      	add	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b56:	4b0d      	ldr	r3, [pc, #52]	; (8006b8c <UART_SetConfig+0x1b0>)
 8006b58:	fba3 0302 	umull	r0, r3, r3, r2
 8006b5c:	095b      	lsrs	r3, r3, #5
 8006b5e:	2064      	movs	r0, #100	; 0x64
 8006b60:	fb00 f303 	mul.w	r3, r0, r3
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	011b      	lsls	r3, r3, #4
 8006b68:	3332      	adds	r3, #50	; 0x32
 8006b6a:	4a08      	ldr	r2, [pc, #32]	; (8006b8c <UART_SetConfig+0x1b0>)
 8006b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b70:	095b      	lsrs	r3, r3, #5
 8006b72:	f003 020f 	and.w	r2, r3, #15
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	440a      	add	r2, r1
 8006b7c:	609a      	str	r2, [r3, #8]
}
 8006b7e:	bf00      	nop
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	40013800 	.word	0x40013800
 8006b8c:	51eb851f 	.word	0x51eb851f

08006b90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006b90:	b084      	sub	sp, #16
 8006b92:	b480      	push	{r7}
 8006b94:	b083      	sub	sp, #12
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
 8006b9a:	f107 0014 	add.w	r0, r7, #20
 8006b9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bc80      	pop	{r7}
 8006bac:	b004      	add	sp, #16
 8006bae:	4770      	bx	lr

08006bb0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006bb8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006bbc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	43db      	mvns	r3, r3
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	4013      	ands	r3, r2
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3714      	adds	r7, #20
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bc80      	pop	{r7}
 8006be2:	4770      	bx	lr

08006be4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	460b      	mov	r3, r1
 8006bee:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	370c      	adds	r7, #12
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bc80      	pop	{r7}
 8006bfa:	4770      	bx	lr

08006bfc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006bfc:	b084      	sub	sp, #16
 8006bfe:	b480      	push	{r7}
 8006c00:	b083      	sub	sp, #12
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
 8006c06:	f107 0014 	add.w	r0, r7, #20
 8006c0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bc80      	pop	{r7}
 8006c38:	b004      	add	sp, #16
 8006c3a:	4770      	bx	lr

08006c3c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b0c4      	sub	sp, #272	; 0x110
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	1d3b      	adds	r3, r7, #4
 8006c44:	6018      	str	r0, [r3, #0]
 8006c46:	463b      	mov	r3, r7
 8006c48:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c4a:	463b      	mov	r3, r7
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	785b      	ldrb	r3, [r3, #1]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	f040 8557 	bne.w	8007704 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006c56:	463b      	mov	r3, r7
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	699a      	ldr	r2, [r3, #24]
 8006c5c:	463b      	mov	r3, r7
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d905      	bls.n	8006c72 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006c66:	463b      	mov	r3, r7
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006c70:	e004      	b.n	8006c7c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006c72:	463b      	mov	r3, r7
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006c7c:	463b      	mov	r3, r7
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	7b1b      	ldrb	r3, [r3, #12]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d12c      	bne.n	8006ce0 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006c86:	463b      	mov	r3, r7
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	6959      	ldr	r1, [r3, #20]
 8006c8c:	463b      	mov	r3, r7
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	88da      	ldrh	r2, [r3, #6]
 8006c92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	1d38      	adds	r0, r7, #4
 8006c9a:	6800      	ldr	r0, [r0, #0]
 8006c9c:	f001 f91a 	bl	8007ed4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006ca0:	1d3b      	adds	r3, r7, #4
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	617b      	str	r3, [r7, #20]
 8006ca6:	1d3b      	adds	r3, r7, #4
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	617b      	str	r3, [r7, #20]
 8006cb8:	463b      	mov	r3, r7
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	011a      	lsls	r2, r3, #4
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006cc8:	f107 0310 	add.w	r3, r7, #16
 8006ccc:	601a      	str	r2, [r3, #0]
 8006cce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	f107 0310 	add.w	r3, r7, #16
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	801a      	strh	r2, [r3, #0]
 8006cdc:	f000 bcdd 	b.w	800769a <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006ce0:	463b      	mov	r3, r7
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	78db      	ldrb	r3, [r3, #3]
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	f040 8347 	bne.w	800737a <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006cec:	463b      	mov	r3, r7
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	6a1a      	ldr	r2, [r3, #32]
 8006cf2:	463b      	mov	r3, r7
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	f240 82eb 	bls.w	80072d4 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006cfe:	1d3b      	adds	r3, r7, #4
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	463b      	mov	r3, r7
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	4413      	add	r3, r2
 8006d0c:	881b      	ldrh	r3, [r3, #0]
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d18:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8006d1c:	1d3b      	adds	r3, r7, #4
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	463b      	mov	r3, r7
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	441a      	add	r2, r3
 8006d2a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006d2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d36:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006d42:	463b      	mov	r3, r7
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	6a1a      	ldr	r2, [r3, #32]
 8006d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d4c:	1ad2      	subs	r2, r2, r3
 8006d4e:	463b      	mov	r3, r7
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d54:	1d3b      	adds	r3, r7, #4
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	463b      	mov	r3, r7
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	881b      	ldrh	r3, [r3, #0]
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f000 8159 	beq.w	8007022 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d70:	1d3b      	adds	r3, r7, #4
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	637b      	str	r3, [r7, #52]	; 0x34
 8006d76:	463b      	mov	r3, r7
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	785b      	ldrb	r3, [r3, #1]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d164      	bne.n	8006e4a <USB_EPStartXfer+0x20e>
 8006d80:	1d3b      	adds	r3, r7, #4
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d86:	1d3b      	adds	r3, r7, #4
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	461a      	mov	r2, r3
 8006d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d94:	4413      	add	r3, r2
 8006d96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d98:	463b      	mov	r3, r7
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	011a      	lsls	r2, r3, #4
 8006da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da2:	4413      	add	r3, r2
 8006da4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006da8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d112      	bne.n	8006dd8 <USB_EPStartXfer+0x19c>
 8006db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db4:	881b      	ldrh	r3, [r3, #0]
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc0:	801a      	strh	r2, [r3, #0]
 8006dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc4:	881b      	ldrh	r3, [r3, #0]
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd4:	801a      	strh	r2, [r3, #0]
 8006dd6:	e054      	b.n	8006e82 <USB_EPStartXfer+0x246>
 8006dd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ddc:	2b3e      	cmp	r3, #62	; 0x3e
 8006dde:	d817      	bhi.n	8006e10 <USB_EPStartXfer+0x1d4>
 8006de0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006de4:	085b      	lsrs	r3, r3, #1
 8006de6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006dea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d004      	beq.n	8006e00 <USB_EPStartXfer+0x1c4>
 8006df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	029b      	lsls	r3, r3, #10
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0c:	801a      	strh	r2, [r3, #0]
 8006e0e:	e038      	b.n	8006e82 <USB_EPStartXfer+0x246>
 8006e10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e14:	095b      	lsrs	r3, r3, #5
 8006e16:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006e1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e1e:	f003 031f 	and.w	r3, r3, #31
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d104      	bne.n	8006e30 <USB_EPStartXfer+0x1f4>
 8006e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	029b      	lsls	r3, r3, #10
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e46:	801a      	strh	r2, [r3, #0]
 8006e48:	e01b      	b.n	8006e82 <USB_EPStartXfer+0x246>
 8006e4a:	463b      	mov	r3, r7
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	785b      	ldrb	r3, [r3, #1]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d116      	bne.n	8006e82 <USB_EPStartXfer+0x246>
 8006e54:	1d3b      	adds	r3, r7, #4
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	461a      	mov	r2, r3
 8006e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e62:	4413      	add	r3, r2
 8006e64:	637b      	str	r3, [r7, #52]	; 0x34
 8006e66:	463b      	mov	r3, r7
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	011a      	lsls	r2, r3, #4
 8006e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e70:	4413      	add	r3, r2
 8006e72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e76:	633b      	str	r3, [r7, #48]	; 0x30
 8006e78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e80:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006e82:	463b      	mov	r3, r7
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	895b      	ldrh	r3, [r3, #10]
 8006e88:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e8c:	463b      	mov	r3, r7
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6959      	ldr	r1, [r3, #20]
 8006e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006e9c:	1d38      	adds	r0, r7, #4
 8006e9e:	6800      	ldr	r0, [r0, #0]
 8006ea0:	f001 f818 	bl	8007ed4 <USB_WritePMA>
            ep->xfer_buff += len;
 8006ea4:	463b      	mov	r3, r7
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	695a      	ldr	r2, [r3, #20]
 8006eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006eae:	441a      	add	r2, r3
 8006eb0:	463b      	mov	r3, r7
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006eb6:	463b      	mov	r3, r7
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	6a1a      	ldr	r2, [r3, #32]
 8006ebc:	463b      	mov	r3, r7
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d909      	bls.n	8006eda <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8006ec6:	463b      	mov	r3, r7
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	6a1a      	ldr	r2, [r3, #32]
 8006ecc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ed0:	1ad2      	subs	r2, r2, r3
 8006ed2:	463b      	mov	r3, r7
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	621a      	str	r2, [r3, #32]
 8006ed8:	e008      	b.n	8006eec <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006eda:	463b      	mov	r3, r7
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	6a1b      	ldr	r3, [r3, #32]
 8006ee0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8006ee4:	463b      	mov	r3, r7
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006eec:	463b      	mov	r3, r7
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	785b      	ldrb	r3, [r3, #1]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d164      	bne.n	8006fc0 <USB_EPStartXfer+0x384>
 8006ef6:	1d3b      	adds	r3, r7, #4
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	61fb      	str	r3, [r7, #28]
 8006efc:	1d3b      	adds	r3, r7, #4
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	461a      	mov	r2, r3
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	61fb      	str	r3, [r7, #28]
 8006f0e:	463b      	mov	r3, r7
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	011a      	lsls	r2, r3, #4
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	4413      	add	r3, r2
 8006f1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f1e:	61bb      	str	r3, [r7, #24]
 8006f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d112      	bne.n	8006f4e <USB_EPStartXfer+0x312>
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	881b      	ldrh	r3, [r3, #0]
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	801a      	strh	r2, [r3, #0]
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	881b      	ldrh	r3, [r3, #0]
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	801a      	strh	r2, [r3, #0]
 8006f4c:	e057      	b.n	8006ffe <USB_EPStartXfer+0x3c2>
 8006f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f52:	2b3e      	cmp	r3, #62	; 0x3e
 8006f54:	d817      	bhi.n	8006f86 <USB_EPStartXfer+0x34a>
 8006f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f5a:	085b      	lsrs	r3, r3, #1
 8006f5c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f64:	f003 0301 	and.w	r3, r3, #1
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d004      	beq.n	8006f76 <USB_EPStartXfer+0x33a>
 8006f6c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f70:	3301      	adds	r3, #1
 8006f72:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006f76:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	029b      	lsls	r3, r3, #10
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	801a      	strh	r2, [r3, #0]
 8006f84:	e03b      	b.n	8006ffe <USB_EPStartXfer+0x3c2>
 8006f86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f8a:	095b      	lsrs	r3, r3, #5
 8006f8c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f94:	f003 031f 	and.w	r3, r3, #31
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d104      	bne.n	8006fa6 <USB_EPStartXfer+0x36a>
 8006f9c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006fa6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	029b      	lsls	r3, r3, #10
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	801a      	strh	r2, [r3, #0]
 8006fbe:	e01e      	b.n	8006ffe <USB_EPStartXfer+0x3c2>
 8006fc0:	463b      	mov	r3, r7
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	785b      	ldrb	r3, [r3, #1]
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d119      	bne.n	8006ffe <USB_EPStartXfer+0x3c2>
 8006fca:	1d3b      	adds	r3, r7, #4
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	627b      	str	r3, [r7, #36]	; 0x24
 8006fd0:	1d3b      	adds	r3, r7, #4
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	461a      	mov	r2, r3
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fde:	4413      	add	r3, r2
 8006fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8006fe2:	463b      	mov	r3, r7
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	011a      	lsls	r2, r3, #4
 8006fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fec:	4413      	add	r3, r2
 8006fee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ff2:	623b      	str	r3, [r7, #32]
 8006ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	6a3b      	ldr	r3, [r7, #32]
 8006ffc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006ffe:	463b      	mov	r3, r7
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	891b      	ldrh	r3, [r3, #8]
 8007004:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007008:	463b      	mov	r3, r7
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6959      	ldr	r1, [r3, #20]
 800700e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007012:	b29b      	uxth	r3, r3
 8007014:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007018:	1d38      	adds	r0, r7, #4
 800701a:	6800      	ldr	r0, [r0, #0]
 800701c:	f000 ff5a 	bl	8007ed4 <USB_WritePMA>
 8007020:	e33b      	b.n	800769a <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007022:	463b      	mov	r3, r7
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	785b      	ldrb	r3, [r3, #1]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d164      	bne.n	80070f6 <USB_EPStartXfer+0x4ba>
 800702c:	1d3b      	adds	r3, r7, #4
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007032:	1d3b      	adds	r3, r7, #4
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800703a:	b29b      	uxth	r3, r3
 800703c:	461a      	mov	r2, r3
 800703e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007040:	4413      	add	r3, r2
 8007042:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007044:	463b      	mov	r3, r7
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	011a      	lsls	r2, r3, #4
 800704c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800704e:	4413      	add	r3, r2
 8007050:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007054:	64bb      	str	r3, [r7, #72]	; 0x48
 8007056:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800705a:	2b00      	cmp	r3, #0
 800705c:	d112      	bne.n	8007084 <USB_EPStartXfer+0x448>
 800705e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007060:	881b      	ldrh	r3, [r3, #0]
 8007062:	b29b      	uxth	r3, r3
 8007064:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007068:	b29a      	uxth	r2, r3
 800706a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800706c:	801a      	strh	r2, [r3, #0]
 800706e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007070:	881b      	ldrh	r3, [r3, #0]
 8007072:	b29b      	uxth	r3, r3
 8007074:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007078:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800707c:	b29a      	uxth	r2, r3
 800707e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007080:	801a      	strh	r2, [r3, #0]
 8007082:	e057      	b.n	8007134 <USB_EPStartXfer+0x4f8>
 8007084:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007088:	2b3e      	cmp	r3, #62	; 0x3e
 800708a:	d817      	bhi.n	80070bc <USB_EPStartXfer+0x480>
 800708c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007090:	085b      	lsrs	r3, r3, #1
 8007092:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007096:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d004      	beq.n	80070ac <USB_EPStartXfer+0x470>
 80070a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070a6:	3301      	adds	r3, #1
 80070a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80070ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	029b      	lsls	r3, r3, #10
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070b8:	801a      	strh	r2, [r3, #0]
 80070ba:	e03b      	b.n	8007134 <USB_EPStartXfer+0x4f8>
 80070bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070c0:	095b      	lsrs	r3, r3, #5
 80070c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80070c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070ca:	f003 031f 	and.w	r3, r3, #31
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d104      	bne.n	80070dc <USB_EPStartXfer+0x4a0>
 80070d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070d6:	3b01      	subs	r3, #1
 80070d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80070dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	029b      	lsls	r3, r3, #10
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070f2:	801a      	strh	r2, [r3, #0]
 80070f4:	e01e      	b.n	8007134 <USB_EPStartXfer+0x4f8>
 80070f6:	463b      	mov	r3, r7
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	785b      	ldrb	r3, [r3, #1]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d119      	bne.n	8007134 <USB_EPStartXfer+0x4f8>
 8007100:	1d3b      	adds	r3, r7, #4
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	657b      	str	r3, [r7, #84]	; 0x54
 8007106:	1d3b      	adds	r3, r7, #4
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800710e:	b29b      	uxth	r3, r3
 8007110:	461a      	mov	r2, r3
 8007112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007114:	4413      	add	r3, r2
 8007116:	657b      	str	r3, [r7, #84]	; 0x54
 8007118:	463b      	mov	r3, r7
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	011a      	lsls	r2, r3, #4
 8007120:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007122:	4413      	add	r3, r2
 8007124:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007128:	653b      	str	r3, [r7, #80]	; 0x50
 800712a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800712e:	b29a      	uxth	r2, r3
 8007130:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007132:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007134:	463b      	mov	r3, r7
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	891b      	ldrh	r3, [r3, #8]
 800713a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800713e:	463b      	mov	r3, r7
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	6959      	ldr	r1, [r3, #20]
 8007144:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007148:	b29b      	uxth	r3, r3
 800714a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800714e:	1d38      	adds	r0, r7, #4
 8007150:	6800      	ldr	r0, [r0, #0]
 8007152:	f000 febf 	bl	8007ed4 <USB_WritePMA>
            ep->xfer_buff += len;
 8007156:	463b      	mov	r3, r7
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	695a      	ldr	r2, [r3, #20]
 800715c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007160:	441a      	add	r2, r3
 8007162:	463b      	mov	r3, r7
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007168:	463b      	mov	r3, r7
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6a1a      	ldr	r2, [r3, #32]
 800716e:	463b      	mov	r3, r7
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	429a      	cmp	r2, r3
 8007176:	d909      	bls.n	800718c <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8007178:	463b      	mov	r3, r7
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	6a1a      	ldr	r2, [r3, #32]
 800717e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007182:	1ad2      	subs	r2, r2, r3
 8007184:	463b      	mov	r3, r7
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	621a      	str	r2, [r3, #32]
 800718a:	e008      	b.n	800719e <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 800718c:	463b      	mov	r3, r7
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8007196:	463b      	mov	r3, r7
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2200      	movs	r2, #0
 800719c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800719e:	1d3b      	adds	r3, r7, #4
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	647b      	str	r3, [r7, #68]	; 0x44
 80071a4:	463b      	mov	r3, r7
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	785b      	ldrb	r3, [r3, #1]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d164      	bne.n	8007278 <USB_EPStartXfer+0x63c>
 80071ae:	1d3b      	adds	r3, r7, #4
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071b4:	1d3b      	adds	r3, r7, #4
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071bc:	b29b      	uxth	r3, r3
 80071be:	461a      	mov	r2, r3
 80071c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071c2:	4413      	add	r3, r2
 80071c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071c6:	463b      	mov	r3, r7
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	011a      	lsls	r2, r3, #4
 80071ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071d0:	4413      	add	r3, r2
 80071d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80071d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80071d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d112      	bne.n	8007206 <USB_EPStartXfer+0x5ca>
 80071e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e2:	881b      	ldrh	r3, [r3, #0]
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ee:	801a      	strh	r2, [r3, #0]
 80071f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f2:	881b      	ldrh	r3, [r3, #0]
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071fe:	b29a      	uxth	r2, r3
 8007200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007202:	801a      	strh	r2, [r3, #0]
 8007204:	e054      	b.n	80072b0 <USB_EPStartXfer+0x674>
 8007206:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800720a:	2b3e      	cmp	r3, #62	; 0x3e
 800720c:	d817      	bhi.n	800723e <USB_EPStartXfer+0x602>
 800720e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007212:	085b      	lsrs	r3, r3, #1
 8007214:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007218:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800721c:	f003 0301 	and.w	r3, r3, #1
 8007220:	2b00      	cmp	r3, #0
 8007222:	d004      	beq.n	800722e <USB_EPStartXfer+0x5f2>
 8007224:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007228:	3301      	adds	r3, #1
 800722a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800722e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007232:	b29b      	uxth	r3, r3
 8007234:	029b      	lsls	r3, r3, #10
 8007236:	b29a      	uxth	r2, r3
 8007238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723a:	801a      	strh	r2, [r3, #0]
 800723c:	e038      	b.n	80072b0 <USB_EPStartXfer+0x674>
 800723e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007242:	095b      	lsrs	r3, r3, #5
 8007244:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007248:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800724c:	f003 031f 	and.w	r3, r3, #31
 8007250:	2b00      	cmp	r3, #0
 8007252:	d104      	bne.n	800725e <USB_EPStartXfer+0x622>
 8007254:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007258:	3b01      	subs	r3, #1
 800725a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800725e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007262:	b29b      	uxth	r3, r3
 8007264:	029b      	lsls	r3, r3, #10
 8007266:	b29b      	uxth	r3, r3
 8007268:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800726c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007270:	b29a      	uxth	r2, r3
 8007272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007274:	801a      	strh	r2, [r3, #0]
 8007276:	e01b      	b.n	80072b0 <USB_EPStartXfer+0x674>
 8007278:	463b      	mov	r3, r7
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	785b      	ldrb	r3, [r3, #1]
 800727e:	2b01      	cmp	r3, #1
 8007280:	d116      	bne.n	80072b0 <USB_EPStartXfer+0x674>
 8007282:	1d3b      	adds	r3, r7, #4
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800728a:	b29b      	uxth	r3, r3
 800728c:	461a      	mov	r2, r3
 800728e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007290:	4413      	add	r3, r2
 8007292:	647b      	str	r3, [r7, #68]	; 0x44
 8007294:	463b      	mov	r3, r7
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	011a      	lsls	r2, r3, #4
 800729c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800729e:	4413      	add	r3, r2
 80072a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072a4:	643b      	str	r3, [r7, #64]	; 0x40
 80072a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80072b0:	463b      	mov	r3, r7
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	895b      	ldrh	r3, [r3, #10]
 80072b6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072ba:	463b      	mov	r3, r7
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	6959      	ldr	r1, [r3, #20]
 80072c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80072ca:	1d38      	adds	r0, r7, #4
 80072cc:	6800      	ldr	r0, [r0, #0]
 80072ce:	f000 fe01 	bl	8007ed4 <USB_WritePMA>
 80072d2:	e1e2      	b.n	800769a <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80072d4:	463b      	mov	r3, r7
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	6a1b      	ldr	r3, [r3, #32]
 80072da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80072de:	1d3b      	adds	r3, r7, #4
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	463b      	mov	r3, r7
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	881b      	ldrh	r3, [r3, #0]
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80072f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072f8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80072fc:	1d3b      	adds	r3, r7, #4
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	463b      	mov	r3, r7
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	441a      	add	r2, r3
 800730a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800730e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007312:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800731a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800731e:	b29b      	uxth	r3, r3
 8007320:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007322:	1d3b      	adds	r3, r7, #4
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	663b      	str	r3, [r7, #96]	; 0x60
 8007328:	1d3b      	adds	r3, r7, #4
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007330:	b29b      	uxth	r3, r3
 8007332:	461a      	mov	r2, r3
 8007334:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007336:	4413      	add	r3, r2
 8007338:	663b      	str	r3, [r7, #96]	; 0x60
 800733a:	463b      	mov	r3, r7
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	011a      	lsls	r2, r3, #4
 8007342:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007344:	4413      	add	r3, r2
 8007346:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800734a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800734c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007350:	b29a      	uxth	r2, r3
 8007352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007354:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007356:	463b      	mov	r3, r7
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	891b      	ldrh	r3, [r3, #8]
 800735c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007360:	463b      	mov	r3, r7
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6959      	ldr	r1, [r3, #20]
 8007366:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800736a:	b29b      	uxth	r3, r3
 800736c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007370:	1d38      	adds	r0, r7, #4
 8007372:	6800      	ldr	r0, [r0, #0]
 8007374:	f000 fdae 	bl	8007ed4 <USB_WritePMA>
 8007378:	e18f      	b.n	800769a <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800737a:	1d3b      	adds	r3, r7, #4
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	463b      	mov	r3, r7
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	4413      	add	r3, r2
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	b29b      	uxth	r3, r3
 800738c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007390:	2b00      	cmp	r3, #0
 8007392:	f000 808f 	beq.w	80074b4 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007396:	1d3b      	adds	r3, r7, #4
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	67bb      	str	r3, [r7, #120]	; 0x78
 800739c:	463b      	mov	r3, r7
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	785b      	ldrb	r3, [r3, #1]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d164      	bne.n	8007470 <USB_EPStartXfer+0x834>
 80073a6:	1d3b      	adds	r3, r7, #4
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	673b      	str	r3, [r7, #112]	; 0x70
 80073ac:	1d3b      	adds	r3, r7, #4
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	461a      	mov	r2, r3
 80073b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073ba:	4413      	add	r3, r2
 80073bc:	673b      	str	r3, [r7, #112]	; 0x70
 80073be:	463b      	mov	r3, r7
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	011a      	lsls	r2, r3, #4
 80073c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073c8:	4413      	add	r3, r2
 80073ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80073ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d112      	bne.n	80073fe <USB_EPStartXfer+0x7c2>
 80073d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073da:	881b      	ldrh	r3, [r3, #0]
 80073dc:	b29b      	uxth	r3, r3
 80073de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073e6:	801a      	strh	r2, [r3, #0]
 80073e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ea:	881b      	ldrh	r3, [r3, #0]
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073fa:	801a      	strh	r2, [r3, #0]
 80073fc:	e054      	b.n	80074a8 <USB_EPStartXfer+0x86c>
 80073fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007402:	2b3e      	cmp	r3, #62	; 0x3e
 8007404:	d817      	bhi.n	8007436 <USB_EPStartXfer+0x7fa>
 8007406:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800740a:	085b      	lsrs	r3, r3, #1
 800740c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007410:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007414:	f003 0301 	and.w	r3, r3, #1
 8007418:	2b00      	cmp	r3, #0
 800741a:	d004      	beq.n	8007426 <USB_EPStartXfer+0x7ea>
 800741c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007420:	3301      	adds	r3, #1
 8007422:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800742a:	b29b      	uxth	r3, r3
 800742c:	029b      	lsls	r3, r3, #10
 800742e:	b29a      	uxth	r2, r3
 8007430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007432:	801a      	strh	r2, [r3, #0]
 8007434:	e038      	b.n	80074a8 <USB_EPStartXfer+0x86c>
 8007436:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800743a:	095b      	lsrs	r3, r3, #5
 800743c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007440:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007444:	f003 031f 	and.w	r3, r3, #31
 8007448:	2b00      	cmp	r3, #0
 800744a:	d104      	bne.n	8007456 <USB_EPStartXfer+0x81a>
 800744c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007450:	3b01      	subs	r3, #1
 8007452:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800745a:	b29b      	uxth	r3, r3
 800745c:	029b      	lsls	r3, r3, #10
 800745e:	b29b      	uxth	r3, r3
 8007460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007468:	b29a      	uxth	r2, r3
 800746a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800746c:	801a      	strh	r2, [r3, #0]
 800746e:	e01b      	b.n	80074a8 <USB_EPStartXfer+0x86c>
 8007470:	463b      	mov	r3, r7
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	785b      	ldrb	r3, [r3, #1]
 8007476:	2b01      	cmp	r3, #1
 8007478:	d116      	bne.n	80074a8 <USB_EPStartXfer+0x86c>
 800747a:	1d3b      	adds	r3, r7, #4
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007482:	b29b      	uxth	r3, r3
 8007484:	461a      	mov	r2, r3
 8007486:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007488:	4413      	add	r3, r2
 800748a:	67bb      	str	r3, [r7, #120]	; 0x78
 800748c:	463b      	mov	r3, r7
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	011a      	lsls	r2, r3, #4
 8007494:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007496:	4413      	add	r3, r2
 8007498:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800749c:	677b      	str	r3, [r7, #116]	; 0x74
 800749e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074a6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80074a8:	463b      	mov	r3, r7
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	895b      	ldrh	r3, [r3, #10]
 80074ae:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 80074b2:	e097      	b.n	80075e4 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80074b4:	463b      	mov	r3, r7
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	785b      	ldrb	r3, [r3, #1]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d168      	bne.n	8007590 <USB_EPStartXfer+0x954>
 80074be:	1d3b      	adds	r3, r7, #4
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074c6:	1d3b      	adds	r3, r7, #4
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	461a      	mov	r2, r3
 80074d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80074d6:	4413      	add	r3, r2
 80074d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074dc:	463b      	mov	r3, r7
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	011a      	lsls	r2, r3, #4
 80074e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80074e8:	4413      	add	r3, r2
 80074ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80074ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80074f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d112      	bne.n	800751e <USB_EPStartXfer+0x8e2>
 80074f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80074fa:	881b      	ldrh	r3, [r3, #0]
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007502:	b29a      	uxth	r2, r3
 8007504:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007506:	801a      	strh	r2, [r3, #0]
 8007508:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800750a:	881b      	ldrh	r3, [r3, #0]
 800750c:	b29b      	uxth	r3, r3
 800750e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007512:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007516:	b29a      	uxth	r2, r3
 8007518:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800751a:	801a      	strh	r2, [r3, #0]
 800751c:	e05d      	b.n	80075da <USB_EPStartXfer+0x99e>
 800751e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007522:	2b3e      	cmp	r3, #62	; 0x3e
 8007524:	d817      	bhi.n	8007556 <USB_EPStartXfer+0x91a>
 8007526:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800752a:	085b      	lsrs	r3, r3, #1
 800752c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007530:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007534:	f003 0301 	and.w	r3, r3, #1
 8007538:	2b00      	cmp	r3, #0
 800753a:	d004      	beq.n	8007546 <USB_EPStartXfer+0x90a>
 800753c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007540:	3301      	adds	r3, #1
 8007542:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007546:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800754a:	b29b      	uxth	r3, r3
 800754c:	029b      	lsls	r3, r3, #10
 800754e:	b29a      	uxth	r2, r3
 8007550:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007552:	801a      	strh	r2, [r3, #0]
 8007554:	e041      	b.n	80075da <USB_EPStartXfer+0x99e>
 8007556:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800755a:	095b      	lsrs	r3, r3, #5
 800755c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007560:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007564:	f003 031f 	and.w	r3, r3, #31
 8007568:	2b00      	cmp	r3, #0
 800756a:	d104      	bne.n	8007576 <USB_EPStartXfer+0x93a>
 800756c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007570:	3b01      	subs	r3, #1
 8007572:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007576:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800757a:	b29b      	uxth	r3, r3
 800757c:	029b      	lsls	r3, r3, #10
 800757e:	b29b      	uxth	r3, r3
 8007580:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007584:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007588:	b29a      	uxth	r2, r3
 800758a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800758c:	801a      	strh	r2, [r3, #0]
 800758e:	e024      	b.n	80075da <USB_EPStartXfer+0x99e>
 8007590:	463b      	mov	r3, r7
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	785b      	ldrb	r3, [r3, #1]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d11f      	bne.n	80075da <USB_EPStartXfer+0x99e>
 800759a:	1d3b      	adds	r3, r7, #4
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80075a2:	1d3b      	adds	r3, r7, #4
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	461a      	mov	r2, r3
 80075ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075b2:	4413      	add	r3, r2
 80075b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80075b8:	463b      	mov	r3, r7
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	011a      	lsls	r2, r3, #4
 80075c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075c4:	4413      	add	r3, r2
 80075c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80075ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80075ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075d8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80075da:	463b      	mov	r3, r7
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	891b      	ldrh	r3, [r3, #8]
 80075e0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075e4:	463b      	mov	r3, r7
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	6959      	ldr	r1, [r3, #20]
 80075ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80075f4:	1d38      	adds	r0, r7, #4
 80075f6:	6800      	ldr	r0, [r0, #0]
 80075f8:	f000 fc6c 	bl	8007ed4 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80075fc:	463b      	mov	r3, r7
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	785b      	ldrb	r3, [r3, #1]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d122      	bne.n	800764c <USB_EPStartXfer+0xa10>
 8007606:	1d3b      	adds	r3, r7, #4
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	463b      	mov	r3, r7
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	4413      	add	r3, r2
 8007614:	881b      	ldrh	r3, [r3, #0]
 8007616:	b29b      	uxth	r3, r3
 8007618:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800761c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007620:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8007624:	1d3b      	adds	r3, r7, #4
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	463b      	mov	r3, r7
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	441a      	add	r2, r3
 8007632:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8007636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800763a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800763e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007642:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007646:	b29b      	uxth	r3, r3
 8007648:	8013      	strh	r3, [r2, #0]
 800764a:	e026      	b.n	800769a <USB_EPStartXfer+0xa5e>
 800764c:	463b      	mov	r3, r7
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	785b      	ldrb	r3, [r3, #1]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d121      	bne.n	800769a <USB_EPStartXfer+0xa5e>
 8007656:	1d3b      	adds	r3, r7, #4
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	463b      	mov	r3, r7
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4413      	add	r3, r2
 8007664:	881b      	ldrh	r3, [r3, #0]
 8007666:	b29b      	uxth	r3, r3
 8007668:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800766c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007670:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8007674:	1d3b      	adds	r3, r7, #4
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	463b      	mov	r3, r7
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	441a      	add	r2, r3
 8007682:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8007686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800768a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800768e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007696:	b29b      	uxth	r3, r3
 8007698:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800769a:	1d3b      	adds	r3, r7, #4
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	463b      	mov	r3, r7
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	4413      	add	r3, r2
 80076a8:	881b      	ldrh	r3, [r3, #0]
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	f107 020e 	add.w	r2, r7, #14
 80076b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076b8:	8013      	strh	r3, [r2, #0]
 80076ba:	f107 030e 	add.w	r3, r7, #14
 80076be:	f107 020e 	add.w	r2, r7, #14
 80076c2:	8812      	ldrh	r2, [r2, #0]
 80076c4:	f082 0210 	eor.w	r2, r2, #16
 80076c8:	801a      	strh	r2, [r3, #0]
 80076ca:	f107 030e 	add.w	r3, r7, #14
 80076ce:	f107 020e 	add.w	r2, r7, #14
 80076d2:	8812      	ldrh	r2, [r2, #0]
 80076d4:	f082 0220 	eor.w	r2, r2, #32
 80076d8:	801a      	strh	r2, [r3, #0]
 80076da:	1d3b      	adds	r3, r7, #4
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	463b      	mov	r3, r7
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	441a      	add	r2, r3
 80076e8:	f107 030e 	add.w	r3, r7, #14
 80076ec:	881b      	ldrh	r3, [r3, #0]
 80076ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076fe:	b29b      	uxth	r3, r3
 8007700:	8013      	strh	r3, [r2, #0]
 8007702:	e3b5      	b.n	8007e70 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007704:	463b      	mov	r3, r7
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	7b1b      	ldrb	r3, [r3, #12]
 800770a:	2b00      	cmp	r3, #0
 800770c:	f040 8090 	bne.w	8007830 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007710:	463b      	mov	r3, r7
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	699a      	ldr	r2, [r3, #24]
 8007716:	463b      	mov	r3, r7
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	429a      	cmp	r2, r3
 800771e:	d90e      	bls.n	800773e <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8007720:	463b      	mov	r3, r7
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800772a:	463b      	mov	r3, r7
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	699a      	ldr	r2, [r3, #24]
 8007730:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007734:	1ad2      	subs	r2, r2, r3
 8007736:	463b      	mov	r3, r7
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	619a      	str	r2, [r3, #24]
 800773c:	e008      	b.n	8007750 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 800773e:	463b      	mov	r3, r7
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	699b      	ldr	r3, [r3, #24]
 8007744:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8007748:	463b      	mov	r3, r7
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2200      	movs	r2, #0
 800774e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007750:	1d3b      	adds	r3, r7, #4
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007758:	1d3b      	adds	r3, r7, #4
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007760:	b29b      	uxth	r3, r3
 8007762:	461a      	mov	r2, r3
 8007764:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007768:	4413      	add	r3, r2
 800776a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800776e:	463b      	mov	r3, r7
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	011a      	lsls	r2, r3, #4
 8007776:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800777a:	4413      	add	r3, r2
 800777c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007780:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007784:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007788:	2b00      	cmp	r3, #0
 800778a:	d116      	bne.n	80077ba <USB_EPStartXfer+0xb7e>
 800778c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007790:	881b      	ldrh	r3, [r3, #0]
 8007792:	b29b      	uxth	r3, r3
 8007794:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007798:	b29a      	uxth	r2, r3
 800779a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800779e:	801a      	strh	r2, [r3, #0]
 80077a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80077a4:	881b      	ldrh	r3, [r3, #0]
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80077b6:	801a      	strh	r2, [r3, #0]
 80077b8:	e32c      	b.n	8007e14 <USB_EPStartXfer+0x11d8>
 80077ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077be:	2b3e      	cmp	r3, #62	; 0x3e
 80077c0:	d818      	bhi.n	80077f4 <USB_EPStartXfer+0xbb8>
 80077c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077c6:	085b      	lsrs	r3, r3, #1
 80077c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80077cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077d0:	f003 0301 	and.w	r3, r3, #1
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d004      	beq.n	80077e2 <USB_EPStartXfer+0xba6>
 80077d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80077dc:	3301      	adds	r3, #1
 80077de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80077e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	029b      	lsls	r3, r3, #10
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80077f0:	801a      	strh	r2, [r3, #0]
 80077f2:	e30f      	b.n	8007e14 <USB_EPStartXfer+0x11d8>
 80077f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077f8:	095b      	lsrs	r3, r3, #5
 80077fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80077fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007802:	f003 031f 	and.w	r3, r3, #31
 8007806:	2b00      	cmp	r3, #0
 8007808:	d104      	bne.n	8007814 <USB_EPStartXfer+0xbd8>
 800780a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800780e:	3b01      	subs	r3, #1
 8007810:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007814:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007818:	b29b      	uxth	r3, r3
 800781a:	029b      	lsls	r3, r3, #10
 800781c:	b29b      	uxth	r3, r3
 800781e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007826:	b29a      	uxth	r2, r3
 8007828:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800782c:	801a      	strh	r2, [r3, #0]
 800782e:	e2f1      	b.n	8007e14 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007830:	463b      	mov	r3, r7
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	78db      	ldrb	r3, [r3, #3]
 8007836:	2b02      	cmp	r3, #2
 8007838:	f040 818f 	bne.w	8007b5a <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800783c:	463b      	mov	r3, r7
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	785b      	ldrb	r3, [r3, #1]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d175      	bne.n	8007932 <USB_EPStartXfer+0xcf6>
 8007846:	1d3b      	adds	r3, r7, #4
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800784e:	1d3b      	adds	r3, r7, #4
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007856:	b29b      	uxth	r3, r3
 8007858:	461a      	mov	r2, r3
 800785a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800785e:	4413      	add	r3, r2
 8007860:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007864:	463b      	mov	r3, r7
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	011a      	lsls	r2, r3, #4
 800786c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007870:	4413      	add	r3, r2
 8007872:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007876:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800787a:	463b      	mov	r3, r7
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d116      	bne.n	80078b2 <USB_EPStartXfer+0xc76>
 8007884:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007888:	881b      	ldrh	r3, [r3, #0]
 800788a:	b29b      	uxth	r3, r3
 800788c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007890:	b29a      	uxth	r2, r3
 8007892:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007896:	801a      	strh	r2, [r3, #0]
 8007898:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800789c:	881b      	ldrh	r3, [r3, #0]
 800789e:	b29b      	uxth	r3, r3
 80078a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078ae:	801a      	strh	r2, [r3, #0]
 80078b0:	e065      	b.n	800797e <USB_EPStartXfer+0xd42>
 80078b2:	463b      	mov	r3, r7
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	691b      	ldr	r3, [r3, #16]
 80078b8:	2b3e      	cmp	r3, #62	; 0x3e
 80078ba:	d81a      	bhi.n	80078f2 <USB_EPStartXfer+0xcb6>
 80078bc:	463b      	mov	r3, r7
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	085b      	lsrs	r3, r3, #1
 80078c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80078c8:	463b      	mov	r3, r7
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	f003 0301 	and.w	r3, r3, #1
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d004      	beq.n	80078e0 <USB_EPStartXfer+0xca4>
 80078d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80078da:	3301      	adds	r3, #1
 80078dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80078e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	029b      	lsls	r3, r3, #10
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078ee:	801a      	strh	r2, [r3, #0]
 80078f0:	e045      	b.n	800797e <USB_EPStartXfer+0xd42>
 80078f2:	463b      	mov	r3, r7
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	095b      	lsrs	r3, r3, #5
 80078fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80078fe:	463b      	mov	r3, r7
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	f003 031f 	and.w	r3, r3, #31
 8007908:	2b00      	cmp	r3, #0
 800790a:	d104      	bne.n	8007916 <USB_EPStartXfer+0xcda>
 800790c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007910:	3b01      	subs	r3, #1
 8007912:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007916:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800791a:	b29b      	uxth	r3, r3
 800791c:	029b      	lsls	r3, r3, #10
 800791e:	b29b      	uxth	r3, r3
 8007920:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007924:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007928:	b29a      	uxth	r2, r3
 800792a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800792e:	801a      	strh	r2, [r3, #0]
 8007930:	e025      	b.n	800797e <USB_EPStartXfer+0xd42>
 8007932:	463b      	mov	r3, r7
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	785b      	ldrb	r3, [r3, #1]
 8007938:	2b01      	cmp	r3, #1
 800793a:	d120      	bne.n	800797e <USB_EPStartXfer+0xd42>
 800793c:	1d3b      	adds	r3, r7, #4
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007944:	1d3b      	adds	r3, r7, #4
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800794c:	b29b      	uxth	r3, r3
 800794e:	461a      	mov	r2, r3
 8007950:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007954:	4413      	add	r3, r2
 8007956:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800795a:	463b      	mov	r3, r7
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	011a      	lsls	r2, r3, #4
 8007962:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007966:	4413      	add	r3, r2
 8007968:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800796c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007970:	463b      	mov	r3, r7
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	b29a      	uxth	r2, r3
 8007978:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800797c:	801a      	strh	r2, [r3, #0]
 800797e:	1d3b      	adds	r3, r7, #4
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007986:	463b      	mov	r3, r7
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	785b      	ldrb	r3, [r3, #1]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d175      	bne.n	8007a7c <USB_EPStartXfer+0xe40>
 8007990:	1d3b      	adds	r3, r7, #4
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007998:	1d3b      	adds	r3, r7, #4
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	461a      	mov	r2, r3
 80079a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80079a8:	4413      	add	r3, r2
 80079aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80079ae:	463b      	mov	r3, r7
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	011a      	lsls	r2, r3, #4
 80079b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80079ba:	4413      	add	r3, r2
 80079bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80079c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80079c4:	463b      	mov	r3, r7
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d116      	bne.n	80079fc <USB_EPStartXfer+0xdc0>
 80079ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079d2:	881b      	ldrh	r3, [r3, #0]
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079da:	b29a      	uxth	r2, r3
 80079dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079e0:	801a      	strh	r2, [r3, #0]
 80079e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079e6:	881b      	ldrh	r3, [r3, #0]
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079f2:	b29a      	uxth	r2, r3
 80079f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079f8:	801a      	strh	r2, [r3, #0]
 80079fa:	e061      	b.n	8007ac0 <USB_EPStartXfer+0xe84>
 80079fc:	463b      	mov	r3, r7
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	2b3e      	cmp	r3, #62	; 0x3e
 8007a04:	d81a      	bhi.n	8007a3c <USB_EPStartXfer+0xe00>
 8007a06:	463b      	mov	r3, r7
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	085b      	lsrs	r3, r3, #1
 8007a0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a12:	463b      	mov	r3, r7
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	f003 0301 	and.w	r3, r3, #1
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d004      	beq.n	8007a2a <USB_EPStartXfer+0xdee>
 8007a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a24:	3301      	adds	r3, #1
 8007a26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	029b      	lsls	r3, r3, #10
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a38:	801a      	strh	r2, [r3, #0]
 8007a3a:	e041      	b.n	8007ac0 <USB_EPStartXfer+0xe84>
 8007a3c:	463b      	mov	r3, r7
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	095b      	lsrs	r3, r3, #5
 8007a44:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a48:	463b      	mov	r3, r7
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	f003 031f 	and.w	r3, r3, #31
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d104      	bne.n	8007a60 <USB_EPStartXfer+0xe24>
 8007a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	029b      	lsls	r3, r3, #10
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a78:	801a      	strh	r2, [r3, #0]
 8007a7a:	e021      	b.n	8007ac0 <USB_EPStartXfer+0xe84>
 8007a7c:	463b      	mov	r3, r7
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	785b      	ldrb	r3, [r3, #1]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d11c      	bne.n	8007ac0 <USB_EPStartXfer+0xe84>
 8007a86:	1d3b      	adds	r3, r7, #4
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	461a      	mov	r2, r3
 8007a92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a96:	4413      	add	r3, r2
 8007a98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007a9c:	463b      	mov	r3, r7
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	011a      	lsls	r2, r3, #4
 8007aa4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007aae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007ab2:	463b      	mov	r3, r7
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007abe:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007ac0:	463b      	mov	r3, r7
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	69db      	ldr	r3, [r3, #28]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f000 81a4 	beq.w	8007e14 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007acc:	1d3b      	adds	r3, r7, #4
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	463b      	mov	r3, r7
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	4413      	add	r3, r2
 8007ada:	881b      	ldrh	r3, [r3, #0]
 8007adc:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007ae0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d005      	beq.n	8007af8 <USB_EPStartXfer+0xebc>
 8007aec:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d10d      	bne.n	8007b14 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007af8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007afc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f040 8187 	bne.w	8007e14 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007b06:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f040 8180 	bne.w	8007e14 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007b14:	1d3b      	adds	r3, r7, #4
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	463b      	mov	r3, r7
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	4413      	add	r3, r2
 8007b22:	881b      	ldrh	r3, [r3, #0]
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b2e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8007b32:	1d3b      	adds	r3, r7, #4
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	463b      	mov	r3, r7
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	441a      	add	r2, r3
 8007b40:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8007b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	8013      	strh	r3, [r2, #0]
 8007b58:	e15c      	b.n	8007e14 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007b5a:	463b      	mov	r3, r7
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	78db      	ldrb	r3, [r3, #3]
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	f040 8155 	bne.w	8007e10 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007b66:	463b      	mov	r3, r7
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	699a      	ldr	r2, [r3, #24]
 8007b6c:	463b      	mov	r3, r7
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d90e      	bls.n	8007b94 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8007b76:	463b      	mov	r3, r7
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8007b80:	463b      	mov	r3, r7
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	699a      	ldr	r2, [r3, #24]
 8007b86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b8a:	1ad2      	subs	r2, r2, r3
 8007b8c:	463b      	mov	r3, r7
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	619a      	str	r2, [r3, #24]
 8007b92:	e008      	b.n	8007ba6 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8007b94:	463b      	mov	r3, r7
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8007b9e:	463b      	mov	r3, r7
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007ba6:	463b      	mov	r3, r7
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	785b      	ldrb	r3, [r3, #1]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d16f      	bne.n	8007c90 <USB_EPStartXfer+0x1054>
 8007bb0:	1d3b      	adds	r3, r7, #4
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007bb8:	1d3b      	adds	r3, r7, #4
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007bc8:	4413      	add	r3, r2
 8007bca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007bce:	463b      	mov	r3, r7
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	011a      	lsls	r2, r3, #4
 8007bd6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007bda:	4413      	add	r3, r2
 8007bdc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007be0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007be4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d116      	bne.n	8007c1a <USB_EPStartXfer+0xfde>
 8007bec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007bf0:	881b      	ldrh	r3, [r3, #0]
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007bf8:	b29a      	uxth	r2, r3
 8007bfa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007bfe:	801a      	strh	r2, [r3, #0]
 8007c00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007c04:	881b      	ldrh	r3, [r3, #0]
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007c16:	801a      	strh	r2, [r3, #0]
 8007c18:	e05f      	b.n	8007cda <USB_EPStartXfer+0x109e>
 8007c1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c1e:	2b3e      	cmp	r3, #62	; 0x3e
 8007c20:	d818      	bhi.n	8007c54 <USB_EPStartXfer+0x1018>
 8007c22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c26:	085b      	lsrs	r3, r3, #1
 8007c28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c30:	f003 0301 	and.w	r3, r3, #1
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d004      	beq.n	8007c42 <USB_EPStartXfer+0x1006>
 8007c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	029b      	lsls	r3, r3, #10
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007c50:	801a      	strh	r2, [r3, #0]
 8007c52:	e042      	b.n	8007cda <USB_EPStartXfer+0x109e>
 8007c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c58:	095b      	lsrs	r3, r3, #5
 8007c5a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c62:	f003 031f 	and.w	r3, r3, #31
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d104      	bne.n	8007c74 <USB_EPStartXfer+0x1038>
 8007c6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	029b      	lsls	r3, r3, #10
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007c8c:	801a      	strh	r2, [r3, #0]
 8007c8e:	e024      	b.n	8007cda <USB_EPStartXfer+0x109e>
 8007c90:	463b      	mov	r3, r7
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	785b      	ldrb	r3, [r3, #1]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d11f      	bne.n	8007cda <USB_EPStartXfer+0x109e>
 8007c9a:	1d3b      	adds	r3, r7, #4
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007ca2:	1d3b      	adds	r3, r7, #4
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	461a      	mov	r2, r3
 8007cae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007cb2:	4413      	add	r3, r2
 8007cb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007cb8:	463b      	mov	r3, r7
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	011a      	lsls	r2, r3, #4
 8007cc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007cca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007cce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007cd8:	801a      	strh	r2, [r3, #0]
 8007cda:	1d3b      	adds	r3, r7, #4
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ce2:	463b      	mov	r3, r7
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	785b      	ldrb	r3, [r3, #1]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d16f      	bne.n	8007dcc <USB_EPStartXfer+0x1190>
 8007cec:	1d3b      	adds	r3, r7, #4
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007cf4:	1d3b      	adds	r3, r7, #4
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	461a      	mov	r2, r3
 8007d00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007d04:	4413      	add	r3, r2
 8007d06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d0a:	463b      	mov	r3, r7
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	011a      	lsls	r2, r3, #4
 8007d12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007d16:	4413      	add	r3, r2
 8007d18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d116      	bne.n	8007d56 <USB_EPStartXfer+0x111a>
 8007d28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007d2c:	881b      	ldrh	r3, [r3, #0]
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d34:	b29a      	uxth	r2, r3
 8007d36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007d3a:	801a      	strh	r2, [r3, #0]
 8007d3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007d40:	881b      	ldrh	r3, [r3, #0]
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007d52:	801a      	strh	r2, [r3, #0]
 8007d54:	e05e      	b.n	8007e14 <USB_EPStartXfer+0x11d8>
 8007d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d5a:	2b3e      	cmp	r3, #62	; 0x3e
 8007d5c:	d818      	bhi.n	8007d90 <USB_EPStartXfer+0x1154>
 8007d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d62:	085b      	lsrs	r3, r3, #1
 8007d64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007d68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d6c:	f003 0301 	and.w	r3, r3, #1
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d004      	beq.n	8007d7e <USB_EPStartXfer+0x1142>
 8007d74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d78:	3301      	adds	r3, #1
 8007d7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007d7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	029b      	lsls	r3, r3, #10
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007d8c:	801a      	strh	r2, [r3, #0]
 8007d8e:	e041      	b.n	8007e14 <USB_EPStartXfer+0x11d8>
 8007d90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d94:	095b      	lsrs	r3, r3, #5
 8007d96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d9e:	f003 031f 	and.w	r3, r3, #31
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d104      	bne.n	8007db0 <USB_EPStartXfer+0x1174>
 8007da6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007daa:	3b01      	subs	r3, #1
 8007dac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007db0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	029b      	lsls	r3, r3, #10
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007dc8:	801a      	strh	r2, [r3, #0]
 8007dca:	e023      	b.n	8007e14 <USB_EPStartXfer+0x11d8>
 8007dcc:	463b      	mov	r3, r7
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	785b      	ldrb	r3, [r3, #1]
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d11e      	bne.n	8007e14 <USB_EPStartXfer+0x11d8>
 8007dd6:	1d3b      	adds	r3, r7, #4
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	461a      	mov	r2, r3
 8007de2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007de6:	4413      	add	r3, r2
 8007de8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007dec:	463b      	mov	r3, r7
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	011a      	lsls	r2, r3, #4
 8007df4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007df8:	4413      	add	r3, r2
 8007dfa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007dfe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e0c:	801a      	strh	r2, [r3, #0]
 8007e0e:	e001      	b.n	8007e14 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	e02e      	b.n	8007e72 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e14:	1d3b      	adds	r3, r7, #4
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	463b      	mov	r3, r7
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	4413      	add	r3, r2
 8007e22:	881b      	ldrh	r3, [r3, #0]
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e2e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007e32:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007e36:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007e3a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007e3e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007e42:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007e46:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007e4a:	1d3b      	adds	r3, r7, #4
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	463b      	mov	r3, r7
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	441a      	add	r2, r3
 8007e58:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007e5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	460b      	mov	r3, r1
 8007e86:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007e88:	78fb      	ldrb	r3, [r7, #3]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d103      	bne.n	8007e96 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2280      	movs	r2, #128	; 0x80
 8007e92:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007e96:	2300      	movs	r3, #0
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bc80      	pop	{r7}
 8007ea0:	4770      	bx	lr

08007ea2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b083      	sub	sp, #12
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bc80      	pop	{r7}
 8007eb4:	4770      	bx	lr

08007eb6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007eb6:	b480      	push	{r7}
 8007eb8:	b085      	sub	sp, #20
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3714      	adds	r7, #20
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bc80      	pop	{r7}
 8007ed2:	4770      	bx	lr

08007ed4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b08d      	sub	sp, #52	; 0x34
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	4611      	mov	r1, r2
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	80fb      	strh	r3, [r7, #6]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007eea:	88bb      	ldrh	r3, [r7, #4]
 8007eec:	3301      	adds	r3, #1
 8007eee:	085b      	lsrs	r3, r3, #1
 8007ef0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007efa:	88fb      	ldrh	r3, [r7, #6]
 8007efc:	005a      	lsls	r2, r3, #1
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	4413      	add	r3, r2
 8007f02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f06:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007f08:	6a3b      	ldr	r3, [r7, #32]
 8007f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f0c:	e01e      	b.n	8007f4c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f16:	3301      	adds	r3, #1
 8007f18:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	021b      	lsls	r3, r3, #8
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	461a      	mov	r2, r3
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f32:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f36:	3302      	adds	r3, #2
 8007f38:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3c:	3302      	adds	r3, #2
 8007f3e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f42:	3301      	adds	r3, #1
 8007f44:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d1dd      	bne.n	8007f0e <USB_WritePMA+0x3a>
  }
}
 8007f52:	bf00      	nop
 8007f54:	bf00      	nop
 8007f56:	3734      	adds	r7, #52	; 0x34
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bc80      	pop	{r7}
 8007f5c:	4770      	bx	lr

08007f5e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007f5e:	b480      	push	{r7}
 8007f60:	b08b      	sub	sp, #44	; 0x2c
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	60f8      	str	r0, [r7, #12]
 8007f66:	60b9      	str	r1, [r7, #8]
 8007f68:	4611      	mov	r1, r2
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	80fb      	strh	r3, [r7, #6]
 8007f70:	4613      	mov	r3, r2
 8007f72:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007f74:	88bb      	ldrh	r3, [r7, #4]
 8007f76:	085b      	lsrs	r3, r3, #1
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007f84:	88fb      	ldrh	r3, [r7, #6]
 8007f86:	005a      	lsls	r2, r3, #1
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f90:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	627b      	str	r3, [r7, #36]	; 0x24
 8007f96:	e01b      	b.n	8007fd0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007f98:	6a3b      	ldr	r3, [r7, #32]
 8007f9a:	881b      	ldrh	r3, [r3, #0]
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007fa0:	6a3b      	ldr	r3, [r7, #32]
 8007fa2:	3302      	adds	r3, #2
 8007fa4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	b2da      	uxtb	r2, r3
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	0a1b      	lsrs	r3, r3, #8
 8007fb8:	b2da      	uxtb	r2, r3
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007fc4:	6a3b      	ldr	r3, [r7, #32]
 8007fc6:	3302      	adds	r3, #2
 8007fc8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	627b      	str	r3, [r7, #36]	; 0x24
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1e0      	bne.n	8007f98 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007fd6:	88bb      	ldrh	r3, [r7, #4]
 8007fd8:	f003 0301 	and.w	r3, r3, #1
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d007      	beq.n	8007ff2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007fe2:	6a3b      	ldr	r3, [r7, #32]
 8007fe4:	881b      	ldrh	r3, [r3, #0]
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	b2da      	uxtb	r2, r3
 8007fee:	69fb      	ldr	r3, [r7, #28]
 8007ff0:	701a      	strb	r2, [r3, #0]
  }
}
 8007ff2:	bf00      	nop
 8007ff4:	372c      	adds	r7, #44	; 0x2c
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bc80      	pop	{r7}
 8007ffa:	4770      	bx	lr

08007ffc <__assert_func>:
 8007ffc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ffe:	4614      	mov	r4, r2
 8008000:	461a      	mov	r2, r3
 8008002:	4b09      	ldr	r3, [pc, #36]	; (8008028 <__assert_func+0x2c>)
 8008004:	4605      	mov	r5, r0
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68d8      	ldr	r0, [r3, #12]
 800800a:	b14c      	cbz	r4, 8008020 <__assert_func+0x24>
 800800c:	4b07      	ldr	r3, [pc, #28]	; (800802c <__assert_func+0x30>)
 800800e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008012:	9100      	str	r1, [sp, #0]
 8008014:	462b      	mov	r3, r5
 8008016:	4906      	ldr	r1, [pc, #24]	; (8008030 <__assert_func+0x34>)
 8008018:	f000 f814 	bl	8008044 <fiprintf>
 800801c:	f002 f86e 	bl	800a0fc <abort>
 8008020:	4b04      	ldr	r3, [pc, #16]	; (8008034 <__assert_func+0x38>)
 8008022:	461c      	mov	r4, r3
 8008024:	e7f3      	b.n	800800e <__assert_func+0x12>
 8008026:	bf00      	nop
 8008028:	20000054 	.word	0x20000054
 800802c:	0800c96c 	.word	0x0800c96c
 8008030:	0800c979 	.word	0x0800c979
 8008034:	0800c9a7 	.word	0x0800c9a7

08008038 <__errno>:
 8008038:	4b01      	ldr	r3, [pc, #4]	; (8008040 <__errno+0x8>)
 800803a:	6818      	ldr	r0, [r3, #0]
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	20000054 	.word	0x20000054

08008044 <fiprintf>:
 8008044:	b40e      	push	{r1, r2, r3}
 8008046:	b503      	push	{r0, r1, lr}
 8008048:	4601      	mov	r1, r0
 800804a:	ab03      	add	r3, sp, #12
 800804c:	4805      	ldr	r0, [pc, #20]	; (8008064 <fiprintf+0x20>)
 800804e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008052:	6800      	ldr	r0, [r0, #0]
 8008054:	9301      	str	r3, [sp, #4]
 8008056:	f000 f917 	bl	8008288 <_vfiprintf_r>
 800805a:	b002      	add	sp, #8
 800805c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008060:	b003      	add	sp, #12
 8008062:	4770      	bx	lr
 8008064:	20000054 	.word	0x20000054

08008068 <__libc_init_array>:
 8008068:	b570      	push	{r4, r5, r6, lr}
 800806a:	2600      	movs	r6, #0
 800806c:	4d0c      	ldr	r5, [pc, #48]	; (80080a0 <__libc_init_array+0x38>)
 800806e:	4c0d      	ldr	r4, [pc, #52]	; (80080a4 <__libc_init_array+0x3c>)
 8008070:	1b64      	subs	r4, r4, r5
 8008072:	10a4      	asrs	r4, r4, #2
 8008074:	42a6      	cmp	r6, r4
 8008076:	d109      	bne.n	800808c <__libc_init_array+0x24>
 8008078:	f004 fbf8 	bl	800c86c <_init>
 800807c:	2600      	movs	r6, #0
 800807e:	4d0a      	ldr	r5, [pc, #40]	; (80080a8 <__libc_init_array+0x40>)
 8008080:	4c0a      	ldr	r4, [pc, #40]	; (80080ac <__libc_init_array+0x44>)
 8008082:	1b64      	subs	r4, r4, r5
 8008084:	10a4      	asrs	r4, r4, #2
 8008086:	42a6      	cmp	r6, r4
 8008088:	d105      	bne.n	8008096 <__libc_init_array+0x2e>
 800808a:	bd70      	pop	{r4, r5, r6, pc}
 800808c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008090:	4798      	blx	r3
 8008092:	3601      	adds	r6, #1
 8008094:	e7ee      	b.n	8008074 <__libc_init_array+0xc>
 8008096:	f855 3b04 	ldr.w	r3, [r5], #4
 800809a:	4798      	blx	r3
 800809c:	3601      	adds	r6, #1
 800809e:	e7f2      	b.n	8008086 <__libc_init_array+0x1e>
 80080a0:	0800ce1c 	.word	0x0800ce1c
 80080a4:	0800ce1c 	.word	0x0800ce1c
 80080a8:	0800ce1c 	.word	0x0800ce1c
 80080ac:	0800ce20 	.word	0x0800ce20

080080b0 <malloc>:
 80080b0:	4b02      	ldr	r3, [pc, #8]	; (80080bc <malloc+0xc>)
 80080b2:	4601      	mov	r1, r0
 80080b4:	6818      	ldr	r0, [r3, #0]
 80080b6:	f000 b865 	b.w	8008184 <_malloc_r>
 80080ba:	bf00      	nop
 80080bc:	20000054 	.word	0x20000054

080080c0 <memcpy>:
 80080c0:	440a      	add	r2, r1
 80080c2:	4291      	cmp	r1, r2
 80080c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80080c8:	d100      	bne.n	80080cc <memcpy+0xc>
 80080ca:	4770      	bx	lr
 80080cc:	b510      	push	{r4, lr}
 80080ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080d2:	4291      	cmp	r1, r2
 80080d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080d8:	d1f9      	bne.n	80080ce <memcpy+0xe>
 80080da:	bd10      	pop	{r4, pc}

080080dc <memset>:
 80080dc:	4603      	mov	r3, r0
 80080de:	4402      	add	r2, r0
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d100      	bne.n	80080e6 <memset+0xa>
 80080e4:	4770      	bx	lr
 80080e6:	f803 1b01 	strb.w	r1, [r3], #1
 80080ea:	e7f9      	b.n	80080e0 <memset+0x4>

080080ec <_free_r>:
 80080ec:	b538      	push	{r3, r4, r5, lr}
 80080ee:	4605      	mov	r5, r0
 80080f0:	2900      	cmp	r1, #0
 80080f2:	d043      	beq.n	800817c <_free_r+0x90>
 80080f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080f8:	1f0c      	subs	r4, r1, #4
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	bfb8      	it	lt
 80080fe:	18e4      	addlt	r4, r4, r3
 8008100:	f003 fc44 	bl	800b98c <__malloc_lock>
 8008104:	4a1e      	ldr	r2, [pc, #120]	; (8008180 <_free_r+0x94>)
 8008106:	6813      	ldr	r3, [r2, #0]
 8008108:	4610      	mov	r0, r2
 800810a:	b933      	cbnz	r3, 800811a <_free_r+0x2e>
 800810c:	6063      	str	r3, [r4, #4]
 800810e:	6014      	str	r4, [r2, #0]
 8008110:	4628      	mov	r0, r5
 8008112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008116:	f003 bc3f 	b.w	800b998 <__malloc_unlock>
 800811a:	42a3      	cmp	r3, r4
 800811c:	d90a      	bls.n	8008134 <_free_r+0x48>
 800811e:	6821      	ldr	r1, [r4, #0]
 8008120:	1862      	adds	r2, r4, r1
 8008122:	4293      	cmp	r3, r2
 8008124:	bf01      	itttt	eq
 8008126:	681a      	ldreq	r2, [r3, #0]
 8008128:	685b      	ldreq	r3, [r3, #4]
 800812a:	1852      	addeq	r2, r2, r1
 800812c:	6022      	streq	r2, [r4, #0]
 800812e:	6063      	str	r3, [r4, #4]
 8008130:	6004      	str	r4, [r0, #0]
 8008132:	e7ed      	b.n	8008110 <_free_r+0x24>
 8008134:	461a      	mov	r2, r3
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	b10b      	cbz	r3, 800813e <_free_r+0x52>
 800813a:	42a3      	cmp	r3, r4
 800813c:	d9fa      	bls.n	8008134 <_free_r+0x48>
 800813e:	6811      	ldr	r1, [r2, #0]
 8008140:	1850      	adds	r0, r2, r1
 8008142:	42a0      	cmp	r0, r4
 8008144:	d10b      	bne.n	800815e <_free_r+0x72>
 8008146:	6820      	ldr	r0, [r4, #0]
 8008148:	4401      	add	r1, r0
 800814a:	1850      	adds	r0, r2, r1
 800814c:	4283      	cmp	r3, r0
 800814e:	6011      	str	r1, [r2, #0]
 8008150:	d1de      	bne.n	8008110 <_free_r+0x24>
 8008152:	6818      	ldr	r0, [r3, #0]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	4401      	add	r1, r0
 8008158:	6011      	str	r1, [r2, #0]
 800815a:	6053      	str	r3, [r2, #4]
 800815c:	e7d8      	b.n	8008110 <_free_r+0x24>
 800815e:	d902      	bls.n	8008166 <_free_r+0x7a>
 8008160:	230c      	movs	r3, #12
 8008162:	602b      	str	r3, [r5, #0]
 8008164:	e7d4      	b.n	8008110 <_free_r+0x24>
 8008166:	6820      	ldr	r0, [r4, #0]
 8008168:	1821      	adds	r1, r4, r0
 800816a:	428b      	cmp	r3, r1
 800816c:	bf01      	itttt	eq
 800816e:	6819      	ldreq	r1, [r3, #0]
 8008170:	685b      	ldreq	r3, [r3, #4]
 8008172:	1809      	addeq	r1, r1, r0
 8008174:	6021      	streq	r1, [r4, #0]
 8008176:	6063      	str	r3, [r4, #4]
 8008178:	6054      	str	r4, [r2, #4]
 800817a:	e7c9      	b.n	8008110 <_free_r+0x24>
 800817c:	bd38      	pop	{r3, r4, r5, pc}
 800817e:	bf00      	nop
 8008180:	20000258 	.word	0x20000258

08008184 <_malloc_r>:
 8008184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008186:	1ccd      	adds	r5, r1, #3
 8008188:	f025 0503 	bic.w	r5, r5, #3
 800818c:	3508      	adds	r5, #8
 800818e:	2d0c      	cmp	r5, #12
 8008190:	bf38      	it	cc
 8008192:	250c      	movcc	r5, #12
 8008194:	2d00      	cmp	r5, #0
 8008196:	4606      	mov	r6, r0
 8008198:	db01      	blt.n	800819e <_malloc_r+0x1a>
 800819a:	42a9      	cmp	r1, r5
 800819c:	d903      	bls.n	80081a6 <_malloc_r+0x22>
 800819e:	230c      	movs	r3, #12
 80081a0:	6033      	str	r3, [r6, #0]
 80081a2:	2000      	movs	r0, #0
 80081a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081a6:	f003 fbf1 	bl	800b98c <__malloc_lock>
 80081aa:	4921      	ldr	r1, [pc, #132]	; (8008230 <_malloc_r+0xac>)
 80081ac:	680a      	ldr	r2, [r1, #0]
 80081ae:	4614      	mov	r4, r2
 80081b0:	b99c      	cbnz	r4, 80081da <_malloc_r+0x56>
 80081b2:	4f20      	ldr	r7, [pc, #128]	; (8008234 <_malloc_r+0xb0>)
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	b923      	cbnz	r3, 80081c2 <_malloc_r+0x3e>
 80081b8:	4621      	mov	r1, r4
 80081ba:	4630      	mov	r0, r6
 80081bc:	f001 f806 	bl	80091cc <_sbrk_r>
 80081c0:	6038      	str	r0, [r7, #0]
 80081c2:	4629      	mov	r1, r5
 80081c4:	4630      	mov	r0, r6
 80081c6:	f001 f801 	bl	80091cc <_sbrk_r>
 80081ca:	1c43      	adds	r3, r0, #1
 80081cc:	d123      	bne.n	8008216 <_malloc_r+0x92>
 80081ce:	230c      	movs	r3, #12
 80081d0:	4630      	mov	r0, r6
 80081d2:	6033      	str	r3, [r6, #0]
 80081d4:	f003 fbe0 	bl	800b998 <__malloc_unlock>
 80081d8:	e7e3      	b.n	80081a2 <_malloc_r+0x1e>
 80081da:	6823      	ldr	r3, [r4, #0]
 80081dc:	1b5b      	subs	r3, r3, r5
 80081de:	d417      	bmi.n	8008210 <_malloc_r+0x8c>
 80081e0:	2b0b      	cmp	r3, #11
 80081e2:	d903      	bls.n	80081ec <_malloc_r+0x68>
 80081e4:	6023      	str	r3, [r4, #0]
 80081e6:	441c      	add	r4, r3
 80081e8:	6025      	str	r5, [r4, #0]
 80081ea:	e004      	b.n	80081f6 <_malloc_r+0x72>
 80081ec:	6863      	ldr	r3, [r4, #4]
 80081ee:	42a2      	cmp	r2, r4
 80081f0:	bf0c      	ite	eq
 80081f2:	600b      	streq	r3, [r1, #0]
 80081f4:	6053      	strne	r3, [r2, #4]
 80081f6:	4630      	mov	r0, r6
 80081f8:	f003 fbce 	bl	800b998 <__malloc_unlock>
 80081fc:	f104 000b 	add.w	r0, r4, #11
 8008200:	1d23      	adds	r3, r4, #4
 8008202:	f020 0007 	bic.w	r0, r0, #7
 8008206:	1ac2      	subs	r2, r0, r3
 8008208:	d0cc      	beq.n	80081a4 <_malloc_r+0x20>
 800820a:	1a1b      	subs	r3, r3, r0
 800820c:	50a3      	str	r3, [r4, r2]
 800820e:	e7c9      	b.n	80081a4 <_malloc_r+0x20>
 8008210:	4622      	mov	r2, r4
 8008212:	6864      	ldr	r4, [r4, #4]
 8008214:	e7cc      	b.n	80081b0 <_malloc_r+0x2c>
 8008216:	1cc4      	adds	r4, r0, #3
 8008218:	f024 0403 	bic.w	r4, r4, #3
 800821c:	42a0      	cmp	r0, r4
 800821e:	d0e3      	beq.n	80081e8 <_malloc_r+0x64>
 8008220:	1a21      	subs	r1, r4, r0
 8008222:	4630      	mov	r0, r6
 8008224:	f000 ffd2 	bl	80091cc <_sbrk_r>
 8008228:	3001      	adds	r0, #1
 800822a:	d1dd      	bne.n	80081e8 <_malloc_r+0x64>
 800822c:	e7cf      	b.n	80081ce <_malloc_r+0x4a>
 800822e:	bf00      	nop
 8008230:	20000258 	.word	0x20000258
 8008234:	2000025c 	.word	0x2000025c

08008238 <__sfputc_r>:
 8008238:	6893      	ldr	r3, [r2, #8]
 800823a:	b410      	push	{r4}
 800823c:	3b01      	subs	r3, #1
 800823e:	2b00      	cmp	r3, #0
 8008240:	6093      	str	r3, [r2, #8]
 8008242:	da07      	bge.n	8008254 <__sfputc_r+0x1c>
 8008244:	6994      	ldr	r4, [r2, #24]
 8008246:	42a3      	cmp	r3, r4
 8008248:	db01      	blt.n	800824e <__sfputc_r+0x16>
 800824a:	290a      	cmp	r1, #10
 800824c:	d102      	bne.n	8008254 <__sfputc_r+0x1c>
 800824e:	bc10      	pop	{r4}
 8008250:	f001 be94 	b.w	8009f7c <__swbuf_r>
 8008254:	6813      	ldr	r3, [r2, #0]
 8008256:	1c58      	adds	r0, r3, #1
 8008258:	6010      	str	r0, [r2, #0]
 800825a:	7019      	strb	r1, [r3, #0]
 800825c:	4608      	mov	r0, r1
 800825e:	bc10      	pop	{r4}
 8008260:	4770      	bx	lr

08008262 <__sfputs_r>:
 8008262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008264:	4606      	mov	r6, r0
 8008266:	460f      	mov	r7, r1
 8008268:	4614      	mov	r4, r2
 800826a:	18d5      	adds	r5, r2, r3
 800826c:	42ac      	cmp	r4, r5
 800826e:	d101      	bne.n	8008274 <__sfputs_r+0x12>
 8008270:	2000      	movs	r0, #0
 8008272:	e007      	b.n	8008284 <__sfputs_r+0x22>
 8008274:	463a      	mov	r2, r7
 8008276:	4630      	mov	r0, r6
 8008278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800827c:	f7ff ffdc 	bl	8008238 <__sfputc_r>
 8008280:	1c43      	adds	r3, r0, #1
 8008282:	d1f3      	bne.n	800826c <__sfputs_r+0xa>
 8008284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008288 <_vfiprintf_r>:
 8008288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800828c:	460d      	mov	r5, r1
 800828e:	4614      	mov	r4, r2
 8008290:	4698      	mov	r8, r3
 8008292:	4606      	mov	r6, r0
 8008294:	b09d      	sub	sp, #116	; 0x74
 8008296:	b118      	cbz	r0, 80082a0 <_vfiprintf_r+0x18>
 8008298:	6983      	ldr	r3, [r0, #24]
 800829a:	b90b      	cbnz	r3, 80082a0 <_vfiprintf_r+0x18>
 800829c:	f002 fecc 	bl	800b038 <__sinit>
 80082a0:	4b89      	ldr	r3, [pc, #548]	; (80084c8 <_vfiprintf_r+0x240>)
 80082a2:	429d      	cmp	r5, r3
 80082a4:	d11b      	bne.n	80082de <_vfiprintf_r+0x56>
 80082a6:	6875      	ldr	r5, [r6, #4]
 80082a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082aa:	07d9      	lsls	r1, r3, #31
 80082ac:	d405      	bmi.n	80082ba <_vfiprintf_r+0x32>
 80082ae:	89ab      	ldrh	r3, [r5, #12]
 80082b0:	059a      	lsls	r2, r3, #22
 80082b2:	d402      	bmi.n	80082ba <_vfiprintf_r+0x32>
 80082b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082b6:	f003 fac8 	bl	800b84a <__retarget_lock_acquire_recursive>
 80082ba:	89ab      	ldrh	r3, [r5, #12]
 80082bc:	071b      	lsls	r3, r3, #28
 80082be:	d501      	bpl.n	80082c4 <_vfiprintf_r+0x3c>
 80082c0:	692b      	ldr	r3, [r5, #16]
 80082c2:	b9eb      	cbnz	r3, 8008300 <_vfiprintf_r+0x78>
 80082c4:	4629      	mov	r1, r5
 80082c6:	4630      	mov	r0, r6
 80082c8:	f001 feaa 	bl	800a020 <__swsetup_r>
 80082cc:	b1c0      	cbz	r0, 8008300 <_vfiprintf_r+0x78>
 80082ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082d0:	07dc      	lsls	r4, r3, #31
 80082d2:	d50e      	bpl.n	80082f2 <_vfiprintf_r+0x6a>
 80082d4:	f04f 30ff 	mov.w	r0, #4294967295
 80082d8:	b01d      	add	sp, #116	; 0x74
 80082da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082de:	4b7b      	ldr	r3, [pc, #492]	; (80084cc <_vfiprintf_r+0x244>)
 80082e0:	429d      	cmp	r5, r3
 80082e2:	d101      	bne.n	80082e8 <_vfiprintf_r+0x60>
 80082e4:	68b5      	ldr	r5, [r6, #8]
 80082e6:	e7df      	b.n	80082a8 <_vfiprintf_r+0x20>
 80082e8:	4b79      	ldr	r3, [pc, #484]	; (80084d0 <_vfiprintf_r+0x248>)
 80082ea:	429d      	cmp	r5, r3
 80082ec:	bf08      	it	eq
 80082ee:	68f5      	ldreq	r5, [r6, #12]
 80082f0:	e7da      	b.n	80082a8 <_vfiprintf_r+0x20>
 80082f2:	89ab      	ldrh	r3, [r5, #12]
 80082f4:	0598      	lsls	r0, r3, #22
 80082f6:	d4ed      	bmi.n	80082d4 <_vfiprintf_r+0x4c>
 80082f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082fa:	f003 faa7 	bl	800b84c <__retarget_lock_release_recursive>
 80082fe:	e7e9      	b.n	80082d4 <_vfiprintf_r+0x4c>
 8008300:	2300      	movs	r3, #0
 8008302:	9309      	str	r3, [sp, #36]	; 0x24
 8008304:	2320      	movs	r3, #32
 8008306:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800830a:	2330      	movs	r3, #48	; 0x30
 800830c:	f04f 0901 	mov.w	r9, #1
 8008310:	f8cd 800c 	str.w	r8, [sp, #12]
 8008314:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80084d4 <_vfiprintf_r+0x24c>
 8008318:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800831c:	4623      	mov	r3, r4
 800831e:	469a      	mov	sl, r3
 8008320:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008324:	b10a      	cbz	r2, 800832a <_vfiprintf_r+0xa2>
 8008326:	2a25      	cmp	r2, #37	; 0x25
 8008328:	d1f9      	bne.n	800831e <_vfiprintf_r+0x96>
 800832a:	ebba 0b04 	subs.w	fp, sl, r4
 800832e:	d00b      	beq.n	8008348 <_vfiprintf_r+0xc0>
 8008330:	465b      	mov	r3, fp
 8008332:	4622      	mov	r2, r4
 8008334:	4629      	mov	r1, r5
 8008336:	4630      	mov	r0, r6
 8008338:	f7ff ff93 	bl	8008262 <__sfputs_r>
 800833c:	3001      	adds	r0, #1
 800833e:	f000 80aa 	beq.w	8008496 <_vfiprintf_r+0x20e>
 8008342:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008344:	445a      	add	r2, fp
 8008346:	9209      	str	r2, [sp, #36]	; 0x24
 8008348:	f89a 3000 	ldrb.w	r3, [sl]
 800834c:	2b00      	cmp	r3, #0
 800834e:	f000 80a2 	beq.w	8008496 <_vfiprintf_r+0x20e>
 8008352:	2300      	movs	r3, #0
 8008354:	f04f 32ff 	mov.w	r2, #4294967295
 8008358:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800835c:	f10a 0a01 	add.w	sl, sl, #1
 8008360:	9304      	str	r3, [sp, #16]
 8008362:	9307      	str	r3, [sp, #28]
 8008364:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008368:	931a      	str	r3, [sp, #104]	; 0x68
 800836a:	4654      	mov	r4, sl
 800836c:	2205      	movs	r2, #5
 800836e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008372:	4858      	ldr	r0, [pc, #352]	; (80084d4 <_vfiprintf_r+0x24c>)
 8008374:	f003 fae2 	bl	800b93c <memchr>
 8008378:	9a04      	ldr	r2, [sp, #16]
 800837a:	b9d8      	cbnz	r0, 80083b4 <_vfiprintf_r+0x12c>
 800837c:	06d1      	lsls	r1, r2, #27
 800837e:	bf44      	itt	mi
 8008380:	2320      	movmi	r3, #32
 8008382:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008386:	0713      	lsls	r3, r2, #28
 8008388:	bf44      	itt	mi
 800838a:	232b      	movmi	r3, #43	; 0x2b
 800838c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008390:	f89a 3000 	ldrb.w	r3, [sl]
 8008394:	2b2a      	cmp	r3, #42	; 0x2a
 8008396:	d015      	beq.n	80083c4 <_vfiprintf_r+0x13c>
 8008398:	4654      	mov	r4, sl
 800839a:	2000      	movs	r0, #0
 800839c:	f04f 0c0a 	mov.w	ip, #10
 80083a0:	9a07      	ldr	r2, [sp, #28]
 80083a2:	4621      	mov	r1, r4
 80083a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083a8:	3b30      	subs	r3, #48	; 0x30
 80083aa:	2b09      	cmp	r3, #9
 80083ac:	d94e      	bls.n	800844c <_vfiprintf_r+0x1c4>
 80083ae:	b1b0      	cbz	r0, 80083de <_vfiprintf_r+0x156>
 80083b0:	9207      	str	r2, [sp, #28]
 80083b2:	e014      	b.n	80083de <_vfiprintf_r+0x156>
 80083b4:	eba0 0308 	sub.w	r3, r0, r8
 80083b8:	fa09 f303 	lsl.w	r3, r9, r3
 80083bc:	4313      	orrs	r3, r2
 80083be:	46a2      	mov	sl, r4
 80083c0:	9304      	str	r3, [sp, #16]
 80083c2:	e7d2      	b.n	800836a <_vfiprintf_r+0xe2>
 80083c4:	9b03      	ldr	r3, [sp, #12]
 80083c6:	1d19      	adds	r1, r3, #4
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	9103      	str	r1, [sp, #12]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	bfbb      	ittet	lt
 80083d0:	425b      	neglt	r3, r3
 80083d2:	f042 0202 	orrlt.w	r2, r2, #2
 80083d6:	9307      	strge	r3, [sp, #28]
 80083d8:	9307      	strlt	r3, [sp, #28]
 80083da:	bfb8      	it	lt
 80083dc:	9204      	strlt	r2, [sp, #16]
 80083de:	7823      	ldrb	r3, [r4, #0]
 80083e0:	2b2e      	cmp	r3, #46	; 0x2e
 80083e2:	d10c      	bne.n	80083fe <_vfiprintf_r+0x176>
 80083e4:	7863      	ldrb	r3, [r4, #1]
 80083e6:	2b2a      	cmp	r3, #42	; 0x2a
 80083e8:	d135      	bne.n	8008456 <_vfiprintf_r+0x1ce>
 80083ea:	9b03      	ldr	r3, [sp, #12]
 80083ec:	3402      	adds	r4, #2
 80083ee:	1d1a      	adds	r2, r3, #4
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	9203      	str	r2, [sp, #12]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	bfb8      	it	lt
 80083f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80083fc:	9305      	str	r3, [sp, #20]
 80083fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80084e4 <_vfiprintf_r+0x25c>
 8008402:	2203      	movs	r2, #3
 8008404:	4650      	mov	r0, sl
 8008406:	7821      	ldrb	r1, [r4, #0]
 8008408:	f003 fa98 	bl	800b93c <memchr>
 800840c:	b140      	cbz	r0, 8008420 <_vfiprintf_r+0x198>
 800840e:	2340      	movs	r3, #64	; 0x40
 8008410:	eba0 000a 	sub.w	r0, r0, sl
 8008414:	fa03 f000 	lsl.w	r0, r3, r0
 8008418:	9b04      	ldr	r3, [sp, #16]
 800841a:	3401      	adds	r4, #1
 800841c:	4303      	orrs	r3, r0
 800841e:	9304      	str	r3, [sp, #16]
 8008420:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008424:	2206      	movs	r2, #6
 8008426:	482c      	ldr	r0, [pc, #176]	; (80084d8 <_vfiprintf_r+0x250>)
 8008428:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800842c:	f003 fa86 	bl	800b93c <memchr>
 8008430:	2800      	cmp	r0, #0
 8008432:	d03f      	beq.n	80084b4 <_vfiprintf_r+0x22c>
 8008434:	4b29      	ldr	r3, [pc, #164]	; (80084dc <_vfiprintf_r+0x254>)
 8008436:	bb1b      	cbnz	r3, 8008480 <_vfiprintf_r+0x1f8>
 8008438:	9b03      	ldr	r3, [sp, #12]
 800843a:	3307      	adds	r3, #7
 800843c:	f023 0307 	bic.w	r3, r3, #7
 8008440:	3308      	adds	r3, #8
 8008442:	9303      	str	r3, [sp, #12]
 8008444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008446:	443b      	add	r3, r7
 8008448:	9309      	str	r3, [sp, #36]	; 0x24
 800844a:	e767      	b.n	800831c <_vfiprintf_r+0x94>
 800844c:	460c      	mov	r4, r1
 800844e:	2001      	movs	r0, #1
 8008450:	fb0c 3202 	mla	r2, ip, r2, r3
 8008454:	e7a5      	b.n	80083a2 <_vfiprintf_r+0x11a>
 8008456:	2300      	movs	r3, #0
 8008458:	f04f 0c0a 	mov.w	ip, #10
 800845c:	4619      	mov	r1, r3
 800845e:	3401      	adds	r4, #1
 8008460:	9305      	str	r3, [sp, #20]
 8008462:	4620      	mov	r0, r4
 8008464:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008468:	3a30      	subs	r2, #48	; 0x30
 800846a:	2a09      	cmp	r2, #9
 800846c:	d903      	bls.n	8008476 <_vfiprintf_r+0x1ee>
 800846e:	2b00      	cmp	r3, #0
 8008470:	d0c5      	beq.n	80083fe <_vfiprintf_r+0x176>
 8008472:	9105      	str	r1, [sp, #20]
 8008474:	e7c3      	b.n	80083fe <_vfiprintf_r+0x176>
 8008476:	4604      	mov	r4, r0
 8008478:	2301      	movs	r3, #1
 800847a:	fb0c 2101 	mla	r1, ip, r1, r2
 800847e:	e7f0      	b.n	8008462 <_vfiprintf_r+0x1da>
 8008480:	ab03      	add	r3, sp, #12
 8008482:	9300      	str	r3, [sp, #0]
 8008484:	462a      	mov	r2, r5
 8008486:	4630      	mov	r0, r6
 8008488:	4b15      	ldr	r3, [pc, #84]	; (80084e0 <_vfiprintf_r+0x258>)
 800848a:	a904      	add	r1, sp, #16
 800848c:	f000 f8ca 	bl	8008624 <_printf_float>
 8008490:	4607      	mov	r7, r0
 8008492:	1c78      	adds	r0, r7, #1
 8008494:	d1d6      	bne.n	8008444 <_vfiprintf_r+0x1bc>
 8008496:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008498:	07d9      	lsls	r1, r3, #31
 800849a:	d405      	bmi.n	80084a8 <_vfiprintf_r+0x220>
 800849c:	89ab      	ldrh	r3, [r5, #12]
 800849e:	059a      	lsls	r2, r3, #22
 80084a0:	d402      	bmi.n	80084a8 <_vfiprintf_r+0x220>
 80084a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084a4:	f003 f9d2 	bl	800b84c <__retarget_lock_release_recursive>
 80084a8:	89ab      	ldrh	r3, [r5, #12]
 80084aa:	065b      	lsls	r3, r3, #25
 80084ac:	f53f af12 	bmi.w	80082d4 <_vfiprintf_r+0x4c>
 80084b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084b2:	e711      	b.n	80082d8 <_vfiprintf_r+0x50>
 80084b4:	ab03      	add	r3, sp, #12
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	462a      	mov	r2, r5
 80084ba:	4630      	mov	r0, r6
 80084bc:	4b08      	ldr	r3, [pc, #32]	; (80084e0 <_vfiprintf_r+0x258>)
 80084be:	a904      	add	r1, sp, #16
 80084c0:	f000 fb4c 	bl	8008b5c <_printf_i>
 80084c4:	e7e4      	b.n	8008490 <_vfiprintf_r+0x208>
 80084c6:	bf00      	nop
 80084c8:	0800cc00 	.word	0x0800cc00
 80084cc:	0800cc20 	.word	0x0800cc20
 80084d0:	0800cbe0 	.word	0x0800cbe0
 80084d4:	0800c9ac 	.word	0x0800c9ac
 80084d8:	0800c9b6 	.word	0x0800c9b6
 80084dc:	08008625 	.word	0x08008625
 80084e0:	08008263 	.word	0x08008263
 80084e4:	0800c9b2 	.word	0x0800c9b2

080084e8 <__cvt>:
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084ee:	461f      	mov	r7, r3
 80084f0:	bfbb      	ittet	lt
 80084f2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80084f6:	461f      	movlt	r7, r3
 80084f8:	2300      	movge	r3, #0
 80084fa:	232d      	movlt	r3, #45	; 0x2d
 80084fc:	b088      	sub	sp, #32
 80084fe:	4614      	mov	r4, r2
 8008500:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008502:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008504:	7013      	strb	r3, [r2, #0]
 8008506:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008508:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800850c:	f023 0820 	bic.w	r8, r3, #32
 8008510:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008514:	d005      	beq.n	8008522 <__cvt+0x3a>
 8008516:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800851a:	d100      	bne.n	800851e <__cvt+0x36>
 800851c:	3501      	adds	r5, #1
 800851e:	2302      	movs	r3, #2
 8008520:	e000      	b.n	8008524 <__cvt+0x3c>
 8008522:	2303      	movs	r3, #3
 8008524:	aa07      	add	r2, sp, #28
 8008526:	9204      	str	r2, [sp, #16]
 8008528:	aa06      	add	r2, sp, #24
 800852a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800852e:	e9cd 3500 	strd	r3, r5, [sp]
 8008532:	4622      	mov	r2, r4
 8008534:	463b      	mov	r3, r7
 8008536:	f001 fe77 	bl	800a228 <_dtoa_r>
 800853a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800853e:	4606      	mov	r6, r0
 8008540:	d102      	bne.n	8008548 <__cvt+0x60>
 8008542:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008544:	07db      	lsls	r3, r3, #31
 8008546:	d522      	bpl.n	800858e <__cvt+0xa6>
 8008548:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800854c:	eb06 0905 	add.w	r9, r6, r5
 8008550:	d110      	bne.n	8008574 <__cvt+0x8c>
 8008552:	7833      	ldrb	r3, [r6, #0]
 8008554:	2b30      	cmp	r3, #48	; 0x30
 8008556:	d10a      	bne.n	800856e <__cvt+0x86>
 8008558:	2200      	movs	r2, #0
 800855a:	2300      	movs	r3, #0
 800855c:	4620      	mov	r0, r4
 800855e:	4639      	mov	r1, r7
 8008560:	f7f8 fa22 	bl	80009a8 <__aeabi_dcmpeq>
 8008564:	b918      	cbnz	r0, 800856e <__cvt+0x86>
 8008566:	f1c5 0501 	rsb	r5, r5, #1
 800856a:	f8ca 5000 	str.w	r5, [sl]
 800856e:	f8da 3000 	ldr.w	r3, [sl]
 8008572:	4499      	add	r9, r3
 8008574:	2200      	movs	r2, #0
 8008576:	2300      	movs	r3, #0
 8008578:	4620      	mov	r0, r4
 800857a:	4639      	mov	r1, r7
 800857c:	f7f8 fa14 	bl	80009a8 <__aeabi_dcmpeq>
 8008580:	b108      	cbz	r0, 8008586 <__cvt+0x9e>
 8008582:	f8cd 901c 	str.w	r9, [sp, #28]
 8008586:	2230      	movs	r2, #48	; 0x30
 8008588:	9b07      	ldr	r3, [sp, #28]
 800858a:	454b      	cmp	r3, r9
 800858c:	d307      	bcc.n	800859e <__cvt+0xb6>
 800858e:	4630      	mov	r0, r6
 8008590:	9b07      	ldr	r3, [sp, #28]
 8008592:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008594:	1b9b      	subs	r3, r3, r6
 8008596:	6013      	str	r3, [r2, #0]
 8008598:	b008      	add	sp, #32
 800859a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800859e:	1c59      	adds	r1, r3, #1
 80085a0:	9107      	str	r1, [sp, #28]
 80085a2:	701a      	strb	r2, [r3, #0]
 80085a4:	e7f0      	b.n	8008588 <__cvt+0xa0>

080085a6 <__exponent>:
 80085a6:	4603      	mov	r3, r0
 80085a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085aa:	2900      	cmp	r1, #0
 80085ac:	f803 2b02 	strb.w	r2, [r3], #2
 80085b0:	bfb6      	itet	lt
 80085b2:	222d      	movlt	r2, #45	; 0x2d
 80085b4:	222b      	movge	r2, #43	; 0x2b
 80085b6:	4249      	neglt	r1, r1
 80085b8:	2909      	cmp	r1, #9
 80085ba:	7042      	strb	r2, [r0, #1]
 80085bc:	dd2b      	ble.n	8008616 <__exponent+0x70>
 80085be:	f10d 0407 	add.w	r4, sp, #7
 80085c2:	46a4      	mov	ip, r4
 80085c4:	270a      	movs	r7, #10
 80085c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80085ca:	460a      	mov	r2, r1
 80085cc:	46a6      	mov	lr, r4
 80085ce:	fb07 1516 	mls	r5, r7, r6, r1
 80085d2:	2a63      	cmp	r2, #99	; 0x63
 80085d4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80085d8:	4631      	mov	r1, r6
 80085da:	f104 34ff 	add.w	r4, r4, #4294967295
 80085de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80085e2:	dcf0      	bgt.n	80085c6 <__exponent+0x20>
 80085e4:	3130      	adds	r1, #48	; 0x30
 80085e6:	f1ae 0502 	sub.w	r5, lr, #2
 80085ea:	f804 1c01 	strb.w	r1, [r4, #-1]
 80085ee:	4629      	mov	r1, r5
 80085f0:	1c44      	adds	r4, r0, #1
 80085f2:	4561      	cmp	r1, ip
 80085f4:	d30a      	bcc.n	800860c <__exponent+0x66>
 80085f6:	f10d 0209 	add.w	r2, sp, #9
 80085fa:	eba2 020e 	sub.w	r2, r2, lr
 80085fe:	4565      	cmp	r5, ip
 8008600:	bf88      	it	hi
 8008602:	2200      	movhi	r2, #0
 8008604:	4413      	add	r3, r2
 8008606:	1a18      	subs	r0, r3, r0
 8008608:	b003      	add	sp, #12
 800860a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800860c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008610:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008614:	e7ed      	b.n	80085f2 <__exponent+0x4c>
 8008616:	2330      	movs	r3, #48	; 0x30
 8008618:	3130      	adds	r1, #48	; 0x30
 800861a:	7083      	strb	r3, [r0, #2]
 800861c:	70c1      	strb	r1, [r0, #3]
 800861e:	1d03      	adds	r3, r0, #4
 8008620:	e7f1      	b.n	8008606 <__exponent+0x60>
	...

08008624 <_printf_float>:
 8008624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008628:	b091      	sub	sp, #68	; 0x44
 800862a:	460c      	mov	r4, r1
 800862c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008630:	4616      	mov	r6, r2
 8008632:	461f      	mov	r7, r3
 8008634:	4605      	mov	r5, r0
 8008636:	f003 f903 	bl	800b840 <_localeconv_r>
 800863a:	6803      	ldr	r3, [r0, #0]
 800863c:	4618      	mov	r0, r3
 800863e:	9309      	str	r3, [sp, #36]	; 0x24
 8008640:	f7f7 fd86 	bl	8000150 <strlen>
 8008644:	2300      	movs	r3, #0
 8008646:	930e      	str	r3, [sp, #56]	; 0x38
 8008648:	f8d8 3000 	ldr.w	r3, [r8]
 800864c:	900a      	str	r0, [sp, #40]	; 0x28
 800864e:	3307      	adds	r3, #7
 8008650:	f023 0307 	bic.w	r3, r3, #7
 8008654:	f103 0208 	add.w	r2, r3, #8
 8008658:	f894 9018 	ldrb.w	r9, [r4, #24]
 800865c:	f8d4 b000 	ldr.w	fp, [r4]
 8008660:	f8c8 2000 	str.w	r2, [r8]
 8008664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008668:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800866c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008670:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008674:	930b      	str	r3, [sp, #44]	; 0x2c
 8008676:	f04f 32ff 	mov.w	r2, #4294967295
 800867a:	4640      	mov	r0, r8
 800867c:	4b9c      	ldr	r3, [pc, #624]	; (80088f0 <_printf_float+0x2cc>)
 800867e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008680:	f7f8 f9c4 	bl	8000a0c <__aeabi_dcmpun>
 8008684:	bb70      	cbnz	r0, 80086e4 <_printf_float+0xc0>
 8008686:	f04f 32ff 	mov.w	r2, #4294967295
 800868a:	4640      	mov	r0, r8
 800868c:	4b98      	ldr	r3, [pc, #608]	; (80088f0 <_printf_float+0x2cc>)
 800868e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008690:	f7f8 f99e 	bl	80009d0 <__aeabi_dcmple>
 8008694:	bb30      	cbnz	r0, 80086e4 <_printf_float+0xc0>
 8008696:	2200      	movs	r2, #0
 8008698:	2300      	movs	r3, #0
 800869a:	4640      	mov	r0, r8
 800869c:	4651      	mov	r1, sl
 800869e:	f7f8 f98d 	bl	80009bc <__aeabi_dcmplt>
 80086a2:	b110      	cbz	r0, 80086aa <_printf_float+0x86>
 80086a4:	232d      	movs	r3, #45	; 0x2d
 80086a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086aa:	4b92      	ldr	r3, [pc, #584]	; (80088f4 <_printf_float+0x2d0>)
 80086ac:	4892      	ldr	r0, [pc, #584]	; (80088f8 <_printf_float+0x2d4>)
 80086ae:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80086b2:	bf94      	ite	ls
 80086b4:	4698      	movls	r8, r3
 80086b6:	4680      	movhi	r8, r0
 80086b8:	2303      	movs	r3, #3
 80086ba:	f04f 0a00 	mov.w	sl, #0
 80086be:	6123      	str	r3, [r4, #16]
 80086c0:	f02b 0304 	bic.w	r3, fp, #4
 80086c4:	6023      	str	r3, [r4, #0]
 80086c6:	4633      	mov	r3, r6
 80086c8:	4621      	mov	r1, r4
 80086ca:	4628      	mov	r0, r5
 80086cc:	9700      	str	r7, [sp, #0]
 80086ce:	aa0f      	add	r2, sp, #60	; 0x3c
 80086d0:	f000 f9d4 	bl	8008a7c <_printf_common>
 80086d4:	3001      	adds	r0, #1
 80086d6:	f040 8090 	bne.w	80087fa <_printf_float+0x1d6>
 80086da:	f04f 30ff 	mov.w	r0, #4294967295
 80086de:	b011      	add	sp, #68	; 0x44
 80086e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e4:	4642      	mov	r2, r8
 80086e6:	4653      	mov	r3, sl
 80086e8:	4640      	mov	r0, r8
 80086ea:	4651      	mov	r1, sl
 80086ec:	f7f8 f98e 	bl	8000a0c <__aeabi_dcmpun>
 80086f0:	b148      	cbz	r0, 8008706 <_printf_float+0xe2>
 80086f2:	f1ba 0f00 	cmp.w	sl, #0
 80086f6:	bfb8      	it	lt
 80086f8:	232d      	movlt	r3, #45	; 0x2d
 80086fa:	4880      	ldr	r0, [pc, #512]	; (80088fc <_printf_float+0x2d8>)
 80086fc:	bfb8      	it	lt
 80086fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008702:	4b7f      	ldr	r3, [pc, #508]	; (8008900 <_printf_float+0x2dc>)
 8008704:	e7d3      	b.n	80086ae <_printf_float+0x8a>
 8008706:	6863      	ldr	r3, [r4, #4]
 8008708:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800870c:	1c5a      	adds	r2, r3, #1
 800870e:	d142      	bne.n	8008796 <_printf_float+0x172>
 8008710:	2306      	movs	r3, #6
 8008712:	6063      	str	r3, [r4, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	9206      	str	r2, [sp, #24]
 8008718:	aa0e      	add	r2, sp, #56	; 0x38
 800871a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800871e:	aa0d      	add	r2, sp, #52	; 0x34
 8008720:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008724:	9203      	str	r2, [sp, #12]
 8008726:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800872a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800872e:	6023      	str	r3, [r4, #0]
 8008730:	6863      	ldr	r3, [r4, #4]
 8008732:	4642      	mov	r2, r8
 8008734:	9300      	str	r3, [sp, #0]
 8008736:	4628      	mov	r0, r5
 8008738:	4653      	mov	r3, sl
 800873a:	910b      	str	r1, [sp, #44]	; 0x2c
 800873c:	f7ff fed4 	bl	80084e8 <__cvt>
 8008740:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008742:	4680      	mov	r8, r0
 8008744:	2947      	cmp	r1, #71	; 0x47
 8008746:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008748:	d108      	bne.n	800875c <_printf_float+0x138>
 800874a:	1cc8      	adds	r0, r1, #3
 800874c:	db02      	blt.n	8008754 <_printf_float+0x130>
 800874e:	6863      	ldr	r3, [r4, #4]
 8008750:	4299      	cmp	r1, r3
 8008752:	dd40      	ble.n	80087d6 <_printf_float+0x1b2>
 8008754:	f1a9 0902 	sub.w	r9, r9, #2
 8008758:	fa5f f989 	uxtb.w	r9, r9
 800875c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008760:	d81f      	bhi.n	80087a2 <_printf_float+0x17e>
 8008762:	464a      	mov	r2, r9
 8008764:	3901      	subs	r1, #1
 8008766:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800876a:	910d      	str	r1, [sp, #52]	; 0x34
 800876c:	f7ff ff1b 	bl	80085a6 <__exponent>
 8008770:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008772:	4682      	mov	sl, r0
 8008774:	1813      	adds	r3, r2, r0
 8008776:	2a01      	cmp	r2, #1
 8008778:	6123      	str	r3, [r4, #16]
 800877a:	dc02      	bgt.n	8008782 <_printf_float+0x15e>
 800877c:	6822      	ldr	r2, [r4, #0]
 800877e:	07d2      	lsls	r2, r2, #31
 8008780:	d501      	bpl.n	8008786 <_printf_float+0x162>
 8008782:	3301      	adds	r3, #1
 8008784:	6123      	str	r3, [r4, #16]
 8008786:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800878a:	2b00      	cmp	r3, #0
 800878c:	d09b      	beq.n	80086c6 <_printf_float+0xa2>
 800878e:	232d      	movs	r3, #45	; 0x2d
 8008790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008794:	e797      	b.n	80086c6 <_printf_float+0xa2>
 8008796:	2947      	cmp	r1, #71	; 0x47
 8008798:	d1bc      	bne.n	8008714 <_printf_float+0xf0>
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1ba      	bne.n	8008714 <_printf_float+0xf0>
 800879e:	2301      	movs	r3, #1
 80087a0:	e7b7      	b.n	8008712 <_printf_float+0xee>
 80087a2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80087a6:	d118      	bne.n	80087da <_printf_float+0x1b6>
 80087a8:	2900      	cmp	r1, #0
 80087aa:	6863      	ldr	r3, [r4, #4]
 80087ac:	dd0b      	ble.n	80087c6 <_printf_float+0x1a2>
 80087ae:	6121      	str	r1, [r4, #16]
 80087b0:	b913      	cbnz	r3, 80087b8 <_printf_float+0x194>
 80087b2:	6822      	ldr	r2, [r4, #0]
 80087b4:	07d0      	lsls	r0, r2, #31
 80087b6:	d502      	bpl.n	80087be <_printf_float+0x19a>
 80087b8:	3301      	adds	r3, #1
 80087ba:	440b      	add	r3, r1
 80087bc:	6123      	str	r3, [r4, #16]
 80087be:	f04f 0a00 	mov.w	sl, #0
 80087c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80087c4:	e7df      	b.n	8008786 <_printf_float+0x162>
 80087c6:	b913      	cbnz	r3, 80087ce <_printf_float+0x1aa>
 80087c8:	6822      	ldr	r2, [r4, #0]
 80087ca:	07d2      	lsls	r2, r2, #31
 80087cc:	d501      	bpl.n	80087d2 <_printf_float+0x1ae>
 80087ce:	3302      	adds	r3, #2
 80087d0:	e7f4      	b.n	80087bc <_printf_float+0x198>
 80087d2:	2301      	movs	r3, #1
 80087d4:	e7f2      	b.n	80087bc <_printf_float+0x198>
 80087d6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80087da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087dc:	4299      	cmp	r1, r3
 80087de:	db05      	blt.n	80087ec <_printf_float+0x1c8>
 80087e0:	6823      	ldr	r3, [r4, #0]
 80087e2:	6121      	str	r1, [r4, #16]
 80087e4:	07d8      	lsls	r0, r3, #31
 80087e6:	d5ea      	bpl.n	80087be <_printf_float+0x19a>
 80087e8:	1c4b      	adds	r3, r1, #1
 80087ea:	e7e7      	b.n	80087bc <_printf_float+0x198>
 80087ec:	2900      	cmp	r1, #0
 80087ee:	bfcc      	ite	gt
 80087f0:	2201      	movgt	r2, #1
 80087f2:	f1c1 0202 	rsble	r2, r1, #2
 80087f6:	4413      	add	r3, r2
 80087f8:	e7e0      	b.n	80087bc <_printf_float+0x198>
 80087fa:	6823      	ldr	r3, [r4, #0]
 80087fc:	055a      	lsls	r2, r3, #21
 80087fe:	d407      	bmi.n	8008810 <_printf_float+0x1ec>
 8008800:	6923      	ldr	r3, [r4, #16]
 8008802:	4642      	mov	r2, r8
 8008804:	4631      	mov	r1, r6
 8008806:	4628      	mov	r0, r5
 8008808:	47b8      	blx	r7
 800880a:	3001      	adds	r0, #1
 800880c:	d12b      	bne.n	8008866 <_printf_float+0x242>
 800880e:	e764      	b.n	80086da <_printf_float+0xb6>
 8008810:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008814:	f240 80dd 	bls.w	80089d2 <_printf_float+0x3ae>
 8008818:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800881c:	2200      	movs	r2, #0
 800881e:	2300      	movs	r3, #0
 8008820:	f7f8 f8c2 	bl	80009a8 <__aeabi_dcmpeq>
 8008824:	2800      	cmp	r0, #0
 8008826:	d033      	beq.n	8008890 <_printf_float+0x26c>
 8008828:	2301      	movs	r3, #1
 800882a:	4631      	mov	r1, r6
 800882c:	4628      	mov	r0, r5
 800882e:	4a35      	ldr	r2, [pc, #212]	; (8008904 <_printf_float+0x2e0>)
 8008830:	47b8      	blx	r7
 8008832:	3001      	adds	r0, #1
 8008834:	f43f af51 	beq.w	80086da <_printf_float+0xb6>
 8008838:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800883c:	429a      	cmp	r2, r3
 800883e:	db02      	blt.n	8008846 <_printf_float+0x222>
 8008840:	6823      	ldr	r3, [r4, #0]
 8008842:	07d8      	lsls	r0, r3, #31
 8008844:	d50f      	bpl.n	8008866 <_printf_float+0x242>
 8008846:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800884a:	4631      	mov	r1, r6
 800884c:	4628      	mov	r0, r5
 800884e:	47b8      	blx	r7
 8008850:	3001      	adds	r0, #1
 8008852:	f43f af42 	beq.w	80086da <_printf_float+0xb6>
 8008856:	f04f 0800 	mov.w	r8, #0
 800885a:	f104 091a 	add.w	r9, r4, #26
 800885e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008860:	3b01      	subs	r3, #1
 8008862:	4543      	cmp	r3, r8
 8008864:	dc09      	bgt.n	800887a <_printf_float+0x256>
 8008866:	6823      	ldr	r3, [r4, #0]
 8008868:	079b      	lsls	r3, r3, #30
 800886a:	f100 8102 	bmi.w	8008a72 <_printf_float+0x44e>
 800886e:	68e0      	ldr	r0, [r4, #12]
 8008870:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008872:	4298      	cmp	r0, r3
 8008874:	bfb8      	it	lt
 8008876:	4618      	movlt	r0, r3
 8008878:	e731      	b.n	80086de <_printf_float+0xba>
 800887a:	2301      	movs	r3, #1
 800887c:	464a      	mov	r2, r9
 800887e:	4631      	mov	r1, r6
 8008880:	4628      	mov	r0, r5
 8008882:	47b8      	blx	r7
 8008884:	3001      	adds	r0, #1
 8008886:	f43f af28 	beq.w	80086da <_printf_float+0xb6>
 800888a:	f108 0801 	add.w	r8, r8, #1
 800888e:	e7e6      	b.n	800885e <_printf_float+0x23a>
 8008890:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008892:	2b00      	cmp	r3, #0
 8008894:	dc38      	bgt.n	8008908 <_printf_float+0x2e4>
 8008896:	2301      	movs	r3, #1
 8008898:	4631      	mov	r1, r6
 800889a:	4628      	mov	r0, r5
 800889c:	4a19      	ldr	r2, [pc, #100]	; (8008904 <_printf_float+0x2e0>)
 800889e:	47b8      	blx	r7
 80088a0:	3001      	adds	r0, #1
 80088a2:	f43f af1a 	beq.w	80086da <_printf_float+0xb6>
 80088a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80088aa:	4313      	orrs	r3, r2
 80088ac:	d102      	bne.n	80088b4 <_printf_float+0x290>
 80088ae:	6823      	ldr	r3, [r4, #0]
 80088b0:	07d9      	lsls	r1, r3, #31
 80088b2:	d5d8      	bpl.n	8008866 <_printf_float+0x242>
 80088b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088b8:	4631      	mov	r1, r6
 80088ba:	4628      	mov	r0, r5
 80088bc:	47b8      	blx	r7
 80088be:	3001      	adds	r0, #1
 80088c0:	f43f af0b 	beq.w	80086da <_printf_float+0xb6>
 80088c4:	f04f 0900 	mov.w	r9, #0
 80088c8:	f104 0a1a 	add.w	sl, r4, #26
 80088cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088ce:	425b      	negs	r3, r3
 80088d0:	454b      	cmp	r3, r9
 80088d2:	dc01      	bgt.n	80088d8 <_printf_float+0x2b4>
 80088d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088d6:	e794      	b.n	8008802 <_printf_float+0x1de>
 80088d8:	2301      	movs	r3, #1
 80088da:	4652      	mov	r2, sl
 80088dc:	4631      	mov	r1, r6
 80088de:	4628      	mov	r0, r5
 80088e0:	47b8      	blx	r7
 80088e2:	3001      	adds	r0, #1
 80088e4:	f43f aef9 	beq.w	80086da <_printf_float+0xb6>
 80088e8:	f109 0901 	add.w	r9, r9, #1
 80088ec:	e7ee      	b.n	80088cc <_printf_float+0x2a8>
 80088ee:	bf00      	nop
 80088f0:	7fefffff 	.word	0x7fefffff
 80088f4:	0800c9bd 	.word	0x0800c9bd
 80088f8:	0800c9c1 	.word	0x0800c9c1
 80088fc:	0800c9c9 	.word	0x0800c9c9
 8008900:	0800c9c5 	.word	0x0800c9c5
 8008904:	0800c9cd 	.word	0x0800c9cd
 8008908:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800890a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800890c:	429a      	cmp	r2, r3
 800890e:	bfa8      	it	ge
 8008910:	461a      	movge	r2, r3
 8008912:	2a00      	cmp	r2, #0
 8008914:	4691      	mov	r9, r2
 8008916:	dc37      	bgt.n	8008988 <_printf_float+0x364>
 8008918:	f04f 0b00 	mov.w	fp, #0
 800891c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008920:	f104 021a 	add.w	r2, r4, #26
 8008924:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008928:	ebaa 0309 	sub.w	r3, sl, r9
 800892c:	455b      	cmp	r3, fp
 800892e:	dc33      	bgt.n	8008998 <_printf_float+0x374>
 8008930:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008934:	429a      	cmp	r2, r3
 8008936:	db3b      	blt.n	80089b0 <_printf_float+0x38c>
 8008938:	6823      	ldr	r3, [r4, #0]
 800893a:	07da      	lsls	r2, r3, #31
 800893c:	d438      	bmi.n	80089b0 <_printf_float+0x38c>
 800893e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008940:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008942:	eba2 030a 	sub.w	r3, r2, sl
 8008946:	eba2 0901 	sub.w	r9, r2, r1
 800894a:	4599      	cmp	r9, r3
 800894c:	bfa8      	it	ge
 800894e:	4699      	movge	r9, r3
 8008950:	f1b9 0f00 	cmp.w	r9, #0
 8008954:	dc34      	bgt.n	80089c0 <_printf_float+0x39c>
 8008956:	f04f 0800 	mov.w	r8, #0
 800895a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800895e:	f104 0a1a 	add.w	sl, r4, #26
 8008962:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008966:	1a9b      	subs	r3, r3, r2
 8008968:	eba3 0309 	sub.w	r3, r3, r9
 800896c:	4543      	cmp	r3, r8
 800896e:	f77f af7a 	ble.w	8008866 <_printf_float+0x242>
 8008972:	2301      	movs	r3, #1
 8008974:	4652      	mov	r2, sl
 8008976:	4631      	mov	r1, r6
 8008978:	4628      	mov	r0, r5
 800897a:	47b8      	blx	r7
 800897c:	3001      	adds	r0, #1
 800897e:	f43f aeac 	beq.w	80086da <_printf_float+0xb6>
 8008982:	f108 0801 	add.w	r8, r8, #1
 8008986:	e7ec      	b.n	8008962 <_printf_float+0x33e>
 8008988:	4613      	mov	r3, r2
 800898a:	4631      	mov	r1, r6
 800898c:	4642      	mov	r2, r8
 800898e:	4628      	mov	r0, r5
 8008990:	47b8      	blx	r7
 8008992:	3001      	adds	r0, #1
 8008994:	d1c0      	bne.n	8008918 <_printf_float+0x2f4>
 8008996:	e6a0      	b.n	80086da <_printf_float+0xb6>
 8008998:	2301      	movs	r3, #1
 800899a:	4631      	mov	r1, r6
 800899c:	4628      	mov	r0, r5
 800899e:	920b      	str	r2, [sp, #44]	; 0x2c
 80089a0:	47b8      	blx	r7
 80089a2:	3001      	adds	r0, #1
 80089a4:	f43f ae99 	beq.w	80086da <_printf_float+0xb6>
 80089a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089aa:	f10b 0b01 	add.w	fp, fp, #1
 80089ae:	e7b9      	b.n	8008924 <_printf_float+0x300>
 80089b0:	4631      	mov	r1, r6
 80089b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089b6:	4628      	mov	r0, r5
 80089b8:	47b8      	blx	r7
 80089ba:	3001      	adds	r0, #1
 80089bc:	d1bf      	bne.n	800893e <_printf_float+0x31a>
 80089be:	e68c      	b.n	80086da <_printf_float+0xb6>
 80089c0:	464b      	mov	r3, r9
 80089c2:	4631      	mov	r1, r6
 80089c4:	4628      	mov	r0, r5
 80089c6:	eb08 020a 	add.w	r2, r8, sl
 80089ca:	47b8      	blx	r7
 80089cc:	3001      	adds	r0, #1
 80089ce:	d1c2      	bne.n	8008956 <_printf_float+0x332>
 80089d0:	e683      	b.n	80086da <_printf_float+0xb6>
 80089d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089d4:	2a01      	cmp	r2, #1
 80089d6:	dc01      	bgt.n	80089dc <_printf_float+0x3b8>
 80089d8:	07db      	lsls	r3, r3, #31
 80089da:	d537      	bpl.n	8008a4c <_printf_float+0x428>
 80089dc:	2301      	movs	r3, #1
 80089de:	4642      	mov	r2, r8
 80089e0:	4631      	mov	r1, r6
 80089e2:	4628      	mov	r0, r5
 80089e4:	47b8      	blx	r7
 80089e6:	3001      	adds	r0, #1
 80089e8:	f43f ae77 	beq.w	80086da <_printf_float+0xb6>
 80089ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089f0:	4631      	mov	r1, r6
 80089f2:	4628      	mov	r0, r5
 80089f4:	47b8      	blx	r7
 80089f6:	3001      	adds	r0, #1
 80089f8:	f43f ae6f 	beq.w	80086da <_printf_float+0xb6>
 80089fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a00:	2200      	movs	r2, #0
 8008a02:	2300      	movs	r3, #0
 8008a04:	f7f7 ffd0 	bl	80009a8 <__aeabi_dcmpeq>
 8008a08:	b9d8      	cbnz	r0, 8008a42 <_printf_float+0x41e>
 8008a0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a0c:	f108 0201 	add.w	r2, r8, #1
 8008a10:	3b01      	subs	r3, #1
 8008a12:	4631      	mov	r1, r6
 8008a14:	4628      	mov	r0, r5
 8008a16:	47b8      	blx	r7
 8008a18:	3001      	adds	r0, #1
 8008a1a:	d10e      	bne.n	8008a3a <_printf_float+0x416>
 8008a1c:	e65d      	b.n	80086da <_printf_float+0xb6>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	464a      	mov	r2, r9
 8008a22:	4631      	mov	r1, r6
 8008a24:	4628      	mov	r0, r5
 8008a26:	47b8      	blx	r7
 8008a28:	3001      	adds	r0, #1
 8008a2a:	f43f ae56 	beq.w	80086da <_printf_float+0xb6>
 8008a2e:	f108 0801 	add.w	r8, r8, #1
 8008a32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a34:	3b01      	subs	r3, #1
 8008a36:	4543      	cmp	r3, r8
 8008a38:	dcf1      	bgt.n	8008a1e <_printf_float+0x3fa>
 8008a3a:	4653      	mov	r3, sl
 8008a3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a40:	e6e0      	b.n	8008804 <_printf_float+0x1e0>
 8008a42:	f04f 0800 	mov.w	r8, #0
 8008a46:	f104 091a 	add.w	r9, r4, #26
 8008a4a:	e7f2      	b.n	8008a32 <_printf_float+0x40e>
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	4642      	mov	r2, r8
 8008a50:	e7df      	b.n	8008a12 <_printf_float+0x3ee>
 8008a52:	2301      	movs	r3, #1
 8008a54:	464a      	mov	r2, r9
 8008a56:	4631      	mov	r1, r6
 8008a58:	4628      	mov	r0, r5
 8008a5a:	47b8      	blx	r7
 8008a5c:	3001      	adds	r0, #1
 8008a5e:	f43f ae3c 	beq.w	80086da <_printf_float+0xb6>
 8008a62:	f108 0801 	add.w	r8, r8, #1
 8008a66:	68e3      	ldr	r3, [r4, #12]
 8008a68:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008a6a:	1a5b      	subs	r3, r3, r1
 8008a6c:	4543      	cmp	r3, r8
 8008a6e:	dcf0      	bgt.n	8008a52 <_printf_float+0x42e>
 8008a70:	e6fd      	b.n	800886e <_printf_float+0x24a>
 8008a72:	f04f 0800 	mov.w	r8, #0
 8008a76:	f104 0919 	add.w	r9, r4, #25
 8008a7a:	e7f4      	b.n	8008a66 <_printf_float+0x442>

08008a7c <_printf_common>:
 8008a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a80:	4616      	mov	r6, r2
 8008a82:	4699      	mov	r9, r3
 8008a84:	688a      	ldr	r2, [r1, #8]
 8008a86:	690b      	ldr	r3, [r1, #16]
 8008a88:	4607      	mov	r7, r0
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	bfb8      	it	lt
 8008a8e:	4613      	movlt	r3, r2
 8008a90:	6033      	str	r3, [r6, #0]
 8008a92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a96:	460c      	mov	r4, r1
 8008a98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a9c:	b10a      	cbz	r2, 8008aa2 <_printf_common+0x26>
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	6033      	str	r3, [r6, #0]
 8008aa2:	6823      	ldr	r3, [r4, #0]
 8008aa4:	0699      	lsls	r1, r3, #26
 8008aa6:	bf42      	ittt	mi
 8008aa8:	6833      	ldrmi	r3, [r6, #0]
 8008aaa:	3302      	addmi	r3, #2
 8008aac:	6033      	strmi	r3, [r6, #0]
 8008aae:	6825      	ldr	r5, [r4, #0]
 8008ab0:	f015 0506 	ands.w	r5, r5, #6
 8008ab4:	d106      	bne.n	8008ac4 <_printf_common+0x48>
 8008ab6:	f104 0a19 	add.w	sl, r4, #25
 8008aba:	68e3      	ldr	r3, [r4, #12]
 8008abc:	6832      	ldr	r2, [r6, #0]
 8008abe:	1a9b      	subs	r3, r3, r2
 8008ac0:	42ab      	cmp	r3, r5
 8008ac2:	dc28      	bgt.n	8008b16 <_printf_common+0x9a>
 8008ac4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ac8:	1e13      	subs	r3, r2, #0
 8008aca:	6822      	ldr	r2, [r4, #0]
 8008acc:	bf18      	it	ne
 8008ace:	2301      	movne	r3, #1
 8008ad0:	0692      	lsls	r2, r2, #26
 8008ad2:	d42d      	bmi.n	8008b30 <_printf_common+0xb4>
 8008ad4:	4649      	mov	r1, r9
 8008ad6:	4638      	mov	r0, r7
 8008ad8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008adc:	47c0      	blx	r8
 8008ade:	3001      	adds	r0, #1
 8008ae0:	d020      	beq.n	8008b24 <_printf_common+0xa8>
 8008ae2:	6823      	ldr	r3, [r4, #0]
 8008ae4:	68e5      	ldr	r5, [r4, #12]
 8008ae6:	f003 0306 	and.w	r3, r3, #6
 8008aea:	2b04      	cmp	r3, #4
 8008aec:	bf18      	it	ne
 8008aee:	2500      	movne	r5, #0
 8008af0:	6832      	ldr	r2, [r6, #0]
 8008af2:	f04f 0600 	mov.w	r6, #0
 8008af6:	68a3      	ldr	r3, [r4, #8]
 8008af8:	bf08      	it	eq
 8008afa:	1aad      	subeq	r5, r5, r2
 8008afc:	6922      	ldr	r2, [r4, #16]
 8008afe:	bf08      	it	eq
 8008b00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b04:	4293      	cmp	r3, r2
 8008b06:	bfc4      	itt	gt
 8008b08:	1a9b      	subgt	r3, r3, r2
 8008b0a:	18ed      	addgt	r5, r5, r3
 8008b0c:	341a      	adds	r4, #26
 8008b0e:	42b5      	cmp	r5, r6
 8008b10:	d11a      	bne.n	8008b48 <_printf_common+0xcc>
 8008b12:	2000      	movs	r0, #0
 8008b14:	e008      	b.n	8008b28 <_printf_common+0xac>
 8008b16:	2301      	movs	r3, #1
 8008b18:	4652      	mov	r2, sl
 8008b1a:	4649      	mov	r1, r9
 8008b1c:	4638      	mov	r0, r7
 8008b1e:	47c0      	blx	r8
 8008b20:	3001      	adds	r0, #1
 8008b22:	d103      	bne.n	8008b2c <_printf_common+0xb0>
 8008b24:	f04f 30ff 	mov.w	r0, #4294967295
 8008b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b2c:	3501      	adds	r5, #1
 8008b2e:	e7c4      	b.n	8008aba <_printf_common+0x3e>
 8008b30:	2030      	movs	r0, #48	; 0x30
 8008b32:	18e1      	adds	r1, r4, r3
 8008b34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b38:	1c5a      	adds	r2, r3, #1
 8008b3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b3e:	4422      	add	r2, r4
 8008b40:	3302      	adds	r3, #2
 8008b42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b46:	e7c5      	b.n	8008ad4 <_printf_common+0x58>
 8008b48:	2301      	movs	r3, #1
 8008b4a:	4622      	mov	r2, r4
 8008b4c:	4649      	mov	r1, r9
 8008b4e:	4638      	mov	r0, r7
 8008b50:	47c0      	blx	r8
 8008b52:	3001      	adds	r0, #1
 8008b54:	d0e6      	beq.n	8008b24 <_printf_common+0xa8>
 8008b56:	3601      	adds	r6, #1
 8008b58:	e7d9      	b.n	8008b0e <_printf_common+0x92>
	...

08008b5c <_printf_i>:
 8008b5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b60:	460c      	mov	r4, r1
 8008b62:	7e27      	ldrb	r7, [r4, #24]
 8008b64:	4691      	mov	r9, r2
 8008b66:	2f78      	cmp	r7, #120	; 0x78
 8008b68:	4680      	mov	r8, r0
 8008b6a:	469a      	mov	sl, r3
 8008b6c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008b6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b72:	d807      	bhi.n	8008b84 <_printf_i+0x28>
 8008b74:	2f62      	cmp	r7, #98	; 0x62
 8008b76:	d80a      	bhi.n	8008b8e <_printf_i+0x32>
 8008b78:	2f00      	cmp	r7, #0
 8008b7a:	f000 80d9 	beq.w	8008d30 <_printf_i+0x1d4>
 8008b7e:	2f58      	cmp	r7, #88	; 0x58
 8008b80:	f000 80a4 	beq.w	8008ccc <_printf_i+0x170>
 8008b84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008b88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b8c:	e03a      	b.n	8008c04 <_printf_i+0xa8>
 8008b8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b92:	2b15      	cmp	r3, #21
 8008b94:	d8f6      	bhi.n	8008b84 <_printf_i+0x28>
 8008b96:	a001      	add	r0, pc, #4	; (adr r0, 8008b9c <_printf_i+0x40>)
 8008b98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008b9c:	08008bf5 	.word	0x08008bf5
 8008ba0:	08008c09 	.word	0x08008c09
 8008ba4:	08008b85 	.word	0x08008b85
 8008ba8:	08008b85 	.word	0x08008b85
 8008bac:	08008b85 	.word	0x08008b85
 8008bb0:	08008b85 	.word	0x08008b85
 8008bb4:	08008c09 	.word	0x08008c09
 8008bb8:	08008b85 	.word	0x08008b85
 8008bbc:	08008b85 	.word	0x08008b85
 8008bc0:	08008b85 	.word	0x08008b85
 8008bc4:	08008b85 	.word	0x08008b85
 8008bc8:	08008d17 	.word	0x08008d17
 8008bcc:	08008c39 	.word	0x08008c39
 8008bd0:	08008cf9 	.word	0x08008cf9
 8008bd4:	08008b85 	.word	0x08008b85
 8008bd8:	08008b85 	.word	0x08008b85
 8008bdc:	08008d39 	.word	0x08008d39
 8008be0:	08008b85 	.word	0x08008b85
 8008be4:	08008c39 	.word	0x08008c39
 8008be8:	08008b85 	.word	0x08008b85
 8008bec:	08008b85 	.word	0x08008b85
 8008bf0:	08008d01 	.word	0x08008d01
 8008bf4:	680b      	ldr	r3, [r1, #0]
 8008bf6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008bfa:	1d1a      	adds	r2, r3, #4
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	600a      	str	r2, [r1, #0]
 8008c00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c04:	2301      	movs	r3, #1
 8008c06:	e0a4      	b.n	8008d52 <_printf_i+0x1f6>
 8008c08:	6825      	ldr	r5, [r4, #0]
 8008c0a:	6808      	ldr	r0, [r1, #0]
 8008c0c:	062e      	lsls	r6, r5, #24
 8008c0e:	f100 0304 	add.w	r3, r0, #4
 8008c12:	d50a      	bpl.n	8008c2a <_printf_i+0xce>
 8008c14:	6805      	ldr	r5, [r0, #0]
 8008c16:	600b      	str	r3, [r1, #0]
 8008c18:	2d00      	cmp	r5, #0
 8008c1a:	da03      	bge.n	8008c24 <_printf_i+0xc8>
 8008c1c:	232d      	movs	r3, #45	; 0x2d
 8008c1e:	426d      	negs	r5, r5
 8008c20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c24:	230a      	movs	r3, #10
 8008c26:	485e      	ldr	r0, [pc, #376]	; (8008da0 <_printf_i+0x244>)
 8008c28:	e019      	b.n	8008c5e <_printf_i+0x102>
 8008c2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008c2e:	6805      	ldr	r5, [r0, #0]
 8008c30:	600b      	str	r3, [r1, #0]
 8008c32:	bf18      	it	ne
 8008c34:	b22d      	sxthne	r5, r5
 8008c36:	e7ef      	b.n	8008c18 <_printf_i+0xbc>
 8008c38:	680b      	ldr	r3, [r1, #0]
 8008c3a:	6825      	ldr	r5, [r4, #0]
 8008c3c:	1d18      	adds	r0, r3, #4
 8008c3e:	6008      	str	r0, [r1, #0]
 8008c40:	0628      	lsls	r0, r5, #24
 8008c42:	d501      	bpl.n	8008c48 <_printf_i+0xec>
 8008c44:	681d      	ldr	r5, [r3, #0]
 8008c46:	e002      	b.n	8008c4e <_printf_i+0xf2>
 8008c48:	0669      	lsls	r1, r5, #25
 8008c4a:	d5fb      	bpl.n	8008c44 <_printf_i+0xe8>
 8008c4c:	881d      	ldrh	r5, [r3, #0]
 8008c4e:	2f6f      	cmp	r7, #111	; 0x6f
 8008c50:	bf0c      	ite	eq
 8008c52:	2308      	moveq	r3, #8
 8008c54:	230a      	movne	r3, #10
 8008c56:	4852      	ldr	r0, [pc, #328]	; (8008da0 <_printf_i+0x244>)
 8008c58:	2100      	movs	r1, #0
 8008c5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c5e:	6866      	ldr	r6, [r4, #4]
 8008c60:	2e00      	cmp	r6, #0
 8008c62:	bfa8      	it	ge
 8008c64:	6821      	ldrge	r1, [r4, #0]
 8008c66:	60a6      	str	r6, [r4, #8]
 8008c68:	bfa4      	itt	ge
 8008c6a:	f021 0104 	bicge.w	r1, r1, #4
 8008c6e:	6021      	strge	r1, [r4, #0]
 8008c70:	b90d      	cbnz	r5, 8008c76 <_printf_i+0x11a>
 8008c72:	2e00      	cmp	r6, #0
 8008c74:	d04d      	beq.n	8008d12 <_printf_i+0x1b6>
 8008c76:	4616      	mov	r6, r2
 8008c78:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c7c:	fb03 5711 	mls	r7, r3, r1, r5
 8008c80:	5dc7      	ldrb	r7, [r0, r7]
 8008c82:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c86:	462f      	mov	r7, r5
 8008c88:	42bb      	cmp	r3, r7
 8008c8a:	460d      	mov	r5, r1
 8008c8c:	d9f4      	bls.n	8008c78 <_printf_i+0x11c>
 8008c8e:	2b08      	cmp	r3, #8
 8008c90:	d10b      	bne.n	8008caa <_printf_i+0x14e>
 8008c92:	6823      	ldr	r3, [r4, #0]
 8008c94:	07df      	lsls	r7, r3, #31
 8008c96:	d508      	bpl.n	8008caa <_printf_i+0x14e>
 8008c98:	6923      	ldr	r3, [r4, #16]
 8008c9a:	6861      	ldr	r1, [r4, #4]
 8008c9c:	4299      	cmp	r1, r3
 8008c9e:	bfde      	ittt	le
 8008ca0:	2330      	movle	r3, #48	; 0x30
 8008ca2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ca6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008caa:	1b92      	subs	r2, r2, r6
 8008cac:	6122      	str	r2, [r4, #16]
 8008cae:	464b      	mov	r3, r9
 8008cb0:	4621      	mov	r1, r4
 8008cb2:	4640      	mov	r0, r8
 8008cb4:	f8cd a000 	str.w	sl, [sp]
 8008cb8:	aa03      	add	r2, sp, #12
 8008cba:	f7ff fedf 	bl	8008a7c <_printf_common>
 8008cbe:	3001      	adds	r0, #1
 8008cc0:	d14c      	bne.n	8008d5c <_printf_i+0x200>
 8008cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc6:	b004      	add	sp, #16
 8008cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ccc:	4834      	ldr	r0, [pc, #208]	; (8008da0 <_printf_i+0x244>)
 8008cce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008cd2:	680e      	ldr	r6, [r1, #0]
 8008cd4:	6823      	ldr	r3, [r4, #0]
 8008cd6:	f856 5b04 	ldr.w	r5, [r6], #4
 8008cda:	061f      	lsls	r7, r3, #24
 8008cdc:	600e      	str	r6, [r1, #0]
 8008cde:	d514      	bpl.n	8008d0a <_printf_i+0x1ae>
 8008ce0:	07d9      	lsls	r1, r3, #31
 8008ce2:	bf44      	itt	mi
 8008ce4:	f043 0320 	orrmi.w	r3, r3, #32
 8008ce8:	6023      	strmi	r3, [r4, #0]
 8008cea:	b91d      	cbnz	r5, 8008cf4 <_printf_i+0x198>
 8008cec:	6823      	ldr	r3, [r4, #0]
 8008cee:	f023 0320 	bic.w	r3, r3, #32
 8008cf2:	6023      	str	r3, [r4, #0]
 8008cf4:	2310      	movs	r3, #16
 8008cf6:	e7af      	b.n	8008c58 <_printf_i+0xfc>
 8008cf8:	6823      	ldr	r3, [r4, #0]
 8008cfa:	f043 0320 	orr.w	r3, r3, #32
 8008cfe:	6023      	str	r3, [r4, #0]
 8008d00:	2378      	movs	r3, #120	; 0x78
 8008d02:	4828      	ldr	r0, [pc, #160]	; (8008da4 <_printf_i+0x248>)
 8008d04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d08:	e7e3      	b.n	8008cd2 <_printf_i+0x176>
 8008d0a:	065e      	lsls	r6, r3, #25
 8008d0c:	bf48      	it	mi
 8008d0e:	b2ad      	uxthmi	r5, r5
 8008d10:	e7e6      	b.n	8008ce0 <_printf_i+0x184>
 8008d12:	4616      	mov	r6, r2
 8008d14:	e7bb      	b.n	8008c8e <_printf_i+0x132>
 8008d16:	680b      	ldr	r3, [r1, #0]
 8008d18:	6826      	ldr	r6, [r4, #0]
 8008d1a:	1d1d      	adds	r5, r3, #4
 8008d1c:	6960      	ldr	r0, [r4, #20]
 8008d1e:	600d      	str	r5, [r1, #0]
 8008d20:	0635      	lsls	r5, r6, #24
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	d501      	bpl.n	8008d2a <_printf_i+0x1ce>
 8008d26:	6018      	str	r0, [r3, #0]
 8008d28:	e002      	b.n	8008d30 <_printf_i+0x1d4>
 8008d2a:	0671      	lsls	r1, r6, #25
 8008d2c:	d5fb      	bpl.n	8008d26 <_printf_i+0x1ca>
 8008d2e:	8018      	strh	r0, [r3, #0]
 8008d30:	2300      	movs	r3, #0
 8008d32:	4616      	mov	r6, r2
 8008d34:	6123      	str	r3, [r4, #16]
 8008d36:	e7ba      	b.n	8008cae <_printf_i+0x152>
 8008d38:	680b      	ldr	r3, [r1, #0]
 8008d3a:	1d1a      	adds	r2, r3, #4
 8008d3c:	600a      	str	r2, [r1, #0]
 8008d3e:	681e      	ldr	r6, [r3, #0]
 8008d40:	2100      	movs	r1, #0
 8008d42:	4630      	mov	r0, r6
 8008d44:	6862      	ldr	r2, [r4, #4]
 8008d46:	f002 fdf9 	bl	800b93c <memchr>
 8008d4a:	b108      	cbz	r0, 8008d50 <_printf_i+0x1f4>
 8008d4c:	1b80      	subs	r0, r0, r6
 8008d4e:	6060      	str	r0, [r4, #4]
 8008d50:	6863      	ldr	r3, [r4, #4]
 8008d52:	6123      	str	r3, [r4, #16]
 8008d54:	2300      	movs	r3, #0
 8008d56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d5a:	e7a8      	b.n	8008cae <_printf_i+0x152>
 8008d5c:	4632      	mov	r2, r6
 8008d5e:	4649      	mov	r1, r9
 8008d60:	4640      	mov	r0, r8
 8008d62:	6923      	ldr	r3, [r4, #16]
 8008d64:	47d0      	blx	sl
 8008d66:	3001      	adds	r0, #1
 8008d68:	d0ab      	beq.n	8008cc2 <_printf_i+0x166>
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	079b      	lsls	r3, r3, #30
 8008d6e:	d413      	bmi.n	8008d98 <_printf_i+0x23c>
 8008d70:	68e0      	ldr	r0, [r4, #12]
 8008d72:	9b03      	ldr	r3, [sp, #12]
 8008d74:	4298      	cmp	r0, r3
 8008d76:	bfb8      	it	lt
 8008d78:	4618      	movlt	r0, r3
 8008d7a:	e7a4      	b.n	8008cc6 <_printf_i+0x16a>
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	4632      	mov	r2, r6
 8008d80:	4649      	mov	r1, r9
 8008d82:	4640      	mov	r0, r8
 8008d84:	47d0      	blx	sl
 8008d86:	3001      	adds	r0, #1
 8008d88:	d09b      	beq.n	8008cc2 <_printf_i+0x166>
 8008d8a:	3501      	adds	r5, #1
 8008d8c:	68e3      	ldr	r3, [r4, #12]
 8008d8e:	9903      	ldr	r1, [sp, #12]
 8008d90:	1a5b      	subs	r3, r3, r1
 8008d92:	42ab      	cmp	r3, r5
 8008d94:	dcf2      	bgt.n	8008d7c <_printf_i+0x220>
 8008d96:	e7eb      	b.n	8008d70 <_printf_i+0x214>
 8008d98:	2500      	movs	r5, #0
 8008d9a:	f104 0619 	add.w	r6, r4, #25
 8008d9e:	e7f5      	b.n	8008d8c <_printf_i+0x230>
 8008da0:	0800c9cf 	.word	0x0800c9cf
 8008da4:	0800c9e0 	.word	0x0800c9e0

08008da8 <_scanf_float>:
 8008da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dac:	b087      	sub	sp, #28
 8008dae:	9303      	str	r3, [sp, #12]
 8008db0:	688b      	ldr	r3, [r1, #8]
 8008db2:	4617      	mov	r7, r2
 8008db4:	1e5a      	subs	r2, r3, #1
 8008db6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008dba:	bf85      	ittet	hi
 8008dbc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008dc0:	195b      	addhi	r3, r3, r5
 8008dc2:	2300      	movls	r3, #0
 8008dc4:	9302      	strhi	r3, [sp, #8]
 8008dc6:	bf88      	it	hi
 8008dc8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008dcc:	468b      	mov	fp, r1
 8008dce:	f04f 0500 	mov.w	r5, #0
 8008dd2:	bf8c      	ite	hi
 8008dd4:	608b      	strhi	r3, [r1, #8]
 8008dd6:	9302      	strls	r3, [sp, #8]
 8008dd8:	680b      	ldr	r3, [r1, #0]
 8008dda:	4680      	mov	r8, r0
 8008ddc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008de0:	f84b 3b1c 	str.w	r3, [fp], #28
 8008de4:	460c      	mov	r4, r1
 8008de6:	465e      	mov	r6, fp
 8008de8:	46aa      	mov	sl, r5
 8008dea:	46a9      	mov	r9, r5
 8008dec:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008df0:	9501      	str	r5, [sp, #4]
 8008df2:	68a2      	ldr	r2, [r4, #8]
 8008df4:	b152      	cbz	r2, 8008e0c <_scanf_float+0x64>
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	2b4e      	cmp	r3, #78	; 0x4e
 8008dfc:	d864      	bhi.n	8008ec8 <_scanf_float+0x120>
 8008dfe:	2b40      	cmp	r3, #64	; 0x40
 8008e00:	d83c      	bhi.n	8008e7c <_scanf_float+0xd4>
 8008e02:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008e06:	b2c8      	uxtb	r0, r1
 8008e08:	280e      	cmp	r0, #14
 8008e0a:	d93a      	bls.n	8008e82 <_scanf_float+0xda>
 8008e0c:	f1b9 0f00 	cmp.w	r9, #0
 8008e10:	d003      	beq.n	8008e1a <_scanf_float+0x72>
 8008e12:	6823      	ldr	r3, [r4, #0]
 8008e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e18:	6023      	str	r3, [r4, #0]
 8008e1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e1e:	f1ba 0f01 	cmp.w	sl, #1
 8008e22:	f200 8113 	bhi.w	800904c <_scanf_float+0x2a4>
 8008e26:	455e      	cmp	r6, fp
 8008e28:	f200 8105 	bhi.w	8009036 <_scanf_float+0x28e>
 8008e2c:	2501      	movs	r5, #1
 8008e2e:	4628      	mov	r0, r5
 8008e30:	b007      	add	sp, #28
 8008e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e36:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008e3a:	2a0d      	cmp	r2, #13
 8008e3c:	d8e6      	bhi.n	8008e0c <_scanf_float+0x64>
 8008e3e:	a101      	add	r1, pc, #4	; (adr r1, 8008e44 <_scanf_float+0x9c>)
 8008e40:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008e44:	08008f83 	.word	0x08008f83
 8008e48:	08008e0d 	.word	0x08008e0d
 8008e4c:	08008e0d 	.word	0x08008e0d
 8008e50:	08008e0d 	.word	0x08008e0d
 8008e54:	08008fe3 	.word	0x08008fe3
 8008e58:	08008fbb 	.word	0x08008fbb
 8008e5c:	08008e0d 	.word	0x08008e0d
 8008e60:	08008e0d 	.word	0x08008e0d
 8008e64:	08008f91 	.word	0x08008f91
 8008e68:	08008e0d 	.word	0x08008e0d
 8008e6c:	08008e0d 	.word	0x08008e0d
 8008e70:	08008e0d 	.word	0x08008e0d
 8008e74:	08008e0d 	.word	0x08008e0d
 8008e78:	08008f49 	.word	0x08008f49
 8008e7c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008e80:	e7db      	b.n	8008e3a <_scanf_float+0x92>
 8008e82:	290e      	cmp	r1, #14
 8008e84:	d8c2      	bhi.n	8008e0c <_scanf_float+0x64>
 8008e86:	a001      	add	r0, pc, #4	; (adr r0, 8008e8c <_scanf_float+0xe4>)
 8008e88:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008e8c:	08008f3b 	.word	0x08008f3b
 8008e90:	08008e0d 	.word	0x08008e0d
 8008e94:	08008f3b 	.word	0x08008f3b
 8008e98:	08008fcf 	.word	0x08008fcf
 8008e9c:	08008e0d 	.word	0x08008e0d
 8008ea0:	08008ee9 	.word	0x08008ee9
 8008ea4:	08008f25 	.word	0x08008f25
 8008ea8:	08008f25 	.word	0x08008f25
 8008eac:	08008f25 	.word	0x08008f25
 8008eb0:	08008f25 	.word	0x08008f25
 8008eb4:	08008f25 	.word	0x08008f25
 8008eb8:	08008f25 	.word	0x08008f25
 8008ebc:	08008f25 	.word	0x08008f25
 8008ec0:	08008f25 	.word	0x08008f25
 8008ec4:	08008f25 	.word	0x08008f25
 8008ec8:	2b6e      	cmp	r3, #110	; 0x6e
 8008eca:	d809      	bhi.n	8008ee0 <_scanf_float+0x138>
 8008ecc:	2b60      	cmp	r3, #96	; 0x60
 8008ece:	d8b2      	bhi.n	8008e36 <_scanf_float+0x8e>
 8008ed0:	2b54      	cmp	r3, #84	; 0x54
 8008ed2:	d077      	beq.n	8008fc4 <_scanf_float+0x21c>
 8008ed4:	2b59      	cmp	r3, #89	; 0x59
 8008ed6:	d199      	bne.n	8008e0c <_scanf_float+0x64>
 8008ed8:	2d07      	cmp	r5, #7
 8008eda:	d197      	bne.n	8008e0c <_scanf_float+0x64>
 8008edc:	2508      	movs	r5, #8
 8008ede:	e029      	b.n	8008f34 <_scanf_float+0x18c>
 8008ee0:	2b74      	cmp	r3, #116	; 0x74
 8008ee2:	d06f      	beq.n	8008fc4 <_scanf_float+0x21c>
 8008ee4:	2b79      	cmp	r3, #121	; 0x79
 8008ee6:	e7f6      	b.n	8008ed6 <_scanf_float+0x12e>
 8008ee8:	6821      	ldr	r1, [r4, #0]
 8008eea:	05c8      	lsls	r0, r1, #23
 8008eec:	d51a      	bpl.n	8008f24 <_scanf_float+0x17c>
 8008eee:	9b02      	ldr	r3, [sp, #8]
 8008ef0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008ef4:	6021      	str	r1, [r4, #0]
 8008ef6:	f109 0901 	add.w	r9, r9, #1
 8008efa:	b11b      	cbz	r3, 8008f04 <_scanf_float+0x15c>
 8008efc:	3b01      	subs	r3, #1
 8008efe:	3201      	adds	r2, #1
 8008f00:	9302      	str	r3, [sp, #8]
 8008f02:	60a2      	str	r2, [r4, #8]
 8008f04:	68a3      	ldr	r3, [r4, #8]
 8008f06:	3b01      	subs	r3, #1
 8008f08:	60a3      	str	r3, [r4, #8]
 8008f0a:	6923      	ldr	r3, [r4, #16]
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	6123      	str	r3, [r4, #16]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	3b01      	subs	r3, #1
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	607b      	str	r3, [r7, #4]
 8008f18:	f340 8084 	ble.w	8009024 <_scanf_float+0x27c>
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	603b      	str	r3, [r7, #0]
 8008f22:	e766      	b.n	8008df2 <_scanf_float+0x4a>
 8008f24:	eb1a 0f05 	cmn.w	sl, r5
 8008f28:	f47f af70 	bne.w	8008e0c <_scanf_float+0x64>
 8008f2c:	6822      	ldr	r2, [r4, #0]
 8008f2e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008f32:	6022      	str	r2, [r4, #0]
 8008f34:	f806 3b01 	strb.w	r3, [r6], #1
 8008f38:	e7e4      	b.n	8008f04 <_scanf_float+0x15c>
 8008f3a:	6822      	ldr	r2, [r4, #0]
 8008f3c:	0610      	lsls	r0, r2, #24
 8008f3e:	f57f af65 	bpl.w	8008e0c <_scanf_float+0x64>
 8008f42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f46:	e7f4      	b.n	8008f32 <_scanf_float+0x18a>
 8008f48:	f1ba 0f00 	cmp.w	sl, #0
 8008f4c:	d10e      	bne.n	8008f6c <_scanf_float+0x1c4>
 8008f4e:	f1b9 0f00 	cmp.w	r9, #0
 8008f52:	d10e      	bne.n	8008f72 <_scanf_float+0x1ca>
 8008f54:	6822      	ldr	r2, [r4, #0]
 8008f56:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008f5a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008f5e:	d108      	bne.n	8008f72 <_scanf_float+0x1ca>
 8008f60:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008f64:	f04f 0a01 	mov.w	sl, #1
 8008f68:	6022      	str	r2, [r4, #0]
 8008f6a:	e7e3      	b.n	8008f34 <_scanf_float+0x18c>
 8008f6c:	f1ba 0f02 	cmp.w	sl, #2
 8008f70:	d055      	beq.n	800901e <_scanf_float+0x276>
 8008f72:	2d01      	cmp	r5, #1
 8008f74:	d002      	beq.n	8008f7c <_scanf_float+0x1d4>
 8008f76:	2d04      	cmp	r5, #4
 8008f78:	f47f af48 	bne.w	8008e0c <_scanf_float+0x64>
 8008f7c:	3501      	adds	r5, #1
 8008f7e:	b2ed      	uxtb	r5, r5
 8008f80:	e7d8      	b.n	8008f34 <_scanf_float+0x18c>
 8008f82:	f1ba 0f01 	cmp.w	sl, #1
 8008f86:	f47f af41 	bne.w	8008e0c <_scanf_float+0x64>
 8008f8a:	f04f 0a02 	mov.w	sl, #2
 8008f8e:	e7d1      	b.n	8008f34 <_scanf_float+0x18c>
 8008f90:	b97d      	cbnz	r5, 8008fb2 <_scanf_float+0x20a>
 8008f92:	f1b9 0f00 	cmp.w	r9, #0
 8008f96:	f47f af3c 	bne.w	8008e12 <_scanf_float+0x6a>
 8008f9a:	6822      	ldr	r2, [r4, #0]
 8008f9c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008fa0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008fa4:	f47f af39 	bne.w	8008e1a <_scanf_float+0x72>
 8008fa8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008fac:	2501      	movs	r5, #1
 8008fae:	6022      	str	r2, [r4, #0]
 8008fb0:	e7c0      	b.n	8008f34 <_scanf_float+0x18c>
 8008fb2:	2d03      	cmp	r5, #3
 8008fb4:	d0e2      	beq.n	8008f7c <_scanf_float+0x1d4>
 8008fb6:	2d05      	cmp	r5, #5
 8008fb8:	e7de      	b.n	8008f78 <_scanf_float+0x1d0>
 8008fba:	2d02      	cmp	r5, #2
 8008fbc:	f47f af26 	bne.w	8008e0c <_scanf_float+0x64>
 8008fc0:	2503      	movs	r5, #3
 8008fc2:	e7b7      	b.n	8008f34 <_scanf_float+0x18c>
 8008fc4:	2d06      	cmp	r5, #6
 8008fc6:	f47f af21 	bne.w	8008e0c <_scanf_float+0x64>
 8008fca:	2507      	movs	r5, #7
 8008fcc:	e7b2      	b.n	8008f34 <_scanf_float+0x18c>
 8008fce:	6822      	ldr	r2, [r4, #0]
 8008fd0:	0591      	lsls	r1, r2, #22
 8008fd2:	f57f af1b 	bpl.w	8008e0c <_scanf_float+0x64>
 8008fd6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008fda:	6022      	str	r2, [r4, #0]
 8008fdc:	f8cd 9004 	str.w	r9, [sp, #4]
 8008fe0:	e7a8      	b.n	8008f34 <_scanf_float+0x18c>
 8008fe2:	6822      	ldr	r2, [r4, #0]
 8008fe4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008fe8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008fec:	d006      	beq.n	8008ffc <_scanf_float+0x254>
 8008fee:	0550      	lsls	r0, r2, #21
 8008ff0:	f57f af0c 	bpl.w	8008e0c <_scanf_float+0x64>
 8008ff4:	f1b9 0f00 	cmp.w	r9, #0
 8008ff8:	f43f af0f 	beq.w	8008e1a <_scanf_float+0x72>
 8008ffc:	0591      	lsls	r1, r2, #22
 8008ffe:	bf58      	it	pl
 8009000:	9901      	ldrpl	r1, [sp, #4]
 8009002:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009006:	bf58      	it	pl
 8009008:	eba9 0101 	subpl.w	r1, r9, r1
 800900c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009010:	f04f 0900 	mov.w	r9, #0
 8009014:	bf58      	it	pl
 8009016:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800901a:	6022      	str	r2, [r4, #0]
 800901c:	e78a      	b.n	8008f34 <_scanf_float+0x18c>
 800901e:	f04f 0a03 	mov.w	sl, #3
 8009022:	e787      	b.n	8008f34 <_scanf_float+0x18c>
 8009024:	4639      	mov	r1, r7
 8009026:	4640      	mov	r0, r8
 8009028:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800902c:	4798      	blx	r3
 800902e:	2800      	cmp	r0, #0
 8009030:	f43f aedf 	beq.w	8008df2 <_scanf_float+0x4a>
 8009034:	e6ea      	b.n	8008e0c <_scanf_float+0x64>
 8009036:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800903a:	463a      	mov	r2, r7
 800903c:	4640      	mov	r0, r8
 800903e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009042:	4798      	blx	r3
 8009044:	6923      	ldr	r3, [r4, #16]
 8009046:	3b01      	subs	r3, #1
 8009048:	6123      	str	r3, [r4, #16]
 800904a:	e6ec      	b.n	8008e26 <_scanf_float+0x7e>
 800904c:	1e6b      	subs	r3, r5, #1
 800904e:	2b06      	cmp	r3, #6
 8009050:	d825      	bhi.n	800909e <_scanf_float+0x2f6>
 8009052:	2d02      	cmp	r5, #2
 8009054:	d836      	bhi.n	80090c4 <_scanf_float+0x31c>
 8009056:	455e      	cmp	r6, fp
 8009058:	f67f aee8 	bls.w	8008e2c <_scanf_float+0x84>
 800905c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009060:	463a      	mov	r2, r7
 8009062:	4640      	mov	r0, r8
 8009064:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009068:	4798      	blx	r3
 800906a:	6923      	ldr	r3, [r4, #16]
 800906c:	3b01      	subs	r3, #1
 800906e:	6123      	str	r3, [r4, #16]
 8009070:	e7f1      	b.n	8009056 <_scanf_float+0x2ae>
 8009072:	9802      	ldr	r0, [sp, #8]
 8009074:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009078:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800907c:	463a      	mov	r2, r7
 800907e:	9002      	str	r0, [sp, #8]
 8009080:	4640      	mov	r0, r8
 8009082:	4798      	blx	r3
 8009084:	6923      	ldr	r3, [r4, #16]
 8009086:	3b01      	subs	r3, #1
 8009088:	6123      	str	r3, [r4, #16]
 800908a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800908e:	fa5f fa8a 	uxtb.w	sl, sl
 8009092:	f1ba 0f02 	cmp.w	sl, #2
 8009096:	d1ec      	bne.n	8009072 <_scanf_float+0x2ca>
 8009098:	3d03      	subs	r5, #3
 800909a:	b2ed      	uxtb	r5, r5
 800909c:	1b76      	subs	r6, r6, r5
 800909e:	6823      	ldr	r3, [r4, #0]
 80090a0:	05da      	lsls	r2, r3, #23
 80090a2:	d52f      	bpl.n	8009104 <_scanf_float+0x35c>
 80090a4:	055b      	lsls	r3, r3, #21
 80090a6:	d510      	bpl.n	80090ca <_scanf_float+0x322>
 80090a8:	455e      	cmp	r6, fp
 80090aa:	f67f aebf 	bls.w	8008e2c <_scanf_float+0x84>
 80090ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090b2:	463a      	mov	r2, r7
 80090b4:	4640      	mov	r0, r8
 80090b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80090ba:	4798      	blx	r3
 80090bc:	6923      	ldr	r3, [r4, #16]
 80090be:	3b01      	subs	r3, #1
 80090c0:	6123      	str	r3, [r4, #16]
 80090c2:	e7f1      	b.n	80090a8 <_scanf_float+0x300>
 80090c4:	46aa      	mov	sl, r5
 80090c6:	9602      	str	r6, [sp, #8]
 80090c8:	e7df      	b.n	800908a <_scanf_float+0x2e2>
 80090ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80090ce:	6923      	ldr	r3, [r4, #16]
 80090d0:	2965      	cmp	r1, #101	; 0x65
 80090d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80090d6:	f106 35ff 	add.w	r5, r6, #4294967295
 80090da:	6123      	str	r3, [r4, #16]
 80090dc:	d00c      	beq.n	80090f8 <_scanf_float+0x350>
 80090de:	2945      	cmp	r1, #69	; 0x45
 80090e0:	d00a      	beq.n	80090f8 <_scanf_float+0x350>
 80090e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090e6:	463a      	mov	r2, r7
 80090e8:	4640      	mov	r0, r8
 80090ea:	4798      	blx	r3
 80090ec:	6923      	ldr	r3, [r4, #16]
 80090ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80090f2:	3b01      	subs	r3, #1
 80090f4:	1eb5      	subs	r5, r6, #2
 80090f6:	6123      	str	r3, [r4, #16]
 80090f8:	463a      	mov	r2, r7
 80090fa:	4640      	mov	r0, r8
 80090fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009100:	4798      	blx	r3
 8009102:	462e      	mov	r6, r5
 8009104:	6825      	ldr	r5, [r4, #0]
 8009106:	f015 0510 	ands.w	r5, r5, #16
 800910a:	d159      	bne.n	80091c0 <_scanf_float+0x418>
 800910c:	7035      	strb	r5, [r6, #0]
 800910e:	6823      	ldr	r3, [r4, #0]
 8009110:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009118:	d11c      	bne.n	8009154 <_scanf_float+0x3ac>
 800911a:	9b01      	ldr	r3, [sp, #4]
 800911c:	454b      	cmp	r3, r9
 800911e:	eba3 0209 	sub.w	r2, r3, r9
 8009122:	d124      	bne.n	800916e <_scanf_float+0x3c6>
 8009124:	2200      	movs	r2, #0
 8009126:	4659      	mov	r1, fp
 8009128:	4640      	mov	r0, r8
 800912a:	f000 fe99 	bl	8009e60 <_strtod_r>
 800912e:	f8d4 c000 	ldr.w	ip, [r4]
 8009132:	9b03      	ldr	r3, [sp, #12]
 8009134:	f01c 0f02 	tst.w	ip, #2
 8009138:	4606      	mov	r6, r0
 800913a:	460f      	mov	r7, r1
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	d021      	beq.n	8009184 <_scanf_float+0x3dc>
 8009140:	9903      	ldr	r1, [sp, #12]
 8009142:	1d1a      	adds	r2, r3, #4
 8009144:	600a      	str	r2, [r1, #0]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	e9c3 6700 	strd	r6, r7, [r3]
 800914c:	68e3      	ldr	r3, [r4, #12]
 800914e:	3301      	adds	r3, #1
 8009150:	60e3      	str	r3, [r4, #12]
 8009152:	e66c      	b.n	8008e2e <_scanf_float+0x86>
 8009154:	9b04      	ldr	r3, [sp, #16]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d0e4      	beq.n	8009124 <_scanf_float+0x37c>
 800915a:	9905      	ldr	r1, [sp, #20]
 800915c:	230a      	movs	r3, #10
 800915e:	462a      	mov	r2, r5
 8009160:	4640      	mov	r0, r8
 8009162:	3101      	adds	r1, #1
 8009164:	f000 ff08 	bl	8009f78 <_strtol_r>
 8009168:	9b04      	ldr	r3, [sp, #16]
 800916a:	9e05      	ldr	r6, [sp, #20]
 800916c:	1ac2      	subs	r2, r0, r3
 800916e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009172:	429e      	cmp	r6, r3
 8009174:	bf28      	it	cs
 8009176:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800917a:	4630      	mov	r0, r6
 800917c:	4911      	ldr	r1, [pc, #68]	; (80091c4 <_scanf_float+0x41c>)
 800917e:	f000 f839 	bl	80091f4 <siprintf>
 8009182:	e7cf      	b.n	8009124 <_scanf_float+0x37c>
 8009184:	f01c 0f04 	tst.w	ip, #4
 8009188:	f103 0e04 	add.w	lr, r3, #4
 800918c:	d003      	beq.n	8009196 <_scanf_float+0x3ee>
 800918e:	9903      	ldr	r1, [sp, #12]
 8009190:	f8c1 e000 	str.w	lr, [r1]
 8009194:	e7d7      	b.n	8009146 <_scanf_float+0x39e>
 8009196:	9a03      	ldr	r2, [sp, #12]
 8009198:	f8c2 e000 	str.w	lr, [r2]
 800919c:	f8d3 8000 	ldr.w	r8, [r3]
 80091a0:	4602      	mov	r2, r0
 80091a2:	460b      	mov	r3, r1
 80091a4:	f7f7 fc32 	bl	8000a0c <__aeabi_dcmpun>
 80091a8:	b128      	cbz	r0, 80091b6 <_scanf_float+0x40e>
 80091aa:	4807      	ldr	r0, [pc, #28]	; (80091c8 <_scanf_float+0x420>)
 80091ac:	f000 f81e 	bl	80091ec <nanf>
 80091b0:	f8c8 0000 	str.w	r0, [r8]
 80091b4:	e7ca      	b.n	800914c <_scanf_float+0x3a4>
 80091b6:	4630      	mov	r0, r6
 80091b8:	4639      	mov	r1, r7
 80091ba:	f7f7 fc85 	bl	8000ac8 <__aeabi_d2f>
 80091be:	e7f7      	b.n	80091b0 <_scanf_float+0x408>
 80091c0:	2500      	movs	r5, #0
 80091c2:	e634      	b.n	8008e2e <_scanf_float+0x86>
 80091c4:	0800c9f1 	.word	0x0800c9f1
 80091c8:	0800c9a7 	.word	0x0800c9a7

080091cc <_sbrk_r>:
 80091cc:	b538      	push	{r3, r4, r5, lr}
 80091ce:	2300      	movs	r3, #0
 80091d0:	4d05      	ldr	r5, [pc, #20]	; (80091e8 <_sbrk_r+0x1c>)
 80091d2:	4604      	mov	r4, r0
 80091d4:	4608      	mov	r0, r1
 80091d6:	602b      	str	r3, [r5, #0]
 80091d8:	f7f9 fa38 	bl	800264c <_sbrk>
 80091dc:	1c43      	adds	r3, r0, #1
 80091de:	d102      	bne.n	80091e6 <_sbrk_r+0x1a>
 80091e0:	682b      	ldr	r3, [r5, #0]
 80091e2:	b103      	cbz	r3, 80091e6 <_sbrk_r+0x1a>
 80091e4:	6023      	str	r3, [r4, #0]
 80091e6:	bd38      	pop	{r3, r4, r5, pc}
 80091e8:	20000a6c 	.word	0x20000a6c

080091ec <nanf>:
 80091ec:	4800      	ldr	r0, [pc, #0]	; (80091f0 <nanf+0x4>)
 80091ee:	4770      	bx	lr
 80091f0:	7fc00000 	.word	0x7fc00000

080091f4 <siprintf>:
 80091f4:	b40e      	push	{r1, r2, r3}
 80091f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80091fa:	b500      	push	{lr}
 80091fc:	b09c      	sub	sp, #112	; 0x70
 80091fe:	ab1d      	add	r3, sp, #116	; 0x74
 8009200:	9002      	str	r0, [sp, #8]
 8009202:	9006      	str	r0, [sp, #24]
 8009204:	9107      	str	r1, [sp, #28]
 8009206:	9104      	str	r1, [sp, #16]
 8009208:	4808      	ldr	r0, [pc, #32]	; (800922c <siprintf+0x38>)
 800920a:	4909      	ldr	r1, [pc, #36]	; (8009230 <siprintf+0x3c>)
 800920c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009210:	9105      	str	r1, [sp, #20]
 8009212:	6800      	ldr	r0, [r0, #0]
 8009214:	a902      	add	r1, sp, #8
 8009216:	9301      	str	r3, [sp, #4]
 8009218:	f003 f90c 	bl	800c434 <_svfiprintf_r>
 800921c:	2200      	movs	r2, #0
 800921e:	9b02      	ldr	r3, [sp, #8]
 8009220:	701a      	strb	r2, [r3, #0]
 8009222:	b01c      	add	sp, #112	; 0x70
 8009224:	f85d eb04 	ldr.w	lr, [sp], #4
 8009228:	b003      	add	sp, #12
 800922a:	4770      	bx	lr
 800922c:	20000054 	.word	0x20000054
 8009230:	ffff0208 	.word	0xffff0208

08009234 <sulp>:
 8009234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009238:	460f      	mov	r7, r1
 800923a:	4690      	mov	r8, r2
 800923c:	f002 ff22 	bl	800c084 <__ulp>
 8009240:	4604      	mov	r4, r0
 8009242:	460d      	mov	r5, r1
 8009244:	f1b8 0f00 	cmp.w	r8, #0
 8009248:	d011      	beq.n	800926e <sulp+0x3a>
 800924a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800924e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009252:	2b00      	cmp	r3, #0
 8009254:	dd0b      	ble.n	800926e <sulp+0x3a>
 8009256:	2400      	movs	r4, #0
 8009258:	051b      	lsls	r3, r3, #20
 800925a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800925e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009262:	4622      	mov	r2, r4
 8009264:	462b      	mov	r3, r5
 8009266:	f7f7 f937 	bl	80004d8 <__aeabi_dmul>
 800926a:	4604      	mov	r4, r0
 800926c:	460d      	mov	r5, r1
 800926e:	4620      	mov	r0, r4
 8009270:	4629      	mov	r1, r5
 8009272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009278 <_strtod_l>:
 8009278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800927c:	469b      	mov	fp, r3
 800927e:	2300      	movs	r3, #0
 8009280:	b0a1      	sub	sp, #132	; 0x84
 8009282:	931c      	str	r3, [sp, #112]	; 0x70
 8009284:	4ba1      	ldr	r3, [pc, #644]	; (800950c <_strtod_l+0x294>)
 8009286:	4682      	mov	sl, r0
 8009288:	681f      	ldr	r7, [r3, #0]
 800928a:	460e      	mov	r6, r1
 800928c:	4638      	mov	r0, r7
 800928e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009290:	f7f6 ff5e 	bl	8000150 <strlen>
 8009294:	f04f 0800 	mov.w	r8, #0
 8009298:	4604      	mov	r4, r0
 800929a:	f04f 0900 	mov.w	r9, #0
 800929e:	961b      	str	r6, [sp, #108]	; 0x6c
 80092a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80092a2:	781a      	ldrb	r2, [r3, #0]
 80092a4:	2a2b      	cmp	r2, #43	; 0x2b
 80092a6:	d04c      	beq.n	8009342 <_strtod_l+0xca>
 80092a8:	d83a      	bhi.n	8009320 <_strtod_l+0xa8>
 80092aa:	2a0d      	cmp	r2, #13
 80092ac:	d833      	bhi.n	8009316 <_strtod_l+0x9e>
 80092ae:	2a08      	cmp	r2, #8
 80092b0:	d833      	bhi.n	800931a <_strtod_l+0xa2>
 80092b2:	2a00      	cmp	r2, #0
 80092b4:	d03d      	beq.n	8009332 <_strtod_l+0xba>
 80092b6:	2300      	movs	r3, #0
 80092b8:	930c      	str	r3, [sp, #48]	; 0x30
 80092ba:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80092bc:	782b      	ldrb	r3, [r5, #0]
 80092be:	2b30      	cmp	r3, #48	; 0x30
 80092c0:	f040 80af 	bne.w	8009422 <_strtod_l+0x1aa>
 80092c4:	786b      	ldrb	r3, [r5, #1]
 80092c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80092ca:	2b58      	cmp	r3, #88	; 0x58
 80092cc:	d16c      	bne.n	80093a8 <_strtod_l+0x130>
 80092ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092d0:	4650      	mov	r0, sl
 80092d2:	9301      	str	r3, [sp, #4]
 80092d4:	ab1c      	add	r3, sp, #112	; 0x70
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	4a8d      	ldr	r2, [pc, #564]	; (8009510 <_strtod_l+0x298>)
 80092da:	f8cd b008 	str.w	fp, [sp, #8]
 80092de:	ab1d      	add	r3, sp, #116	; 0x74
 80092e0:	a91b      	add	r1, sp, #108	; 0x6c
 80092e2:	f001 ffaf 	bl	800b244 <__gethex>
 80092e6:	f010 0607 	ands.w	r6, r0, #7
 80092ea:	4604      	mov	r4, r0
 80092ec:	d005      	beq.n	80092fa <_strtod_l+0x82>
 80092ee:	2e06      	cmp	r6, #6
 80092f0:	d129      	bne.n	8009346 <_strtod_l+0xce>
 80092f2:	2300      	movs	r3, #0
 80092f4:	3501      	adds	r5, #1
 80092f6:	951b      	str	r5, [sp, #108]	; 0x6c
 80092f8:	930c      	str	r3, [sp, #48]	; 0x30
 80092fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	f040 8596 	bne.w	8009e2e <_strtod_l+0xbb6>
 8009302:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009304:	b1d3      	cbz	r3, 800933c <_strtod_l+0xc4>
 8009306:	4642      	mov	r2, r8
 8009308:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800930c:	4610      	mov	r0, r2
 800930e:	4619      	mov	r1, r3
 8009310:	b021      	add	sp, #132	; 0x84
 8009312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009316:	2a20      	cmp	r2, #32
 8009318:	d1cd      	bne.n	80092b6 <_strtod_l+0x3e>
 800931a:	3301      	adds	r3, #1
 800931c:	931b      	str	r3, [sp, #108]	; 0x6c
 800931e:	e7bf      	b.n	80092a0 <_strtod_l+0x28>
 8009320:	2a2d      	cmp	r2, #45	; 0x2d
 8009322:	d1c8      	bne.n	80092b6 <_strtod_l+0x3e>
 8009324:	2201      	movs	r2, #1
 8009326:	920c      	str	r2, [sp, #48]	; 0x30
 8009328:	1c5a      	adds	r2, r3, #1
 800932a:	921b      	str	r2, [sp, #108]	; 0x6c
 800932c:	785b      	ldrb	r3, [r3, #1]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d1c3      	bne.n	80092ba <_strtod_l+0x42>
 8009332:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009334:	961b      	str	r6, [sp, #108]	; 0x6c
 8009336:	2b00      	cmp	r3, #0
 8009338:	f040 8577 	bne.w	8009e2a <_strtod_l+0xbb2>
 800933c:	4642      	mov	r2, r8
 800933e:	464b      	mov	r3, r9
 8009340:	e7e4      	b.n	800930c <_strtod_l+0x94>
 8009342:	2200      	movs	r2, #0
 8009344:	e7ef      	b.n	8009326 <_strtod_l+0xae>
 8009346:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009348:	b13a      	cbz	r2, 800935a <_strtod_l+0xe2>
 800934a:	2135      	movs	r1, #53	; 0x35
 800934c:	a81e      	add	r0, sp, #120	; 0x78
 800934e:	f002 ff9d 	bl	800c28c <__copybits>
 8009352:	4650      	mov	r0, sl
 8009354:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009356:	f002 fb65 	bl	800ba24 <_Bfree>
 800935a:	3e01      	subs	r6, #1
 800935c:	2e05      	cmp	r6, #5
 800935e:	d807      	bhi.n	8009370 <_strtod_l+0xf8>
 8009360:	e8df f006 	tbb	[pc, r6]
 8009364:	1d180b0e 	.word	0x1d180b0e
 8009368:	030e      	.short	0x030e
 800936a:	f04f 0900 	mov.w	r9, #0
 800936e:	46c8      	mov	r8, r9
 8009370:	0721      	lsls	r1, r4, #28
 8009372:	d5c2      	bpl.n	80092fa <_strtod_l+0x82>
 8009374:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009378:	e7bf      	b.n	80092fa <_strtod_l+0x82>
 800937a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800937e:	e7f7      	b.n	8009370 <_strtod_l+0xf8>
 8009380:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009382:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8009386:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800938a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800938e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009392:	e7ed      	b.n	8009370 <_strtod_l+0xf8>
 8009394:	f04f 0800 	mov.w	r8, #0
 8009398:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009514 <_strtod_l+0x29c>
 800939c:	e7e8      	b.n	8009370 <_strtod_l+0xf8>
 800939e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80093a2:	f04f 38ff 	mov.w	r8, #4294967295
 80093a6:	e7e3      	b.n	8009370 <_strtod_l+0xf8>
 80093a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80093aa:	1c5a      	adds	r2, r3, #1
 80093ac:	921b      	str	r2, [sp, #108]	; 0x6c
 80093ae:	785b      	ldrb	r3, [r3, #1]
 80093b0:	2b30      	cmp	r3, #48	; 0x30
 80093b2:	d0f9      	beq.n	80093a8 <_strtod_l+0x130>
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d0a0      	beq.n	80092fa <_strtod_l+0x82>
 80093b8:	2301      	movs	r3, #1
 80093ba:	9307      	str	r3, [sp, #28]
 80093bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80093be:	220a      	movs	r2, #10
 80093c0:	9308      	str	r3, [sp, #32]
 80093c2:	2300      	movs	r3, #0
 80093c4:	469b      	mov	fp, r3
 80093c6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80093ca:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80093cc:	7805      	ldrb	r5, [r0, #0]
 80093ce:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80093d2:	b2d9      	uxtb	r1, r3
 80093d4:	2909      	cmp	r1, #9
 80093d6:	d926      	bls.n	8009426 <_strtod_l+0x1ae>
 80093d8:	4622      	mov	r2, r4
 80093da:	4639      	mov	r1, r7
 80093dc:	f003 f9b7 	bl	800c74e <strncmp>
 80093e0:	2800      	cmp	r0, #0
 80093e2:	d032      	beq.n	800944a <_strtod_l+0x1d2>
 80093e4:	2000      	movs	r0, #0
 80093e6:	462b      	mov	r3, r5
 80093e8:	465c      	mov	r4, fp
 80093ea:	4602      	mov	r2, r0
 80093ec:	9004      	str	r0, [sp, #16]
 80093ee:	2b65      	cmp	r3, #101	; 0x65
 80093f0:	d001      	beq.n	80093f6 <_strtod_l+0x17e>
 80093f2:	2b45      	cmp	r3, #69	; 0x45
 80093f4:	d113      	bne.n	800941e <_strtod_l+0x1a6>
 80093f6:	b91c      	cbnz	r4, 8009400 <_strtod_l+0x188>
 80093f8:	9b07      	ldr	r3, [sp, #28]
 80093fa:	4303      	orrs	r3, r0
 80093fc:	d099      	beq.n	8009332 <_strtod_l+0xba>
 80093fe:	2400      	movs	r4, #0
 8009400:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8009402:	1c73      	adds	r3, r6, #1
 8009404:	931b      	str	r3, [sp, #108]	; 0x6c
 8009406:	7873      	ldrb	r3, [r6, #1]
 8009408:	2b2b      	cmp	r3, #43	; 0x2b
 800940a:	d078      	beq.n	80094fe <_strtod_l+0x286>
 800940c:	2b2d      	cmp	r3, #45	; 0x2d
 800940e:	d07b      	beq.n	8009508 <_strtod_l+0x290>
 8009410:	2700      	movs	r7, #0
 8009412:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009416:	2909      	cmp	r1, #9
 8009418:	f240 8082 	bls.w	8009520 <_strtod_l+0x2a8>
 800941c:	961b      	str	r6, [sp, #108]	; 0x6c
 800941e:	2500      	movs	r5, #0
 8009420:	e09e      	b.n	8009560 <_strtod_l+0x2e8>
 8009422:	2300      	movs	r3, #0
 8009424:	e7c9      	b.n	80093ba <_strtod_l+0x142>
 8009426:	f1bb 0f08 	cmp.w	fp, #8
 800942a:	bfd5      	itete	le
 800942c:	9906      	ldrle	r1, [sp, #24]
 800942e:	9905      	ldrgt	r1, [sp, #20]
 8009430:	fb02 3301 	mlale	r3, r2, r1, r3
 8009434:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009438:	f100 0001 	add.w	r0, r0, #1
 800943c:	bfd4      	ite	le
 800943e:	9306      	strle	r3, [sp, #24]
 8009440:	9305      	strgt	r3, [sp, #20]
 8009442:	f10b 0b01 	add.w	fp, fp, #1
 8009446:	901b      	str	r0, [sp, #108]	; 0x6c
 8009448:	e7bf      	b.n	80093ca <_strtod_l+0x152>
 800944a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800944c:	191a      	adds	r2, r3, r4
 800944e:	921b      	str	r2, [sp, #108]	; 0x6c
 8009450:	5d1b      	ldrb	r3, [r3, r4]
 8009452:	f1bb 0f00 	cmp.w	fp, #0
 8009456:	d036      	beq.n	80094c6 <_strtod_l+0x24e>
 8009458:	465c      	mov	r4, fp
 800945a:	9004      	str	r0, [sp, #16]
 800945c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009460:	2a09      	cmp	r2, #9
 8009462:	d912      	bls.n	800948a <_strtod_l+0x212>
 8009464:	2201      	movs	r2, #1
 8009466:	e7c2      	b.n	80093ee <_strtod_l+0x176>
 8009468:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800946a:	3001      	adds	r0, #1
 800946c:	1c5a      	adds	r2, r3, #1
 800946e:	921b      	str	r2, [sp, #108]	; 0x6c
 8009470:	785b      	ldrb	r3, [r3, #1]
 8009472:	2b30      	cmp	r3, #48	; 0x30
 8009474:	d0f8      	beq.n	8009468 <_strtod_l+0x1f0>
 8009476:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800947a:	2a08      	cmp	r2, #8
 800947c:	f200 84dc 	bhi.w	8009e38 <_strtod_l+0xbc0>
 8009480:	9004      	str	r0, [sp, #16]
 8009482:	2000      	movs	r0, #0
 8009484:	4604      	mov	r4, r0
 8009486:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009488:	9208      	str	r2, [sp, #32]
 800948a:	3b30      	subs	r3, #48	; 0x30
 800948c:	f100 0201 	add.w	r2, r0, #1
 8009490:	d013      	beq.n	80094ba <_strtod_l+0x242>
 8009492:	9904      	ldr	r1, [sp, #16]
 8009494:	1905      	adds	r5, r0, r4
 8009496:	4411      	add	r1, r2
 8009498:	9104      	str	r1, [sp, #16]
 800949a:	4622      	mov	r2, r4
 800949c:	210a      	movs	r1, #10
 800949e:	42aa      	cmp	r2, r5
 80094a0:	d113      	bne.n	80094ca <_strtod_l+0x252>
 80094a2:	1822      	adds	r2, r4, r0
 80094a4:	2a08      	cmp	r2, #8
 80094a6:	f104 0401 	add.w	r4, r4, #1
 80094aa:	4404      	add	r4, r0
 80094ac:	dc1b      	bgt.n	80094e6 <_strtod_l+0x26e>
 80094ae:	220a      	movs	r2, #10
 80094b0:	9906      	ldr	r1, [sp, #24]
 80094b2:	fb02 3301 	mla	r3, r2, r1, r3
 80094b6:	9306      	str	r3, [sp, #24]
 80094b8:	2200      	movs	r2, #0
 80094ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094bc:	4610      	mov	r0, r2
 80094be:	1c59      	adds	r1, r3, #1
 80094c0:	911b      	str	r1, [sp, #108]	; 0x6c
 80094c2:	785b      	ldrb	r3, [r3, #1]
 80094c4:	e7ca      	b.n	800945c <_strtod_l+0x1e4>
 80094c6:	4658      	mov	r0, fp
 80094c8:	e7d3      	b.n	8009472 <_strtod_l+0x1fa>
 80094ca:	2a08      	cmp	r2, #8
 80094cc:	dc04      	bgt.n	80094d8 <_strtod_l+0x260>
 80094ce:	9f06      	ldr	r7, [sp, #24]
 80094d0:	434f      	muls	r7, r1
 80094d2:	9706      	str	r7, [sp, #24]
 80094d4:	3201      	adds	r2, #1
 80094d6:	e7e2      	b.n	800949e <_strtod_l+0x226>
 80094d8:	1c57      	adds	r7, r2, #1
 80094da:	2f10      	cmp	r7, #16
 80094dc:	bfde      	ittt	le
 80094de:	9f05      	ldrle	r7, [sp, #20]
 80094e0:	434f      	mulle	r7, r1
 80094e2:	9705      	strle	r7, [sp, #20]
 80094e4:	e7f6      	b.n	80094d4 <_strtod_l+0x25c>
 80094e6:	2c10      	cmp	r4, #16
 80094e8:	bfdf      	itttt	le
 80094ea:	220a      	movle	r2, #10
 80094ec:	9905      	ldrle	r1, [sp, #20]
 80094ee:	fb02 3301 	mlale	r3, r2, r1, r3
 80094f2:	9305      	strle	r3, [sp, #20]
 80094f4:	e7e0      	b.n	80094b8 <_strtod_l+0x240>
 80094f6:	2300      	movs	r3, #0
 80094f8:	2201      	movs	r2, #1
 80094fa:	9304      	str	r3, [sp, #16]
 80094fc:	e77c      	b.n	80093f8 <_strtod_l+0x180>
 80094fe:	2700      	movs	r7, #0
 8009500:	1cb3      	adds	r3, r6, #2
 8009502:	931b      	str	r3, [sp, #108]	; 0x6c
 8009504:	78b3      	ldrb	r3, [r6, #2]
 8009506:	e784      	b.n	8009412 <_strtod_l+0x19a>
 8009508:	2701      	movs	r7, #1
 800950a:	e7f9      	b.n	8009500 <_strtod_l+0x288>
 800950c:	0800ccac 	.word	0x0800ccac
 8009510:	0800c9f8 	.word	0x0800c9f8
 8009514:	7ff00000 	.word	0x7ff00000
 8009518:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800951a:	1c59      	adds	r1, r3, #1
 800951c:	911b      	str	r1, [sp, #108]	; 0x6c
 800951e:	785b      	ldrb	r3, [r3, #1]
 8009520:	2b30      	cmp	r3, #48	; 0x30
 8009522:	d0f9      	beq.n	8009518 <_strtod_l+0x2a0>
 8009524:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8009528:	2908      	cmp	r1, #8
 800952a:	f63f af78 	bhi.w	800941e <_strtod_l+0x1a6>
 800952e:	f04f 0e0a 	mov.w	lr, #10
 8009532:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8009536:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009538:	9309      	str	r3, [sp, #36]	; 0x24
 800953a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800953c:	1c59      	adds	r1, r3, #1
 800953e:	911b      	str	r1, [sp, #108]	; 0x6c
 8009540:	785b      	ldrb	r3, [r3, #1]
 8009542:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8009546:	2d09      	cmp	r5, #9
 8009548:	d935      	bls.n	80095b6 <_strtod_l+0x33e>
 800954a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800954c:	1b49      	subs	r1, r1, r5
 800954e:	2908      	cmp	r1, #8
 8009550:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009554:	dc02      	bgt.n	800955c <_strtod_l+0x2e4>
 8009556:	4565      	cmp	r5, ip
 8009558:	bfa8      	it	ge
 800955a:	4665      	movge	r5, ip
 800955c:	b107      	cbz	r7, 8009560 <_strtod_l+0x2e8>
 800955e:	426d      	negs	r5, r5
 8009560:	2c00      	cmp	r4, #0
 8009562:	d14c      	bne.n	80095fe <_strtod_l+0x386>
 8009564:	9907      	ldr	r1, [sp, #28]
 8009566:	4301      	orrs	r1, r0
 8009568:	f47f aec7 	bne.w	80092fa <_strtod_l+0x82>
 800956c:	2a00      	cmp	r2, #0
 800956e:	f47f aee0 	bne.w	8009332 <_strtod_l+0xba>
 8009572:	2b69      	cmp	r3, #105	; 0x69
 8009574:	d026      	beq.n	80095c4 <_strtod_l+0x34c>
 8009576:	dc23      	bgt.n	80095c0 <_strtod_l+0x348>
 8009578:	2b49      	cmp	r3, #73	; 0x49
 800957a:	d023      	beq.n	80095c4 <_strtod_l+0x34c>
 800957c:	2b4e      	cmp	r3, #78	; 0x4e
 800957e:	f47f aed8 	bne.w	8009332 <_strtod_l+0xba>
 8009582:	499c      	ldr	r1, [pc, #624]	; (80097f4 <_strtod_l+0x57c>)
 8009584:	a81b      	add	r0, sp, #108	; 0x6c
 8009586:	f002 f8ab 	bl	800b6e0 <__match>
 800958a:	2800      	cmp	r0, #0
 800958c:	f43f aed1 	beq.w	8009332 <_strtod_l+0xba>
 8009590:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	2b28      	cmp	r3, #40	; 0x28
 8009596:	d12c      	bne.n	80095f2 <_strtod_l+0x37a>
 8009598:	4997      	ldr	r1, [pc, #604]	; (80097f8 <_strtod_l+0x580>)
 800959a:	aa1e      	add	r2, sp, #120	; 0x78
 800959c:	a81b      	add	r0, sp, #108	; 0x6c
 800959e:	f002 f8b3 	bl	800b708 <__hexnan>
 80095a2:	2805      	cmp	r0, #5
 80095a4:	d125      	bne.n	80095f2 <_strtod_l+0x37a>
 80095a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80095a8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80095ac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80095b0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80095b4:	e6a1      	b.n	80092fa <_strtod_l+0x82>
 80095b6:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80095ba:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80095be:	e7bc      	b.n	800953a <_strtod_l+0x2c2>
 80095c0:	2b6e      	cmp	r3, #110	; 0x6e
 80095c2:	e7dc      	b.n	800957e <_strtod_l+0x306>
 80095c4:	498d      	ldr	r1, [pc, #564]	; (80097fc <_strtod_l+0x584>)
 80095c6:	a81b      	add	r0, sp, #108	; 0x6c
 80095c8:	f002 f88a 	bl	800b6e0 <__match>
 80095cc:	2800      	cmp	r0, #0
 80095ce:	f43f aeb0 	beq.w	8009332 <_strtod_l+0xba>
 80095d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095d4:	498a      	ldr	r1, [pc, #552]	; (8009800 <_strtod_l+0x588>)
 80095d6:	3b01      	subs	r3, #1
 80095d8:	a81b      	add	r0, sp, #108	; 0x6c
 80095da:	931b      	str	r3, [sp, #108]	; 0x6c
 80095dc:	f002 f880 	bl	800b6e0 <__match>
 80095e0:	b910      	cbnz	r0, 80095e8 <_strtod_l+0x370>
 80095e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095e4:	3301      	adds	r3, #1
 80095e6:	931b      	str	r3, [sp, #108]	; 0x6c
 80095e8:	f04f 0800 	mov.w	r8, #0
 80095ec:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8009810 <_strtod_l+0x598>
 80095f0:	e683      	b.n	80092fa <_strtod_l+0x82>
 80095f2:	4884      	ldr	r0, [pc, #528]	; (8009804 <_strtod_l+0x58c>)
 80095f4:	f003 f81e 	bl	800c634 <nan>
 80095f8:	4680      	mov	r8, r0
 80095fa:	4689      	mov	r9, r1
 80095fc:	e67d      	b.n	80092fa <_strtod_l+0x82>
 80095fe:	9b04      	ldr	r3, [sp, #16]
 8009600:	f1bb 0f00 	cmp.w	fp, #0
 8009604:	bf08      	it	eq
 8009606:	46a3      	moveq	fp, r4
 8009608:	1aeb      	subs	r3, r5, r3
 800960a:	2c10      	cmp	r4, #16
 800960c:	9806      	ldr	r0, [sp, #24]
 800960e:	4626      	mov	r6, r4
 8009610:	9307      	str	r3, [sp, #28]
 8009612:	bfa8      	it	ge
 8009614:	2610      	movge	r6, #16
 8009616:	f7f6 fee5 	bl	80003e4 <__aeabi_ui2d>
 800961a:	2c09      	cmp	r4, #9
 800961c:	4680      	mov	r8, r0
 800961e:	4689      	mov	r9, r1
 8009620:	dd13      	ble.n	800964a <_strtod_l+0x3d2>
 8009622:	4b79      	ldr	r3, [pc, #484]	; (8009808 <_strtod_l+0x590>)
 8009624:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009628:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800962c:	f7f6 ff54 	bl	80004d8 <__aeabi_dmul>
 8009630:	4680      	mov	r8, r0
 8009632:	9805      	ldr	r0, [sp, #20]
 8009634:	4689      	mov	r9, r1
 8009636:	f7f6 fed5 	bl	80003e4 <__aeabi_ui2d>
 800963a:	4602      	mov	r2, r0
 800963c:	460b      	mov	r3, r1
 800963e:	4640      	mov	r0, r8
 8009640:	4649      	mov	r1, r9
 8009642:	f7f6 fd93 	bl	800016c <__adddf3>
 8009646:	4680      	mov	r8, r0
 8009648:	4689      	mov	r9, r1
 800964a:	2c0f      	cmp	r4, #15
 800964c:	dc36      	bgt.n	80096bc <_strtod_l+0x444>
 800964e:	9b07      	ldr	r3, [sp, #28]
 8009650:	2b00      	cmp	r3, #0
 8009652:	f43f ae52 	beq.w	80092fa <_strtod_l+0x82>
 8009656:	dd22      	ble.n	800969e <_strtod_l+0x426>
 8009658:	2b16      	cmp	r3, #22
 800965a:	dc09      	bgt.n	8009670 <_strtod_l+0x3f8>
 800965c:	4c6a      	ldr	r4, [pc, #424]	; (8009808 <_strtod_l+0x590>)
 800965e:	4642      	mov	r2, r8
 8009660:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8009664:	464b      	mov	r3, r9
 8009666:	e9d4 0100 	ldrd	r0, r1, [r4]
 800966a:	f7f6 ff35 	bl	80004d8 <__aeabi_dmul>
 800966e:	e7c3      	b.n	80095f8 <_strtod_l+0x380>
 8009670:	9a07      	ldr	r2, [sp, #28]
 8009672:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009676:	4293      	cmp	r3, r2
 8009678:	db20      	blt.n	80096bc <_strtod_l+0x444>
 800967a:	4d63      	ldr	r5, [pc, #396]	; (8009808 <_strtod_l+0x590>)
 800967c:	f1c4 040f 	rsb	r4, r4, #15
 8009680:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009684:	4642      	mov	r2, r8
 8009686:	e9d1 0100 	ldrd	r0, r1, [r1]
 800968a:	464b      	mov	r3, r9
 800968c:	f7f6 ff24 	bl	80004d8 <__aeabi_dmul>
 8009690:	9b07      	ldr	r3, [sp, #28]
 8009692:	1b1c      	subs	r4, r3, r4
 8009694:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009698:	e9d5 2300 	ldrd	r2, r3, [r5]
 800969c:	e7e5      	b.n	800966a <_strtod_l+0x3f2>
 800969e:	9b07      	ldr	r3, [sp, #28]
 80096a0:	3316      	adds	r3, #22
 80096a2:	db0b      	blt.n	80096bc <_strtod_l+0x444>
 80096a4:	9b04      	ldr	r3, [sp, #16]
 80096a6:	4a58      	ldr	r2, [pc, #352]	; (8009808 <_strtod_l+0x590>)
 80096a8:	1b5d      	subs	r5, r3, r5
 80096aa:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80096ae:	4640      	mov	r0, r8
 80096b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80096b4:	4649      	mov	r1, r9
 80096b6:	f7f7 f839 	bl	800072c <__aeabi_ddiv>
 80096ba:	e79d      	b.n	80095f8 <_strtod_l+0x380>
 80096bc:	9b07      	ldr	r3, [sp, #28]
 80096be:	1ba6      	subs	r6, r4, r6
 80096c0:	441e      	add	r6, r3
 80096c2:	2e00      	cmp	r6, #0
 80096c4:	dd71      	ble.n	80097aa <_strtod_l+0x532>
 80096c6:	f016 030f 	ands.w	r3, r6, #15
 80096ca:	d00a      	beq.n	80096e2 <_strtod_l+0x46a>
 80096cc:	494e      	ldr	r1, [pc, #312]	; (8009808 <_strtod_l+0x590>)
 80096ce:	4642      	mov	r2, r8
 80096d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80096d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096d8:	464b      	mov	r3, r9
 80096da:	f7f6 fefd 	bl	80004d8 <__aeabi_dmul>
 80096de:	4680      	mov	r8, r0
 80096e0:	4689      	mov	r9, r1
 80096e2:	f036 060f 	bics.w	r6, r6, #15
 80096e6:	d050      	beq.n	800978a <_strtod_l+0x512>
 80096e8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80096ec:	dd27      	ble.n	800973e <_strtod_l+0x4c6>
 80096ee:	f04f 0b00 	mov.w	fp, #0
 80096f2:	f8cd b010 	str.w	fp, [sp, #16]
 80096f6:	f8cd b020 	str.w	fp, [sp, #32]
 80096fa:	f8cd b018 	str.w	fp, [sp, #24]
 80096fe:	2322      	movs	r3, #34	; 0x22
 8009700:	f04f 0800 	mov.w	r8, #0
 8009704:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009810 <_strtod_l+0x598>
 8009708:	f8ca 3000 	str.w	r3, [sl]
 800970c:	9b08      	ldr	r3, [sp, #32]
 800970e:	2b00      	cmp	r3, #0
 8009710:	f43f adf3 	beq.w	80092fa <_strtod_l+0x82>
 8009714:	4650      	mov	r0, sl
 8009716:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009718:	f002 f984 	bl	800ba24 <_Bfree>
 800971c:	4650      	mov	r0, sl
 800971e:	9906      	ldr	r1, [sp, #24]
 8009720:	f002 f980 	bl	800ba24 <_Bfree>
 8009724:	4650      	mov	r0, sl
 8009726:	9904      	ldr	r1, [sp, #16]
 8009728:	f002 f97c 	bl	800ba24 <_Bfree>
 800972c:	4650      	mov	r0, sl
 800972e:	9908      	ldr	r1, [sp, #32]
 8009730:	f002 f978 	bl	800ba24 <_Bfree>
 8009734:	4659      	mov	r1, fp
 8009736:	4650      	mov	r0, sl
 8009738:	f002 f974 	bl	800ba24 <_Bfree>
 800973c:	e5dd      	b.n	80092fa <_strtod_l+0x82>
 800973e:	2300      	movs	r3, #0
 8009740:	4640      	mov	r0, r8
 8009742:	4649      	mov	r1, r9
 8009744:	461f      	mov	r7, r3
 8009746:	1136      	asrs	r6, r6, #4
 8009748:	2e01      	cmp	r6, #1
 800974a:	dc21      	bgt.n	8009790 <_strtod_l+0x518>
 800974c:	b10b      	cbz	r3, 8009752 <_strtod_l+0x4da>
 800974e:	4680      	mov	r8, r0
 8009750:	4689      	mov	r9, r1
 8009752:	4b2e      	ldr	r3, [pc, #184]	; (800980c <_strtod_l+0x594>)
 8009754:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009758:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800975c:	4642      	mov	r2, r8
 800975e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009762:	464b      	mov	r3, r9
 8009764:	f7f6 feb8 	bl	80004d8 <__aeabi_dmul>
 8009768:	4b29      	ldr	r3, [pc, #164]	; (8009810 <_strtod_l+0x598>)
 800976a:	460a      	mov	r2, r1
 800976c:	400b      	ands	r3, r1
 800976e:	4929      	ldr	r1, [pc, #164]	; (8009814 <_strtod_l+0x59c>)
 8009770:	4680      	mov	r8, r0
 8009772:	428b      	cmp	r3, r1
 8009774:	d8bb      	bhi.n	80096ee <_strtod_l+0x476>
 8009776:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800977a:	428b      	cmp	r3, r1
 800977c:	bf86      	itte	hi
 800977e:	f04f 38ff 	movhi.w	r8, #4294967295
 8009782:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009818 <_strtod_l+0x5a0>
 8009786:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800978a:	2300      	movs	r3, #0
 800978c:	9305      	str	r3, [sp, #20]
 800978e:	e07e      	b.n	800988e <_strtod_l+0x616>
 8009790:	07f2      	lsls	r2, r6, #31
 8009792:	d507      	bpl.n	80097a4 <_strtod_l+0x52c>
 8009794:	4b1d      	ldr	r3, [pc, #116]	; (800980c <_strtod_l+0x594>)
 8009796:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800979a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979e:	f7f6 fe9b 	bl	80004d8 <__aeabi_dmul>
 80097a2:	2301      	movs	r3, #1
 80097a4:	3701      	adds	r7, #1
 80097a6:	1076      	asrs	r6, r6, #1
 80097a8:	e7ce      	b.n	8009748 <_strtod_l+0x4d0>
 80097aa:	d0ee      	beq.n	800978a <_strtod_l+0x512>
 80097ac:	4276      	negs	r6, r6
 80097ae:	f016 020f 	ands.w	r2, r6, #15
 80097b2:	d00a      	beq.n	80097ca <_strtod_l+0x552>
 80097b4:	4b14      	ldr	r3, [pc, #80]	; (8009808 <_strtod_l+0x590>)
 80097b6:	4640      	mov	r0, r8
 80097b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097bc:	4649      	mov	r1, r9
 80097be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c2:	f7f6 ffb3 	bl	800072c <__aeabi_ddiv>
 80097c6:	4680      	mov	r8, r0
 80097c8:	4689      	mov	r9, r1
 80097ca:	1136      	asrs	r6, r6, #4
 80097cc:	d0dd      	beq.n	800978a <_strtod_l+0x512>
 80097ce:	2e1f      	cmp	r6, #31
 80097d0:	dd24      	ble.n	800981c <_strtod_l+0x5a4>
 80097d2:	f04f 0b00 	mov.w	fp, #0
 80097d6:	f8cd b010 	str.w	fp, [sp, #16]
 80097da:	f8cd b020 	str.w	fp, [sp, #32]
 80097de:	f8cd b018 	str.w	fp, [sp, #24]
 80097e2:	2322      	movs	r3, #34	; 0x22
 80097e4:	f04f 0800 	mov.w	r8, #0
 80097e8:	f04f 0900 	mov.w	r9, #0
 80097ec:	f8ca 3000 	str.w	r3, [sl]
 80097f0:	e78c      	b.n	800970c <_strtod_l+0x494>
 80097f2:	bf00      	nop
 80097f4:	0800c9ca 	.word	0x0800c9ca
 80097f8:	0800ca0c 	.word	0x0800ca0c
 80097fc:	0800c9c2 	.word	0x0800c9c2
 8009800:	0800cb4c 	.word	0x0800cb4c
 8009804:	0800c9a7 	.word	0x0800c9a7
 8009808:	0800cd48 	.word	0x0800cd48
 800980c:	0800cd20 	.word	0x0800cd20
 8009810:	7ff00000 	.word	0x7ff00000
 8009814:	7ca00000 	.word	0x7ca00000
 8009818:	7fefffff 	.word	0x7fefffff
 800981c:	f016 0310 	ands.w	r3, r6, #16
 8009820:	bf18      	it	ne
 8009822:	236a      	movne	r3, #106	; 0x6a
 8009824:	4640      	mov	r0, r8
 8009826:	9305      	str	r3, [sp, #20]
 8009828:	4649      	mov	r1, r9
 800982a:	2300      	movs	r3, #0
 800982c:	4fb2      	ldr	r7, [pc, #712]	; (8009af8 <_strtod_l+0x880>)
 800982e:	07f2      	lsls	r2, r6, #31
 8009830:	d504      	bpl.n	800983c <_strtod_l+0x5c4>
 8009832:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009836:	f7f6 fe4f 	bl	80004d8 <__aeabi_dmul>
 800983a:	2301      	movs	r3, #1
 800983c:	1076      	asrs	r6, r6, #1
 800983e:	f107 0708 	add.w	r7, r7, #8
 8009842:	d1f4      	bne.n	800982e <_strtod_l+0x5b6>
 8009844:	b10b      	cbz	r3, 800984a <_strtod_l+0x5d2>
 8009846:	4680      	mov	r8, r0
 8009848:	4689      	mov	r9, r1
 800984a:	9b05      	ldr	r3, [sp, #20]
 800984c:	b1bb      	cbz	r3, 800987e <_strtod_l+0x606>
 800984e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8009852:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009856:	2b00      	cmp	r3, #0
 8009858:	4649      	mov	r1, r9
 800985a:	dd10      	ble.n	800987e <_strtod_l+0x606>
 800985c:	2b1f      	cmp	r3, #31
 800985e:	f340 812b 	ble.w	8009ab8 <_strtod_l+0x840>
 8009862:	2b34      	cmp	r3, #52	; 0x34
 8009864:	bfd8      	it	le
 8009866:	f04f 32ff 	movle.w	r2, #4294967295
 800986a:	f04f 0800 	mov.w	r8, #0
 800986e:	bfcf      	iteee	gt
 8009870:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009874:	3b20      	suble	r3, #32
 8009876:	fa02 f303 	lslle.w	r3, r2, r3
 800987a:	ea03 0901 	andle.w	r9, r3, r1
 800987e:	2200      	movs	r2, #0
 8009880:	2300      	movs	r3, #0
 8009882:	4640      	mov	r0, r8
 8009884:	4649      	mov	r1, r9
 8009886:	f7f7 f88f 	bl	80009a8 <__aeabi_dcmpeq>
 800988a:	2800      	cmp	r0, #0
 800988c:	d1a1      	bne.n	80097d2 <_strtod_l+0x55a>
 800988e:	9b06      	ldr	r3, [sp, #24]
 8009890:	465a      	mov	r2, fp
 8009892:	9300      	str	r3, [sp, #0]
 8009894:	4650      	mov	r0, sl
 8009896:	4623      	mov	r3, r4
 8009898:	9908      	ldr	r1, [sp, #32]
 800989a:	f002 f92f 	bl	800bafc <__s2b>
 800989e:	9008      	str	r0, [sp, #32]
 80098a0:	2800      	cmp	r0, #0
 80098a2:	f43f af24 	beq.w	80096ee <_strtod_l+0x476>
 80098a6:	9b04      	ldr	r3, [sp, #16]
 80098a8:	f04f 0b00 	mov.w	fp, #0
 80098ac:	1b5d      	subs	r5, r3, r5
 80098ae:	9b07      	ldr	r3, [sp, #28]
 80098b0:	f8cd b010 	str.w	fp, [sp, #16]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	bfb4      	ite	lt
 80098b8:	462b      	movlt	r3, r5
 80098ba:	2300      	movge	r3, #0
 80098bc:	930e      	str	r3, [sp, #56]	; 0x38
 80098be:	9b07      	ldr	r3, [sp, #28]
 80098c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80098c4:	9316      	str	r3, [sp, #88]	; 0x58
 80098c6:	9b08      	ldr	r3, [sp, #32]
 80098c8:	4650      	mov	r0, sl
 80098ca:	6859      	ldr	r1, [r3, #4]
 80098cc:	f002 f86a 	bl	800b9a4 <_Balloc>
 80098d0:	9006      	str	r0, [sp, #24]
 80098d2:	2800      	cmp	r0, #0
 80098d4:	f43f af13 	beq.w	80096fe <_strtod_l+0x486>
 80098d8:	9b08      	ldr	r3, [sp, #32]
 80098da:	300c      	adds	r0, #12
 80098dc:	691a      	ldr	r2, [r3, #16]
 80098de:	f103 010c 	add.w	r1, r3, #12
 80098e2:	3202      	adds	r2, #2
 80098e4:	0092      	lsls	r2, r2, #2
 80098e6:	f7fe fbeb 	bl	80080c0 <memcpy>
 80098ea:	ab1e      	add	r3, sp, #120	; 0x78
 80098ec:	9301      	str	r3, [sp, #4]
 80098ee:	ab1d      	add	r3, sp, #116	; 0x74
 80098f0:	9300      	str	r3, [sp, #0]
 80098f2:	4642      	mov	r2, r8
 80098f4:	464b      	mov	r3, r9
 80098f6:	4650      	mov	r0, sl
 80098f8:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80098fc:	f002 fc3c 	bl	800c178 <__d2b>
 8009900:	901c      	str	r0, [sp, #112]	; 0x70
 8009902:	2800      	cmp	r0, #0
 8009904:	f43f aefb 	beq.w	80096fe <_strtod_l+0x486>
 8009908:	2101      	movs	r1, #1
 800990a:	4650      	mov	r0, sl
 800990c:	f002 f98e 	bl	800bc2c <__i2b>
 8009910:	4603      	mov	r3, r0
 8009912:	9004      	str	r0, [sp, #16]
 8009914:	2800      	cmp	r0, #0
 8009916:	f43f aef2 	beq.w	80096fe <_strtod_l+0x486>
 800991a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800991c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800991e:	2d00      	cmp	r5, #0
 8009920:	bfab      	itete	ge
 8009922:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009924:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009926:	18ee      	addge	r6, r5, r3
 8009928:	1b5c      	sublt	r4, r3, r5
 800992a:	9b05      	ldr	r3, [sp, #20]
 800992c:	bfa8      	it	ge
 800992e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8009930:	eba5 0503 	sub.w	r5, r5, r3
 8009934:	4415      	add	r5, r2
 8009936:	4b71      	ldr	r3, [pc, #452]	; (8009afc <_strtod_l+0x884>)
 8009938:	f105 35ff 	add.w	r5, r5, #4294967295
 800993c:	bfb8      	it	lt
 800993e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8009940:	429d      	cmp	r5, r3
 8009942:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009946:	f280 80c9 	bge.w	8009adc <_strtod_l+0x864>
 800994a:	1b5b      	subs	r3, r3, r5
 800994c:	2b1f      	cmp	r3, #31
 800994e:	f04f 0701 	mov.w	r7, #1
 8009952:	eba2 0203 	sub.w	r2, r2, r3
 8009956:	f300 80b6 	bgt.w	8009ac6 <_strtod_l+0x84e>
 800995a:	2500      	movs	r5, #0
 800995c:	fa07 f303 	lsl.w	r3, r7, r3
 8009960:	930f      	str	r3, [sp, #60]	; 0x3c
 8009962:	18b7      	adds	r7, r6, r2
 8009964:	9b05      	ldr	r3, [sp, #20]
 8009966:	42be      	cmp	r6, r7
 8009968:	4414      	add	r4, r2
 800996a:	441c      	add	r4, r3
 800996c:	4633      	mov	r3, r6
 800996e:	bfa8      	it	ge
 8009970:	463b      	movge	r3, r7
 8009972:	42a3      	cmp	r3, r4
 8009974:	bfa8      	it	ge
 8009976:	4623      	movge	r3, r4
 8009978:	2b00      	cmp	r3, #0
 800997a:	bfc2      	ittt	gt
 800997c:	1aff      	subgt	r7, r7, r3
 800997e:	1ae4      	subgt	r4, r4, r3
 8009980:	1af6      	subgt	r6, r6, r3
 8009982:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009984:	2b00      	cmp	r3, #0
 8009986:	dd17      	ble.n	80099b8 <_strtod_l+0x740>
 8009988:	461a      	mov	r2, r3
 800998a:	4650      	mov	r0, sl
 800998c:	9904      	ldr	r1, [sp, #16]
 800998e:	f002 fa07 	bl	800bda0 <__pow5mult>
 8009992:	9004      	str	r0, [sp, #16]
 8009994:	2800      	cmp	r0, #0
 8009996:	f43f aeb2 	beq.w	80096fe <_strtod_l+0x486>
 800999a:	4601      	mov	r1, r0
 800999c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800999e:	4650      	mov	r0, sl
 80099a0:	f002 f95a 	bl	800bc58 <__multiply>
 80099a4:	9009      	str	r0, [sp, #36]	; 0x24
 80099a6:	2800      	cmp	r0, #0
 80099a8:	f43f aea9 	beq.w	80096fe <_strtod_l+0x486>
 80099ac:	4650      	mov	r0, sl
 80099ae:	991c      	ldr	r1, [sp, #112]	; 0x70
 80099b0:	f002 f838 	bl	800ba24 <_Bfree>
 80099b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099b6:	931c      	str	r3, [sp, #112]	; 0x70
 80099b8:	2f00      	cmp	r7, #0
 80099ba:	f300 8093 	bgt.w	8009ae4 <_strtod_l+0x86c>
 80099be:	9b07      	ldr	r3, [sp, #28]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	dd08      	ble.n	80099d6 <_strtod_l+0x75e>
 80099c4:	4650      	mov	r0, sl
 80099c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80099c8:	9906      	ldr	r1, [sp, #24]
 80099ca:	f002 f9e9 	bl	800bda0 <__pow5mult>
 80099ce:	9006      	str	r0, [sp, #24]
 80099d0:	2800      	cmp	r0, #0
 80099d2:	f43f ae94 	beq.w	80096fe <_strtod_l+0x486>
 80099d6:	2c00      	cmp	r4, #0
 80099d8:	dd08      	ble.n	80099ec <_strtod_l+0x774>
 80099da:	4622      	mov	r2, r4
 80099dc:	4650      	mov	r0, sl
 80099de:	9906      	ldr	r1, [sp, #24]
 80099e0:	f002 fa38 	bl	800be54 <__lshift>
 80099e4:	9006      	str	r0, [sp, #24]
 80099e6:	2800      	cmp	r0, #0
 80099e8:	f43f ae89 	beq.w	80096fe <_strtod_l+0x486>
 80099ec:	2e00      	cmp	r6, #0
 80099ee:	dd08      	ble.n	8009a02 <_strtod_l+0x78a>
 80099f0:	4632      	mov	r2, r6
 80099f2:	4650      	mov	r0, sl
 80099f4:	9904      	ldr	r1, [sp, #16]
 80099f6:	f002 fa2d 	bl	800be54 <__lshift>
 80099fa:	9004      	str	r0, [sp, #16]
 80099fc:	2800      	cmp	r0, #0
 80099fe:	f43f ae7e 	beq.w	80096fe <_strtod_l+0x486>
 8009a02:	4650      	mov	r0, sl
 8009a04:	9a06      	ldr	r2, [sp, #24]
 8009a06:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009a08:	f002 faac 	bl	800bf64 <__mdiff>
 8009a0c:	4683      	mov	fp, r0
 8009a0e:	2800      	cmp	r0, #0
 8009a10:	f43f ae75 	beq.w	80096fe <_strtod_l+0x486>
 8009a14:	2400      	movs	r4, #0
 8009a16:	68c3      	ldr	r3, [r0, #12]
 8009a18:	9904      	ldr	r1, [sp, #16]
 8009a1a:	60c4      	str	r4, [r0, #12]
 8009a1c:	930d      	str	r3, [sp, #52]	; 0x34
 8009a1e:	f002 fa85 	bl	800bf2c <__mcmp>
 8009a22:	42a0      	cmp	r0, r4
 8009a24:	da70      	bge.n	8009b08 <_strtod_l+0x890>
 8009a26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a28:	ea53 0308 	orrs.w	r3, r3, r8
 8009a2c:	f040 8096 	bne.w	8009b5c <_strtod_l+0x8e4>
 8009a30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f040 8091 	bne.w	8009b5c <_strtod_l+0x8e4>
 8009a3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009a3e:	0d1b      	lsrs	r3, r3, #20
 8009a40:	051b      	lsls	r3, r3, #20
 8009a42:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009a46:	f240 8089 	bls.w	8009b5c <_strtod_l+0x8e4>
 8009a4a:	f8db 3014 	ldr.w	r3, [fp, #20]
 8009a4e:	b923      	cbnz	r3, 8009a5a <_strtod_l+0x7e2>
 8009a50:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	f340 8081 	ble.w	8009b5c <_strtod_l+0x8e4>
 8009a5a:	4659      	mov	r1, fp
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	4650      	mov	r0, sl
 8009a60:	f002 f9f8 	bl	800be54 <__lshift>
 8009a64:	9904      	ldr	r1, [sp, #16]
 8009a66:	4683      	mov	fp, r0
 8009a68:	f002 fa60 	bl	800bf2c <__mcmp>
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	dd75      	ble.n	8009b5c <_strtod_l+0x8e4>
 8009a70:	9905      	ldr	r1, [sp, #20]
 8009a72:	464b      	mov	r3, r9
 8009a74:	4a22      	ldr	r2, [pc, #136]	; (8009b00 <_strtod_l+0x888>)
 8009a76:	2900      	cmp	r1, #0
 8009a78:	f000 8091 	beq.w	8009b9e <_strtod_l+0x926>
 8009a7c:	ea02 0109 	and.w	r1, r2, r9
 8009a80:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009a84:	f300 808b 	bgt.w	8009b9e <_strtod_l+0x926>
 8009a88:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009a8c:	f77f aea9 	ble.w	80097e2 <_strtod_l+0x56a>
 8009a90:	2300      	movs	r3, #0
 8009a92:	4a1c      	ldr	r2, [pc, #112]	; (8009b04 <_strtod_l+0x88c>)
 8009a94:	4640      	mov	r0, r8
 8009a96:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009a9a:	4649      	mov	r1, r9
 8009a9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009aa0:	f7f6 fd1a 	bl	80004d8 <__aeabi_dmul>
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	4303      	orrs	r3, r0
 8009aa8:	bf08      	it	eq
 8009aaa:	2322      	moveq	r3, #34	; 0x22
 8009aac:	4680      	mov	r8, r0
 8009aae:	4689      	mov	r9, r1
 8009ab0:	bf08      	it	eq
 8009ab2:	f8ca 3000 	streq.w	r3, [sl]
 8009ab6:	e62d      	b.n	8009714 <_strtod_l+0x49c>
 8009ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8009abc:	fa02 f303 	lsl.w	r3, r2, r3
 8009ac0:	ea03 0808 	and.w	r8, r3, r8
 8009ac4:	e6db      	b.n	800987e <_strtod_l+0x606>
 8009ac6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8009aca:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8009ace:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8009ad2:	35e2      	adds	r5, #226	; 0xe2
 8009ad4:	fa07 f505 	lsl.w	r5, r7, r5
 8009ad8:	970f      	str	r7, [sp, #60]	; 0x3c
 8009ada:	e742      	b.n	8009962 <_strtod_l+0x6ea>
 8009adc:	2301      	movs	r3, #1
 8009ade:	2500      	movs	r5, #0
 8009ae0:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ae2:	e73e      	b.n	8009962 <_strtod_l+0x6ea>
 8009ae4:	463a      	mov	r2, r7
 8009ae6:	4650      	mov	r0, sl
 8009ae8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009aea:	f002 f9b3 	bl	800be54 <__lshift>
 8009aee:	901c      	str	r0, [sp, #112]	; 0x70
 8009af0:	2800      	cmp	r0, #0
 8009af2:	f47f af64 	bne.w	80099be <_strtod_l+0x746>
 8009af6:	e602      	b.n	80096fe <_strtod_l+0x486>
 8009af8:	0800ca20 	.word	0x0800ca20
 8009afc:	fffffc02 	.word	0xfffffc02
 8009b00:	7ff00000 	.word	0x7ff00000
 8009b04:	39500000 	.word	0x39500000
 8009b08:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009b0c:	d166      	bne.n	8009bdc <_strtod_l+0x964>
 8009b0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b14:	b35a      	cbz	r2, 8009b6e <_strtod_l+0x8f6>
 8009b16:	4a9c      	ldr	r2, [pc, #624]	; (8009d88 <_strtod_l+0xb10>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d12c      	bne.n	8009b76 <_strtod_l+0x8fe>
 8009b1c:	9b05      	ldr	r3, [sp, #20]
 8009b1e:	4640      	mov	r0, r8
 8009b20:	b303      	cbz	r3, 8009b64 <_strtod_l+0x8ec>
 8009b22:	464b      	mov	r3, r9
 8009b24:	4a99      	ldr	r2, [pc, #612]	; (8009d8c <_strtod_l+0xb14>)
 8009b26:	f04f 31ff 	mov.w	r1, #4294967295
 8009b2a:	401a      	ands	r2, r3
 8009b2c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009b30:	d81b      	bhi.n	8009b6a <_strtod_l+0x8f2>
 8009b32:	0d12      	lsrs	r2, r2, #20
 8009b34:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009b38:	fa01 f303 	lsl.w	r3, r1, r3
 8009b3c:	4298      	cmp	r0, r3
 8009b3e:	d11a      	bne.n	8009b76 <_strtod_l+0x8fe>
 8009b40:	4b93      	ldr	r3, [pc, #588]	; (8009d90 <_strtod_l+0xb18>)
 8009b42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d102      	bne.n	8009b4e <_strtod_l+0x8d6>
 8009b48:	3001      	adds	r0, #1
 8009b4a:	f43f add8 	beq.w	80096fe <_strtod_l+0x486>
 8009b4e:	f04f 0800 	mov.w	r8, #0
 8009b52:	4b8e      	ldr	r3, [pc, #568]	; (8009d8c <_strtod_l+0xb14>)
 8009b54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b56:	401a      	ands	r2, r3
 8009b58:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8009b5c:	9b05      	ldr	r3, [sp, #20]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d196      	bne.n	8009a90 <_strtod_l+0x818>
 8009b62:	e5d7      	b.n	8009714 <_strtod_l+0x49c>
 8009b64:	f04f 33ff 	mov.w	r3, #4294967295
 8009b68:	e7e8      	b.n	8009b3c <_strtod_l+0x8c4>
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	e7e6      	b.n	8009b3c <_strtod_l+0x8c4>
 8009b6e:	ea53 0308 	orrs.w	r3, r3, r8
 8009b72:	f43f af7d 	beq.w	8009a70 <_strtod_l+0x7f8>
 8009b76:	b1e5      	cbz	r5, 8009bb2 <_strtod_l+0x93a>
 8009b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b7a:	421d      	tst	r5, r3
 8009b7c:	d0ee      	beq.n	8009b5c <_strtod_l+0x8e4>
 8009b7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b80:	4640      	mov	r0, r8
 8009b82:	4649      	mov	r1, r9
 8009b84:	9a05      	ldr	r2, [sp, #20]
 8009b86:	b1c3      	cbz	r3, 8009bba <_strtod_l+0x942>
 8009b88:	f7ff fb54 	bl	8009234 <sulp>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	460b      	mov	r3, r1
 8009b90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009b94:	f7f6 faea 	bl	800016c <__adddf3>
 8009b98:	4680      	mov	r8, r0
 8009b9a:	4689      	mov	r9, r1
 8009b9c:	e7de      	b.n	8009b5c <_strtod_l+0x8e4>
 8009b9e:	4013      	ands	r3, r2
 8009ba0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009ba4:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009ba8:	f04f 38ff 	mov.w	r8, #4294967295
 8009bac:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009bb0:	e7d4      	b.n	8009b5c <_strtod_l+0x8e4>
 8009bb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bb4:	ea13 0f08 	tst.w	r3, r8
 8009bb8:	e7e0      	b.n	8009b7c <_strtod_l+0x904>
 8009bba:	f7ff fb3b 	bl	8009234 <sulp>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009bc6:	f7f6 facf 	bl	8000168 <__aeabi_dsub>
 8009bca:	2200      	movs	r2, #0
 8009bcc:	2300      	movs	r3, #0
 8009bce:	4680      	mov	r8, r0
 8009bd0:	4689      	mov	r9, r1
 8009bd2:	f7f6 fee9 	bl	80009a8 <__aeabi_dcmpeq>
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	d0c0      	beq.n	8009b5c <_strtod_l+0x8e4>
 8009bda:	e602      	b.n	80097e2 <_strtod_l+0x56a>
 8009bdc:	4658      	mov	r0, fp
 8009bde:	9904      	ldr	r1, [sp, #16]
 8009be0:	f002 fb26 	bl	800c230 <__ratio>
 8009be4:	2200      	movs	r2, #0
 8009be6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009bea:	4606      	mov	r6, r0
 8009bec:	460f      	mov	r7, r1
 8009bee:	f7f6 feef 	bl	80009d0 <__aeabi_dcmple>
 8009bf2:	2800      	cmp	r0, #0
 8009bf4:	d075      	beq.n	8009ce2 <_strtod_l+0xa6a>
 8009bf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d047      	beq.n	8009c8c <_strtod_l+0xa14>
 8009bfc:	2600      	movs	r6, #0
 8009bfe:	4f65      	ldr	r7, [pc, #404]	; (8009d94 <_strtod_l+0xb1c>)
 8009c00:	4d64      	ldr	r5, [pc, #400]	; (8009d94 <_strtod_l+0xb1c>)
 8009c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c08:	0d1b      	lsrs	r3, r3, #20
 8009c0a:	051b      	lsls	r3, r3, #20
 8009c0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009c10:	4b61      	ldr	r3, [pc, #388]	; (8009d98 <_strtod_l+0xb20>)
 8009c12:	429a      	cmp	r2, r3
 8009c14:	f040 80c8 	bne.w	8009da8 <_strtod_l+0xb30>
 8009c18:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009c1c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c22:	4640      	mov	r0, r8
 8009c24:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8009c28:	4649      	mov	r1, r9
 8009c2a:	f002 fa2b 	bl	800c084 <__ulp>
 8009c2e:	4602      	mov	r2, r0
 8009c30:	460b      	mov	r3, r1
 8009c32:	4630      	mov	r0, r6
 8009c34:	4639      	mov	r1, r7
 8009c36:	f7f6 fc4f 	bl	80004d8 <__aeabi_dmul>
 8009c3a:	4642      	mov	r2, r8
 8009c3c:	464b      	mov	r3, r9
 8009c3e:	f7f6 fa95 	bl	800016c <__adddf3>
 8009c42:	460b      	mov	r3, r1
 8009c44:	4951      	ldr	r1, [pc, #324]	; (8009d8c <_strtod_l+0xb14>)
 8009c46:	4a55      	ldr	r2, [pc, #340]	; (8009d9c <_strtod_l+0xb24>)
 8009c48:	4019      	ands	r1, r3
 8009c4a:	4291      	cmp	r1, r2
 8009c4c:	4680      	mov	r8, r0
 8009c4e:	d95e      	bls.n	8009d0e <_strtod_l+0xa96>
 8009c50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c52:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d103      	bne.n	8009c62 <_strtod_l+0x9ea>
 8009c5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	f43f ad4e 	beq.w	80096fe <_strtod_l+0x486>
 8009c62:	f04f 38ff 	mov.w	r8, #4294967295
 8009c66:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8009d90 <_strtod_l+0xb18>
 8009c6a:	4650      	mov	r0, sl
 8009c6c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009c6e:	f001 fed9 	bl	800ba24 <_Bfree>
 8009c72:	4650      	mov	r0, sl
 8009c74:	9906      	ldr	r1, [sp, #24]
 8009c76:	f001 fed5 	bl	800ba24 <_Bfree>
 8009c7a:	4650      	mov	r0, sl
 8009c7c:	9904      	ldr	r1, [sp, #16]
 8009c7e:	f001 fed1 	bl	800ba24 <_Bfree>
 8009c82:	4659      	mov	r1, fp
 8009c84:	4650      	mov	r0, sl
 8009c86:	f001 fecd 	bl	800ba24 <_Bfree>
 8009c8a:	e61c      	b.n	80098c6 <_strtod_l+0x64e>
 8009c8c:	f1b8 0f00 	cmp.w	r8, #0
 8009c90:	d119      	bne.n	8009cc6 <_strtod_l+0xa4e>
 8009c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c98:	b9e3      	cbnz	r3, 8009cd4 <_strtod_l+0xa5c>
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	4630      	mov	r0, r6
 8009c9e:	4639      	mov	r1, r7
 8009ca0:	4b3c      	ldr	r3, [pc, #240]	; (8009d94 <_strtod_l+0xb1c>)
 8009ca2:	f7f6 fe8b 	bl	80009bc <__aeabi_dcmplt>
 8009ca6:	b9c8      	cbnz	r0, 8009cdc <_strtod_l+0xa64>
 8009ca8:	2200      	movs	r2, #0
 8009caa:	4630      	mov	r0, r6
 8009cac:	4639      	mov	r1, r7
 8009cae:	4b3c      	ldr	r3, [pc, #240]	; (8009da0 <_strtod_l+0xb28>)
 8009cb0:	f7f6 fc12 	bl	80004d8 <__aeabi_dmul>
 8009cb4:	4604      	mov	r4, r0
 8009cb6:	460d      	mov	r5, r1
 8009cb8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009cbc:	9418      	str	r4, [sp, #96]	; 0x60
 8009cbe:	9319      	str	r3, [sp, #100]	; 0x64
 8009cc0:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8009cc4:	e79d      	b.n	8009c02 <_strtod_l+0x98a>
 8009cc6:	f1b8 0f01 	cmp.w	r8, #1
 8009cca:	d103      	bne.n	8009cd4 <_strtod_l+0xa5c>
 8009ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	f43f ad87 	beq.w	80097e2 <_strtod_l+0x56a>
 8009cd4:	2600      	movs	r6, #0
 8009cd6:	2400      	movs	r4, #0
 8009cd8:	4f32      	ldr	r7, [pc, #200]	; (8009da4 <_strtod_l+0xb2c>)
 8009cda:	e791      	b.n	8009c00 <_strtod_l+0x988>
 8009cdc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8009cde:	4d30      	ldr	r5, [pc, #192]	; (8009da0 <_strtod_l+0xb28>)
 8009ce0:	e7ea      	b.n	8009cb8 <_strtod_l+0xa40>
 8009ce2:	4b2f      	ldr	r3, [pc, #188]	; (8009da0 <_strtod_l+0xb28>)
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	4639      	mov	r1, r7
 8009cea:	f7f6 fbf5 	bl	80004d8 <__aeabi_dmul>
 8009cee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cf0:	4604      	mov	r4, r0
 8009cf2:	460d      	mov	r5, r1
 8009cf4:	b933      	cbnz	r3, 8009d04 <_strtod_l+0xa8c>
 8009cf6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009cfa:	9010      	str	r0, [sp, #64]	; 0x40
 8009cfc:	9311      	str	r3, [sp, #68]	; 0x44
 8009cfe:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009d02:	e77e      	b.n	8009c02 <_strtod_l+0x98a>
 8009d04:	4602      	mov	r2, r0
 8009d06:	460b      	mov	r3, r1
 8009d08:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009d0c:	e7f7      	b.n	8009cfe <_strtod_l+0xa86>
 8009d0e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009d12:	9b05      	ldr	r3, [sp, #20]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d1a8      	bne.n	8009c6a <_strtod_l+0x9f2>
 8009d18:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d1c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d1e:	0d1b      	lsrs	r3, r3, #20
 8009d20:	051b      	lsls	r3, r3, #20
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d1a1      	bne.n	8009c6a <_strtod_l+0x9f2>
 8009d26:	4620      	mov	r0, r4
 8009d28:	4629      	mov	r1, r5
 8009d2a:	f7f7 f9a1 	bl	8001070 <__aeabi_d2lz>
 8009d2e:	f7f6 fba5 	bl	800047c <__aeabi_l2d>
 8009d32:	4602      	mov	r2, r0
 8009d34:	460b      	mov	r3, r1
 8009d36:	4620      	mov	r0, r4
 8009d38:	4629      	mov	r1, r5
 8009d3a:	f7f6 fa15 	bl	8000168 <__aeabi_dsub>
 8009d3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d44:	ea43 0308 	orr.w	r3, r3, r8
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	4604      	mov	r4, r0
 8009d4c:	460d      	mov	r5, r1
 8009d4e:	d066      	beq.n	8009e1e <_strtod_l+0xba6>
 8009d50:	a309      	add	r3, pc, #36	; (adr r3, 8009d78 <_strtod_l+0xb00>)
 8009d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d56:	f7f6 fe31 	bl	80009bc <__aeabi_dcmplt>
 8009d5a:	2800      	cmp	r0, #0
 8009d5c:	f47f acda 	bne.w	8009714 <_strtod_l+0x49c>
 8009d60:	a307      	add	r3, pc, #28	; (adr r3, 8009d80 <_strtod_l+0xb08>)
 8009d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d66:	4620      	mov	r0, r4
 8009d68:	4629      	mov	r1, r5
 8009d6a:	f7f6 fe45 	bl	80009f8 <__aeabi_dcmpgt>
 8009d6e:	2800      	cmp	r0, #0
 8009d70:	f43f af7b 	beq.w	8009c6a <_strtod_l+0x9f2>
 8009d74:	e4ce      	b.n	8009714 <_strtod_l+0x49c>
 8009d76:	bf00      	nop
 8009d78:	94a03595 	.word	0x94a03595
 8009d7c:	3fdfffff 	.word	0x3fdfffff
 8009d80:	35afe535 	.word	0x35afe535
 8009d84:	3fe00000 	.word	0x3fe00000
 8009d88:	000fffff 	.word	0x000fffff
 8009d8c:	7ff00000 	.word	0x7ff00000
 8009d90:	7fefffff 	.word	0x7fefffff
 8009d94:	3ff00000 	.word	0x3ff00000
 8009d98:	7fe00000 	.word	0x7fe00000
 8009d9c:	7c9fffff 	.word	0x7c9fffff
 8009da0:	3fe00000 	.word	0x3fe00000
 8009da4:	bff00000 	.word	0xbff00000
 8009da8:	9b05      	ldr	r3, [sp, #20]
 8009daa:	b313      	cbz	r3, 8009df2 <_strtod_l+0xb7a>
 8009dac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009dae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009db2:	d81e      	bhi.n	8009df2 <_strtod_l+0xb7a>
 8009db4:	a326      	add	r3, pc, #152	; (adr r3, 8009e50 <_strtod_l+0xbd8>)
 8009db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dba:	4620      	mov	r0, r4
 8009dbc:	4629      	mov	r1, r5
 8009dbe:	f7f6 fe07 	bl	80009d0 <__aeabi_dcmple>
 8009dc2:	b190      	cbz	r0, 8009dea <_strtod_l+0xb72>
 8009dc4:	4629      	mov	r1, r5
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	f7f6 fe5e 	bl	8000a88 <__aeabi_d2uiz>
 8009dcc:	2801      	cmp	r0, #1
 8009dce:	bf38      	it	cc
 8009dd0:	2001      	movcc	r0, #1
 8009dd2:	f7f6 fb07 	bl	80003e4 <__aeabi_ui2d>
 8009dd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dd8:	4604      	mov	r4, r0
 8009dda:	460d      	mov	r5, r1
 8009ddc:	b9d3      	cbnz	r3, 8009e14 <_strtod_l+0xb9c>
 8009dde:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009de2:	9012      	str	r0, [sp, #72]	; 0x48
 8009de4:	9313      	str	r3, [sp, #76]	; 0x4c
 8009de6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8009dea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009dec:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8009df0:	1a9f      	subs	r7, r3, r2
 8009df2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009df6:	f002 f945 	bl	800c084 <__ulp>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	4630      	mov	r0, r6
 8009e00:	4639      	mov	r1, r7
 8009e02:	f7f6 fb69 	bl	80004d8 <__aeabi_dmul>
 8009e06:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009e0a:	f7f6 f9af 	bl	800016c <__adddf3>
 8009e0e:	4680      	mov	r8, r0
 8009e10:	4689      	mov	r9, r1
 8009e12:	e77e      	b.n	8009d12 <_strtod_l+0xa9a>
 8009e14:	4602      	mov	r2, r0
 8009e16:	460b      	mov	r3, r1
 8009e18:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8009e1c:	e7e3      	b.n	8009de6 <_strtod_l+0xb6e>
 8009e1e:	a30e      	add	r3, pc, #56	; (adr r3, 8009e58 <_strtod_l+0xbe0>)
 8009e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e24:	f7f6 fdca 	bl	80009bc <__aeabi_dcmplt>
 8009e28:	e7a1      	b.n	8009d6e <_strtod_l+0xaf6>
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	930c      	str	r3, [sp, #48]	; 0x30
 8009e2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e30:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009e32:	6013      	str	r3, [r2, #0]
 8009e34:	f7ff ba65 	b.w	8009302 <_strtod_l+0x8a>
 8009e38:	2b65      	cmp	r3, #101	; 0x65
 8009e3a:	f43f ab5c 	beq.w	80094f6 <_strtod_l+0x27e>
 8009e3e:	2b45      	cmp	r3, #69	; 0x45
 8009e40:	f43f ab59 	beq.w	80094f6 <_strtod_l+0x27e>
 8009e44:	2201      	movs	r2, #1
 8009e46:	f7ff bb8d 	b.w	8009564 <_strtod_l+0x2ec>
 8009e4a:	bf00      	nop
 8009e4c:	f3af 8000 	nop.w
 8009e50:	ffc00000 	.word	0xffc00000
 8009e54:	41dfffff 	.word	0x41dfffff
 8009e58:	94a03595 	.word	0x94a03595
 8009e5c:	3fcfffff 	.word	0x3fcfffff

08009e60 <_strtod_r>:
 8009e60:	4b01      	ldr	r3, [pc, #4]	; (8009e68 <_strtod_r+0x8>)
 8009e62:	f7ff ba09 	b.w	8009278 <_strtod_l>
 8009e66:	bf00      	nop
 8009e68:	200000bc 	.word	0x200000bc

08009e6c <_strtol_l.isra.0>:
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e72:	4686      	mov	lr, r0
 8009e74:	d001      	beq.n	8009e7a <_strtol_l.isra.0+0xe>
 8009e76:	2b24      	cmp	r3, #36	; 0x24
 8009e78:	d906      	bls.n	8009e88 <_strtol_l.isra.0+0x1c>
 8009e7a:	f7fe f8dd 	bl	8008038 <__errno>
 8009e7e:	2316      	movs	r3, #22
 8009e80:	6003      	str	r3, [r0, #0]
 8009e82:	2000      	movs	r0, #0
 8009e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e88:	468c      	mov	ip, r1
 8009e8a:	4e3a      	ldr	r6, [pc, #232]	; (8009f74 <_strtol_l.isra.0+0x108>)
 8009e8c:	4660      	mov	r0, ip
 8009e8e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009e92:	5da5      	ldrb	r5, [r4, r6]
 8009e94:	f015 0508 	ands.w	r5, r5, #8
 8009e98:	d1f8      	bne.n	8009e8c <_strtol_l.isra.0+0x20>
 8009e9a:	2c2d      	cmp	r4, #45	; 0x2d
 8009e9c:	d133      	bne.n	8009f06 <_strtol_l.isra.0+0x9a>
 8009e9e:	f04f 0801 	mov.w	r8, #1
 8009ea2:	f89c 4000 	ldrb.w	r4, [ip]
 8009ea6:	f100 0c02 	add.w	ip, r0, #2
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d05d      	beq.n	8009f6a <_strtol_l.isra.0+0xfe>
 8009eae:	2b10      	cmp	r3, #16
 8009eb0:	d10c      	bne.n	8009ecc <_strtol_l.isra.0+0x60>
 8009eb2:	2c30      	cmp	r4, #48	; 0x30
 8009eb4:	d10a      	bne.n	8009ecc <_strtol_l.isra.0+0x60>
 8009eb6:	f89c 0000 	ldrb.w	r0, [ip]
 8009eba:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009ebe:	2858      	cmp	r0, #88	; 0x58
 8009ec0:	d14e      	bne.n	8009f60 <_strtol_l.isra.0+0xf4>
 8009ec2:	2310      	movs	r3, #16
 8009ec4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8009ec8:	f10c 0c02 	add.w	ip, ip, #2
 8009ecc:	2500      	movs	r5, #0
 8009ece:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8009ed2:	3f01      	subs	r7, #1
 8009ed4:	fbb7 f9f3 	udiv	r9, r7, r3
 8009ed8:	4628      	mov	r0, r5
 8009eda:	fb03 7a19 	mls	sl, r3, r9, r7
 8009ede:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8009ee2:	2e09      	cmp	r6, #9
 8009ee4:	d818      	bhi.n	8009f18 <_strtol_l.isra.0+0xac>
 8009ee6:	4634      	mov	r4, r6
 8009ee8:	42a3      	cmp	r3, r4
 8009eea:	dd24      	ble.n	8009f36 <_strtol_l.isra.0+0xca>
 8009eec:	2d00      	cmp	r5, #0
 8009eee:	db1f      	blt.n	8009f30 <_strtol_l.isra.0+0xc4>
 8009ef0:	4581      	cmp	r9, r0
 8009ef2:	d31d      	bcc.n	8009f30 <_strtol_l.isra.0+0xc4>
 8009ef4:	d101      	bne.n	8009efa <_strtol_l.isra.0+0x8e>
 8009ef6:	45a2      	cmp	sl, r4
 8009ef8:	db1a      	blt.n	8009f30 <_strtol_l.isra.0+0xc4>
 8009efa:	2501      	movs	r5, #1
 8009efc:	fb00 4003 	mla	r0, r0, r3, r4
 8009f00:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009f04:	e7eb      	b.n	8009ede <_strtol_l.isra.0+0x72>
 8009f06:	2c2b      	cmp	r4, #43	; 0x2b
 8009f08:	bf08      	it	eq
 8009f0a:	f89c 4000 	ldrbeq.w	r4, [ip]
 8009f0e:	46a8      	mov	r8, r5
 8009f10:	bf08      	it	eq
 8009f12:	f100 0c02 	addeq.w	ip, r0, #2
 8009f16:	e7c8      	b.n	8009eaa <_strtol_l.isra.0+0x3e>
 8009f18:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8009f1c:	2e19      	cmp	r6, #25
 8009f1e:	d801      	bhi.n	8009f24 <_strtol_l.isra.0+0xb8>
 8009f20:	3c37      	subs	r4, #55	; 0x37
 8009f22:	e7e1      	b.n	8009ee8 <_strtol_l.isra.0+0x7c>
 8009f24:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8009f28:	2e19      	cmp	r6, #25
 8009f2a:	d804      	bhi.n	8009f36 <_strtol_l.isra.0+0xca>
 8009f2c:	3c57      	subs	r4, #87	; 0x57
 8009f2e:	e7db      	b.n	8009ee8 <_strtol_l.isra.0+0x7c>
 8009f30:	f04f 35ff 	mov.w	r5, #4294967295
 8009f34:	e7e4      	b.n	8009f00 <_strtol_l.isra.0+0x94>
 8009f36:	2d00      	cmp	r5, #0
 8009f38:	da08      	bge.n	8009f4c <_strtol_l.isra.0+0xe0>
 8009f3a:	2322      	movs	r3, #34	; 0x22
 8009f3c:	4638      	mov	r0, r7
 8009f3e:	f8ce 3000 	str.w	r3, [lr]
 8009f42:	2a00      	cmp	r2, #0
 8009f44:	d09e      	beq.n	8009e84 <_strtol_l.isra.0+0x18>
 8009f46:	f10c 31ff 	add.w	r1, ip, #4294967295
 8009f4a:	e007      	b.n	8009f5c <_strtol_l.isra.0+0xf0>
 8009f4c:	f1b8 0f00 	cmp.w	r8, #0
 8009f50:	d000      	beq.n	8009f54 <_strtol_l.isra.0+0xe8>
 8009f52:	4240      	negs	r0, r0
 8009f54:	2a00      	cmp	r2, #0
 8009f56:	d095      	beq.n	8009e84 <_strtol_l.isra.0+0x18>
 8009f58:	2d00      	cmp	r5, #0
 8009f5a:	d1f4      	bne.n	8009f46 <_strtol_l.isra.0+0xda>
 8009f5c:	6011      	str	r1, [r2, #0]
 8009f5e:	e791      	b.n	8009e84 <_strtol_l.isra.0+0x18>
 8009f60:	2430      	movs	r4, #48	; 0x30
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d1b2      	bne.n	8009ecc <_strtol_l.isra.0+0x60>
 8009f66:	2308      	movs	r3, #8
 8009f68:	e7b0      	b.n	8009ecc <_strtol_l.isra.0+0x60>
 8009f6a:	2c30      	cmp	r4, #48	; 0x30
 8009f6c:	d0a3      	beq.n	8009eb6 <_strtol_l.isra.0+0x4a>
 8009f6e:	230a      	movs	r3, #10
 8009f70:	e7ac      	b.n	8009ecc <_strtol_l.isra.0+0x60>
 8009f72:	bf00      	nop
 8009f74:	0800ca49 	.word	0x0800ca49

08009f78 <_strtol_r>:
 8009f78:	f7ff bf78 	b.w	8009e6c <_strtol_l.isra.0>

08009f7c <__swbuf_r>:
 8009f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f7e:	460e      	mov	r6, r1
 8009f80:	4614      	mov	r4, r2
 8009f82:	4605      	mov	r5, r0
 8009f84:	b118      	cbz	r0, 8009f8e <__swbuf_r+0x12>
 8009f86:	6983      	ldr	r3, [r0, #24]
 8009f88:	b90b      	cbnz	r3, 8009f8e <__swbuf_r+0x12>
 8009f8a:	f001 f855 	bl	800b038 <__sinit>
 8009f8e:	4b21      	ldr	r3, [pc, #132]	; (800a014 <__swbuf_r+0x98>)
 8009f90:	429c      	cmp	r4, r3
 8009f92:	d12b      	bne.n	8009fec <__swbuf_r+0x70>
 8009f94:	686c      	ldr	r4, [r5, #4]
 8009f96:	69a3      	ldr	r3, [r4, #24]
 8009f98:	60a3      	str	r3, [r4, #8]
 8009f9a:	89a3      	ldrh	r3, [r4, #12]
 8009f9c:	071a      	lsls	r2, r3, #28
 8009f9e:	d52f      	bpl.n	800a000 <__swbuf_r+0x84>
 8009fa0:	6923      	ldr	r3, [r4, #16]
 8009fa2:	b36b      	cbz	r3, 800a000 <__swbuf_r+0x84>
 8009fa4:	6923      	ldr	r3, [r4, #16]
 8009fa6:	6820      	ldr	r0, [r4, #0]
 8009fa8:	b2f6      	uxtb	r6, r6
 8009faa:	1ac0      	subs	r0, r0, r3
 8009fac:	6963      	ldr	r3, [r4, #20]
 8009fae:	4637      	mov	r7, r6
 8009fb0:	4283      	cmp	r3, r0
 8009fb2:	dc04      	bgt.n	8009fbe <__swbuf_r+0x42>
 8009fb4:	4621      	mov	r1, r4
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	f000 ffaa 	bl	800af10 <_fflush_r>
 8009fbc:	bb30      	cbnz	r0, 800a00c <__swbuf_r+0x90>
 8009fbe:	68a3      	ldr	r3, [r4, #8]
 8009fc0:	3001      	adds	r0, #1
 8009fc2:	3b01      	subs	r3, #1
 8009fc4:	60a3      	str	r3, [r4, #8]
 8009fc6:	6823      	ldr	r3, [r4, #0]
 8009fc8:	1c5a      	adds	r2, r3, #1
 8009fca:	6022      	str	r2, [r4, #0]
 8009fcc:	701e      	strb	r6, [r3, #0]
 8009fce:	6963      	ldr	r3, [r4, #20]
 8009fd0:	4283      	cmp	r3, r0
 8009fd2:	d004      	beq.n	8009fde <__swbuf_r+0x62>
 8009fd4:	89a3      	ldrh	r3, [r4, #12]
 8009fd6:	07db      	lsls	r3, r3, #31
 8009fd8:	d506      	bpl.n	8009fe8 <__swbuf_r+0x6c>
 8009fda:	2e0a      	cmp	r6, #10
 8009fdc:	d104      	bne.n	8009fe8 <__swbuf_r+0x6c>
 8009fde:	4621      	mov	r1, r4
 8009fe0:	4628      	mov	r0, r5
 8009fe2:	f000 ff95 	bl	800af10 <_fflush_r>
 8009fe6:	b988      	cbnz	r0, 800a00c <__swbuf_r+0x90>
 8009fe8:	4638      	mov	r0, r7
 8009fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fec:	4b0a      	ldr	r3, [pc, #40]	; (800a018 <__swbuf_r+0x9c>)
 8009fee:	429c      	cmp	r4, r3
 8009ff0:	d101      	bne.n	8009ff6 <__swbuf_r+0x7a>
 8009ff2:	68ac      	ldr	r4, [r5, #8]
 8009ff4:	e7cf      	b.n	8009f96 <__swbuf_r+0x1a>
 8009ff6:	4b09      	ldr	r3, [pc, #36]	; (800a01c <__swbuf_r+0xa0>)
 8009ff8:	429c      	cmp	r4, r3
 8009ffa:	bf08      	it	eq
 8009ffc:	68ec      	ldreq	r4, [r5, #12]
 8009ffe:	e7ca      	b.n	8009f96 <__swbuf_r+0x1a>
 800a000:	4621      	mov	r1, r4
 800a002:	4628      	mov	r0, r5
 800a004:	f000 f80c 	bl	800a020 <__swsetup_r>
 800a008:	2800      	cmp	r0, #0
 800a00a:	d0cb      	beq.n	8009fa4 <__swbuf_r+0x28>
 800a00c:	f04f 37ff 	mov.w	r7, #4294967295
 800a010:	e7ea      	b.n	8009fe8 <__swbuf_r+0x6c>
 800a012:	bf00      	nop
 800a014:	0800cc00 	.word	0x0800cc00
 800a018:	0800cc20 	.word	0x0800cc20
 800a01c:	0800cbe0 	.word	0x0800cbe0

0800a020 <__swsetup_r>:
 800a020:	4b32      	ldr	r3, [pc, #200]	; (800a0ec <__swsetup_r+0xcc>)
 800a022:	b570      	push	{r4, r5, r6, lr}
 800a024:	681d      	ldr	r5, [r3, #0]
 800a026:	4606      	mov	r6, r0
 800a028:	460c      	mov	r4, r1
 800a02a:	b125      	cbz	r5, 800a036 <__swsetup_r+0x16>
 800a02c:	69ab      	ldr	r3, [r5, #24]
 800a02e:	b913      	cbnz	r3, 800a036 <__swsetup_r+0x16>
 800a030:	4628      	mov	r0, r5
 800a032:	f001 f801 	bl	800b038 <__sinit>
 800a036:	4b2e      	ldr	r3, [pc, #184]	; (800a0f0 <__swsetup_r+0xd0>)
 800a038:	429c      	cmp	r4, r3
 800a03a:	d10f      	bne.n	800a05c <__swsetup_r+0x3c>
 800a03c:	686c      	ldr	r4, [r5, #4]
 800a03e:	89a3      	ldrh	r3, [r4, #12]
 800a040:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a044:	0719      	lsls	r1, r3, #28
 800a046:	d42c      	bmi.n	800a0a2 <__swsetup_r+0x82>
 800a048:	06dd      	lsls	r5, r3, #27
 800a04a:	d411      	bmi.n	800a070 <__swsetup_r+0x50>
 800a04c:	2309      	movs	r3, #9
 800a04e:	6033      	str	r3, [r6, #0]
 800a050:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a054:	f04f 30ff 	mov.w	r0, #4294967295
 800a058:	81a3      	strh	r3, [r4, #12]
 800a05a:	e03e      	b.n	800a0da <__swsetup_r+0xba>
 800a05c:	4b25      	ldr	r3, [pc, #148]	; (800a0f4 <__swsetup_r+0xd4>)
 800a05e:	429c      	cmp	r4, r3
 800a060:	d101      	bne.n	800a066 <__swsetup_r+0x46>
 800a062:	68ac      	ldr	r4, [r5, #8]
 800a064:	e7eb      	b.n	800a03e <__swsetup_r+0x1e>
 800a066:	4b24      	ldr	r3, [pc, #144]	; (800a0f8 <__swsetup_r+0xd8>)
 800a068:	429c      	cmp	r4, r3
 800a06a:	bf08      	it	eq
 800a06c:	68ec      	ldreq	r4, [r5, #12]
 800a06e:	e7e6      	b.n	800a03e <__swsetup_r+0x1e>
 800a070:	0758      	lsls	r0, r3, #29
 800a072:	d512      	bpl.n	800a09a <__swsetup_r+0x7a>
 800a074:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a076:	b141      	cbz	r1, 800a08a <__swsetup_r+0x6a>
 800a078:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a07c:	4299      	cmp	r1, r3
 800a07e:	d002      	beq.n	800a086 <__swsetup_r+0x66>
 800a080:	4630      	mov	r0, r6
 800a082:	f7fe f833 	bl	80080ec <_free_r>
 800a086:	2300      	movs	r3, #0
 800a088:	6363      	str	r3, [r4, #52]	; 0x34
 800a08a:	89a3      	ldrh	r3, [r4, #12]
 800a08c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a090:	81a3      	strh	r3, [r4, #12]
 800a092:	2300      	movs	r3, #0
 800a094:	6063      	str	r3, [r4, #4]
 800a096:	6923      	ldr	r3, [r4, #16]
 800a098:	6023      	str	r3, [r4, #0]
 800a09a:	89a3      	ldrh	r3, [r4, #12]
 800a09c:	f043 0308 	orr.w	r3, r3, #8
 800a0a0:	81a3      	strh	r3, [r4, #12]
 800a0a2:	6923      	ldr	r3, [r4, #16]
 800a0a4:	b94b      	cbnz	r3, 800a0ba <__swsetup_r+0x9a>
 800a0a6:	89a3      	ldrh	r3, [r4, #12]
 800a0a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a0ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0b0:	d003      	beq.n	800a0ba <__swsetup_r+0x9a>
 800a0b2:	4621      	mov	r1, r4
 800a0b4:	4630      	mov	r0, r6
 800a0b6:	f001 fbef 	bl	800b898 <__smakebuf_r>
 800a0ba:	89a0      	ldrh	r0, [r4, #12]
 800a0bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0c0:	f010 0301 	ands.w	r3, r0, #1
 800a0c4:	d00a      	beq.n	800a0dc <__swsetup_r+0xbc>
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	60a3      	str	r3, [r4, #8]
 800a0ca:	6963      	ldr	r3, [r4, #20]
 800a0cc:	425b      	negs	r3, r3
 800a0ce:	61a3      	str	r3, [r4, #24]
 800a0d0:	6923      	ldr	r3, [r4, #16]
 800a0d2:	b943      	cbnz	r3, 800a0e6 <__swsetup_r+0xc6>
 800a0d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a0d8:	d1ba      	bne.n	800a050 <__swsetup_r+0x30>
 800a0da:	bd70      	pop	{r4, r5, r6, pc}
 800a0dc:	0781      	lsls	r1, r0, #30
 800a0de:	bf58      	it	pl
 800a0e0:	6963      	ldrpl	r3, [r4, #20]
 800a0e2:	60a3      	str	r3, [r4, #8]
 800a0e4:	e7f4      	b.n	800a0d0 <__swsetup_r+0xb0>
 800a0e6:	2000      	movs	r0, #0
 800a0e8:	e7f7      	b.n	800a0da <__swsetup_r+0xba>
 800a0ea:	bf00      	nop
 800a0ec:	20000054 	.word	0x20000054
 800a0f0:	0800cc00 	.word	0x0800cc00
 800a0f4:	0800cc20 	.word	0x0800cc20
 800a0f8:	0800cbe0 	.word	0x0800cbe0

0800a0fc <abort>:
 800a0fc:	2006      	movs	r0, #6
 800a0fe:	b508      	push	{r3, lr}
 800a100:	f002 fac6 	bl	800c690 <raise>
 800a104:	2001      	movs	r0, #1
 800a106:	f7f8 fa2e 	bl	8002566 <_exit>

0800a10a <quorem>:
 800a10a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a10e:	6903      	ldr	r3, [r0, #16]
 800a110:	690c      	ldr	r4, [r1, #16]
 800a112:	4607      	mov	r7, r0
 800a114:	42a3      	cmp	r3, r4
 800a116:	f2c0 8083 	blt.w	800a220 <quorem+0x116>
 800a11a:	3c01      	subs	r4, #1
 800a11c:	f100 0514 	add.w	r5, r0, #20
 800a120:	f101 0814 	add.w	r8, r1, #20
 800a124:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a128:	9301      	str	r3, [sp, #4]
 800a12a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a12e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a132:	3301      	adds	r3, #1
 800a134:	429a      	cmp	r2, r3
 800a136:	fbb2 f6f3 	udiv	r6, r2, r3
 800a13a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a13e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a142:	d332      	bcc.n	800a1aa <quorem+0xa0>
 800a144:	f04f 0e00 	mov.w	lr, #0
 800a148:	4640      	mov	r0, r8
 800a14a:	46ac      	mov	ip, r5
 800a14c:	46f2      	mov	sl, lr
 800a14e:	f850 2b04 	ldr.w	r2, [r0], #4
 800a152:	b293      	uxth	r3, r2
 800a154:	fb06 e303 	mla	r3, r6, r3, lr
 800a158:	0c12      	lsrs	r2, r2, #16
 800a15a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a15e:	fb06 e202 	mla	r2, r6, r2, lr
 800a162:	b29b      	uxth	r3, r3
 800a164:	ebaa 0303 	sub.w	r3, sl, r3
 800a168:	f8dc a000 	ldr.w	sl, [ip]
 800a16c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a170:	fa1f fa8a 	uxth.w	sl, sl
 800a174:	4453      	add	r3, sl
 800a176:	fa1f fa82 	uxth.w	sl, r2
 800a17a:	f8dc 2000 	ldr.w	r2, [ip]
 800a17e:	4581      	cmp	r9, r0
 800a180:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a184:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a188:	b29b      	uxth	r3, r3
 800a18a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a18e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a192:	f84c 3b04 	str.w	r3, [ip], #4
 800a196:	d2da      	bcs.n	800a14e <quorem+0x44>
 800a198:	f855 300b 	ldr.w	r3, [r5, fp]
 800a19c:	b92b      	cbnz	r3, 800a1aa <quorem+0xa0>
 800a19e:	9b01      	ldr	r3, [sp, #4]
 800a1a0:	3b04      	subs	r3, #4
 800a1a2:	429d      	cmp	r5, r3
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	d32f      	bcc.n	800a208 <quorem+0xfe>
 800a1a8:	613c      	str	r4, [r7, #16]
 800a1aa:	4638      	mov	r0, r7
 800a1ac:	f001 febe 	bl	800bf2c <__mcmp>
 800a1b0:	2800      	cmp	r0, #0
 800a1b2:	db25      	blt.n	800a200 <quorem+0xf6>
 800a1b4:	4628      	mov	r0, r5
 800a1b6:	f04f 0c00 	mov.w	ip, #0
 800a1ba:	3601      	adds	r6, #1
 800a1bc:	f858 1b04 	ldr.w	r1, [r8], #4
 800a1c0:	f8d0 e000 	ldr.w	lr, [r0]
 800a1c4:	b28b      	uxth	r3, r1
 800a1c6:	ebac 0303 	sub.w	r3, ip, r3
 800a1ca:	fa1f f28e 	uxth.w	r2, lr
 800a1ce:	4413      	add	r3, r2
 800a1d0:	0c0a      	lsrs	r2, r1, #16
 800a1d2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a1d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1e0:	45c1      	cmp	r9, r8
 800a1e2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a1e6:	f840 3b04 	str.w	r3, [r0], #4
 800a1ea:	d2e7      	bcs.n	800a1bc <quorem+0xb2>
 800a1ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1f4:	b922      	cbnz	r2, 800a200 <quorem+0xf6>
 800a1f6:	3b04      	subs	r3, #4
 800a1f8:	429d      	cmp	r5, r3
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	d30a      	bcc.n	800a214 <quorem+0x10a>
 800a1fe:	613c      	str	r4, [r7, #16]
 800a200:	4630      	mov	r0, r6
 800a202:	b003      	add	sp, #12
 800a204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a208:	6812      	ldr	r2, [r2, #0]
 800a20a:	3b04      	subs	r3, #4
 800a20c:	2a00      	cmp	r2, #0
 800a20e:	d1cb      	bne.n	800a1a8 <quorem+0x9e>
 800a210:	3c01      	subs	r4, #1
 800a212:	e7c6      	b.n	800a1a2 <quorem+0x98>
 800a214:	6812      	ldr	r2, [r2, #0]
 800a216:	3b04      	subs	r3, #4
 800a218:	2a00      	cmp	r2, #0
 800a21a:	d1f0      	bne.n	800a1fe <quorem+0xf4>
 800a21c:	3c01      	subs	r4, #1
 800a21e:	e7eb      	b.n	800a1f8 <quorem+0xee>
 800a220:	2000      	movs	r0, #0
 800a222:	e7ee      	b.n	800a202 <quorem+0xf8>
 800a224:	0000      	movs	r0, r0
	...

0800a228 <_dtoa_r>:
 800a228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a22c:	4616      	mov	r6, r2
 800a22e:	461f      	mov	r7, r3
 800a230:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a232:	b099      	sub	sp, #100	; 0x64
 800a234:	4605      	mov	r5, r0
 800a236:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a23a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a23e:	b974      	cbnz	r4, 800a25e <_dtoa_r+0x36>
 800a240:	2010      	movs	r0, #16
 800a242:	f7fd ff35 	bl	80080b0 <malloc>
 800a246:	4602      	mov	r2, r0
 800a248:	6268      	str	r0, [r5, #36]	; 0x24
 800a24a:	b920      	cbnz	r0, 800a256 <_dtoa_r+0x2e>
 800a24c:	21ea      	movs	r1, #234	; 0xea
 800a24e:	4bae      	ldr	r3, [pc, #696]	; (800a508 <_dtoa_r+0x2e0>)
 800a250:	48ae      	ldr	r0, [pc, #696]	; (800a50c <_dtoa_r+0x2e4>)
 800a252:	f7fd fed3 	bl	8007ffc <__assert_func>
 800a256:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a25a:	6004      	str	r4, [r0, #0]
 800a25c:	60c4      	str	r4, [r0, #12]
 800a25e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a260:	6819      	ldr	r1, [r3, #0]
 800a262:	b151      	cbz	r1, 800a27a <_dtoa_r+0x52>
 800a264:	685a      	ldr	r2, [r3, #4]
 800a266:	2301      	movs	r3, #1
 800a268:	4093      	lsls	r3, r2
 800a26a:	604a      	str	r2, [r1, #4]
 800a26c:	608b      	str	r3, [r1, #8]
 800a26e:	4628      	mov	r0, r5
 800a270:	f001 fbd8 	bl	800ba24 <_Bfree>
 800a274:	2200      	movs	r2, #0
 800a276:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a278:	601a      	str	r2, [r3, #0]
 800a27a:	1e3b      	subs	r3, r7, #0
 800a27c:	bfaf      	iteee	ge
 800a27e:	2300      	movge	r3, #0
 800a280:	2201      	movlt	r2, #1
 800a282:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a286:	9305      	strlt	r3, [sp, #20]
 800a288:	bfa8      	it	ge
 800a28a:	f8c8 3000 	strge.w	r3, [r8]
 800a28e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a292:	4b9f      	ldr	r3, [pc, #636]	; (800a510 <_dtoa_r+0x2e8>)
 800a294:	bfb8      	it	lt
 800a296:	f8c8 2000 	strlt.w	r2, [r8]
 800a29a:	ea33 0309 	bics.w	r3, r3, r9
 800a29e:	d119      	bne.n	800a2d4 <_dtoa_r+0xac>
 800a2a0:	f242 730f 	movw	r3, #9999	; 0x270f
 800a2a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a2a6:	6013      	str	r3, [r2, #0]
 800a2a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a2ac:	4333      	orrs	r3, r6
 800a2ae:	f000 8580 	beq.w	800adb2 <_dtoa_r+0xb8a>
 800a2b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a2b4:	b953      	cbnz	r3, 800a2cc <_dtoa_r+0xa4>
 800a2b6:	4b97      	ldr	r3, [pc, #604]	; (800a514 <_dtoa_r+0x2ec>)
 800a2b8:	e022      	b.n	800a300 <_dtoa_r+0xd8>
 800a2ba:	4b97      	ldr	r3, [pc, #604]	; (800a518 <_dtoa_r+0x2f0>)
 800a2bc:	9308      	str	r3, [sp, #32]
 800a2be:	3308      	adds	r3, #8
 800a2c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a2c2:	6013      	str	r3, [r2, #0]
 800a2c4:	9808      	ldr	r0, [sp, #32]
 800a2c6:	b019      	add	sp, #100	; 0x64
 800a2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2cc:	4b91      	ldr	r3, [pc, #580]	; (800a514 <_dtoa_r+0x2ec>)
 800a2ce:	9308      	str	r3, [sp, #32]
 800a2d0:	3303      	adds	r3, #3
 800a2d2:	e7f5      	b.n	800a2c0 <_dtoa_r+0x98>
 800a2d4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a2d8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a2dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	f7f6 fb60 	bl	80009a8 <__aeabi_dcmpeq>
 800a2e8:	4680      	mov	r8, r0
 800a2ea:	b158      	cbz	r0, 800a304 <_dtoa_r+0xdc>
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a2f0:	6013      	str	r3, [r2, #0]
 800a2f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	f000 8559 	beq.w	800adac <_dtoa_r+0xb84>
 800a2fa:	4888      	ldr	r0, [pc, #544]	; (800a51c <_dtoa_r+0x2f4>)
 800a2fc:	6018      	str	r0, [r3, #0]
 800a2fe:	1e43      	subs	r3, r0, #1
 800a300:	9308      	str	r3, [sp, #32]
 800a302:	e7df      	b.n	800a2c4 <_dtoa_r+0x9c>
 800a304:	ab16      	add	r3, sp, #88	; 0x58
 800a306:	9301      	str	r3, [sp, #4]
 800a308:	ab17      	add	r3, sp, #92	; 0x5c
 800a30a:	9300      	str	r3, [sp, #0]
 800a30c:	4628      	mov	r0, r5
 800a30e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a312:	f001 ff31 	bl	800c178 <__d2b>
 800a316:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a31a:	4682      	mov	sl, r0
 800a31c:	2c00      	cmp	r4, #0
 800a31e:	d07e      	beq.n	800a41e <_dtoa_r+0x1f6>
 800a320:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a324:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a326:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a32a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a32e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a332:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a336:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a33a:	2200      	movs	r2, #0
 800a33c:	4b78      	ldr	r3, [pc, #480]	; (800a520 <_dtoa_r+0x2f8>)
 800a33e:	f7f5 ff13 	bl	8000168 <__aeabi_dsub>
 800a342:	a36b      	add	r3, pc, #428	; (adr r3, 800a4f0 <_dtoa_r+0x2c8>)
 800a344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a348:	f7f6 f8c6 	bl	80004d8 <__aeabi_dmul>
 800a34c:	a36a      	add	r3, pc, #424	; (adr r3, 800a4f8 <_dtoa_r+0x2d0>)
 800a34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a352:	f7f5 ff0b 	bl	800016c <__adddf3>
 800a356:	4606      	mov	r6, r0
 800a358:	4620      	mov	r0, r4
 800a35a:	460f      	mov	r7, r1
 800a35c:	f7f6 f852 	bl	8000404 <__aeabi_i2d>
 800a360:	a367      	add	r3, pc, #412	; (adr r3, 800a500 <_dtoa_r+0x2d8>)
 800a362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a366:	f7f6 f8b7 	bl	80004d8 <__aeabi_dmul>
 800a36a:	4602      	mov	r2, r0
 800a36c:	460b      	mov	r3, r1
 800a36e:	4630      	mov	r0, r6
 800a370:	4639      	mov	r1, r7
 800a372:	f7f5 fefb 	bl	800016c <__adddf3>
 800a376:	4606      	mov	r6, r0
 800a378:	460f      	mov	r7, r1
 800a37a:	f7f6 fb5d 	bl	8000a38 <__aeabi_d2iz>
 800a37e:	2200      	movs	r2, #0
 800a380:	4681      	mov	r9, r0
 800a382:	2300      	movs	r3, #0
 800a384:	4630      	mov	r0, r6
 800a386:	4639      	mov	r1, r7
 800a388:	f7f6 fb18 	bl	80009bc <__aeabi_dcmplt>
 800a38c:	b148      	cbz	r0, 800a3a2 <_dtoa_r+0x17a>
 800a38e:	4648      	mov	r0, r9
 800a390:	f7f6 f838 	bl	8000404 <__aeabi_i2d>
 800a394:	4632      	mov	r2, r6
 800a396:	463b      	mov	r3, r7
 800a398:	f7f6 fb06 	bl	80009a8 <__aeabi_dcmpeq>
 800a39c:	b908      	cbnz	r0, 800a3a2 <_dtoa_r+0x17a>
 800a39e:	f109 39ff 	add.w	r9, r9, #4294967295
 800a3a2:	f1b9 0f16 	cmp.w	r9, #22
 800a3a6:	d857      	bhi.n	800a458 <_dtoa_r+0x230>
 800a3a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a3ac:	4b5d      	ldr	r3, [pc, #372]	; (800a524 <_dtoa_r+0x2fc>)
 800a3ae:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b6:	f7f6 fb01 	bl	80009bc <__aeabi_dcmplt>
 800a3ba:	2800      	cmp	r0, #0
 800a3bc:	d04e      	beq.n	800a45c <_dtoa_r+0x234>
 800a3be:	2300      	movs	r3, #0
 800a3c0:	f109 39ff 	add.w	r9, r9, #4294967295
 800a3c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a3c8:	1b1c      	subs	r4, r3, r4
 800a3ca:	1e63      	subs	r3, r4, #1
 800a3cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a3ce:	bf49      	itett	mi
 800a3d0:	f1c4 0301 	rsbmi	r3, r4, #1
 800a3d4:	2300      	movpl	r3, #0
 800a3d6:	9306      	strmi	r3, [sp, #24]
 800a3d8:	2300      	movmi	r3, #0
 800a3da:	bf54      	ite	pl
 800a3dc:	9306      	strpl	r3, [sp, #24]
 800a3de:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a3e0:	f1b9 0f00 	cmp.w	r9, #0
 800a3e4:	db3c      	blt.n	800a460 <_dtoa_r+0x238>
 800a3e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3e8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a3ec:	444b      	add	r3, r9
 800a3ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	930a      	str	r3, [sp, #40]	; 0x28
 800a3f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a3f6:	2b09      	cmp	r3, #9
 800a3f8:	d86c      	bhi.n	800a4d4 <_dtoa_r+0x2ac>
 800a3fa:	2b05      	cmp	r3, #5
 800a3fc:	bfc4      	itt	gt
 800a3fe:	3b04      	subgt	r3, #4
 800a400:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a402:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a404:	bfc8      	it	gt
 800a406:	2400      	movgt	r4, #0
 800a408:	f1a3 0302 	sub.w	r3, r3, #2
 800a40c:	bfd8      	it	le
 800a40e:	2401      	movle	r4, #1
 800a410:	2b03      	cmp	r3, #3
 800a412:	f200 808b 	bhi.w	800a52c <_dtoa_r+0x304>
 800a416:	e8df f003 	tbb	[pc, r3]
 800a41a:	4f2d      	.short	0x4f2d
 800a41c:	5b4d      	.short	0x5b4d
 800a41e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a422:	441c      	add	r4, r3
 800a424:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a428:	2b20      	cmp	r3, #32
 800a42a:	bfc3      	ittte	gt
 800a42c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a430:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a434:	fa09 f303 	lslgt.w	r3, r9, r3
 800a438:	f1c3 0320 	rsble	r3, r3, #32
 800a43c:	bfc6      	itte	gt
 800a43e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a442:	4318      	orrgt	r0, r3
 800a444:	fa06 f003 	lslle.w	r0, r6, r3
 800a448:	f7f5 ffcc 	bl	80003e4 <__aeabi_ui2d>
 800a44c:	2301      	movs	r3, #1
 800a44e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a452:	3c01      	subs	r4, #1
 800a454:	9313      	str	r3, [sp, #76]	; 0x4c
 800a456:	e770      	b.n	800a33a <_dtoa_r+0x112>
 800a458:	2301      	movs	r3, #1
 800a45a:	e7b3      	b.n	800a3c4 <_dtoa_r+0x19c>
 800a45c:	900f      	str	r0, [sp, #60]	; 0x3c
 800a45e:	e7b2      	b.n	800a3c6 <_dtoa_r+0x19e>
 800a460:	9b06      	ldr	r3, [sp, #24]
 800a462:	eba3 0309 	sub.w	r3, r3, r9
 800a466:	9306      	str	r3, [sp, #24]
 800a468:	f1c9 0300 	rsb	r3, r9, #0
 800a46c:	930a      	str	r3, [sp, #40]	; 0x28
 800a46e:	2300      	movs	r3, #0
 800a470:	930e      	str	r3, [sp, #56]	; 0x38
 800a472:	e7bf      	b.n	800a3f4 <_dtoa_r+0x1cc>
 800a474:	2300      	movs	r3, #0
 800a476:	930b      	str	r3, [sp, #44]	; 0x2c
 800a478:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	dc59      	bgt.n	800a532 <_dtoa_r+0x30a>
 800a47e:	f04f 0b01 	mov.w	fp, #1
 800a482:	465b      	mov	r3, fp
 800a484:	f8cd b008 	str.w	fp, [sp, #8]
 800a488:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800a48c:	2200      	movs	r2, #0
 800a48e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a490:	6042      	str	r2, [r0, #4]
 800a492:	2204      	movs	r2, #4
 800a494:	f102 0614 	add.w	r6, r2, #20
 800a498:	429e      	cmp	r6, r3
 800a49a:	6841      	ldr	r1, [r0, #4]
 800a49c:	d94f      	bls.n	800a53e <_dtoa_r+0x316>
 800a49e:	4628      	mov	r0, r5
 800a4a0:	f001 fa80 	bl	800b9a4 <_Balloc>
 800a4a4:	9008      	str	r0, [sp, #32]
 800a4a6:	2800      	cmp	r0, #0
 800a4a8:	d14d      	bne.n	800a546 <_dtoa_r+0x31e>
 800a4aa:	4602      	mov	r2, r0
 800a4ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a4b0:	4b1d      	ldr	r3, [pc, #116]	; (800a528 <_dtoa_r+0x300>)
 800a4b2:	e6cd      	b.n	800a250 <_dtoa_r+0x28>
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e7de      	b.n	800a476 <_dtoa_r+0x24e>
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a4be:	eb09 0b03 	add.w	fp, r9, r3
 800a4c2:	f10b 0301 	add.w	r3, fp, #1
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	9302      	str	r3, [sp, #8]
 800a4ca:	bfb8      	it	lt
 800a4cc:	2301      	movlt	r3, #1
 800a4ce:	e7dd      	b.n	800a48c <_dtoa_r+0x264>
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	e7f2      	b.n	800a4ba <_dtoa_r+0x292>
 800a4d4:	2401      	movs	r4, #1
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	940b      	str	r4, [sp, #44]	; 0x2c
 800a4da:	9322      	str	r3, [sp, #136]	; 0x88
 800a4dc:	f04f 3bff 	mov.w	fp, #4294967295
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	2312      	movs	r3, #18
 800a4e4:	f8cd b008 	str.w	fp, [sp, #8]
 800a4e8:	9223      	str	r2, [sp, #140]	; 0x8c
 800a4ea:	e7cf      	b.n	800a48c <_dtoa_r+0x264>
 800a4ec:	f3af 8000 	nop.w
 800a4f0:	636f4361 	.word	0x636f4361
 800a4f4:	3fd287a7 	.word	0x3fd287a7
 800a4f8:	8b60c8b3 	.word	0x8b60c8b3
 800a4fc:	3fc68a28 	.word	0x3fc68a28
 800a500:	509f79fb 	.word	0x509f79fb
 800a504:	3fd34413 	.word	0x3fd34413
 800a508:	0800cb56 	.word	0x0800cb56
 800a50c:	0800cb6d 	.word	0x0800cb6d
 800a510:	7ff00000 	.word	0x7ff00000
 800a514:	0800cb52 	.word	0x0800cb52
 800a518:	0800cb49 	.word	0x0800cb49
 800a51c:	0800c9ce 	.word	0x0800c9ce
 800a520:	3ff80000 	.word	0x3ff80000
 800a524:	0800cd48 	.word	0x0800cd48
 800a528:	0800cbcc 	.word	0x0800cbcc
 800a52c:	2301      	movs	r3, #1
 800a52e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a530:	e7d4      	b.n	800a4dc <_dtoa_r+0x2b4>
 800a532:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800a536:	465b      	mov	r3, fp
 800a538:	f8cd b008 	str.w	fp, [sp, #8]
 800a53c:	e7a6      	b.n	800a48c <_dtoa_r+0x264>
 800a53e:	3101      	adds	r1, #1
 800a540:	6041      	str	r1, [r0, #4]
 800a542:	0052      	lsls	r2, r2, #1
 800a544:	e7a6      	b.n	800a494 <_dtoa_r+0x26c>
 800a546:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a548:	9a08      	ldr	r2, [sp, #32]
 800a54a:	601a      	str	r2, [r3, #0]
 800a54c:	9b02      	ldr	r3, [sp, #8]
 800a54e:	2b0e      	cmp	r3, #14
 800a550:	f200 80a8 	bhi.w	800a6a4 <_dtoa_r+0x47c>
 800a554:	2c00      	cmp	r4, #0
 800a556:	f000 80a5 	beq.w	800a6a4 <_dtoa_r+0x47c>
 800a55a:	f1b9 0f00 	cmp.w	r9, #0
 800a55e:	dd34      	ble.n	800a5ca <_dtoa_r+0x3a2>
 800a560:	4a9a      	ldr	r2, [pc, #616]	; (800a7cc <_dtoa_r+0x5a4>)
 800a562:	f009 030f 	and.w	r3, r9, #15
 800a566:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a56a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800a56e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a572:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a576:	ea4f 1429 	mov.w	r4, r9, asr #4
 800a57a:	d016      	beq.n	800a5aa <_dtoa_r+0x382>
 800a57c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a580:	4b93      	ldr	r3, [pc, #588]	; (800a7d0 <_dtoa_r+0x5a8>)
 800a582:	2703      	movs	r7, #3
 800a584:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a588:	f7f6 f8d0 	bl	800072c <__aeabi_ddiv>
 800a58c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a590:	f004 040f 	and.w	r4, r4, #15
 800a594:	4e8e      	ldr	r6, [pc, #568]	; (800a7d0 <_dtoa_r+0x5a8>)
 800a596:	b954      	cbnz	r4, 800a5ae <_dtoa_r+0x386>
 800a598:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a59c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5a0:	f7f6 f8c4 	bl	800072c <__aeabi_ddiv>
 800a5a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5a8:	e029      	b.n	800a5fe <_dtoa_r+0x3d6>
 800a5aa:	2702      	movs	r7, #2
 800a5ac:	e7f2      	b.n	800a594 <_dtoa_r+0x36c>
 800a5ae:	07e1      	lsls	r1, r4, #31
 800a5b0:	d508      	bpl.n	800a5c4 <_dtoa_r+0x39c>
 800a5b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a5b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a5ba:	f7f5 ff8d 	bl	80004d8 <__aeabi_dmul>
 800a5be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a5c2:	3701      	adds	r7, #1
 800a5c4:	1064      	asrs	r4, r4, #1
 800a5c6:	3608      	adds	r6, #8
 800a5c8:	e7e5      	b.n	800a596 <_dtoa_r+0x36e>
 800a5ca:	f000 80a5 	beq.w	800a718 <_dtoa_r+0x4f0>
 800a5ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a5d2:	f1c9 0400 	rsb	r4, r9, #0
 800a5d6:	4b7d      	ldr	r3, [pc, #500]	; (800a7cc <_dtoa_r+0x5a4>)
 800a5d8:	f004 020f 	and.w	r2, r4, #15
 800a5dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e4:	f7f5 ff78 	bl	80004d8 <__aeabi_dmul>
 800a5e8:	2702      	movs	r7, #2
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5f0:	4e77      	ldr	r6, [pc, #476]	; (800a7d0 <_dtoa_r+0x5a8>)
 800a5f2:	1124      	asrs	r4, r4, #4
 800a5f4:	2c00      	cmp	r4, #0
 800a5f6:	f040 8084 	bne.w	800a702 <_dtoa_r+0x4da>
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d1d2      	bne.n	800a5a4 <_dtoa_r+0x37c>
 800a5fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a600:	2b00      	cmp	r3, #0
 800a602:	f000 808b 	beq.w	800a71c <_dtoa_r+0x4f4>
 800a606:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a60a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a60e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a612:	2200      	movs	r2, #0
 800a614:	4b6f      	ldr	r3, [pc, #444]	; (800a7d4 <_dtoa_r+0x5ac>)
 800a616:	f7f6 f9d1 	bl	80009bc <__aeabi_dcmplt>
 800a61a:	2800      	cmp	r0, #0
 800a61c:	d07e      	beq.n	800a71c <_dtoa_r+0x4f4>
 800a61e:	9b02      	ldr	r3, [sp, #8]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d07b      	beq.n	800a71c <_dtoa_r+0x4f4>
 800a624:	f1bb 0f00 	cmp.w	fp, #0
 800a628:	dd38      	ble.n	800a69c <_dtoa_r+0x474>
 800a62a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a62e:	2200      	movs	r2, #0
 800a630:	4b69      	ldr	r3, [pc, #420]	; (800a7d8 <_dtoa_r+0x5b0>)
 800a632:	f7f5 ff51 	bl	80004d8 <__aeabi_dmul>
 800a636:	465c      	mov	r4, fp
 800a638:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a63c:	f109 38ff 	add.w	r8, r9, #4294967295
 800a640:	3701      	adds	r7, #1
 800a642:	4638      	mov	r0, r7
 800a644:	f7f5 fede 	bl	8000404 <__aeabi_i2d>
 800a648:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a64c:	f7f5 ff44 	bl	80004d8 <__aeabi_dmul>
 800a650:	2200      	movs	r2, #0
 800a652:	4b62      	ldr	r3, [pc, #392]	; (800a7dc <_dtoa_r+0x5b4>)
 800a654:	f7f5 fd8a 	bl	800016c <__adddf3>
 800a658:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a65c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a660:	9611      	str	r6, [sp, #68]	; 0x44
 800a662:	2c00      	cmp	r4, #0
 800a664:	d15d      	bne.n	800a722 <_dtoa_r+0x4fa>
 800a666:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a66a:	2200      	movs	r2, #0
 800a66c:	4b5c      	ldr	r3, [pc, #368]	; (800a7e0 <_dtoa_r+0x5b8>)
 800a66e:	f7f5 fd7b 	bl	8000168 <__aeabi_dsub>
 800a672:	4602      	mov	r2, r0
 800a674:	460b      	mov	r3, r1
 800a676:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a67a:	4633      	mov	r3, r6
 800a67c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a67e:	f7f6 f9bb 	bl	80009f8 <__aeabi_dcmpgt>
 800a682:	2800      	cmp	r0, #0
 800a684:	f040 829e 	bne.w	800abc4 <_dtoa_r+0x99c>
 800a688:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a68c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a68e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a692:	f7f6 f993 	bl	80009bc <__aeabi_dcmplt>
 800a696:	2800      	cmp	r0, #0
 800a698:	f040 8292 	bne.w	800abc0 <_dtoa_r+0x998>
 800a69c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a6a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a6a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	f2c0 8153 	blt.w	800a952 <_dtoa_r+0x72a>
 800a6ac:	f1b9 0f0e 	cmp.w	r9, #14
 800a6b0:	f300 814f 	bgt.w	800a952 <_dtoa_r+0x72a>
 800a6b4:	4b45      	ldr	r3, [pc, #276]	; (800a7cc <_dtoa_r+0x5a4>)
 800a6b6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a6ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a6be:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a6c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	f280 80db 	bge.w	800a880 <_dtoa_r+0x658>
 800a6ca:	9b02      	ldr	r3, [sp, #8]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	f300 80d7 	bgt.w	800a880 <_dtoa_r+0x658>
 800a6d2:	f040 8274 	bne.w	800abbe <_dtoa_r+0x996>
 800a6d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	4b40      	ldr	r3, [pc, #256]	; (800a7e0 <_dtoa_r+0x5b8>)
 800a6de:	f7f5 fefb 	bl	80004d8 <__aeabi_dmul>
 800a6e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6e6:	f7f6 f97d 	bl	80009e4 <__aeabi_dcmpge>
 800a6ea:	9c02      	ldr	r4, [sp, #8]
 800a6ec:	4626      	mov	r6, r4
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	f040 824a 	bne.w	800ab88 <_dtoa_r+0x960>
 800a6f4:	2331      	movs	r3, #49	; 0x31
 800a6f6:	9f08      	ldr	r7, [sp, #32]
 800a6f8:	f109 0901 	add.w	r9, r9, #1
 800a6fc:	f807 3b01 	strb.w	r3, [r7], #1
 800a700:	e246      	b.n	800ab90 <_dtoa_r+0x968>
 800a702:	07e2      	lsls	r2, r4, #31
 800a704:	d505      	bpl.n	800a712 <_dtoa_r+0x4ea>
 800a706:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a70a:	f7f5 fee5 	bl	80004d8 <__aeabi_dmul>
 800a70e:	2301      	movs	r3, #1
 800a710:	3701      	adds	r7, #1
 800a712:	1064      	asrs	r4, r4, #1
 800a714:	3608      	adds	r6, #8
 800a716:	e76d      	b.n	800a5f4 <_dtoa_r+0x3cc>
 800a718:	2702      	movs	r7, #2
 800a71a:	e770      	b.n	800a5fe <_dtoa_r+0x3d6>
 800a71c:	46c8      	mov	r8, r9
 800a71e:	9c02      	ldr	r4, [sp, #8]
 800a720:	e78f      	b.n	800a642 <_dtoa_r+0x41a>
 800a722:	9908      	ldr	r1, [sp, #32]
 800a724:	4b29      	ldr	r3, [pc, #164]	; (800a7cc <_dtoa_r+0x5a4>)
 800a726:	4421      	add	r1, r4
 800a728:	9112      	str	r1, [sp, #72]	; 0x48
 800a72a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a72c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a730:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a734:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a738:	2900      	cmp	r1, #0
 800a73a:	d055      	beq.n	800a7e8 <_dtoa_r+0x5c0>
 800a73c:	2000      	movs	r0, #0
 800a73e:	4929      	ldr	r1, [pc, #164]	; (800a7e4 <_dtoa_r+0x5bc>)
 800a740:	f7f5 fff4 	bl	800072c <__aeabi_ddiv>
 800a744:	463b      	mov	r3, r7
 800a746:	4632      	mov	r2, r6
 800a748:	f7f5 fd0e 	bl	8000168 <__aeabi_dsub>
 800a74c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a750:	9f08      	ldr	r7, [sp, #32]
 800a752:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a756:	f7f6 f96f 	bl	8000a38 <__aeabi_d2iz>
 800a75a:	4604      	mov	r4, r0
 800a75c:	f7f5 fe52 	bl	8000404 <__aeabi_i2d>
 800a760:	4602      	mov	r2, r0
 800a762:	460b      	mov	r3, r1
 800a764:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a768:	f7f5 fcfe 	bl	8000168 <__aeabi_dsub>
 800a76c:	4602      	mov	r2, r0
 800a76e:	460b      	mov	r3, r1
 800a770:	3430      	adds	r4, #48	; 0x30
 800a772:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a776:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a77a:	f807 4b01 	strb.w	r4, [r7], #1
 800a77e:	f7f6 f91d 	bl	80009bc <__aeabi_dcmplt>
 800a782:	2800      	cmp	r0, #0
 800a784:	d174      	bne.n	800a870 <_dtoa_r+0x648>
 800a786:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a78a:	2000      	movs	r0, #0
 800a78c:	4911      	ldr	r1, [pc, #68]	; (800a7d4 <_dtoa_r+0x5ac>)
 800a78e:	f7f5 fceb 	bl	8000168 <__aeabi_dsub>
 800a792:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a796:	f7f6 f911 	bl	80009bc <__aeabi_dcmplt>
 800a79a:	2800      	cmp	r0, #0
 800a79c:	f040 80b6 	bne.w	800a90c <_dtoa_r+0x6e4>
 800a7a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a7a2:	429f      	cmp	r7, r3
 800a7a4:	f43f af7a 	beq.w	800a69c <_dtoa_r+0x474>
 800a7a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	4b0a      	ldr	r3, [pc, #40]	; (800a7d8 <_dtoa_r+0x5b0>)
 800a7b0:	f7f5 fe92 	bl	80004d8 <__aeabi_dmul>
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a7ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7be:	4b06      	ldr	r3, [pc, #24]	; (800a7d8 <_dtoa_r+0x5b0>)
 800a7c0:	f7f5 fe8a 	bl	80004d8 <__aeabi_dmul>
 800a7c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7c8:	e7c3      	b.n	800a752 <_dtoa_r+0x52a>
 800a7ca:	bf00      	nop
 800a7cc:	0800cd48 	.word	0x0800cd48
 800a7d0:	0800cd20 	.word	0x0800cd20
 800a7d4:	3ff00000 	.word	0x3ff00000
 800a7d8:	40240000 	.word	0x40240000
 800a7dc:	401c0000 	.word	0x401c0000
 800a7e0:	40140000 	.word	0x40140000
 800a7e4:	3fe00000 	.word	0x3fe00000
 800a7e8:	4630      	mov	r0, r6
 800a7ea:	4639      	mov	r1, r7
 800a7ec:	f7f5 fe74 	bl	80004d8 <__aeabi_dmul>
 800a7f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a7f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a7f6:	9c08      	ldr	r4, [sp, #32]
 800a7f8:	9314      	str	r3, [sp, #80]	; 0x50
 800a7fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7fe:	f7f6 f91b 	bl	8000a38 <__aeabi_d2iz>
 800a802:	9015      	str	r0, [sp, #84]	; 0x54
 800a804:	f7f5 fdfe 	bl	8000404 <__aeabi_i2d>
 800a808:	4602      	mov	r2, r0
 800a80a:	460b      	mov	r3, r1
 800a80c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a810:	f7f5 fcaa 	bl	8000168 <__aeabi_dsub>
 800a814:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a816:	4606      	mov	r6, r0
 800a818:	3330      	adds	r3, #48	; 0x30
 800a81a:	f804 3b01 	strb.w	r3, [r4], #1
 800a81e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a820:	460f      	mov	r7, r1
 800a822:	429c      	cmp	r4, r3
 800a824:	f04f 0200 	mov.w	r2, #0
 800a828:	d124      	bne.n	800a874 <_dtoa_r+0x64c>
 800a82a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a82e:	4bb3      	ldr	r3, [pc, #716]	; (800aafc <_dtoa_r+0x8d4>)
 800a830:	f7f5 fc9c 	bl	800016c <__adddf3>
 800a834:	4602      	mov	r2, r0
 800a836:	460b      	mov	r3, r1
 800a838:	4630      	mov	r0, r6
 800a83a:	4639      	mov	r1, r7
 800a83c:	f7f6 f8dc 	bl	80009f8 <__aeabi_dcmpgt>
 800a840:	2800      	cmp	r0, #0
 800a842:	d162      	bne.n	800a90a <_dtoa_r+0x6e2>
 800a844:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a848:	2000      	movs	r0, #0
 800a84a:	49ac      	ldr	r1, [pc, #688]	; (800aafc <_dtoa_r+0x8d4>)
 800a84c:	f7f5 fc8c 	bl	8000168 <__aeabi_dsub>
 800a850:	4602      	mov	r2, r0
 800a852:	460b      	mov	r3, r1
 800a854:	4630      	mov	r0, r6
 800a856:	4639      	mov	r1, r7
 800a858:	f7f6 f8b0 	bl	80009bc <__aeabi_dcmplt>
 800a85c:	2800      	cmp	r0, #0
 800a85e:	f43f af1d 	beq.w	800a69c <_dtoa_r+0x474>
 800a862:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a864:	1e7b      	subs	r3, r7, #1
 800a866:	9314      	str	r3, [sp, #80]	; 0x50
 800a868:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a86c:	2b30      	cmp	r3, #48	; 0x30
 800a86e:	d0f8      	beq.n	800a862 <_dtoa_r+0x63a>
 800a870:	46c1      	mov	r9, r8
 800a872:	e03a      	b.n	800a8ea <_dtoa_r+0x6c2>
 800a874:	4ba2      	ldr	r3, [pc, #648]	; (800ab00 <_dtoa_r+0x8d8>)
 800a876:	f7f5 fe2f 	bl	80004d8 <__aeabi_dmul>
 800a87a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a87e:	e7bc      	b.n	800a7fa <_dtoa_r+0x5d2>
 800a880:	9f08      	ldr	r7, [sp, #32]
 800a882:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a886:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a88a:	f7f5 ff4f 	bl	800072c <__aeabi_ddiv>
 800a88e:	f7f6 f8d3 	bl	8000a38 <__aeabi_d2iz>
 800a892:	4604      	mov	r4, r0
 800a894:	f7f5 fdb6 	bl	8000404 <__aeabi_i2d>
 800a898:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a89c:	f7f5 fe1c 	bl	80004d8 <__aeabi_dmul>
 800a8a0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a8a4:	460b      	mov	r3, r1
 800a8a6:	4602      	mov	r2, r0
 800a8a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a8ac:	f7f5 fc5c 	bl	8000168 <__aeabi_dsub>
 800a8b0:	f807 6b01 	strb.w	r6, [r7], #1
 800a8b4:	9e08      	ldr	r6, [sp, #32]
 800a8b6:	9b02      	ldr	r3, [sp, #8]
 800a8b8:	1bbe      	subs	r6, r7, r6
 800a8ba:	42b3      	cmp	r3, r6
 800a8bc:	d13a      	bne.n	800a934 <_dtoa_r+0x70c>
 800a8be:	4602      	mov	r2, r0
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	f7f5 fc53 	bl	800016c <__adddf3>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a8ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a8d2:	f7f6 f891 	bl	80009f8 <__aeabi_dcmpgt>
 800a8d6:	bb58      	cbnz	r0, 800a930 <_dtoa_r+0x708>
 800a8d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a8dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8e0:	f7f6 f862 	bl	80009a8 <__aeabi_dcmpeq>
 800a8e4:	b108      	cbz	r0, 800a8ea <_dtoa_r+0x6c2>
 800a8e6:	07e1      	lsls	r1, r4, #31
 800a8e8:	d422      	bmi.n	800a930 <_dtoa_r+0x708>
 800a8ea:	4628      	mov	r0, r5
 800a8ec:	4651      	mov	r1, sl
 800a8ee:	f001 f899 	bl	800ba24 <_Bfree>
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	703b      	strb	r3, [r7, #0]
 800a8f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a8f8:	f109 0001 	add.w	r0, r9, #1
 800a8fc:	6018      	str	r0, [r3, #0]
 800a8fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a900:	2b00      	cmp	r3, #0
 800a902:	f43f acdf 	beq.w	800a2c4 <_dtoa_r+0x9c>
 800a906:	601f      	str	r7, [r3, #0]
 800a908:	e4dc      	b.n	800a2c4 <_dtoa_r+0x9c>
 800a90a:	4627      	mov	r7, r4
 800a90c:	463b      	mov	r3, r7
 800a90e:	461f      	mov	r7, r3
 800a910:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a914:	2a39      	cmp	r2, #57	; 0x39
 800a916:	d107      	bne.n	800a928 <_dtoa_r+0x700>
 800a918:	9a08      	ldr	r2, [sp, #32]
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d1f7      	bne.n	800a90e <_dtoa_r+0x6e6>
 800a91e:	2230      	movs	r2, #48	; 0x30
 800a920:	9908      	ldr	r1, [sp, #32]
 800a922:	f108 0801 	add.w	r8, r8, #1
 800a926:	700a      	strb	r2, [r1, #0]
 800a928:	781a      	ldrb	r2, [r3, #0]
 800a92a:	3201      	adds	r2, #1
 800a92c:	701a      	strb	r2, [r3, #0]
 800a92e:	e79f      	b.n	800a870 <_dtoa_r+0x648>
 800a930:	46c8      	mov	r8, r9
 800a932:	e7eb      	b.n	800a90c <_dtoa_r+0x6e4>
 800a934:	2200      	movs	r2, #0
 800a936:	4b72      	ldr	r3, [pc, #456]	; (800ab00 <_dtoa_r+0x8d8>)
 800a938:	f7f5 fdce 	bl	80004d8 <__aeabi_dmul>
 800a93c:	4602      	mov	r2, r0
 800a93e:	460b      	mov	r3, r1
 800a940:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a944:	2200      	movs	r2, #0
 800a946:	2300      	movs	r3, #0
 800a948:	f7f6 f82e 	bl	80009a8 <__aeabi_dcmpeq>
 800a94c:	2800      	cmp	r0, #0
 800a94e:	d098      	beq.n	800a882 <_dtoa_r+0x65a>
 800a950:	e7cb      	b.n	800a8ea <_dtoa_r+0x6c2>
 800a952:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a954:	2a00      	cmp	r2, #0
 800a956:	f000 80cd 	beq.w	800aaf4 <_dtoa_r+0x8cc>
 800a95a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a95c:	2a01      	cmp	r2, #1
 800a95e:	f300 80af 	bgt.w	800aac0 <_dtoa_r+0x898>
 800a962:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a964:	2a00      	cmp	r2, #0
 800a966:	f000 80a7 	beq.w	800aab8 <_dtoa_r+0x890>
 800a96a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a96e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a970:	9f06      	ldr	r7, [sp, #24]
 800a972:	9a06      	ldr	r2, [sp, #24]
 800a974:	2101      	movs	r1, #1
 800a976:	441a      	add	r2, r3
 800a978:	9206      	str	r2, [sp, #24]
 800a97a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a97c:	4628      	mov	r0, r5
 800a97e:	441a      	add	r2, r3
 800a980:	9209      	str	r2, [sp, #36]	; 0x24
 800a982:	f001 f953 	bl	800bc2c <__i2b>
 800a986:	4606      	mov	r6, r0
 800a988:	2f00      	cmp	r7, #0
 800a98a:	dd0c      	ble.n	800a9a6 <_dtoa_r+0x77e>
 800a98c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a98e:	2b00      	cmp	r3, #0
 800a990:	dd09      	ble.n	800a9a6 <_dtoa_r+0x77e>
 800a992:	42bb      	cmp	r3, r7
 800a994:	bfa8      	it	ge
 800a996:	463b      	movge	r3, r7
 800a998:	9a06      	ldr	r2, [sp, #24]
 800a99a:	1aff      	subs	r7, r7, r3
 800a99c:	1ad2      	subs	r2, r2, r3
 800a99e:	9206      	str	r2, [sp, #24]
 800a9a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9a2:	1ad3      	subs	r3, r2, r3
 800a9a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a9a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9a8:	b1f3      	cbz	r3, 800a9e8 <_dtoa_r+0x7c0>
 800a9aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f000 80a9 	beq.w	800ab04 <_dtoa_r+0x8dc>
 800a9b2:	2c00      	cmp	r4, #0
 800a9b4:	dd10      	ble.n	800a9d8 <_dtoa_r+0x7b0>
 800a9b6:	4631      	mov	r1, r6
 800a9b8:	4622      	mov	r2, r4
 800a9ba:	4628      	mov	r0, r5
 800a9bc:	f001 f9f0 	bl	800bda0 <__pow5mult>
 800a9c0:	4652      	mov	r2, sl
 800a9c2:	4601      	mov	r1, r0
 800a9c4:	4606      	mov	r6, r0
 800a9c6:	4628      	mov	r0, r5
 800a9c8:	f001 f946 	bl	800bc58 <__multiply>
 800a9cc:	4680      	mov	r8, r0
 800a9ce:	4651      	mov	r1, sl
 800a9d0:	4628      	mov	r0, r5
 800a9d2:	f001 f827 	bl	800ba24 <_Bfree>
 800a9d6:	46c2      	mov	sl, r8
 800a9d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9da:	1b1a      	subs	r2, r3, r4
 800a9dc:	d004      	beq.n	800a9e8 <_dtoa_r+0x7c0>
 800a9de:	4651      	mov	r1, sl
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	f001 f9dd 	bl	800bda0 <__pow5mult>
 800a9e6:	4682      	mov	sl, r0
 800a9e8:	2101      	movs	r1, #1
 800a9ea:	4628      	mov	r0, r5
 800a9ec:	f001 f91e 	bl	800bc2c <__i2b>
 800a9f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	f340 8087 	ble.w	800ab08 <_dtoa_r+0x8e0>
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	4601      	mov	r1, r0
 800a9fe:	4628      	mov	r0, r5
 800aa00:	f001 f9ce 	bl	800bda0 <__pow5mult>
 800aa04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa06:	4604      	mov	r4, r0
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	f340 8080 	ble.w	800ab0e <_dtoa_r+0x8e6>
 800aa0e:	f04f 0800 	mov.w	r8, #0
 800aa12:	6923      	ldr	r3, [r4, #16]
 800aa14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa18:	6918      	ldr	r0, [r3, #16]
 800aa1a:	f001 f8b9 	bl	800bb90 <__hi0bits>
 800aa1e:	f1c0 0020 	rsb	r0, r0, #32
 800aa22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa24:	4418      	add	r0, r3
 800aa26:	f010 001f 	ands.w	r0, r0, #31
 800aa2a:	f000 8092 	beq.w	800ab52 <_dtoa_r+0x92a>
 800aa2e:	f1c0 0320 	rsb	r3, r0, #32
 800aa32:	2b04      	cmp	r3, #4
 800aa34:	f340 808a 	ble.w	800ab4c <_dtoa_r+0x924>
 800aa38:	f1c0 001c 	rsb	r0, r0, #28
 800aa3c:	9b06      	ldr	r3, [sp, #24]
 800aa3e:	4407      	add	r7, r0
 800aa40:	4403      	add	r3, r0
 800aa42:	9306      	str	r3, [sp, #24]
 800aa44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa46:	4403      	add	r3, r0
 800aa48:	9309      	str	r3, [sp, #36]	; 0x24
 800aa4a:	9b06      	ldr	r3, [sp, #24]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	dd05      	ble.n	800aa5c <_dtoa_r+0x834>
 800aa50:	4651      	mov	r1, sl
 800aa52:	461a      	mov	r2, r3
 800aa54:	4628      	mov	r0, r5
 800aa56:	f001 f9fd 	bl	800be54 <__lshift>
 800aa5a:	4682      	mov	sl, r0
 800aa5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	dd05      	ble.n	800aa6e <_dtoa_r+0x846>
 800aa62:	4621      	mov	r1, r4
 800aa64:	461a      	mov	r2, r3
 800aa66:	4628      	mov	r0, r5
 800aa68:	f001 f9f4 	bl	800be54 <__lshift>
 800aa6c:	4604      	mov	r4, r0
 800aa6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d070      	beq.n	800ab56 <_dtoa_r+0x92e>
 800aa74:	4621      	mov	r1, r4
 800aa76:	4650      	mov	r0, sl
 800aa78:	f001 fa58 	bl	800bf2c <__mcmp>
 800aa7c:	2800      	cmp	r0, #0
 800aa7e:	da6a      	bge.n	800ab56 <_dtoa_r+0x92e>
 800aa80:	2300      	movs	r3, #0
 800aa82:	4651      	mov	r1, sl
 800aa84:	220a      	movs	r2, #10
 800aa86:	4628      	mov	r0, r5
 800aa88:	f000 ffee 	bl	800ba68 <__multadd>
 800aa8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa8e:	4682      	mov	sl, r0
 800aa90:	f109 39ff 	add.w	r9, r9, #4294967295
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	f000 8193 	beq.w	800adc0 <_dtoa_r+0xb98>
 800aa9a:	4631      	mov	r1, r6
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	220a      	movs	r2, #10
 800aaa0:	4628      	mov	r0, r5
 800aaa2:	f000 ffe1 	bl	800ba68 <__multadd>
 800aaa6:	f1bb 0f00 	cmp.w	fp, #0
 800aaaa:	4606      	mov	r6, r0
 800aaac:	f300 8093 	bgt.w	800abd6 <_dtoa_r+0x9ae>
 800aab0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aab2:	2b02      	cmp	r3, #2
 800aab4:	dc57      	bgt.n	800ab66 <_dtoa_r+0x93e>
 800aab6:	e08e      	b.n	800abd6 <_dtoa_r+0x9ae>
 800aab8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aaba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aabe:	e756      	b.n	800a96e <_dtoa_r+0x746>
 800aac0:	9b02      	ldr	r3, [sp, #8]
 800aac2:	1e5c      	subs	r4, r3, #1
 800aac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aac6:	42a3      	cmp	r3, r4
 800aac8:	bfb7      	itett	lt
 800aaca:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aacc:	1b1c      	subge	r4, r3, r4
 800aace:	1ae2      	sublt	r2, r4, r3
 800aad0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800aad2:	bfbe      	ittt	lt
 800aad4:	940a      	strlt	r4, [sp, #40]	; 0x28
 800aad6:	189b      	addlt	r3, r3, r2
 800aad8:	930e      	strlt	r3, [sp, #56]	; 0x38
 800aada:	9b02      	ldr	r3, [sp, #8]
 800aadc:	bfb8      	it	lt
 800aade:	2400      	movlt	r4, #0
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	bfbb      	ittet	lt
 800aae4:	9b06      	ldrlt	r3, [sp, #24]
 800aae6:	9a02      	ldrlt	r2, [sp, #8]
 800aae8:	9f06      	ldrge	r7, [sp, #24]
 800aaea:	1a9f      	sublt	r7, r3, r2
 800aaec:	bfac      	ite	ge
 800aaee:	9b02      	ldrge	r3, [sp, #8]
 800aaf0:	2300      	movlt	r3, #0
 800aaf2:	e73e      	b.n	800a972 <_dtoa_r+0x74a>
 800aaf4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800aaf6:	9f06      	ldr	r7, [sp, #24]
 800aaf8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800aafa:	e745      	b.n	800a988 <_dtoa_r+0x760>
 800aafc:	3fe00000 	.word	0x3fe00000
 800ab00:	40240000 	.word	0x40240000
 800ab04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab06:	e76a      	b.n	800a9de <_dtoa_r+0x7b6>
 800ab08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	dc19      	bgt.n	800ab42 <_dtoa_r+0x91a>
 800ab0e:	9b04      	ldr	r3, [sp, #16]
 800ab10:	b9bb      	cbnz	r3, 800ab42 <_dtoa_r+0x91a>
 800ab12:	9b05      	ldr	r3, [sp, #20]
 800ab14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab18:	b99b      	cbnz	r3, 800ab42 <_dtoa_r+0x91a>
 800ab1a:	9b05      	ldr	r3, [sp, #20]
 800ab1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab20:	0d1b      	lsrs	r3, r3, #20
 800ab22:	051b      	lsls	r3, r3, #20
 800ab24:	b183      	cbz	r3, 800ab48 <_dtoa_r+0x920>
 800ab26:	f04f 0801 	mov.w	r8, #1
 800ab2a:	9b06      	ldr	r3, [sp, #24]
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	9306      	str	r3, [sp, #24]
 800ab30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab32:	3301      	adds	r3, #1
 800ab34:	9309      	str	r3, [sp, #36]	; 0x24
 800ab36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	f47f af6a 	bne.w	800aa12 <_dtoa_r+0x7ea>
 800ab3e:	2001      	movs	r0, #1
 800ab40:	e76f      	b.n	800aa22 <_dtoa_r+0x7fa>
 800ab42:	f04f 0800 	mov.w	r8, #0
 800ab46:	e7f6      	b.n	800ab36 <_dtoa_r+0x90e>
 800ab48:	4698      	mov	r8, r3
 800ab4a:	e7f4      	b.n	800ab36 <_dtoa_r+0x90e>
 800ab4c:	f43f af7d 	beq.w	800aa4a <_dtoa_r+0x822>
 800ab50:	4618      	mov	r0, r3
 800ab52:	301c      	adds	r0, #28
 800ab54:	e772      	b.n	800aa3c <_dtoa_r+0x814>
 800ab56:	9b02      	ldr	r3, [sp, #8]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	dc36      	bgt.n	800abca <_dtoa_r+0x9a2>
 800ab5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab5e:	2b02      	cmp	r3, #2
 800ab60:	dd33      	ble.n	800abca <_dtoa_r+0x9a2>
 800ab62:	f8dd b008 	ldr.w	fp, [sp, #8]
 800ab66:	f1bb 0f00 	cmp.w	fp, #0
 800ab6a:	d10d      	bne.n	800ab88 <_dtoa_r+0x960>
 800ab6c:	4621      	mov	r1, r4
 800ab6e:	465b      	mov	r3, fp
 800ab70:	2205      	movs	r2, #5
 800ab72:	4628      	mov	r0, r5
 800ab74:	f000 ff78 	bl	800ba68 <__multadd>
 800ab78:	4601      	mov	r1, r0
 800ab7a:	4604      	mov	r4, r0
 800ab7c:	4650      	mov	r0, sl
 800ab7e:	f001 f9d5 	bl	800bf2c <__mcmp>
 800ab82:	2800      	cmp	r0, #0
 800ab84:	f73f adb6 	bgt.w	800a6f4 <_dtoa_r+0x4cc>
 800ab88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ab8a:	9f08      	ldr	r7, [sp, #32]
 800ab8c:	ea6f 0903 	mvn.w	r9, r3
 800ab90:	f04f 0800 	mov.w	r8, #0
 800ab94:	4621      	mov	r1, r4
 800ab96:	4628      	mov	r0, r5
 800ab98:	f000 ff44 	bl	800ba24 <_Bfree>
 800ab9c:	2e00      	cmp	r6, #0
 800ab9e:	f43f aea4 	beq.w	800a8ea <_dtoa_r+0x6c2>
 800aba2:	f1b8 0f00 	cmp.w	r8, #0
 800aba6:	d005      	beq.n	800abb4 <_dtoa_r+0x98c>
 800aba8:	45b0      	cmp	r8, r6
 800abaa:	d003      	beq.n	800abb4 <_dtoa_r+0x98c>
 800abac:	4641      	mov	r1, r8
 800abae:	4628      	mov	r0, r5
 800abb0:	f000 ff38 	bl	800ba24 <_Bfree>
 800abb4:	4631      	mov	r1, r6
 800abb6:	4628      	mov	r0, r5
 800abb8:	f000 ff34 	bl	800ba24 <_Bfree>
 800abbc:	e695      	b.n	800a8ea <_dtoa_r+0x6c2>
 800abbe:	2400      	movs	r4, #0
 800abc0:	4626      	mov	r6, r4
 800abc2:	e7e1      	b.n	800ab88 <_dtoa_r+0x960>
 800abc4:	46c1      	mov	r9, r8
 800abc6:	4626      	mov	r6, r4
 800abc8:	e594      	b.n	800a6f4 <_dtoa_r+0x4cc>
 800abca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abcc:	f8dd b008 	ldr.w	fp, [sp, #8]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	f000 80fc 	beq.w	800adce <_dtoa_r+0xba6>
 800abd6:	2f00      	cmp	r7, #0
 800abd8:	dd05      	ble.n	800abe6 <_dtoa_r+0x9be>
 800abda:	4631      	mov	r1, r6
 800abdc:	463a      	mov	r2, r7
 800abde:	4628      	mov	r0, r5
 800abe0:	f001 f938 	bl	800be54 <__lshift>
 800abe4:	4606      	mov	r6, r0
 800abe6:	f1b8 0f00 	cmp.w	r8, #0
 800abea:	d05c      	beq.n	800aca6 <_dtoa_r+0xa7e>
 800abec:	4628      	mov	r0, r5
 800abee:	6871      	ldr	r1, [r6, #4]
 800abf0:	f000 fed8 	bl	800b9a4 <_Balloc>
 800abf4:	4607      	mov	r7, r0
 800abf6:	b928      	cbnz	r0, 800ac04 <_dtoa_r+0x9dc>
 800abf8:	4602      	mov	r2, r0
 800abfa:	f240 21ea 	movw	r1, #746	; 0x2ea
 800abfe:	4b7e      	ldr	r3, [pc, #504]	; (800adf8 <_dtoa_r+0xbd0>)
 800ac00:	f7ff bb26 	b.w	800a250 <_dtoa_r+0x28>
 800ac04:	6932      	ldr	r2, [r6, #16]
 800ac06:	f106 010c 	add.w	r1, r6, #12
 800ac0a:	3202      	adds	r2, #2
 800ac0c:	0092      	lsls	r2, r2, #2
 800ac0e:	300c      	adds	r0, #12
 800ac10:	f7fd fa56 	bl	80080c0 <memcpy>
 800ac14:	2201      	movs	r2, #1
 800ac16:	4639      	mov	r1, r7
 800ac18:	4628      	mov	r0, r5
 800ac1a:	f001 f91b 	bl	800be54 <__lshift>
 800ac1e:	46b0      	mov	r8, r6
 800ac20:	4606      	mov	r6, r0
 800ac22:	9b08      	ldr	r3, [sp, #32]
 800ac24:	3301      	adds	r3, #1
 800ac26:	9302      	str	r3, [sp, #8]
 800ac28:	9b08      	ldr	r3, [sp, #32]
 800ac2a:	445b      	add	r3, fp
 800ac2c:	930a      	str	r3, [sp, #40]	; 0x28
 800ac2e:	9b04      	ldr	r3, [sp, #16]
 800ac30:	f003 0301 	and.w	r3, r3, #1
 800ac34:	9309      	str	r3, [sp, #36]	; 0x24
 800ac36:	9b02      	ldr	r3, [sp, #8]
 800ac38:	4621      	mov	r1, r4
 800ac3a:	4650      	mov	r0, sl
 800ac3c:	f103 3bff 	add.w	fp, r3, #4294967295
 800ac40:	f7ff fa63 	bl	800a10a <quorem>
 800ac44:	4603      	mov	r3, r0
 800ac46:	4641      	mov	r1, r8
 800ac48:	3330      	adds	r3, #48	; 0x30
 800ac4a:	9004      	str	r0, [sp, #16]
 800ac4c:	4650      	mov	r0, sl
 800ac4e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac50:	f001 f96c 	bl	800bf2c <__mcmp>
 800ac54:	4632      	mov	r2, r6
 800ac56:	9006      	str	r0, [sp, #24]
 800ac58:	4621      	mov	r1, r4
 800ac5a:	4628      	mov	r0, r5
 800ac5c:	f001 f982 	bl	800bf64 <__mdiff>
 800ac60:	68c2      	ldr	r2, [r0, #12]
 800ac62:	4607      	mov	r7, r0
 800ac64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac66:	bb02      	cbnz	r2, 800acaa <_dtoa_r+0xa82>
 800ac68:	4601      	mov	r1, r0
 800ac6a:	4650      	mov	r0, sl
 800ac6c:	f001 f95e 	bl	800bf2c <__mcmp>
 800ac70:	4602      	mov	r2, r0
 800ac72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac74:	4639      	mov	r1, r7
 800ac76:	4628      	mov	r0, r5
 800ac78:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800ac7c:	f000 fed2 	bl	800ba24 <_Bfree>
 800ac80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac84:	9f02      	ldr	r7, [sp, #8]
 800ac86:	ea43 0102 	orr.w	r1, r3, r2
 800ac8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac8c:	430b      	orrs	r3, r1
 800ac8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac90:	d10d      	bne.n	800acae <_dtoa_r+0xa86>
 800ac92:	2b39      	cmp	r3, #57	; 0x39
 800ac94:	d027      	beq.n	800ace6 <_dtoa_r+0xabe>
 800ac96:	9a06      	ldr	r2, [sp, #24]
 800ac98:	2a00      	cmp	r2, #0
 800ac9a:	dd01      	ble.n	800aca0 <_dtoa_r+0xa78>
 800ac9c:	9b04      	ldr	r3, [sp, #16]
 800ac9e:	3331      	adds	r3, #49	; 0x31
 800aca0:	f88b 3000 	strb.w	r3, [fp]
 800aca4:	e776      	b.n	800ab94 <_dtoa_r+0x96c>
 800aca6:	4630      	mov	r0, r6
 800aca8:	e7b9      	b.n	800ac1e <_dtoa_r+0x9f6>
 800acaa:	2201      	movs	r2, #1
 800acac:	e7e2      	b.n	800ac74 <_dtoa_r+0xa4c>
 800acae:	9906      	ldr	r1, [sp, #24]
 800acb0:	2900      	cmp	r1, #0
 800acb2:	db04      	blt.n	800acbe <_dtoa_r+0xa96>
 800acb4:	9822      	ldr	r0, [sp, #136]	; 0x88
 800acb6:	4301      	orrs	r1, r0
 800acb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800acba:	4301      	orrs	r1, r0
 800acbc:	d120      	bne.n	800ad00 <_dtoa_r+0xad8>
 800acbe:	2a00      	cmp	r2, #0
 800acc0:	ddee      	ble.n	800aca0 <_dtoa_r+0xa78>
 800acc2:	4651      	mov	r1, sl
 800acc4:	2201      	movs	r2, #1
 800acc6:	4628      	mov	r0, r5
 800acc8:	9302      	str	r3, [sp, #8]
 800acca:	f001 f8c3 	bl	800be54 <__lshift>
 800acce:	4621      	mov	r1, r4
 800acd0:	4682      	mov	sl, r0
 800acd2:	f001 f92b 	bl	800bf2c <__mcmp>
 800acd6:	2800      	cmp	r0, #0
 800acd8:	9b02      	ldr	r3, [sp, #8]
 800acda:	dc02      	bgt.n	800ace2 <_dtoa_r+0xaba>
 800acdc:	d1e0      	bne.n	800aca0 <_dtoa_r+0xa78>
 800acde:	07da      	lsls	r2, r3, #31
 800ace0:	d5de      	bpl.n	800aca0 <_dtoa_r+0xa78>
 800ace2:	2b39      	cmp	r3, #57	; 0x39
 800ace4:	d1da      	bne.n	800ac9c <_dtoa_r+0xa74>
 800ace6:	2339      	movs	r3, #57	; 0x39
 800ace8:	f88b 3000 	strb.w	r3, [fp]
 800acec:	463b      	mov	r3, r7
 800acee:	461f      	mov	r7, r3
 800acf0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800acf4:	3b01      	subs	r3, #1
 800acf6:	2a39      	cmp	r2, #57	; 0x39
 800acf8:	d050      	beq.n	800ad9c <_dtoa_r+0xb74>
 800acfa:	3201      	adds	r2, #1
 800acfc:	701a      	strb	r2, [r3, #0]
 800acfe:	e749      	b.n	800ab94 <_dtoa_r+0x96c>
 800ad00:	2a00      	cmp	r2, #0
 800ad02:	dd03      	ble.n	800ad0c <_dtoa_r+0xae4>
 800ad04:	2b39      	cmp	r3, #57	; 0x39
 800ad06:	d0ee      	beq.n	800ace6 <_dtoa_r+0xabe>
 800ad08:	3301      	adds	r3, #1
 800ad0a:	e7c9      	b.n	800aca0 <_dtoa_r+0xa78>
 800ad0c:	9a02      	ldr	r2, [sp, #8]
 800ad0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ad10:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ad14:	428a      	cmp	r2, r1
 800ad16:	d02a      	beq.n	800ad6e <_dtoa_r+0xb46>
 800ad18:	4651      	mov	r1, sl
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	220a      	movs	r2, #10
 800ad1e:	4628      	mov	r0, r5
 800ad20:	f000 fea2 	bl	800ba68 <__multadd>
 800ad24:	45b0      	cmp	r8, r6
 800ad26:	4682      	mov	sl, r0
 800ad28:	f04f 0300 	mov.w	r3, #0
 800ad2c:	f04f 020a 	mov.w	r2, #10
 800ad30:	4641      	mov	r1, r8
 800ad32:	4628      	mov	r0, r5
 800ad34:	d107      	bne.n	800ad46 <_dtoa_r+0xb1e>
 800ad36:	f000 fe97 	bl	800ba68 <__multadd>
 800ad3a:	4680      	mov	r8, r0
 800ad3c:	4606      	mov	r6, r0
 800ad3e:	9b02      	ldr	r3, [sp, #8]
 800ad40:	3301      	adds	r3, #1
 800ad42:	9302      	str	r3, [sp, #8]
 800ad44:	e777      	b.n	800ac36 <_dtoa_r+0xa0e>
 800ad46:	f000 fe8f 	bl	800ba68 <__multadd>
 800ad4a:	4631      	mov	r1, r6
 800ad4c:	4680      	mov	r8, r0
 800ad4e:	2300      	movs	r3, #0
 800ad50:	220a      	movs	r2, #10
 800ad52:	4628      	mov	r0, r5
 800ad54:	f000 fe88 	bl	800ba68 <__multadd>
 800ad58:	4606      	mov	r6, r0
 800ad5a:	e7f0      	b.n	800ad3e <_dtoa_r+0xb16>
 800ad5c:	f1bb 0f00 	cmp.w	fp, #0
 800ad60:	bfcc      	ite	gt
 800ad62:	465f      	movgt	r7, fp
 800ad64:	2701      	movle	r7, #1
 800ad66:	f04f 0800 	mov.w	r8, #0
 800ad6a:	9a08      	ldr	r2, [sp, #32]
 800ad6c:	4417      	add	r7, r2
 800ad6e:	4651      	mov	r1, sl
 800ad70:	2201      	movs	r2, #1
 800ad72:	4628      	mov	r0, r5
 800ad74:	9302      	str	r3, [sp, #8]
 800ad76:	f001 f86d 	bl	800be54 <__lshift>
 800ad7a:	4621      	mov	r1, r4
 800ad7c:	4682      	mov	sl, r0
 800ad7e:	f001 f8d5 	bl	800bf2c <__mcmp>
 800ad82:	2800      	cmp	r0, #0
 800ad84:	dcb2      	bgt.n	800acec <_dtoa_r+0xac4>
 800ad86:	d102      	bne.n	800ad8e <_dtoa_r+0xb66>
 800ad88:	9b02      	ldr	r3, [sp, #8]
 800ad8a:	07db      	lsls	r3, r3, #31
 800ad8c:	d4ae      	bmi.n	800acec <_dtoa_r+0xac4>
 800ad8e:	463b      	mov	r3, r7
 800ad90:	461f      	mov	r7, r3
 800ad92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad96:	2a30      	cmp	r2, #48	; 0x30
 800ad98:	d0fa      	beq.n	800ad90 <_dtoa_r+0xb68>
 800ad9a:	e6fb      	b.n	800ab94 <_dtoa_r+0x96c>
 800ad9c:	9a08      	ldr	r2, [sp, #32]
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d1a5      	bne.n	800acee <_dtoa_r+0xac6>
 800ada2:	2331      	movs	r3, #49	; 0x31
 800ada4:	f109 0901 	add.w	r9, r9, #1
 800ada8:	7013      	strb	r3, [r2, #0]
 800adaa:	e6f3      	b.n	800ab94 <_dtoa_r+0x96c>
 800adac:	4b13      	ldr	r3, [pc, #76]	; (800adfc <_dtoa_r+0xbd4>)
 800adae:	f7ff baa7 	b.w	800a300 <_dtoa_r+0xd8>
 800adb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	f47f aa80 	bne.w	800a2ba <_dtoa_r+0x92>
 800adba:	4b11      	ldr	r3, [pc, #68]	; (800ae00 <_dtoa_r+0xbd8>)
 800adbc:	f7ff baa0 	b.w	800a300 <_dtoa_r+0xd8>
 800adc0:	f1bb 0f00 	cmp.w	fp, #0
 800adc4:	dc03      	bgt.n	800adce <_dtoa_r+0xba6>
 800adc6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800adc8:	2b02      	cmp	r3, #2
 800adca:	f73f aecc 	bgt.w	800ab66 <_dtoa_r+0x93e>
 800adce:	9f08      	ldr	r7, [sp, #32]
 800add0:	4621      	mov	r1, r4
 800add2:	4650      	mov	r0, sl
 800add4:	f7ff f999 	bl	800a10a <quorem>
 800add8:	9a08      	ldr	r2, [sp, #32]
 800adda:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800adde:	f807 3b01 	strb.w	r3, [r7], #1
 800ade2:	1aba      	subs	r2, r7, r2
 800ade4:	4593      	cmp	fp, r2
 800ade6:	ddb9      	ble.n	800ad5c <_dtoa_r+0xb34>
 800ade8:	4651      	mov	r1, sl
 800adea:	2300      	movs	r3, #0
 800adec:	220a      	movs	r2, #10
 800adee:	4628      	mov	r0, r5
 800adf0:	f000 fe3a 	bl	800ba68 <__multadd>
 800adf4:	4682      	mov	sl, r0
 800adf6:	e7eb      	b.n	800add0 <_dtoa_r+0xba8>
 800adf8:	0800cbcc 	.word	0x0800cbcc
 800adfc:	0800c9cd 	.word	0x0800c9cd
 800ae00:	0800cb49 	.word	0x0800cb49

0800ae04 <__sflush_r>:
 800ae04:	898a      	ldrh	r2, [r1, #12]
 800ae06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae0a:	4605      	mov	r5, r0
 800ae0c:	0710      	lsls	r0, r2, #28
 800ae0e:	460c      	mov	r4, r1
 800ae10:	d458      	bmi.n	800aec4 <__sflush_r+0xc0>
 800ae12:	684b      	ldr	r3, [r1, #4]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	dc05      	bgt.n	800ae24 <__sflush_r+0x20>
 800ae18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	dc02      	bgt.n	800ae24 <__sflush_r+0x20>
 800ae1e:	2000      	movs	r0, #0
 800ae20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae26:	2e00      	cmp	r6, #0
 800ae28:	d0f9      	beq.n	800ae1e <__sflush_r+0x1a>
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ae30:	682f      	ldr	r7, [r5, #0]
 800ae32:	602b      	str	r3, [r5, #0]
 800ae34:	d032      	beq.n	800ae9c <__sflush_r+0x98>
 800ae36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae38:	89a3      	ldrh	r3, [r4, #12]
 800ae3a:	075a      	lsls	r2, r3, #29
 800ae3c:	d505      	bpl.n	800ae4a <__sflush_r+0x46>
 800ae3e:	6863      	ldr	r3, [r4, #4]
 800ae40:	1ac0      	subs	r0, r0, r3
 800ae42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae44:	b10b      	cbz	r3, 800ae4a <__sflush_r+0x46>
 800ae46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae48:	1ac0      	subs	r0, r0, r3
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	4602      	mov	r2, r0
 800ae4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae50:	4628      	mov	r0, r5
 800ae52:	6a21      	ldr	r1, [r4, #32]
 800ae54:	47b0      	blx	r6
 800ae56:	1c43      	adds	r3, r0, #1
 800ae58:	89a3      	ldrh	r3, [r4, #12]
 800ae5a:	d106      	bne.n	800ae6a <__sflush_r+0x66>
 800ae5c:	6829      	ldr	r1, [r5, #0]
 800ae5e:	291d      	cmp	r1, #29
 800ae60:	d82c      	bhi.n	800aebc <__sflush_r+0xb8>
 800ae62:	4a2a      	ldr	r2, [pc, #168]	; (800af0c <__sflush_r+0x108>)
 800ae64:	40ca      	lsrs	r2, r1
 800ae66:	07d6      	lsls	r6, r2, #31
 800ae68:	d528      	bpl.n	800aebc <__sflush_r+0xb8>
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	6062      	str	r2, [r4, #4]
 800ae6e:	6922      	ldr	r2, [r4, #16]
 800ae70:	04d9      	lsls	r1, r3, #19
 800ae72:	6022      	str	r2, [r4, #0]
 800ae74:	d504      	bpl.n	800ae80 <__sflush_r+0x7c>
 800ae76:	1c42      	adds	r2, r0, #1
 800ae78:	d101      	bne.n	800ae7e <__sflush_r+0x7a>
 800ae7a:	682b      	ldr	r3, [r5, #0]
 800ae7c:	b903      	cbnz	r3, 800ae80 <__sflush_r+0x7c>
 800ae7e:	6560      	str	r0, [r4, #84]	; 0x54
 800ae80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae82:	602f      	str	r7, [r5, #0]
 800ae84:	2900      	cmp	r1, #0
 800ae86:	d0ca      	beq.n	800ae1e <__sflush_r+0x1a>
 800ae88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae8c:	4299      	cmp	r1, r3
 800ae8e:	d002      	beq.n	800ae96 <__sflush_r+0x92>
 800ae90:	4628      	mov	r0, r5
 800ae92:	f7fd f92b 	bl	80080ec <_free_r>
 800ae96:	2000      	movs	r0, #0
 800ae98:	6360      	str	r0, [r4, #52]	; 0x34
 800ae9a:	e7c1      	b.n	800ae20 <__sflush_r+0x1c>
 800ae9c:	6a21      	ldr	r1, [r4, #32]
 800ae9e:	2301      	movs	r3, #1
 800aea0:	4628      	mov	r0, r5
 800aea2:	47b0      	blx	r6
 800aea4:	1c41      	adds	r1, r0, #1
 800aea6:	d1c7      	bne.n	800ae38 <__sflush_r+0x34>
 800aea8:	682b      	ldr	r3, [r5, #0]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d0c4      	beq.n	800ae38 <__sflush_r+0x34>
 800aeae:	2b1d      	cmp	r3, #29
 800aeb0:	d001      	beq.n	800aeb6 <__sflush_r+0xb2>
 800aeb2:	2b16      	cmp	r3, #22
 800aeb4:	d101      	bne.n	800aeba <__sflush_r+0xb6>
 800aeb6:	602f      	str	r7, [r5, #0]
 800aeb8:	e7b1      	b.n	800ae1e <__sflush_r+0x1a>
 800aeba:	89a3      	ldrh	r3, [r4, #12]
 800aebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aec0:	81a3      	strh	r3, [r4, #12]
 800aec2:	e7ad      	b.n	800ae20 <__sflush_r+0x1c>
 800aec4:	690f      	ldr	r7, [r1, #16]
 800aec6:	2f00      	cmp	r7, #0
 800aec8:	d0a9      	beq.n	800ae1e <__sflush_r+0x1a>
 800aeca:	0793      	lsls	r3, r2, #30
 800aecc:	bf18      	it	ne
 800aece:	2300      	movne	r3, #0
 800aed0:	680e      	ldr	r6, [r1, #0]
 800aed2:	bf08      	it	eq
 800aed4:	694b      	ldreq	r3, [r1, #20]
 800aed6:	eba6 0807 	sub.w	r8, r6, r7
 800aeda:	600f      	str	r7, [r1, #0]
 800aedc:	608b      	str	r3, [r1, #8]
 800aede:	f1b8 0f00 	cmp.w	r8, #0
 800aee2:	dd9c      	ble.n	800ae1e <__sflush_r+0x1a>
 800aee4:	4643      	mov	r3, r8
 800aee6:	463a      	mov	r2, r7
 800aee8:	4628      	mov	r0, r5
 800aeea:	6a21      	ldr	r1, [r4, #32]
 800aeec:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aeee:	47b0      	blx	r6
 800aef0:	2800      	cmp	r0, #0
 800aef2:	dc06      	bgt.n	800af02 <__sflush_r+0xfe>
 800aef4:	89a3      	ldrh	r3, [r4, #12]
 800aef6:	f04f 30ff 	mov.w	r0, #4294967295
 800aefa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aefe:	81a3      	strh	r3, [r4, #12]
 800af00:	e78e      	b.n	800ae20 <__sflush_r+0x1c>
 800af02:	4407      	add	r7, r0
 800af04:	eba8 0800 	sub.w	r8, r8, r0
 800af08:	e7e9      	b.n	800aede <__sflush_r+0xda>
 800af0a:	bf00      	nop
 800af0c:	20400001 	.word	0x20400001

0800af10 <_fflush_r>:
 800af10:	b538      	push	{r3, r4, r5, lr}
 800af12:	690b      	ldr	r3, [r1, #16]
 800af14:	4605      	mov	r5, r0
 800af16:	460c      	mov	r4, r1
 800af18:	b913      	cbnz	r3, 800af20 <_fflush_r+0x10>
 800af1a:	2500      	movs	r5, #0
 800af1c:	4628      	mov	r0, r5
 800af1e:	bd38      	pop	{r3, r4, r5, pc}
 800af20:	b118      	cbz	r0, 800af2a <_fflush_r+0x1a>
 800af22:	6983      	ldr	r3, [r0, #24]
 800af24:	b90b      	cbnz	r3, 800af2a <_fflush_r+0x1a>
 800af26:	f000 f887 	bl	800b038 <__sinit>
 800af2a:	4b14      	ldr	r3, [pc, #80]	; (800af7c <_fflush_r+0x6c>)
 800af2c:	429c      	cmp	r4, r3
 800af2e:	d11b      	bne.n	800af68 <_fflush_r+0x58>
 800af30:	686c      	ldr	r4, [r5, #4]
 800af32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d0ef      	beq.n	800af1a <_fflush_r+0xa>
 800af3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af3c:	07d0      	lsls	r0, r2, #31
 800af3e:	d404      	bmi.n	800af4a <_fflush_r+0x3a>
 800af40:	0599      	lsls	r1, r3, #22
 800af42:	d402      	bmi.n	800af4a <_fflush_r+0x3a>
 800af44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af46:	f000 fc80 	bl	800b84a <__retarget_lock_acquire_recursive>
 800af4a:	4628      	mov	r0, r5
 800af4c:	4621      	mov	r1, r4
 800af4e:	f7ff ff59 	bl	800ae04 <__sflush_r>
 800af52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af54:	4605      	mov	r5, r0
 800af56:	07da      	lsls	r2, r3, #31
 800af58:	d4e0      	bmi.n	800af1c <_fflush_r+0xc>
 800af5a:	89a3      	ldrh	r3, [r4, #12]
 800af5c:	059b      	lsls	r3, r3, #22
 800af5e:	d4dd      	bmi.n	800af1c <_fflush_r+0xc>
 800af60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af62:	f000 fc73 	bl	800b84c <__retarget_lock_release_recursive>
 800af66:	e7d9      	b.n	800af1c <_fflush_r+0xc>
 800af68:	4b05      	ldr	r3, [pc, #20]	; (800af80 <_fflush_r+0x70>)
 800af6a:	429c      	cmp	r4, r3
 800af6c:	d101      	bne.n	800af72 <_fflush_r+0x62>
 800af6e:	68ac      	ldr	r4, [r5, #8]
 800af70:	e7df      	b.n	800af32 <_fflush_r+0x22>
 800af72:	4b04      	ldr	r3, [pc, #16]	; (800af84 <_fflush_r+0x74>)
 800af74:	429c      	cmp	r4, r3
 800af76:	bf08      	it	eq
 800af78:	68ec      	ldreq	r4, [r5, #12]
 800af7a:	e7da      	b.n	800af32 <_fflush_r+0x22>
 800af7c:	0800cc00 	.word	0x0800cc00
 800af80:	0800cc20 	.word	0x0800cc20
 800af84:	0800cbe0 	.word	0x0800cbe0

0800af88 <std>:
 800af88:	2300      	movs	r3, #0
 800af8a:	b510      	push	{r4, lr}
 800af8c:	4604      	mov	r4, r0
 800af8e:	e9c0 3300 	strd	r3, r3, [r0]
 800af92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af96:	6083      	str	r3, [r0, #8]
 800af98:	8181      	strh	r1, [r0, #12]
 800af9a:	6643      	str	r3, [r0, #100]	; 0x64
 800af9c:	81c2      	strh	r2, [r0, #14]
 800af9e:	6183      	str	r3, [r0, #24]
 800afa0:	4619      	mov	r1, r3
 800afa2:	2208      	movs	r2, #8
 800afa4:	305c      	adds	r0, #92	; 0x5c
 800afa6:	f7fd f899 	bl	80080dc <memset>
 800afaa:	4b05      	ldr	r3, [pc, #20]	; (800afc0 <std+0x38>)
 800afac:	6224      	str	r4, [r4, #32]
 800afae:	6263      	str	r3, [r4, #36]	; 0x24
 800afb0:	4b04      	ldr	r3, [pc, #16]	; (800afc4 <std+0x3c>)
 800afb2:	62a3      	str	r3, [r4, #40]	; 0x28
 800afb4:	4b04      	ldr	r3, [pc, #16]	; (800afc8 <std+0x40>)
 800afb6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800afb8:	4b04      	ldr	r3, [pc, #16]	; (800afcc <std+0x44>)
 800afba:	6323      	str	r3, [r4, #48]	; 0x30
 800afbc:	bd10      	pop	{r4, pc}
 800afbe:	bf00      	nop
 800afc0:	0800c6c9 	.word	0x0800c6c9
 800afc4:	0800c6eb 	.word	0x0800c6eb
 800afc8:	0800c723 	.word	0x0800c723
 800afcc:	0800c747 	.word	0x0800c747

0800afd0 <_cleanup_r>:
 800afd0:	4901      	ldr	r1, [pc, #4]	; (800afd8 <_cleanup_r+0x8>)
 800afd2:	f000 b8af 	b.w	800b134 <_fwalk_reent>
 800afd6:	bf00      	nop
 800afd8:	0800af11 	.word	0x0800af11

0800afdc <__sfmoreglue>:
 800afdc:	b570      	push	{r4, r5, r6, lr}
 800afde:	2568      	movs	r5, #104	; 0x68
 800afe0:	1e4a      	subs	r2, r1, #1
 800afe2:	4355      	muls	r5, r2
 800afe4:	460e      	mov	r6, r1
 800afe6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800afea:	f7fd f8cb 	bl	8008184 <_malloc_r>
 800afee:	4604      	mov	r4, r0
 800aff0:	b140      	cbz	r0, 800b004 <__sfmoreglue+0x28>
 800aff2:	2100      	movs	r1, #0
 800aff4:	e9c0 1600 	strd	r1, r6, [r0]
 800aff8:	300c      	adds	r0, #12
 800affa:	60a0      	str	r0, [r4, #8]
 800affc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b000:	f7fd f86c 	bl	80080dc <memset>
 800b004:	4620      	mov	r0, r4
 800b006:	bd70      	pop	{r4, r5, r6, pc}

0800b008 <__sfp_lock_acquire>:
 800b008:	4801      	ldr	r0, [pc, #4]	; (800b010 <__sfp_lock_acquire+0x8>)
 800b00a:	f000 bc1e 	b.w	800b84a <__retarget_lock_acquire_recursive>
 800b00e:	bf00      	nop
 800b010:	20000a68 	.word	0x20000a68

0800b014 <__sfp_lock_release>:
 800b014:	4801      	ldr	r0, [pc, #4]	; (800b01c <__sfp_lock_release+0x8>)
 800b016:	f000 bc19 	b.w	800b84c <__retarget_lock_release_recursive>
 800b01a:	bf00      	nop
 800b01c:	20000a68 	.word	0x20000a68

0800b020 <__sinit_lock_acquire>:
 800b020:	4801      	ldr	r0, [pc, #4]	; (800b028 <__sinit_lock_acquire+0x8>)
 800b022:	f000 bc12 	b.w	800b84a <__retarget_lock_acquire_recursive>
 800b026:	bf00      	nop
 800b028:	20000a63 	.word	0x20000a63

0800b02c <__sinit_lock_release>:
 800b02c:	4801      	ldr	r0, [pc, #4]	; (800b034 <__sinit_lock_release+0x8>)
 800b02e:	f000 bc0d 	b.w	800b84c <__retarget_lock_release_recursive>
 800b032:	bf00      	nop
 800b034:	20000a63 	.word	0x20000a63

0800b038 <__sinit>:
 800b038:	b510      	push	{r4, lr}
 800b03a:	4604      	mov	r4, r0
 800b03c:	f7ff fff0 	bl	800b020 <__sinit_lock_acquire>
 800b040:	69a3      	ldr	r3, [r4, #24]
 800b042:	b11b      	cbz	r3, 800b04c <__sinit+0x14>
 800b044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b048:	f7ff bff0 	b.w	800b02c <__sinit_lock_release>
 800b04c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b050:	6523      	str	r3, [r4, #80]	; 0x50
 800b052:	4b13      	ldr	r3, [pc, #76]	; (800b0a0 <__sinit+0x68>)
 800b054:	4a13      	ldr	r2, [pc, #76]	; (800b0a4 <__sinit+0x6c>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	62a2      	str	r2, [r4, #40]	; 0x28
 800b05a:	42a3      	cmp	r3, r4
 800b05c:	bf08      	it	eq
 800b05e:	2301      	moveq	r3, #1
 800b060:	4620      	mov	r0, r4
 800b062:	bf08      	it	eq
 800b064:	61a3      	streq	r3, [r4, #24]
 800b066:	f000 f81f 	bl	800b0a8 <__sfp>
 800b06a:	6060      	str	r0, [r4, #4]
 800b06c:	4620      	mov	r0, r4
 800b06e:	f000 f81b 	bl	800b0a8 <__sfp>
 800b072:	60a0      	str	r0, [r4, #8]
 800b074:	4620      	mov	r0, r4
 800b076:	f000 f817 	bl	800b0a8 <__sfp>
 800b07a:	2200      	movs	r2, #0
 800b07c:	2104      	movs	r1, #4
 800b07e:	60e0      	str	r0, [r4, #12]
 800b080:	6860      	ldr	r0, [r4, #4]
 800b082:	f7ff ff81 	bl	800af88 <std>
 800b086:	2201      	movs	r2, #1
 800b088:	2109      	movs	r1, #9
 800b08a:	68a0      	ldr	r0, [r4, #8]
 800b08c:	f7ff ff7c 	bl	800af88 <std>
 800b090:	2202      	movs	r2, #2
 800b092:	2112      	movs	r1, #18
 800b094:	68e0      	ldr	r0, [r4, #12]
 800b096:	f7ff ff77 	bl	800af88 <std>
 800b09a:	2301      	movs	r3, #1
 800b09c:	61a3      	str	r3, [r4, #24]
 800b09e:	e7d1      	b.n	800b044 <__sinit+0xc>
 800b0a0:	0800c9a8 	.word	0x0800c9a8
 800b0a4:	0800afd1 	.word	0x0800afd1

0800b0a8 <__sfp>:
 800b0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0aa:	4607      	mov	r7, r0
 800b0ac:	f7ff ffac 	bl	800b008 <__sfp_lock_acquire>
 800b0b0:	4b1e      	ldr	r3, [pc, #120]	; (800b12c <__sfp+0x84>)
 800b0b2:	681e      	ldr	r6, [r3, #0]
 800b0b4:	69b3      	ldr	r3, [r6, #24]
 800b0b6:	b913      	cbnz	r3, 800b0be <__sfp+0x16>
 800b0b8:	4630      	mov	r0, r6
 800b0ba:	f7ff ffbd 	bl	800b038 <__sinit>
 800b0be:	3648      	adds	r6, #72	; 0x48
 800b0c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b0c4:	3b01      	subs	r3, #1
 800b0c6:	d503      	bpl.n	800b0d0 <__sfp+0x28>
 800b0c8:	6833      	ldr	r3, [r6, #0]
 800b0ca:	b30b      	cbz	r3, 800b110 <__sfp+0x68>
 800b0cc:	6836      	ldr	r6, [r6, #0]
 800b0ce:	e7f7      	b.n	800b0c0 <__sfp+0x18>
 800b0d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b0d4:	b9d5      	cbnz	r5, 800b10c <__sfp+0x64>
 800b0d6:	4b16      	ldr	r3, [pc, #88]	; (800b130 <__sfp+0x88>)
 800b0d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b0dc:	60e3      	str	r3, [r4, #12]
 800b0de:	6665      	str	r5, [r4, #100]	; 0x64
 800b0e0:	f000 fbb2 	bl	800b848 <__retarget_lock_init_recursive>
 800b0e4:	f7ff ff96 	bl	800b014 <__sfp_lock_release>
 800b0e8:	2208      	movs	r2, #8
 800b0ea:	4629      	mov	r1, r5
 800b0ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b0f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b0f4:	6025      	str	r5, [r4, #0]
 800b0f6:	61a5      	str	r5, [r4, #24]
 800b0f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b0fc:	f7fc ffee 	bl	80080dc <memset>
 800b100:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b104:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b108:	4620      	mov	r0, r4
 800b10a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b10c:	3468      	adds	r4, #104	; 0x68
 800b10e:	e7d9      	b.n	800b0c4 <__sfp+0x1c>
 800b110:	2104      	movs	r1, #4
 800b112:	4638      	mov	r0, r7
 800b114:	f7ff ff62 	bl	800afdc <__sfmoreglue>
 800b118:	4604      	mov	r4, r0
 800b11a:	6030      	str	r0, [r6, #0]
 800b11c:	2800      	cmp	r0, #0
 800b11e:	d1d5      	bne.n	800b0cc <__sfp+0x24>
 800b120:	f7ff ff78 	bl	800b014 <__sfp_lock_release>
 800b124:	230c      	movs	r3, #12
 800b126:	603b      	str	r3, [r7, #0]
 800b128:	e7ee      	b.n	800b108 <__sfp+0x60>
 800b12a:	bf00      	nop
 800b12c:	0800c9a8 	.word	0x0800c9a8
 800b130:	ffff0001 	.word	0xffff0001

0800b134 <_fwalk_reent>:
 800b134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b138:	4606      	mov	r6, r0
 800b13a:	4688      	mov	r8, r1
 800b13c:	2700      	movs	r7, #0
 800b13e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b142:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b146:	f1b9 0901 	subs.w	r9, r9, #1
 800b14a:	d505      	bpl.n	800b158 <_fwalk_reent+0x24>
 800b14c:	6824      	ldr	r4, [r4, #0]
 800b14e:	2c00      	cmp	r4, #0
 800b150:	d1f7      	bne.n	800b142 <_fwalk_reent+0xe>
 800b152:	4638      	mov	r0, r7
 800b154:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b158:	89ab      	ldrh	r3, [r5, #12]
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d907      	bls.n	800b16e <_fwalk_reent+0x3a>
 800b15e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b162:	3301      	adds	r3, #1
 800b164:	d003      	beq.n	800b16e <_fwalk_reent+0x3a>
 800b166:	4629      	mov	r1, r5
 800b168:	4630      	mov	r0, r6
 800b16a:	47c0      	blx	r8
 800b16c:	4307      	orrs	r7, r0
 800b16e:	3568      	adds	r5, #104	; 0x68
 800b170:	e7e9      	b.n	800b146 <_fwalk_reent+0x12>

0800b172 <rshift>:
 800b172:	6903      	ldr	r3, [r0, #16]
 800b174:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b178:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b17c:	f100 0414 	add.w	r4, r0, #20
 800b180:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b184:	dd46      	ble.n	800b214 <rshift+0xa2>
 800b186:	f011 011f 	ands.w	r1, r1, #31
 800b18a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b18e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b192:	d10c      	bne.n	800b1ae <rshift+0x3c>
 800b194:	4629      	mov	r1, r5
 800b196:	f100 0710 	add.w	r7, r0, #16
 800b19a:	42b1      	cmp	r1, r6
 800b19c:	d335      	bcc.n	800b20a <rshift+0x98>
 800b19e:	1a9b      	subs	r3, r3, r2
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	1eea      	subs	r2, r5, #3
 800b1a4:	4296      	cmp	r6, r2
 800b1a6:	bf38      	it	cc
 800b1a8:	2300      	movcc	r3, #0
 800b1aa:	4423      	add	r3, r4
 800b1ac:	e015      	b.n	800b1da <rshift+0x68>
 800b1ae:	46a1      	mov	r9, r4
 800b1b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b1b4:	f1c1 0820 	rsb	r8, r1, #32
 800b1b8:	40cf      	lsrs	r7, r1
 800b1ba:	f105 0e04 	add.w	lr, r5, #4
 800b1be:	4576      	cmp	r6, lr
 800b1c0:	46f4      	mov	ip, lr
 800b1c2:	d816      	bhi.n	800b1f2 <rshift+0x80>
 800b1c4:	1a9b      	subs	r3, r3, r2
 800b1c6:	009a      	lsls	r2, r3, #2
 800b1c8:	3a04      	subs	r2, #4
 800b1ca:	3501      	adds	r5, #1
 800b1cc:	42ae      	cmp	r6, r5
 800b1ce:	bf38      	it	cc
 800b1d0:	2200      	movcc	r2, #0
 800b1d2:	18a3      	adds	r3, r4, r2
 800b1d4:	50a7      	str	r7, [r4, r2]
 800b1d6:	b107      	cbz	r7, 800b1da <rshift+0x68>
 800b1d8:	3304      	adds	r3, #4
 800b1da:	42a3      	cmp	r3, r4
 800b1dc:	eba3 0204 	sub.w	r2, r3, r4
 800b1e0:	bf08      	it	eq
 800b1e2:	2300      	moveq	r3, #0
 800b1e4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b1e8:	6102      	str	r2, [r0, #16]
 800b1ea:	bf08      	it	eq
 800b1ec:	6143      	streq	r3, [r0, #20]
 800b1ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1f2:	f8dc c000 	ldr.w	ip, [ip]
 800b1f6:	fa0c fc08 	lsl.w	ip, ip, r8
 800b1fa:	ea4c 0707 	orr.w	r7, ip, r7
 800b1fe:	f849 7b04 	str.w	r7, [r9], #4
 800b202:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b206:	40cf      	lsrs	r7, r1
 800b208:	e7d9      	b.n	800b1be <rshift+0x4c>
 800b20a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b20e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b212:	e7c2      	b.n	800b19a <rshift+0x28>
 800b214:	4623      	mov	r3, r4
 800b216:	e7e0      	b.n	800b1da <rshift+0x68>

0800b218 <__hexdig_fun>:
 800b218:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b21c:	2b09      	cmp	r3, #9
 800b21e:	d802      	bhi.n	800b226 <__hexdig_fun+0xe>
 800b220:	3820      	subs	r0, #32
 800b222:	b2c0      	uxtb	r0, r0
 800b224:	4770      	bx	lr
 800b226:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b22a:	2b05      	cmp	r3, #5
 800b22c:	d801      	bhi.n	800b232 <__hexdig_fun+0x1a>
 800b22e:	3847      	subs	r0, #71	; 0x47
 800b230:	e7f7      	b.n	800b222 <__hexdig_fun+0xa>
 800b232:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b236:	2b05      	cmp	r3, #5
 800b238:	d801      	bhi.n	800b23e <__hexdig_fun+0x26>
 800b23a:	3827      	subs	r0, #39	; 0x27
 800b23c:	e7f1      	b.n	800b222 <__hexdig_fun+0xa>
 800b23e:	2000      	movs	r0, #0
 800b240:	4770      	bx	lr
	...

0800b244 <__gethex>:
 800b244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b248:	b08b      	sub	sp, #44	; 0x2c
 800b24a:	9306      	str	r3, [sp, #24]
 800b24c:	4bb9      	ldr	r3, [pc, #740]	; (800b534 <__gethex+0x2f0>)
 800b24e:	9002      	str	r0, [sp, #8]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	468b      	mov	fp, r1
 800b254:	4618      	mov	r0, r3
 800b256:	4690      	mov	r8, r2
 800b258:	9303      	str	r3, [sp, #12]
 800b25a:	f7f4 ff79 	bl	8000150 <strlen>
 800b25e:	4682      	mov	sl, r0
 800b260:	9b03      	ldr	r3, [sp, #12]
 800b262:	f8db 2000 	ldr.w	r2, [fp]
 800b266:	4403      	add	r3, r0
 800b268:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b26c:	9307      	str	r3, [sp, #28]
 800b26e:	1c93      	adds	r3, r2, #2
 800b270:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b274:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b278:	32fe      	adds	r2, #254	; 0xfe
 800b27a:	18d1      	adds	r1, r2, r3
 800b27c:	461f      	mov	r7, r3
 800b27e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b282:	9101      	str	r1, [sp, #4]
 800b284:	2830      	cmp	r0, #48	; 0x30
 800b286:	d0f8      	beq.n	800b27a <__gethex+0x36>
 800b288:	f7ff ffc6 	bl	800b218 <__hexdig_fun>
 800b28c:	4604      	mov	r4, r0
 800b28e:	2800      	cmp	r0, #0
 800b290:	d13a      	bne.n	800b308 <__gethex+0xc4>
 800b292:	4652      	mov	r2, sl
 800b294:	4638      	mov	r0, r7
 800b296:	9903      	ldr	r1, [sp, #12]
 800b298:	f001 fa59 	bl	800c74e <strncmp>
 800b29c:	4605      	mov	r5, r0
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	d166      	bne.n	800b370 <__gethex+0x12c>
 800b2a2:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b2a6:	eb07 060a 	add.w	r6, r7, sl
 800b2aa:	f7ff ffb5 	bl	800b218 <__hexdig_fun>
 800b2ae:	2800      	cmp	r0, #0
 800b2b0:	d060      	beq.n	800b374 <__gethex+0x130>
 800b2b2:	4633      	mov	r3, r6
 800b2b4:	7818      	ldrb	r0, [r3, #0]
 800b2b6:	461f      	mov	r7, r3
 800b2b8:	2830      	cmp	r0, #48	; 0x30
 800b2ba:	f103 0301 	add.w	r3, r3, #1
 800b2be:	d0f9      	beq.n	800b2b4 <__gethex+0x70>
 800b2c0:	f7ff ffaa 	bl	800b218 <__hexdig_fun>
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	fab0 f480 	clz	r4, r0
 800b2ca:	4635      	mov	r5, r6
 800b2cc:	0964      	lsrs	r4, r4, #5
 800b2ce:	9301      	str	r3, [sp, #4]
 800b2d0:	463a      	mov	r2, r7
 800b2d2:	4616      	mov	r6, r2
 800b2d4:	7830      	ldrb	r0, [r6, #0]
 800b2d6:	3201      	adds	r2, #1
 800b2d8:	f7ff ff9e 	bl	800b218 <__hexdig_fun>
 800b2dc:	2800      	cmp	r0, #0
 800b2de:	d1f8      	bne.n	800b2d2 <__gethex+0x8e>
 800b2e0:	4652      	mov	r2, sl
 800b2e2:	4630      	mov	r0, r6
 800b2e4:	9903      	ldr	r1, [sp, #12]
 800b2e6:	f001 fa32 	bl	800c74e <strncmp>
 800b2ea:	b980      	cbnz	r0, 800b30e <__gethex+0xca>
 800b2ec:	b94d      	cbnz	r5, 800b302 <__gethex+0xbe>
 800b2ee:	eb06 050a 	add.w	r5, r6, sl
 800b2f2:	462a      	mov	r2, r5
 800b2f4:	4616      	mov	r6, r2
 800b2f6:	7830      	ldrb	r0, [r6, #0]
 800b2f8:	3201      	adds	r2, #1
 800b2fa:	f7ff ff8d 	bl	800b218 <__hexdig_fun>
 800b2fe:	2800      	cmp	r0, #0
 800b300:	d1f8      	bne.n	800b2f4 <__gethex+0xb0>
 800b302:	1bad      	subs	r5, r5, r6
 800b304:	00ad      	lsls	r5, r5, #2
 800b306:	e004      	b.n	800b312 <__gethex+0xce>
 800b308:	2400      	movs	r4, #0
 800b30a:	4625      	mov	r5, r4
 800b30c:	e7e0      	b.n	800b2d0 <__gethex+0x8c>
 800b30e:	2d00      	cmp	r5, #0
 800b310:	d1f7      	bne.n	800b302 <__gethex+0xbe>
 800b312:	7833      	ldrb	r3, [r6, #0]
 800b314:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b318:	2b50      	cmp	r3, #80	; 0x50
 800b31a:	d139      	bne.n	800b390 <__gethex+0x14c>
 800b31c:	7873      	ldrb	r3, [r6, #1]
 800b31e:	2b2b      	cmp	r3, #43	; 0x2b
 800b320:	d02a      	beq.n	800b378 <__gethex+0x134>
 800b322:	2b2d      	cmp	r3, #45	; 0x2d
 800b324:	d02c      	beq.n	800b380 <__gethex+0x13c>
 800b326:	f04f 0900 	mov.w	r9, #0
 800b32a:	1c71      	adds	r1, r6, #1
 800b32c:	7808      	ldrb	r0, [r1, #0]
 800b32e:	f7ff ff73 	bl	800b218 <__hexdig_fun>
 800b332:	1e43      	subs	r3, r0, #1
 800b334:	b2db      	uxtb	r3, r3
 800b336:	2b18      	cmp	r3, #24
 800b338:	d82a      	bhi.n	800b390 <__gethex+0x14c>
 800b33a:	f1a0 0210 	sub.w	r2, r0, #16
 800b33e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b342:	f7ff ff69 	bl	800b218 <__hexdig_fun>
 800b346:	1e43      	subs	r3, r0, #1
 800b348:	b2db      	uxtb	r3, r3
 800b34a:	2b18      	cmp	r3, #24
 800b34c:	d91b      	bls.n	800b386 <__gethex+0x142>
 800b34e:	f1b9 0f00 	cmp.w	r9, #0
 800b352:	d000      	beq.n	800b356 <__gethex+0x112>
 800b354:	4252      	negs	r2, r2
 800b356:	4415      	add	r5, r2
 800b358:	f8cb 1000 	str.w	r1, [fp]
 800b35c:	b1d4      	cbz	r4, 800b394 <__gethex+0x150>
 800b35e:	9b01      	ldr	r3, [sp, #4]
 800b360:	2b00      	cmp	r3, #0
 800b362:	bf14      	ite	ne
 800b364:	2700      	movne	r7, #0
 800b366:	2706      	moveq	r7, #6
 800b368:	4638      	mov	r0, r7
 800b36a:	b00b      	add	sp, #44	; 0x2c
 800b36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b370:	463e      	mov	r6, r7
 800b372:	4625      	mov	r5, r4
 800b374:	2401      	movs	r4, #1
 800b376:	e7cc      	b.n	800b312 <__gethex+0xce>
 800b378:	f04f 0900 	mov.w	r9, #0
 800b37c:	1cb1      	adds	r1, r6, #2
 800b37e:	e7d5      	b.n	800b32c <__gethex+0xe8>
 800b380:	f04f 0901 	mov.w	r9, #1
 800b384:	e7fa      	b.n	800b37c <__gethex+0x138>
 800b386:	230a      	movs	r3, #10
 800b388:	fb03 0202 	mla	r2, r3, r2, r0
 800b38c:	3a10      	subs	r2, #16
 800b38e:	e7d6      	b.n	800b33e <__gethex+0xfa>
 800b390:	4631      	mov	r1, r6
 800b392:	e7e1      	b.n	800b358 <__gethex+0x114>
 800b394:	4621      	mov	r1, r4
 800b396:	1bf3      	subs	r3, r6, r7
 800b398:	3b01      	subs	r3, #1
 800b39a:	2b07      	cmp	r3, #7
 800b39c:	dc0a      	bgt.n	800b3b4 <__gethex+0x170>
 800b39e:	9802      	ldr	r0, [sp, #8]
 800b3a0:	f000 fb00 	bl	800b9a4 <_Balloc>
 800b3a4:	4604      	mov	r4, r0
 800b3a6:	b940      	cbnz	r0, 800b3ba <__gethex+0x176>
 800b3a8:	4602      	mov	r2, r0
 800b3aa:	21de      	movs	r1, #222	; 0xde
 800b3ac:	4b62      	ldr	r3, [pc, #392]	; (800b538 <__gethex+0x2f4>)
 800b3ae:	4863      	ldr	r0, [pc, #396]	; (800b53c <__gethex+0x2f8>)
 800b3b0:	f7fc fe24 	bl	8007ffc <__assert_func>
 800b3b4:	3101      	adds	r1, #1
 800b3b6:	105b      	asrs	r3, r3, #1
 800b3b8:	e7ef      	b.n	800b39a <__gethex+0x156>
 800b3ba:	f04f 0b00 	mov.w	fp, #0
 800b3be:	f100 0914 	add.w	r9, r0, #20
 800b3c2:	f1ca 0301 	rsb	r3, sl, #1
 800b3c6:	f8cd 9010 	str.w	r9, [sp, #16]
 800b3ca:	f8cd b004 	str.w	fp, [sp, #4]
 800b3ce:	9308      	str	r3, [sp, #32]
 800b3d0:	42b7      	cmp	r7, r6
 800b3d2:	d33f      	bcc.n	800b454 <__gethex+0x210>
 800b3d4:	9f04      	ldr	r7, [sp, #16]
 800b3d6:	9b01      	ldr	r3, [sp, #4]
 800b3d8:	f847 3b04 	str.w	r3, [r7], #4
 800b3dc:	eba7 0709 	sub.w	r7, r7, r9
 800b3e0:	10bf      	asrs	r7, r7, #2
 800b3e2:	6127      	str	r7, [r4, #16]
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f000 fbd3 	bl	800bb90 <__hi0bits>
 800b3ea:	017f      	lsls	r7, r7, #5
 800b3ec:	f8d8 6000 	ldr.w	r6, [r8]
 800b3f0:	1a3f      	subs	r7, r7, r0
 800b3f2:	42b7      	cmp	r7, r6
 800b3f4:	dd62      	ble.n	800b4bc <__gethex+0x278>
 800b3f6:	1bbf      	subs	r7, r7, r6
 800b3f8:	4639      	mov	r1, r7
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f000 ff69 	bl	800c2d2 <__any_on>
 800b400:	4682      	mov	sl, r0
 800b402:	b1a8      	cbz	r0, 800b430 <__gethex+0x1ec>
 800b404:	f04f 0a01 	mov.w	sl, #1
 800b408:	1e7b      	subs	r3, r7, #1
 800b40a:	1159      	asrs	r1, r3, #5
 800b40c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b410:	f003 021f 	and.w	r2, r3, #31
 800b414:	fa0a f202 	lsl.w	r2, sl, r2
 800b418:	420a      	tst	r2, r1
 800b41a:	d009      	beq.n	800b430 <__gethex+0x1ec>
 800b41c:	4553      	cmp	r3, sl
 800b41e:	dd05      	ble.n	800b42c <__gethex+0x1e8>
 800b420:	4620      	mov	r0, r4
 800b422:	1eb9      	subs	r1, r7, #2
 800b424:	f000 ff55 	bl	800c2d2 <__any_on>
 800b428:	2800      	cmp	r0, #0
 800b42a:	d144      	bne.n	800b4b6 <__gethex+0x272>
 800b42c:	f04f 0a02 	mov.w	sl, #2
 800b430:	4639      	mov	r1, r7
 800b432:	4620      	mov	r0, r4
 800b434:	f7ff fe9d 	bl	800b172 <rshift>
 800b438:	443d      	add	r5, r7
 800b43a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b43e:	42ab      	cmp	r3, r5
 800b440:	da4a      	bge.n	800b4d8 <__gethex+0x294>
 800b442:	4621      	mov	r1, r4
 800b444:	9802      	ldr	r0, [sp, #8]
 800b446:	f000 faed 	bl	800ba24 <_Bfree>
 800b44a:	2300      	movs	r3, #0
 800b44c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b44e:	27a3      	movs	r7, #163	; 0xa3
 800b450:	6013      	str	r3, [r2, #0]
 800b452:	e789      	b.n	800b368 <__gethex+0x124>
 800b454:	1e73      	subs	r3, r6, #1
 800b456:	9a07      	ldr	r2, [sp, #28]
 800b458:	9305      	str	r3, [sp, #20]
 800b45a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b45e:	4293      	cmp	r3, r2
 800b460:	d019      	beq.n	800b496 <__gethex+0x252>
 800b462:	f1bb 0f20 	cmp.w	fp, #32
 800b466:	d107      	bne.n	800b478 <__gethex+0x234>
 800b468:	9b04      	ldr	r3, [sp, #16]
 800b46a:	9a01      	ldr	r2, [sp, #4]
 800b46c:	f843 2b04 	str.w	r2, [r3], #4
 800b470:	9304      	str	r3, [sp, #16]
 800b472:	2300      	movs	r3, #0
 800b474:	469b      	mov	fp, r3
 800b476:	9301      	str	r3, [sp, #4]
 800b478:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b47c:	f7ff fecc 	bl	800b218 <__hexdig_fun>
 800b480:	9b01      	ldr	r3, [sp, #4]
 800b482:	f000 000f 	and.w	r0, r0, #15
 800b486:	fa00 f00b 	lsl.w	r0, r0, fp
 800b48a:	4303      	orrs	r3, r0
 800b48c:	9301      	str	r3, [sp, #4]
 800b48e:	f10b 0b04 	add.w	fp, fp, #4
 800b492:	9b05      	ldr	r3, [sp, #20]
 800b494:	e00d      	b.n	800b4b2 <__gethex+0x26e>
 800b496:	9b05      	ldr	r3, [sp, #20]
 800b498:	9a08      	ldr	r2, [sp, #32]
 800b49a:	4413      	add	r3, r2
 800b49c:	42bb      	cmp	r3, r7
 800b49e:	d3e0      	bcc.n	800b462 <__gethex+0x21e>
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	4652      	mov	r2, sl
 800b4a4:	9903      	ldr	r1, [sp, #12]
 800b4a6:	9309      	str	r3, [sp, #36]	; 0x24
 800b4a8:	f001 f951 	bl	800c74e <strncmp>
 800b4ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4ae:	2800      	cmp	r0, #0
 800b4b0:	d1d7      	bne.n	800b462 <__gethex+0x21e>
 800b4b2:	461e      	mov	r6, r3
 800b4b4:	e78c      	b.n	800b3d0 <__gethex+0x18c>
 800b4b6:	f04f 0a03 	mov.w	sl, #3
 800b4ba:	e7b9      	b.n	800b430 <__gethex+0x1ec>
 800b4bc:	da09      	bge.n	800b4d2 <__gethex+0x28e>
 800b4be:	1bf7      	subs	r7, r6, r7
 800b4c0:	4621      	mov	r1, r4
 800b4c2:	463a      	mov	r2, r7
 800b4c4:	9802      	ldr	r0, [sp, #8]
 800b4c6:	f000 fcc5 	bl	800be54 <__lshift>
 800b4ca:	4604      	mov	r4, r0
 800b4cc:	1bed      	subs	r5, r5, r7
 800b4ce:	f100 0914 	add.w	r9, r0, #20
 800b4d2:	f04f 0a00 	mov.w	sl, #0
 800b4d6:	e7b0      	b.n	800b43a <__gethex+0x1f6>
 800b4d8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b4dc:	42a8      	cmp	r0, r5
 800b4de:	dd71      	ble.n	800b5c4 <__gethex+0x380>
 800b4e0:	1b45      	subs	r5, r0, r5
 800b4e2:	42ae      	cmp	r6, r5
 800b4e4:	dc34      	bgt.n	800b550 <__gethex+0x30c>
 800b4e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b4ea:	2b02      	cmp	r3, #2
 800b4ec:	d028      	beq.n	800b540 <__gethex+0x2fc>
 800b4ee:	2b03      	cmp	r3, #3
 800b4f0:	d02a      	beq.n	800b548 <__gethex+0x304>
 800b4f2:	2b01      	cmp	r3, #1
 800b4f4:	d115      	bne.n	800b522 <__gethex+0x2de>
 800b4f6:	42ae      	cmp	r6, r5
 800b4f8:	d113      	bne.n	800b522 <__gethex+0x2de>
 800b4fa:	2e01      	cmp	r6, #1
 800b4fc:	d10b      	bne.n	800b516 <__gethex+0x2d2>
 800b4fe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b502:	9a06      	ldr	r2, [sp, #24]
 800b504:	2762      	movs	r7, #98	; 0x62
 800b506:	6013      	str	r3, [r2, #0]
 800b508:	2301      	movs	r3, #1
 800b50a:	6123      	str	r3, [r4, #16]
 800b50c:	f8c9 3000 	str.w	r3, [r9]
 800b510:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b512:	601c      	str	r4, [r3, #0]
 800b514:	e728      	b.n	800b368 <__gethex+0x124>
 800b516:	4620      	mov	r0, r4
 800b518:	1e71      	subs	r1, r6, #1
 800b51a:	f000 feda 	bl	800c2d2 <__any_on>
 800b51e:	2800      	cmp	r0, #0
 800b520:	d1ed      	bne.n	800b4fe <__gethex+0x2ba>
 800b522:	4621      	mov	r1, r4
 800b524:	9802      	ldr	r0, [sp, #8]
 800b526:	f000 fa7d 	bl	800ba24 <_Bfree>
 800b52a:	2300      	movs	r3, #0
 800b52c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b52e:	2750      	movs	r7, #80	; 0x50
 800b530:	6013      	str	r3, [r2, #0]
 800b532:	e719      	b.n	800b368 <__gethex+0x124>
 800b534:	0800ccac 	.word	0x0800ccac
 800b538:	0800cbcc 	.word	0x0800cbcc
 800b53c:	0800cc40 	.word	0x0800cc40
 800b540:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b542:	2b00      	cmp	r3, #0
 800b544:	d1ed      	bne.n	800b522 <__gethex+0x2de>
 800b546:	e7da      	b.n	800b4fe <__gethex+0x2ba>
 800b548:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d1d7      	bne.n	800b4fe <__gethex+0x2ba>
 800b54e:	e7e8      	b.n	800b522 <__gethex+0x2de>
 800b550:	1e6f      	subs	r7, r5, #1
 800b552:	f1ba 0f00 	cmp.w	sl, #0
 800b556:	d132      	bne.n	800b5be <__gethex+0x37a>
 800b558:	b127      	cbz	r7, 800b564 <__gethex+0x320>
 800b55a:	4639      	mov	r1, r7
 800b55c:	4620      	mov	r0, r4
 800b55e:	f000 feb8 	bl	800c2d2 <__any_on>
 800b562:	4682      	mov	sl, r0
 800b564:	2101      	movs	r1, #1
 800b566:	117b      	asrs	r3, r7, #5
 800b568:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b56c:	f007 071f 	and.w	r7, r7, #31
 800b570:	fa01 f707 	lsl.w	r7, r1, r7
 800b574:	421f      	tst	r7, r3
 800b576:	f04f 0702 	mov.w	r7, #2
 800b57a:	4629      	mov	r1, r5
 800b57c:	4620      	mov	r0, r4
 800b57e:	bf18      	it	ne
 800b580:	f04a 0a02 	orrne.w	sl, sl, #2
 800b584:	1b76      	subs	r6, r6, r5
 800b586:	f7ff fdf4 	bl	800b172 <rshift>
 800b58a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b58e:	f1ba 0f00 	cmp.w	sl, #0
 800b592:	d048      	beq.n	800b626 <__gethex+0x3e2>
 800b594:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b598:	2b02      	cmp	r3, #2
 800b59a:	d015      	beq.n	800b5c8 <__gethex+0x384>
 800b59c:	2b03      	cmp	r3, #3
 800b59e:	d017      	beq.n	800b5d0 <__gethex+0x38c>
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d109      	bne.n	800b5b8 <__gethex+0x374>
 800b5a4:	f01a 0f02 	tst.w	sl, #2
 800b5a8:	d006      	beq.n	800b5b8 <__gethex+0x374>
 800b5aa:	f8d9 0000 	ldr.w	r0, [r9]
 800b5ae:	ea4a 0a00 	orr.w	sl, sl, r0
 800b5b2:	f01a 0f01 	tst.w	sl, #1
 800b5b6:	d10e      	bne.n	800b5d6 <__gethex+0x392>
 800b5b8:	f047 0710 	orr.w	r7, r7, #16
 800b5bc:	e033      	b.n	800b626 <__gethex+0x3e2>
 800b5be:	f04f 0a01 	mov.w	sl, #1
 800b5c2:	e7cf      	b.n	800b564 <__gethex+0x320>
 800b5c4:	2701      	movs	r7, #1
 800b5c6:	e7e2      	b.n	800b58e <__gethex+0x34a>
 800b5c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5ca:	f1c3 0301 	rsb	r3, r3, #1
 800b5ce:	9315      	str	r3, [sp, #84]	; 0x54
 800b5d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d0f0      	beq.n	800b5b8 <__gethex+0x374>
 800b5d6:	f04f 0c00 	mov.w	ip, #0
 800b5da:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b5de:	f104 0314 	add.w	r3, r4, #20
 800b5e2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b5e6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5f0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b5f4:	d01c      	beq.n	800b630 <__gethex+0x3ec>
 800b5f6:	3201      	adds	r2, #1
 800b5f8:	6002      	str	r2, [r0, #0]
 800b5fa:	2f02      	cmp	r7, #2
 800b5fc:	f104 0314 	add.w	r3, r4, #20
 800b600:	d13d      	bne.n	800b67e <__gethex+0x43a>
 800b602:	f8d8 2000 	ldr.w	r2, [r8]
 800b606:	3a01      	subs	r2, #1
 800b608:	42b2      	cmp	r2, r6
 800b60a:	d10a      	bne.n	800b622 <__gethex+0x3de>
 800b60c:	2201      	movs	r2, #1
 800b60e:	1171      	asrs	r1, r6, #5
 800b610:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b614:	f006 061f 	and.w	r6, r6, #31
 800b618:	fa02 f606 	lsl.w	r6, r2, r6
 800b61c:	421e      	tst	r6, r3
 800b61e:	bf18      	it	ne
 800b620:	4617      	movne	r7, r2
 800b622:	f047 0720 	orr.w	r7, r7, #32
 800b626:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b628:	601c      	str	r4, [r3, #0]
 800b62a:	9b06      	ldr	r3, [sp, #24]
 800b62c:	601d      	str	r5, [r3, #0]
 800b62e:	e69b      	b.n	800b368 <__gethex+0x124>
 800b630:	4299      	cmp	r1, r3
 800b632:	f843 cc04 	str.w	ip, [r3, #-4]
 800b636:	d8d8      	bhi.n	800b5ea <__gethex+0x3a6>
 800b638:	68a3      	ldr	r3, [r4, #8]
 800b63a:	459b      	cmp	fp, r3
 800b63c:	db17      	blt.n	800b66e <__gethex+0x42a>
 800b63e:	6861      	ldr	r1, [r4, #4]
 800b640:	9802      	ldr	r0, [sp, #8]
 800b642:	3101      	adds	r1, #1
 800b644:	f000 f9ae 	bl	800b9a4 <_Balloc>
 800b648:	4681      	mov	r9, r0
 800b64a:	b918      	cbnz	r0, 800b654 <__gethex+0x410>
 800b64c:	4602      	mov	r2, r0
 800b64e:	2184      	movs	r1, #132	; 0x84
 800b650:	4b19      	ldr	r3, [pc, #100]	; (800b6b8 <__gethex+0x474>)
 800b652:	e6ac      	b.n	800b3ae <__gethex+0x16a>
 800b654:	6922      	ldr	r2, [r4, #16]
 800b656:	f104 010c 	add.w	r1, r4, #12
 800b65a:	3202      	adds	r2, #2
 800b65c:	0092      	lsls	r2, r2, #2
 800b65e:	300c      	adds	r0, #12
 800b660:	f7fc fd2e 	bl	80080c0 <memcpy>
 800b664:	4621      	mov	r1, r4
 800b666:	9802      	ldr	r0, [sp, #8]
 800b668:	f000 f9dc 	bl	800ba24 <_Bfree>
 800b66c:	464c      	mov	r4, r9
 800b66e:	6923      	ldr	r3, [r4, #16]
 800b670:	1c5a      	adds	r2, r3, #1
 800b672:	6122      	str	r2, [r4, #16]
 800b674:	2201      	movs	r2, #1
 800b676:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b67a:	615a      	str	r2, [r3, #20]
 800b67c:	e7bd      	b.n	800b5fa <__gethex+0x3b6>
 800b67e:	6922      	ldr	r2, [r4, #16]
 800b680:	455a      	cmp	r2, fp
 800b682:	dd0b      	ble.n	800b69c <__gethex+0x458>
 800b684:	2101      	movs	r1, #1
 800b686:	4620      	mov	r0, r4
 800b688:	f7ff fd73 	bl	800b172 <rshift>
 800b68c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b690:	3501      	adds	r5, #1
 800b692:	42ab      	cmp	r3, r5
 800b694:	f6ff aed5 	blt.w	800b442 <__gethex+0x1fe>
 800b698:	2701      	movs	r7, #1
 800b69a:	e7c2      	b.n	800b622 <__gethex+0x3de>
 800b69c:	f016 061f 	ands.w	r6, r6, #31
 800b6a0:	d0fa      	beq.n	800b698 <__gethex+0x454>
 800b6a2:	449a      	add	sl, r3
 800b6a4:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b6a8:	f000 fa72 	bl	800bb90 <__hi0bits>
 800b6ac:	f1c6 0620 	rsb	r6, r6, #32
 800b6b0:	42b0      	cmp	r0, r6
 800b6b2:	dbe7      	blt.n	800b684 <__gethex+0x440>
 800b6b4:	e7f0      	b.n	800b698 <__gethex+0x454>
 800b6b6:	bf00      	nop
 800b6b8:	0800cbcc 	.word	0x0800cbcc

0800b6bc <L_shift>:
 800b6bc:	f1c2 0208 	rsb	r2, r2, #8
 800b6c0:	0092      	lsls	r2, r2, #2
 800b6c2:	b570      	push	{r4, r5, r6, lr}
 800b6c4:	f1c2 0620 	rsb	r6, r2, #32
 800b6c8:	6843      	ldr	r3, [r0, #4]
 800b6ca:	6804      	ldr	r4, [r0, #0]
 800b6cc:	fa03 f506 	lsl.w	r5, r3, r6
 800b6d0:	432c      	orrs	r4, r5
 800b6d2:	40d3      	lsrs	r3, r2
 800b6d4:	6004      	str	r4, [r0, #0]
 800b6d6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b6da:	4288      	cmp	r0, r1
 800b6dc:	d3f4      	bcc.n	800b6c8 <L_shift+0xc>
 800b6de:	bd70      	pop	{r4, r5, r6, pc}

0800b6e0 <__match>:
 800b6e0:	b530      	push	{r4, r5, lr}
 800b6e2:	6803      	ldr	r3, [r0, #0]
 800b6e4:	3301      	adds	r3, #1
 800b6e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6ea:	b914      	cbnz	r4, 800b6f2 <__match+0x12>
 800b6ec:	6003      	str	r3, [r0, #0]
 800b6ee:	2001      	movs	r0, #1
 800b6f0:	bd30      	pop	{r4, r5, pc}
 800b6f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b6fa:	2d19      	cmp	r5, #25
 800b6fc:	bf98      	it	ls
 800b6fe:	3220      	addls	r2, #32
 800b700:	42a2      	cmp	r2, r4
 800b702:	d0f0      	beq.n	800b6e6 <__match+0x6>
 800b704:	2000      	movs	r0, #0
 800b706:	e7f3      	b.n	800b6f0 <__match+0x10>

0800b708 <__hexnan>:
 800b708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b70c:	2500      	movs	r5, #0
 800b70e:	680b      	ldr	r3, [r1, #0]
 800b710:	4682      	mov	sl, r0
 800b712:	115e      	asrs	r6, r3, #5
 800b714:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b718:	f013 031f 	ands.w	r3, r3, #31
 800b71c:	bf18      	it	ne
 800b71e:	3604      	addne	r6, #4
 800b720:	1f37      	subs	r7, r6, #4
 800b722:	4690      	mov	r8, r2
 800b724:	46b9      	mov	r9, r7
 800b726:	463c      	mov	r4, r7
 800b728:	46ab      	mov	fp, r5
 800b72a:	b087      	sub	sp, #28
 800b72c:	6801      	ldr	r1, [r0, #0]
 800b72e:	9301      	str	r3, [sp, #4]
 800b730:	f846 5c04 	str.w	r5, [r6, #-4]
 800b734:	9502      	str	r5, [sp, #8]
 800b736:	784a      	ldrb	r2, [r1, #1]
 800b738:	1c4b      	adds	r3, r1, #1
 800b73a:	9303      	str	r3, [sp, #12]
 800b73c:	b342      	cbz	r2, 800b790 <__hexnan+0x88>
 800b73e:	4610      	mov	r0, r2
 800b740:	9105      	str	r1, [sp, #20]
 800b742:	9204      	str	r2, [sp, #16]
 800b744:	f7ff fd68 	bl	800b218 <__hexdig_fun>
 800b748:	2800      	cmp	r0, #0
 800b74a:	d14f      	bne.n	800b7ec <__hexnan+0xe4>
 800b74c:	9a04      	ldr	r2, [sp, #16]
 800b74e:	9905      	ldr	r1, [sp, #20]
 800b750:	2a20      	cmp	r2, #32
 800b752:	d818      	bhi.n	800b786 <__hexnan+0x7e>
 800b754:	9b02      	ldr	r3, [sp, #8]
 800b756:	459b      	cmp	fp, r3
 800b758:	dd13      	ble.n	800b782 <__hexnan+0x7a>
 800b75a:	454c      	cmp	r4, r9
 800b75c:	d206      	bcs.n	800b76c <__hexnan+0x64>
 800b75e:	2d07      	cmp	r5, #7
 800b760:	dc04      	bgt.n	800b76c <__hexnan+0x64>
 800b762:	462a      	mov	r2, r5
 800b764:	4649      	mov	r1, r9
 800b766:	4620      	mov	r0, r4
 800b768:	f7ff ffa8 	bl	800b6bc <L_shift>
 800b76c:	4544      	cmp	r4, r8
 800b76e:	d950      	bls.n	800b812 <__hexnan+0x10a>
 800b770:	2300      	movs	r3, #0
 800b772:	f1a4 0904 	sub.w	r9, r4, #4
 800b776:	f844 3c04 	str.w	r3, [r4, #-4]
 800b77a:	461d      	mov	r5, r3
 800b77c:	464c      	mov	r4, r9
 800b77e:	f8cd b008 	str.w	fp, [sp, #8]
 800b782:	9903      	ldr	r1, [sp, #12]
 800b784:	e7d7      	b.n	800b736 <__hexnan+0x2e>
 800b786:	2a29      	cmp	r2, #41	; 0x29
 800b788:	d156      	bne.n	800b838 <__hexnan+0x130>
 800b78a:	3102      	adds	r1, #2
 800b78c:	f8ca 1000 	str.w	r1, [sl]
 800b790:	f1bb 0f00 	cmp.w	fp, #0
 800b794:	d050      	beq.n	800b838 <__hexnan+0x130>
 800b796:	454c      	cmp	r4, r9
 800b798:	d206      	bcs.n	800b7a8 <__hexnan+0xa0>
 800b79a:	2d07      	cmp	r5, #7
 800b79c:	dc04      	bgt.n	800b7a8 <__hexnan+0xa0>
 800b79e:	462a      	mov	r2, r5
 800b7a0:	4649      	mov	r1, r9
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	f7ff ff8a 	bl	800b6bc <L_shift>
 800b7a8:	4544      	cmp	r4, r8
 800b7aa:	d934      	bls.n	800b816 <__hexnan+0x10e>
 800b7ac:	4623      	mov	r3, r4
 800b7ae:	f1a8 0204 	sub.w	r2, r8, #4
 800b7b2:	f853 1b04 	ldr.w	r1, [r3], #4
 800b7b6:	429f      	cmp	r7, r3
 800b7b8:	f842 1f04 	str.w	r1, [r2, #4]!
 800b7bc:	d2f9      	bcs.n	800b7b2 <__hexnan+0xaa>
 800b7be:	1b3b      	subs	r3, r7, r4
 800b7c0:	f023 0303 	bic.w	r3, r3, #3
 800b7c4:	3304      	adds	r3, #4
 800b7c6:	3401      	adds	r4, #1
 800b7c8:	3e03      	subs	r6, #3
 800b7ca:	42b4      	cmp	r4, r6
 800b7cc:	bf88      	it	hi
 800b7ce:	2304      	movhi	r3, #4
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	4443      	add	r3, r8
 800b7d4:	f843 2b04 	str.w	r2, [r3], #4
 800b7d8:	429f      	cmp	r7, r3
 800b7da:	d2fb      	bcs.n	800b7d4 <__hexnan+0xcc>
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	b91b      	cbnz	r3, 800b7e8 <__hexnan+0xe0>
 800b7e0:	4547      	cmp	r7, r8
 800b7e2:	d127      	bne.n	800b834 <__hexnan+0x12c>
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	603b      	str	r3, [r7, #0]
 800b7e8:	2005      	movs	r0, #5
 800b7ea:	e026      	b.n	800b83a <__hexnan+0x132>
 800b7ec:	3501      	adds	r5, #1
 800b7ee:	2d08      	cmp	r5, #8
 800b7f0:	f10b 0b01 	add.w	fp, fp, #1
 800b7f4:	dd06      	ble.n	800b804 <__hexnan+0xfc>
 800b7f6:	4544      	cmp	r4, r8
 800b7f8:	d9c3      	bls.n	800b782 <__hexnan+0x7a>
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	2501      	movs	r5, #1
 800b7fe:	f844 3c04 	str.w	r3, [r4, #-4]
 800b802:	3c04      	subs	r4, #4
 800b804:	6822      	ldr	r2, [r4, #0]
 800b806:	f000 000f 	and.w	r0, r0, #15
 800b80a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b80e:	6022      	str	r2, [r4, #0]
 800b810:	e7b7      	b.n	800b782 <__hexnan+0x7a>
 800b812:	2508      	movs	r5, #8
 800b814:	e7b5      	b.n	800b782 <__hexnan+0x7a>
 800b816:	9b01      	ldr	r3, [sp, #4]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d0df      	beq.n	800b7dc <__hexnan+0xd4>
 800b81c:	f04f 32ff 	mov.w	r2, #4294967295
 800b820:	f1c3 0320 	rsb	r3, r3, #32
 800b824:	fa22 f303 	lsr.w	r3, r2, r3
 800b828:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b82c:	401a      	ands	r2, r3
 800b82e:	f846 2c04 	str.w	r2, [r6, #-4]
 800b832:	e7d3      	b.n	800b7dc <__hexnan+0xd4>
 800b834:	3f04      	subs	r7, #4
 800b836:	e7d1      	b.n	800b7dc <__hexnan+0xd4>
 800b838:	2004      	movs	r0, #4
 800b83a:	b007      	add	sp, #28
 800b83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b840 <_localeconv_r>:
 800b840:	4800      	ldr	r0, [pc, #0]	; (800b844 <_localeconv_r+0x4>)
 800b842:	4770      	bx	lr
 800b844:	200001ac 	.word	0x200001ac

0800b848 <__retarget_lock_init_recursive>:
 800b848:	4770      	bx	lr

0800b84a <__retarget_lock_acquire_recursive>:
 800b84a:	4770      	bx	lr

0800b84c <__retarget_lock_release_recursive>:
 800b84c:	4770      	bx	lr

0800b84e <__swhatbuf_r>:
 800b84e:	b570      	push	{r4, r5, r6, lr}
 800b850:	460e      	mov	r6, r1
 800b852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b856:	4614      	mov	r4, r2
 800b858:	2900      	cmp	r1, #0
 800b85a:	461d      	mov	r5, r3
 800b85c:	b096      	sub	sp, #88	; 0x58
 800b85e:	da07      	bge.n	800b870 <__swhatbuf_r+0x22>
 800b860:	2300      	movs	r3, #0
 800b862:	602b      	str	r3, [r5, #0]
 800b864:	89b3      	ldrh	r3, [r6, #12]
 800b866:	061a      	lsls	r2, r3, #24
 800b868:	d410      	bmi.n	800b88c <__swhatbuf_r+0x3e>
 800b86a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b86e:	e00e      	b.n	800b88e <__swhatbuf_r+0x40>
 800b870:	466a      	mov	r2, sp
 800b872:	f000 ffad 	bl	800c7d0 <_fstat_r>
 800b876:	2800      	cmp	r0, #0
 800b878:	dbf2      	blt.n	800b860 <__swhatbuf_r+0x12>
 800b87a:	9a01      	ldr	r2, [sp, #4]
 800b87c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b880:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b884:	425a      	negs	r2, r3
 800b886:	415a      	adcs	r2, r3
 800b888:	602a      	str	r2, [r5, #0]
 800b88a:	e7ee      	b.n	800b86a <__swhatbuf_r+0x1c>
 800b88c:	2340      	movs	r3, #64	; 0x40
 800b88e:	2000      	movs	r0, #0
 800b890:	6023      	str	r3, [r4, #0]
 800b892:	b016      	add	sp, #88	; 0x58
 800b894:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b898 <__smakebuf_r>:
 800b898:	898b      	ldrh	r3, [r1, #12]
 800b89a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b89c:	079d      	lsls	r5, r3, #30
 800b89e:	4606      	mov	r6, r0
 800b8a0:	460c      	mov	r4, r1
 800b8a2:	d507      	bpl.n	800b8b4 <__smakebuf_r+0x1c>
 800b8a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b8a8:	6023      	str	r3, [r4, #0]
 800b8aa:	6123      	str	r3, [r4, #16]
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	6163      	str	r3, [r4, #20]
 800b8b0:	b002      	add	sp, #8
 800b8b2:	bd70      	pop	{r4, r5, r6, pc}
 800b8b4:	466a      	mov	r2, sp
 800b8b6:	ab01      	add	r3, sp, #4
 800b8b8:	f7ff ffc9 	bl	800b84e <__swhatbuf_r>
 800b8bc:	9900      	ldr	r1, [sp, #0]
 800b8be:	4605      	mov	r5, r0
 800b8c0:	4630      	mov	r0, r6
 800b8c2:	f7fc fc5f 	bl	8008184 <_malloc_r>
 800b8c6:	b948      	cbnz	r0, 800b8dc <__smakebuf_r+0x44>
 800b8c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8cc:	059a      	lsls	r2, r3, #22
 800b8ce:	d4ef      	bmi.n	800b8b0 <__smakebuf_r+0x18>
 800b8d0:	f023 0303 	bic.w	r3, r3, #3
 800b8d4:	f043 0302 	orr.w	r3, r3, #2
 800b8d8:	81a3      	strh	r3, [r4, #12]
 800b8da:	e7e3      	b.n	800b8a4 <__smakebuf_r+0xc>
 800b8dc:	4b0d      	ldr	r3, [pc, #52]	; (800b914 <__smakebuf_r+0x7c>)
 800b8de:	62b3      	str	r3, [r6, #40]	; 0x28
 800b8e0:	89a3      	ldrh	r3, [r4, #12]
 800b8e2:	6020      	str	r0, [r4, #0]
 800b8e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8e8:	81a3      	strh	r3, [r4, #12]
 800b8ea:	9b00      	ldr	r3, [sp, #0]
 800b8ec:	6120      	str	r0, [r4, #16]
 800b8ee:	6163      	str	r3, [r4, #20]
 800b8f0:	9b01      	ldr	r3, [sp, #4]
 800b8f2:	b15b      	cbz	r3, 800b90c <__smakebuf_r+0x74>
 800b8f4:	4630      	mov	r0, r6
 800b8f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8fa:	f000 ff7b 	bl	800c7f4 <_isatty_r>
 800b8fe:	b128      	cbz	r0, 800b90c <__smakebuf_r+0x74>
 800b900:	89a3      	ldrh	r3, [r4, #12]
 800b902:	f023 0303 	bic.w	r3, r3, #3
 800b906:	f043 0301 	orr.w	r3, r3, #1
 800b90a:	81a3      	strh	r3, [r4, #12]
 800b90c:	89a0      	ldrh	r0, [r4, #12]
 800b90e:	4305      	orrs	r5, r0
 800b910:	81a5      	strh	r5, [r4, #12]
 800b912:	e7cd      	b.n	800b8b0 <__smakebuf_r+0x18>
 800b914:	0800afd1 	.word	0x0800afd1

0800b918 <__ascii_mbtowc>:
 800b918:	b082      	sub	sp, #8
 800b91a:	b901      	cbnz	r1, 800b91e <__ascii_mbtowc+0x6>
 800b91c:	a901      	add	r1, sp, #4
 800b91e:	b142      	cbz	r2, 800b932 <__ascii_mbtowc+0x1a>
 800b920:	b14b      	cbz	r3, 800b936 <__ascii_mbtowc+0x1e>
 800b922:	7813      	ldrb	r3, [r2, #0]
 800b924:	600b      	str	r3, [r1, #0]
 800b926:	7812      	ldrb	r2, [r2, #0]
 800b928:	1e10      	subs	r0, r2, #0
 800b92a:	bf18      	it	ne
 800b92c:	2001      	movne	r0, #1
 800b92e:	b002      	add	sp, #8
 800b930:	4770      	bx	lr
 800b932:	4610      	mov	r0, r2
 800b934:	e7fb      	b.n	800b92e <__ascii_mbtowc+0x16>
 800b936:	f06f 0001 	mvn.w	r0, #1
 800b93a:	e7f8      	b.n	800b92e <__ascii_mbtowc+0x16>

0800b93c <memchr>:
 800b93c:	4603      	mov	r3, r0
 800b93e:	b510      	push	{r4, lr}
 800b940:	b2c9      	uxtb	r1, r1
 800b942:	4402      	add	r2, r0
 800b944:	4293      	cmp	r3, r2
 800b946:	4618      	mov	r0, r3
 800b948:	d101      	bne.n	800b94e <memchr+0x12>
 800b94a:	2000      	movs	r0, #0
 800b94c:	e003      	b.n	800b956 <memchr+0x1a>
 800b94e:	7804      	ldrb	r4, [r0, #0]
 800b950:	3301      	adds	r3, #1
 800b952:	428c      	cmp	r4, r1
 800b954:	d1f6      	bne.n	800b944 <memchr+0x8>
 800b956:	bd10      	pop	{r4, pc}

0800b958 <memmove>:
 800b958:	4288      	cmp	r0, r1
 800b95a:	b510      	push	{r4, lr}
 800b95c:	eb01 0402 	add.w	r4, r1, r2
 800b960:	d902      	bls.n	800b968 <memmove+0x10>
 800b962:	4284      	cmp	r4, r0
 800b964:	4623      	mov	r3, r4
 800b966:	d807      	bhi.n	800b978 <memmove+0x20>
 800b968:	1e43      	subs	r3, r0, #1
 800b96a:	42a1      	cmp	r1, r4
 800b96c:	d008      	beq.n	800b980 <memmove+0x28>
 800b96e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b972:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b976:	e7f8      	b.n	800b96a <memmove+0x12>
 800b978:	4601      	mov	r1, r0
 800b97a:	4402      	add	r2, r0
 800b97c:	428a      	cmp	r2, r1
 800b97e:	d100      	bne.n	800b982 <memmove+0x2a>
 800b980:	bd10      	pop	{r4, pc}
 800b982:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b986:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b98a:	e7f7      	b.n	800b97c <memmove+0x24>

0800b98c <__malloc_lock>:
 800b98c:	4801      	ldr	r0, [pc, #4]	; (800b994 <__malloc_lock+0x8>)
 800b98e:	f7ff bf5c 	b.w	800b84a <__retarget_lock_acquire_recursive>
 800b992:	bf00      	nop
 800b994:	20000a64 	.word	0x20000a64

0800b998 <__malloc_unlock>:
 800b998:	4801      	ldr	r0, [pc, #4]	; (800b9a0 <__malloc_unlock+0x8>)
 800b99a:	f7ff bf57 	b.w	800b84c <__retarget_lock_release_recursive>
 800b99e:	bf00      	nop
 800b9a0:	20000a64 	.word	0x20000a64

0800b9a4 <_Balloc>:
 800b9a4:	b570      	push	{r4, r5, r6, lr}
 800b9a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b9a8:	4604      	mov	r4, r0
 800b9aa:	460d      	mov	r5, r1
 800b9ac:	b976      	cbnz	r6, 800b9cc <_Balloc+0x28>
 800b9ae:	2010      	movs	r0, #16
 800b9b0:	f7fc fb7e 	bl	80080b0 <malloc>
 800b9b4:	4602      	mov	r2, r0
 800b9b6:	6260      	str	r0, [r4, #36]	; 0x24
 800b9b8:	b920      	cbnz	r0, 800b9c4 <_Balloc+0x20>
 800b9ba:	2166      	movs	r1, #102	; 0x66
 800b9bc:	4b17      	ldr	r3, [pc, #92]	; (800ba1c <_Balloc+0x78>)
 800b9be:	4818      	ldr	r0, [pc, #96]	; (800ba20 <_Balloc+0x7c>)
 800b9c0:	f7fc fb1c 	bl	8007ffc <__assert_func>
 800b9c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b9c8:	6006      	str	r6, [r0, #0]
 800b9ca:	60c6      	str	r6, [r0, #12]
 800b9cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b9ce:	68f3      	ldr	r3, [r6, #12]
 800b9d0:	b183      	cbz	r3, 800b9f4 <_Balloc+0x50>
 800b9d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9d4:	68db      	ldr	r3, [r3, #12]
 800b9d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b9da:	b9b8      	cbnz	r0, 800ba0c <_Balloc+0x68>
 800b9dc:	2101      	movs	r1, #1
 800b9de:	fa01 f605 	lsl.w	r6, r1, r5
 800b9e2:	1d72      	adds	r2, r6, #5
 800b9e4:	4620      	mov	r0, r4
 800b9e6:	0092      	lsls	r2, r2, #2
 800b9e8:	f000 fc94 	bl	800c314 <_calloc_r>
 800b9ec:	b160      	cbz	r0, 800ba08 <_Balloc+0x64>
 800b9ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b9f2:	e00e      	b.n	800ba12 <_Balloc+0x6e>
 800b9f4:	2221      	movs	r2, #33	; 0x21
 800b9f6:	2104      	movs	r1, #4
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	f000 fc8b 	bl	800c314 <_calloc_r>
 800b9fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba00:	60f0      	str	r0, [r6, #12]
 800ba02:	68db      	ldr	r3, [r3, #12]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d1e4      	bne.n	800b9d2 <_Balloc+0x2e>
 800ba08:	2000      	movs	r0, #0
 800ba0a:	bd70      	pop	{r4, r5, r6, pc}
 800ba0c:	6802      	ldr	r2, [r0, #0]
 800ba0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ba12:	2300      	movs	r3, #0
 800ba14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba18:	e7f7      	b.n	800ba0a <_Balloc+0x66>
 800ba1a:	bf00      	nop
 800ba1c:	0800cb56 	.word	0x0800cb56
 800ba20:	0800ccc0 	.word	0x0800ccc0

0800ba24 <_Bfree>:
 800ba24:	b570      	push	{r4, r5, r6, lr}
 800ba26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba28:	4605      	mov	r5, r0
 800ba2a:	460c      	mov	r4, r1
 800ba2c:	b976      	cbnz	r6, 800ba4c <_Bfree+0x28>
 800ba2e:	2010      	movs	r0, #16
 800ba30:	f7fc fb3e 	bl	80080b0 <malloc>
 800ba34:	4602      	mov	r2, r0
 800ba36:	6268      	str	r0, [r5, #36]	; 0x24
 800ba38:	b920      	cbnz	r0, 800ba44 <_Bfree+0x20>
 800ba3a:	218a      	movs	r1, #138	; 0x8a
 800ba3c:	4b08      	ldr	r3, [pc, #32]	; (800ba60 <_Bfree+0x3c>)
 800ba3e:	4809      	ldr	r0, [pc, #36]	; (800ba64 <_Bfree+0x40>)
 800ba40:	f7fc fadc 	bl	8007ffc <__assert_func>
 800ba44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba48:	6006      	str	r6, [r0, #0]
 800ba4a:	60c6      	str	r6, [r0, #12]
 800ba4c:	b13c      	cbz	r4, 800ba5e <_Bfree+0x3a>
 800ba4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ba50:	6862      	ldr	r2, [r4, #4]
 800ba52:	68db      	ldr	r3, [r3, #12]
 800ba54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ba58:	6021      	str	r1, [r4, #0]
 800ba5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ba5e:	bd70      	pop	{r4, r5, r6, pc}
 800ba60:	0800cb56 	.word	0x0800cb56
 800ba64:	0800ccc0 	.word	0x0800ccc0

0800ba68 <__multadd>:
 800ba68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba6c:	4698      	mov	r8, r3
 800ba6e:	460c      	mov	r4, r1
 800ba70:	2300      	movs	r3, #0
 800ba72:	690e      	ldr	r6, [r1, #16]
 800ba74:	4607      	mov	r7, r0
 800ba76:	f101 0014 	add.w	r0, r1, #20
 800ba7a:	6805      	ldr	r5, [r0, #0]
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	b2a9      	uxth	r1, r5
 800ba80:	fb02 8101 	mla	r1, r2, r1, r8
 800ba84:	0c2d      	lsrs	r5, r5, #16
 800ba86:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ba8a:	fb02 c505 	mla	r5, r2, r5, ip
 800ba8e:	b289      	uxth	r1, r1
 800ba90:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ba94:	429e      	cmp	r6, r3
 800ba96:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ba9a:	f840 1b04 	str.w	r1, [r0], #4
 800ba9e:	dcec      	bgt.n	800ba7a <__multadd+0x12>
 800baa0:	f1b8 0f00 	cmp.w	r8, #0
 800baa4:	d022      	beq.n	800baec <__multadd+0x84>
 800baa6:	68a3      	ldr	r3, [r4, #8]
 800baa8:	42b3      	cmp	r3, r6
 800baaa:	dc19      	bgt.n	800bae0 <__multadd+0x78>
 800baac:	6861      	ldr	r1, [r4, #4]
 800baae:	4638      	mov	r0, r7
 800bab0:	3101      	adds	r1, #1
 800bab2:	f7ff ff77 	bl	800b9a4 <_Balloc>
 800bab6:	4605      	mov	r5, r0
 800bab8:	b928      	cbnz	r0, 800bac6 <__multadd+0x5e>
 800baba:	4602      	mov	r2, r0
 800babc:	21b5      	movs	r1, #181	; 0xb5
 800babe:	4b0d      	ldr	r3, [pc, #52]	; (800baf4 <__multadd+0x8c>)
 800bac0:	480d      	ldr	r0, [pc, #52]	; (800baf8 <__multadd+0x90>)
 800bac2:	f7fc fa9b 	bl	8007ffc <__assert_func>
 800bac6:	6922      	ldr	r2, [r4, #16]
 800bac8:	f104 010c 	add.w	r1, r4, #12
 800bacc:	3202      	adds	r2, #2
 800bace:	0092      	lsls	r2, r2, #2
 800bad0:	300c      	adds	r0, #12
 800bad2:	f7fc faf5 	bl	80080c0 <memcpy>
 800bad6:	4621      	mov	r1, r4
 800bad8:	4638      	mov	r0, r7
 800bada:	f7ff ffa3 	bl	800ba24 <_Bfree>
 800bade:	462c      	mov	r4, r5
 800bae0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bae4:	3601      	adds	r6, #1
 800bae6:	f8c3 8014 	str.w	r8, [r3, #20]
 800baea:	6126      	str	r6, [r4, #16]
 800baec:	4620      	mov	r0, r4
 800baee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baf2:	bf00      	nop
 800baf4:	0800cbcc 	.word	0x0800cbcc
 800baf8:	0800ccc0 	.word	0x0800ccc0

0800bafc <__s2b>:
 800bafc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb00:	4615      	mov	r5, r2
 800bb02:	2209      	movs	r2, #9
 800bb04:	461f      	mov	r7, r3
 800bb06:	3308      	adds	r3, #8
 800bb08:	460c      	mov	r4, r1
 800bb0a:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb0e:	4606      	mov	r6, r0
 800bb10:	2201      	movs	r2, #1
 800bb12:	2100      	movs	r1, #0
 800bb14:	429a      	cmp	r2, r3
 800bb16:	db09      	blt.n	800bb2c <__s2b+0x30>
 800bb18:	4630      	mov	r0, r6
 800bb1a:	f7ff ff43 	bl	800b9a4 <_Balloc>
 800bb1e:	b940      	cbnz	r0, 800bb32 <__s2b+0x36>
 800bb20:	4602      	mov	r2, r0
 800bb22:	21ce      	movs	r1, #206	; 0xce
 800bb24:	4b18      	ldr	r3, [pc, #96]	; (800bb88 <__s2b+0x8c>)
 800bb26:	4819      	ldr	r0, [pc, #100]	; (800bb8c <__s2b+0x90>)
 800bb28:	f7fc fa68 	bl	8007ffc <__assert_func>
 800bb2c:	0052      	lsls	r2, r2, #1
 800bb2e:	3101      	adds	r1, #1
 800bb30:	e7f0      	b.n	800bb14 <__s2b+0x18>
 800bb32:	9b08      	ldr	r3, [sp, #32]
 800bb34:	2d09      	cmp	r5, #9
 800bb36:	6143      	str	r3, [r0, #20]
 800bb38:	f04f 0301 	mov.w	r3, #1
 800bb3c:	6103      	str	r3, [r0, #16]
 800bb3e:	dd16      	ble.n	800bb6e <__s2b+0x72>
 800bb40:	f104 0909 	add.w	r9, r4, #9
 800bb44:	46c8      	mov	r8, r9
 800bb46:	442c      	add	r4, r5
 800bb48:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bb4c:	4601      	mov	r1, r0
 800bb4e:	220a      	movs	r2, #10
 800bb50:	4630      	mov	r0, r6
 800bb52:	3b30      	subs	r3, #48	; 0x30
 800bb54:	f7ff ff88 	bl	800ba68 <__multadd>
 800bb58:	45a0      	cmp	r8, r4
 800bb5a:	d1f5      	bne.n	800bb48 <__s2b+0x4c>
 800bb5c:	f1a5 0408 	sub.w	r4, r5, #8
 800bb60:	444c      	add	r4, r9
 800bb62:	1b2d      	subs	r5, r5, r4
 800bb64:	1963      	adds	r3, r4, r5
 800bb66:	42bb      	cmp	r3, r7
 800bb68:	db04      	blt.n	800bb74 <__s2b+0x78>
 800bb6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb6e:	2509      	movs	r5, #9
 800bb70:	340a      	adds	r4, #10
 800bb72:	e7f6      	b.n	800bb62 <__s2b+0x66>
 800bb74:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bb78:	4601      	mov	r1, r0
 800bb7a:	220a      	movs	r2, #10
 800bb7c:	4630      	mov	r0, r6
 800bb7e:	3b30      	subs	r3, #48	; 0x30
 800bb80:	f7ff ff72 	bl	800ba68 <__multadd>
 800bb84:	e7ee      	b.n	800bb64 <__s2b+0x68>
 800bb86:	bf00      	nop
 800bb88:	0800cbcc 	.word	0x0800cbcc
 800bb8c:	0800ccc0 	.word	0x0800ccc0

0800bb90 <__hi0bits>:
 800bb90:	0c02      	lsrs	r2, r0, #16
 800bb92:	0412      	lsls	r2, r2, #16
 800bb94:	4603      	mov	r3, r0
 800bb96:	b9ca      	cbnz	r2, 800bbcc <__hi0bits+0x3c>
 800bb98:	0403      	lsls	r3, r0, #16
 800bb9a:	2010      	movs	r0, #16
 800bb9c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bba0:	bf04      	itt	eq
 800bba2:	021b      	lsleq	r3, r3, #8
 800bba4:	3008      	addeq	r0, #8
 800bba6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bbaa:	bf04      	itt	eq
 800bbac:	011b      	lsleq	r3, r3, #4
 800bbae:	3004      	addeq	r0, #4
 800bbb0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bbb4:	bf04      	itt	eq
 800bbb6:	009b      	lsleq	r3, r3, #2
 800bbb8:	3002      	addeq	r0, #2
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	db05      	blt.n	800bbca <__hi0bits+0x3a>
 800bbbe:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800bbc2:	f100 0001 	add.w	r0, r0, #1
 800bbc6:	bf08      	it	eq
 800bbc8:	2020      	moveq	r0, #32
 800bbca:	4770      	bx	lr
 800bbcc:	2000      	movs	r0, #0
 800bbce:	e7e5      	b.n	800bb9c <__hi0bits+0xc>

0800bbd0 <__lo0bits>:
 800bbd0:	6803      	ldr	r3, [r0, #0]
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	f013 0007 	ands.w	r0, r3, #7
 800bbd8:	d00b      	beq.n	800bbf2 <__lo0bits+0x22>
 800bbda:	07d9      	lsls	r1, r3, #31
 800bbdc:	d422      	bmi.n	800bc24 <__lo0bits+0x54>
 800bbde:	0798      	lsls	r0, r3, #30
 800bbe0:	bf49      	itett	mi
 800bbe2:	085b      	lsrmi	r3, r3, #1
 800bbe4:	089b      	lsrpl	r3, r3, #2
 800bbe6:	2001      	movmi	r0, #1
 800bbe8:	6013      	strmi	r3, [r2, #0]
 800bbea:	bf5c      	itt	pl
 800bbec:	2002      	movpl	r0, #2
 800bbee:	6013      	strpl	r3, [r2, #0]
 800bbf0:	4770      	bx	lr
 800bbf2:	b299      	uxth	r1, r3
 800bbf4:	b909      	cbnz	r1, 800bbfa <__lo0bits+0x2a>
 800bbf6:	2010      	movs	r0, #16
 800bbf8:	0c1b      	lsrs	r3, r3, #16
 800bbfa:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bbfe:	bf04      	itt	eq
 800bc00:	0a1b      	lsreq	r3, r3, #8
 800bc02:	3008      	addeq	r0, #8
 800bc04:	0719      	lsls	r1, r3, #28
 800bc06:	bf04      	itt	eq
 800bc08:	091b      	lsreq	r3, r3, #4
 800bc0a:	3004      	addeq	r0, #4
 800bc0c:	0799      	lsls	r1, r3, #30
 800bc0e:	bf04      	itt	eq
 800bc10:	089b      	lsreq	r3, r3, #2
 800bc12:	3002      	addeq	r0, #2
 800bc14:	07d9      	lsls	r1, r3, #31
 800bc16:	d403      	bmi.n	800bc20 <__lo0bits+0x50>
 800bc18:	085b      	lsrs	r3, r3, #1
 800bc1a:	f100 0001 	add.w	r0, r0, #1
 800bc1e:	d003      	beq.n	800bc28 <__lo0bits+0x58>
 800bc20:	6013      	str	r3, [r2, #0]
 800bc22:	4770      	bx	lr
 800bc24:	2000      	movs	r0, #0
 800bc26:	4770      	bx	lr
 800bc28:	2020      	movs	r0, #32
 800bc2a:	4770      	bx	lr

0800bc2c <__i2b>:
 800bc2c:	b510      	push	{r4, lr}
 800bc2e:	460c      	mov	r4, r1
 800bc30:	2101      	movs	r1, #1
 800bc32:	f7ff feb7 	bl	800b9a4 <_Balloc>
 800bc36:	4602      	mov	r2, r0
 800bc38:	b928      	cbnz	r0, 800bc46 <__i2b+0x1a>
 800bc3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bc3e:	4b04      	ldr	r3, [pc, #16]	; (800bc50 <__i2b+0x24>)
 800bc40:	4804      	ldr	r0, [pc, #16]	; (800bc54 <__i2b+0x28>)
 800bc42:	f7fc f9db 	bl	8007ffc <__assert_func>
 800bc46:	2301      	movs	r3, #1
 800bc48:	6144      	str	r4, [r0, #20]
 800bc4a:	6103      	str	r3, [r0, #16]
 800bc4c:	bd10      	pop	{r4, pc}
 800bc4e:	bf00      	nop
 800bc50:	0800cbcc 	.word	0x0800cbcc
 800bc54:	0800ccc0 	.word	0x0800ccc0

0800bc58 <__multiply>:
 800bc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc5c:	4614      	mov	r4, r2
 800bc5e:	690a      	ldr	r2, [r1, #16]
 800bc60:	6923      	ldr	r3, [r4, #16]
 800bc62:	460d      	mov	r5, r1
 800bc64:	429a      	cmp	r2, r3
 800bc66:	bfbe      	ittt	lt
 800bc68:	460b      	movlt	r3, r1
 800bc6a:	4625      	movlt	r5, r4
 800bc6c:	461c      	movlt	r4, r3
 800bc6e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bc72:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bc76:	68ab      	ldr	r3, [r5, #8]
 800bc78:	6869      	ldr	r1, [r5, #4]
 800bc7a:	eb0a 0709 	add.w	r7, sl, r9
 800bc7e:	42bb      	cmp	r3, r7
 800bc80:	b085      	sub	sp, #20
 800bc82:	bfb8      	it	lt
 800bc84:	3101      	addlt	r1, #1
 800bc86:	f7ff fe8d 	bl	800b9a4 <_Balloc>
 800bc8a:	b930      	cbnz	r0, 800bc9a <__multiply+0x42>
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	f240 115d 	movw	r1, #349	; 0x15d
 800bc92:	4b41      	ldr	r3, [pc, #260]	; (800bd98 <__multiply+0x140>)
 800bc94:	4841      	ldr	r0, [pc, #260]	; (800bd9c <__multiply+0x144>)
 800bc96:	f7fc f9b1 	bl	8007ffc <__assert_func>
 800bc9a:	f100 0614 	add.w	r6, r0, #20
 800bc9e:	4633      	mov	r3, r6
 800bca0:	2200      	movs	r2, #0
 800bca2:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bca6:	4543      	cmp	r3, r8
 800bca8:	d31e      	bcc.n	800bce8 <__multiply+0x90>
 800bcaa:	f105 0c14 	add.w	ip, r5, #20
 800bcae:	f104 0314 	add.w	r3, r4, #20
 800bcb2:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bcb6:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bcba:	9202      	str	r2, [sp, #8]
 800bcbc:	ebac 0205 	sub.w	r2, ip, r5
 800bcc0:	3a15      	subs	r2, #21
 800bcc2:	f022 0203 	bic.w	r2, r2, #3
 800bcc6:	3204      	adds	r2, #4
 800bcc8:	f105 0115 	add.w	r1, r5, #21
 800bccc:	458c      	cmp	ip, r1
 800bcce:	bf38      	it	cc
 800bcd0:	2204      	movcc	r2, #4
 800bcd2:	9201      	str	r2, [sp, #4]
 800bcd4:	9a02      	ldr	r2, [sp, #8]
 800bcd6:	9303      	str	r3, [sp, #12]
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	d808      	bhi.n	800bcee <__multiply+0x96>
 800bcdc:	2f00      	cmp	r7, #0
 800bcde:	dc55      	bgt.n	800bd8c <__multiply+0x134>
 800bce0:	6107      	str	r7, [r0, #16]
 800bce2:	b005      	add	sp, #20
 800bce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bce8:	f843 2b04 	str.w	r2, [r3], #4
 800bcec:	e7db      	b.n	800bca6 <__multiply+0x4e>
 800bcee:	f8b3 a000 	ldrh.w	sl, [r3]
 800bcf2:	f1ba 0f00 	cmp.w	sl, #0
 800bcf6:	d020      	beq.n	800bd3a <__multiply+0xe2>
 800bcf8:	46b1      	mov	r9, r6
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	f105 0e14 	add.w	lr, r5, #20
 800bd00:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bd04:	f8d9 b000 	ldr.w	fp, [r9]
 800bd08:	b2a1      	uxth	r1, r4
 800bd0a:	fa1f fb8b 	uxth.w	fp, fp
 800bd0e:	fb0a b101 	mla	r1, sl, r1, fp
 800bd12:	4411      	add	r1, r2
 800bd14:	f8d9 2000 	ldr.w	r2, [r9]
 800bd18:	0c24      	lsrs	r4, r4, #16
 800bd1a:	0c12      	lsrs	r2, r2, #16
 800bd1c:	fb0a 2404 	mla	r4, sl, r4, r2
 800bd20:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bd24:	b289      	uxth	r1, r1
 800bd26:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bd2a:	45f4      	cmp	ip, lr
 800bd2c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bd30:	f849 1b04 	str.w	r1, [r9], #4
 800bd34:	d8e4      	bhi.n	800bd00 <__multiply+0xa8>
 800bd36:	9901      	ldr	r1, [sp, #4]
 800bd38:	5072      	str	r2, [r6, r1]
 800bd3a:	9a03      	ldr	r2, [sp, #12]
 800bd3c:	3304      	adds	r3, #4
 800bd3e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bd42:	f1b9 0f00 	cmp.w	r9, #0
 800bd46:	d01f      	beq.n	800bd88 <__multiply+0x130>
 800bd48:	46b6      	mov	lr, r6
 800bd4a:	f04f 0a00 	mov.w	sl, #0
 800bd4e:	6834      	ldr	r4, [r6, #0]
 800bd50:	f105 0114 	add.w	r1, r5, #20
 800bd54:	880a      	ldrh	r2, [r1, #0]
 800bd56:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bd5a:	b2a4      	uxth	r4, r4
 800bd5c:	fb09 b202 	mla	r2, r9, r2, fp
 800bd60:	4492      	add	sl, r2
 800bd62:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bd66:	f84e 4b04 	str.w	r4, [lr], #4
 800bd6a:	f851 4b04 	ldr.w	r4, [r1], #4
 800bd6e:	f8be 2000 	ldrh.w	r2, [lr]
 800bd72:	0c24      	lsrs	r4, r4, #16
 800bd74:	fb09 2404 	mla	r4, r9, r4, r2
 800bd78:	458c      	cmp	ip, r1
 800bd7a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bd7e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bd82:	d8e7      	bhi.n	800bd54 <__multiply+0xfc>
 800bd84:	9a01      	ldr	r2, [sp, #4]
 800bd86:	50b4      	str	r4, [r6, r2]
 800bd88:	3604      	adds	r6, #4
 800bd8a:	e7a3      	b.n	800bcd4 <__multiply+0x7c>
 800bd8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d1a5      	bne.n	800bce0 <__multiply+0x88>
 800bd94:	3f01      	subs	r7, #1
 800bd96:	e7a1      	b.n	800bcdc <__multiply+0x84>
 800bd98:	0800cbcc 	.word	0x0800cbcc
 800bd9c:	0800ccc0 	.word	0x0800ccc0

0800bda0 <__pow5mult>:
 800bda0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bda4:	4615      	mov	r5, r2
 800bda6:	f012 0203 	ands.w	r2, r2, #3
 800bdaa:	4606      	mov	r6, r0
 800bdac:	460f      	mov	r7, r1
 800bdae:	d007      	beq.n	800bdc0 <__pow5mult+0x20>
 800bdb0:	4c25      	ldr	r4, [pc, #148]	; (800be48 <__pow5mult+0xa8>)
 800bdb2:	3a01      	subs	r2, #1
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bdba:	f7ff fe55 	bl	800ba68 <__multadd>
 800bdbe:	4607      	mov	r7, r0
 800bdc0:	10ad      	asrs	r5, r5, #2
 800bdc2:	d03d      	beq.n	800be40 <__pow5mult+0xa0>
 800bdc4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bdc6:	b97c      	cbnz	r4, 800bde8 <__pow5mult+0x48>
 800bdc8:	2010      	movs	r0, #16
 800bdca:	f7fc f971 	bl	80080b0 <malloc>
 800bdce:	4602      	mov	r2, r0
 800bdd0:	6270      	str	r0, [r6, #36]	; 0x24
 800bdd2:	b928      	cbnz	r0, 800bde0 <__pow5mult+0x40>
 800bdd4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bdd8:	4b1c      	ldr	r3, [pc, #112]	; (800be4c <__pow5mult+0xac>)
 800bdda:	481d      	ldr	r0, [pc, #116]	; (800be50 <__pow5mult+0xb0>)
 800bddc:	f7fc f90e 	bl	8007ffc <__assert_func>
 800bde0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bde4:	6004      	str	r4, [r0, #0]
 800bde6:	60c4      	str	r4, [r0, #12]
 800bde8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bdec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bdf0:	b94c      	cbnz	r4, 800be06 <__pow5mult+0x66>
 800bdf2:	f240 2171 	movw	r1, #625	; 0x271
 800bdf6:	4630      	mov	r0, r6
 800bdf8:	f7ff ff18 	bl	800bc2c <__i2b>
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	4604      	mov	r4, r0
 800be00:	f8c8 0008 	str.w	r0, [r8, #8]
 800be04:	6003      	str	r3, [r0, #0]
 800be06:	f04f 0900 	mov.w	r9, #0
 800be0a:	07eb      	lsls	r3, r5, #31
 800be0c:	d50a      	bpl.n	800be24 <__pow5mult+0x84>
 800be0e:	4639      	mov	r1, r7
 800be10:	4622      	mov	r2, r4
 800be12:	4630      	mov	r0, r6
 800be14:	f7ff ff20 	bl	800bc58 <__multiply>
 800be18:	4680      	mov	r8, r0
 800be1a:	4639      	mov	r1, r7
 800be1c:	4630      	mov	r0, r6
 800be1e:	f7ff fe01 	bl	800ba24 <_Bfree>
 800be22:	4647      	mov	r7, r8
 800be24:	106d      	asrs	r5, r5, #1
 800be26:	d00b      	beq.n	800be40 <__pow5mult+0xa0>
 800be28:	6820      	ldr	r0, [r4, #0]
 800be2a:	b938      	cbnz	r0, 800be3c <__pow5mult+0x9c>
 800be2c:	4622      	mov	r2, r4
 800be2e:	4621      	mov	r1, r4
 800be30:	4630      	mov	r0, r6
 800be32:	f7ff ff11 	bl	800bc58 <__multiply>
 800be36:	6020      	str	r0, [r4, #0]
 800be38:	f8c0 9000 	str.w	r9, [r0]
 800be3c:	4604      	mov	r4, r0
 800be3e:	e7e4      	b.n	800be0a <__pow5mult+0x6a>
 800be40:	4638      	mov	r0, r7
 800be42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be46:	bf00      	nop
 800be48:	0800ce10 	.word	0x0800ce10
 800be4c:	0800cb56 	.word	0x0800cb56
 800be50:	0800ccc0 	.word	0x0800ccc0

0800be54 <__lshift>:
 800be54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be58:	460c      	mov	r4, r1
 800be5a:	4607      	mov	r7, r0
 800be5c:	4691      	mov	r9, r2
 800be5e:	6923      	ldr	r3, [r4, #16]
 800be60:	6849      	ldr	r1, [r1, #4]
 800be62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800be66:	68a3      	ldr	r3, [r4, #8]
 800be68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800be6c:	f108 0601 	add.w	r6, r8, #1
 800be70:	42b3      	cmp	r3, r6
 800be72:	db0b      	blt.n	800be8c <__lshift+0x38>
 800be74:	4638      	mov	r0, r7
 800be76:	f7ff fd95 	bl	800b9a4 <_Balloc>
 800be7a:	4605      	mov	r5, r0
 800be7c:	b948      	cbnz	r0, 800be92 <__lshift+0x3e>
 800be7e:	4602      	mov	r2, r0
 800be80:	f240 11d9 	movw	r1, #473	; 0x1d9
 800be84:	4b27      	ldr	r3, [pc, #156]	; (800bf24 <__lshift+0xd0>)
 800be86:	4828      	ldr	r0, [pc, #160]	; (800bf28 <__lshift+0xd4>)
 800be88:	f7fc f8b8 	bl	8007ffc <__assert_func>
 800be8c:	3101      	adds	r1, #1
 800be8e:	005b      	lsls	r3, r3, #1
 800be90:	e7ee      	b.n	800be70 <__lshift+0x1c>
 800be92:	2300      	movs	r3, #0
 800be94:	f100 0114 	add.w	r1, r0, #20
 800be98:	f100 0210 	add.w	r2, r0, #16
 800be9c:	4618      	mov	r0, r3
 800be9e:	4553      	cmp	r3, sl
 800bea0:	db33      	blt.n	800bf0a <__lshift+0xb6>
 800bea2:	6920      	ldr	r0, [r4, #16]
 800bea4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bea8:	f104 0314 	add.w	r3, r4, #20
 800beac:	f019 091f 	ands.w	r9, r9, #31
 800beb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800beb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800beb8:	d02b      	beq.n	800bf12 <__lshift+0xbe>
 800beba:	468a      	mov	sl, r1
 800bebc:	2200      	movs	r2, #0
 800bebe:	f1c9 0e20 	rsb	lr, r9, #32
 800bec2:	6818      	ldr	r0, [r3, #0]
 800bec4:	fa00 f009 	lsl.w	r0, r0, r9
 800bec8:	4302      	orrs	r2, r0
 800beca:	f84a 2b04 	str.w	r2, [sl], #4
 800bece:	f853 2b04 	ldr.w	r2, [r3], #4
 800bed2:	459c      	cmp	ip, r3
 800bed4:	fa22 f20e 	lsr.w	r2, r2, lr
 800bed8:	d8f3      	bhi.n	800bec2 <__lshift+0x6e>
 800beda:	ebac 0304 	sub.w	r3, ip, r4
 800bede:	3b15      	subs	r3, #21
 800bee0:	f023 0303 	bic.w	r3, r3, #3
 800bee4:	3304      	adds	r3, #4
 800bee6:	f104 0015 	add.w	r0, r4, #21
 800beea:	4584      	cmp	ip, r0
 800beec:	bf38      	it	cc
 800beee:	2304      	movcc	r3, #4
 800bef0:	50ca      	str	r2, [r1, r3]
 800bef2:	b10a      	cbz	r2, 800bef8 <__lshift+0xa4>
 800bef4:	f108 0602 	add.w	r6, r8, #2
 800bef8:	3e01      	subs	r6, #1
 800befa:	4638      	mov	r0, r7
 800befc:	4621      	mov	r1, r4
 800befe:	612e      	str	r6, [r5, #16]
 800bf00:	f7ff fd90 	bl	800ba24 <_Bfree>
 800bf04:	4628      	mov	r0, r5
 800bf06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf0a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf0e:	3301      	adds	r3, #1
 800bf10:	e7c5      	b.n	800be9e <__lshift+0x4a>
 800bf12:	3904      	subs	r1, #4
 800bf14:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf18:	459c      	cmp	ip, r3
 800bf1a:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf1e:	d8f9      	bhi.n	800bf14 <__lshift+0xc0>
 800bf20:	e7ea      	b.n	800bef8 <__lshift+0xa4>
 800bf22:	bf00      	nop
 800bf24:	0800cbcc 	.word	0x0800cbcc
 800bf28:	0800ccc0 	.word	0x0800ccc0

0800bf2c <__mcmp>:
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	690a      	ldr	r2, [r1, #16]
 800bf30:	6900      	ldr	r0, [r0, #16]
 800bf32:	b530      	push	{r4, r5, lr}
 800bf34:	1a80      	subs	r0, r0, r2
 800bf36:	d10d      	bne.n	800bf54 <__mcmp+0x28>
 800bf38:	3314      	adds	r3, #20
 800bf3a:	3114      	adds	r1, #20
 800bf3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bf40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bf44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bf48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bf4c:	4295      	cmp	r5, r2
 800bf4e:	d002      	beq.n	800bf56 <__mcmp+0x2a>
 800bf50:	d304      	bcc.n	800bf5c <__mcmp+0x30>
 800bf52:	2001      	movs	r0, #1
 800bf54:	bd30      	pop	{r4, r5, pc}
 800bf56:	42a3      	cmp	r3, r4
 800bf58:	d3f4      	bcc.n	800bf44 <__mcmp+0x18>
 800bf5a:	e7fb      	b.n	800bf54 <__mcmp+0x28>
 800bf5c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf60:	e7f8      	b.n	800bf54 <__mcmp+0x28>
	...

0800bf64 <__mdiff>:
 800bf64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf68:	460c      	mov	r4, r1
 800bf6a:	4606      	mov	r6, r0
 800bf6c:	4611      	mov	r1, r2
 800bf6e:	4620      	mov	r0, r4
 800bf70:	4692      	mov	sl, r2
 800bf72:	f7ff ffdb 	bl	800bf2c <__mcmp>
 800bf76:	1e05      	subs	r5, r0, #0
 800bf78:	d111      	bne.n	800bf9e <__mdiff+0x3a>
 800bf7a:	4629      	mov	r1, r5
 800bf7c:	4630      	mov	r0, r6
 800bf7e:	f7ff fd11 	bl	800b9a4 <_Balloc>
 800bf82:	4602      	mov	r2, r0
 800bf84:	b928      	cbnz	r0, 800bf92 <__mdiff+0x2e>
 800bf86:	f240 2132 	movw	r1, #562	; 0x232
 800bf8a:	4b3c      	ldr	r3, [pc, #240]	; (800c07c <__mdiff+0x118>)
 800bf8c:	483c      	ldr	r0, [pc, #240]	; (800c080 <__mdiff+0x11c>)
 800bf8e:	f7fc f835 	bl	8007ffc <__assert_func>
 800bf92:	2301      	movs	r3, #1
 800bf94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bf98:	4610      	mov	r0, r2
 800bf9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf9e:	bfa4      	itt	ge
 800bfa0:	4653      	movge	r3, sl
 800bfa2:	46a2      	movge	sl, r4
 800bfa4:	4630      	mov	r0, r6
 800bfa6:	f8da 1004 	ldr.w	r1, [sl, #4]
 800bfaa:	bfa6      	itte	ge
 800bfac:	461c      	movge	r4, r3
 800bfae:	2500      	movge	r5, #0
 800bfb0:	2501      	movlt	r5, #1
 800bfb2:	f7ff fcf7 	bl	800b9a4 <_Balloc>
 800bfb6:	4602      	mov	r2, r0
 800bfb8:	b918      	cbnz	r0, 800bfc2 <__mdiff+0x5e>
 800bfba:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bfbe:	4b2f      	ldr	r3, [pc, #188]	; (800c07c <__mdiff+0x118>)
 800bfc0:	e7e4      	b.n	800bf8c <__mdiff+0x28>
 800bfc2:	f100 0814 	add.w	r8, r0, #20
 800bfc6:	f8da 7010 	ldr.w	r7, [sl, #16]
 800bfca:	60c5      	str	r5, [r0, #12]
 800bfcc:	f04f 0c00 	mov.w	ip, #0
 800bfd0:	f10a 0514 	add.w	r5, sl, #20
 800bfd4:	f10a 0010 	add.w	r0, sl, #16
 800bfd8:	46c2      	mov	sl, r8
 800bfda:	6926      	ldr	r6, [r4, #16]
 800bfdc:	f104 0914 	add.w	r9, r4, #20
 800bfe0:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800bfe4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bfe8:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800bfec:	f859 3b04 	ldr.w	r3, [r9], #4
 800bff0:	fa1f f18b 	uxth.w	r1, fp
 800bff4:	4461      	add	r1, ip
 800bff6:	fa1f fc83 	uxth.w	ip, r3
 800bffa:	0c1b      	lsrs	r3, r3, #16
 800bffc:	eba1 010c 	sub.w	r1, r1, ip
 800c000:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c004:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c008:	b289      	uxth	r1, r1
 800c00a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c00e:	454e      	cmp	r6, r9
 800c010:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c014:	f84a 3b04 	str.w	r3, [sl], #4
 800c018:	d8e6      	bhi.n	800bfe8 <__mdiff+0x84>
 800c01a:	1b33      	subs	r3, r6, r4
 800c01c:	3b15      	subs	r3, #21
 800c01e:	f023 0303 	bic.w	r3, r3, #3
 800c022:	3415      	adds	r4, #21
 800c024:	3304      	adds	r3, #4
 800c026:	42a6      	cmp	r6, r4
 800c028:	bf38      	it	cc
 800c02a:	2304      	movcc	r3, #4
 800c02c:	441d      	add	r5, r3
 800c02e:	4443      	add	r3, r8
 800c030:	461e      	mov	r6, r3
 800c032:	462c      	mov	r4, r5
 800c034:	4574      	cmp	r4, lr
 800c036:	d30e      	bcc.n	800c056 <__mdiff+0xf2>
 800c038:	f10e 0103 	add.w	r1, lr, #3
 800c03c:	1b49      	subs	r1, r1, r5
 800c03e:	f021 0103 	bic.w	r1, r1, #3
 800c042:	3d03      	subs	r5, #3
 800c044:	45ae      	cmp	lr, r5
 800c046:	bf38      	it	cc
 800c048:	2100      	movcc	r1, #0
 800c04a:	4419      	add	r1, r3
 800c04c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c050:	b18b      	cbz	r3, 800c076 <__mdiff+0x112>
 800c052:	6117      	str	r7, [r2, #16]
 800c054:	e7a0      	b.n	800bf98 <__mdiff+0x34>
 800c056:	f854 8b04 	ldr.w	r8, [r4], #4
 800c05a:	fa1f f188 	uxth.w	r1, r8
 800c05e:	4461      	add	r1, ip
 800c060:	1408      	asrs	r0, r1, #16
 800c062:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800c066:	b289      	uxth	r1, r1
 800c068:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c06c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c070:	f846 1b04 	str.w	r1, [r6], #4
 800c074:	e7de      	b.n	800c034 <__mdiff+0xd0>
 800c076:	3f01      	subs	r7, #1
 800c078:	e7e8      	b.n	800c04c <__mdiff+0xe8>
 800c07a:	bf00      	nop
 800c07c:	0800cbcc 	.word	0x0800cbcc
 800c080:	0800ccc0 	.word	0x0800ccc0

0800c084 <__ulp>:
 800c084:	4b11      	ldr	r3, [pc, #68]	; (800c0cc <__ulp+0x48>)
 800c086:	400b      	ands	r3, r1
 800c088:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	dd02      	ble.n	800c096 <__ulp+0x12>
 800c090:	2000      	movs	r0, #0
 800c092:	4619      	mov	r1, r3
 800c094:	4770      	bx	lr
 800c096:	425b      	negs	r3, r3
 800c098:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c09c:	f04f 0000 	mov.w	r0, #0
 800c0a0:	f04f 0100 	mov.w	r1, #0
 800c0a4:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c0a8:	da04      	bge.n	800c0b4 <__ulp+0x30>
 800c0aa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c0ae:	fa43 f102 	asr.w	r1, r3, r2
 800c0b2:	4770      	bx	lr
 800c0b4:	f1a2 0314 	sub.w	r3, r2, #20
 800c0b8:	2b1e      	cmp	r3, #30
 800c0ba:	bfd6      	itet	le
 800c0bc:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c0c0:	2301      	movgt	r3, #1
 800c0c2:	fa22 f303 	lsrle.w	r3, r2, r3
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	4770      	bx	lr
 800c0ca:	bf00      	nop
 800c0cc:	7ff00000 	.word	0x7ff00000

0800c0d0 <__b2d>:
 800c0d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0d4:	6907      	ldr	r7, [r0, #16]
 800c0d6:	f100 0914 	add.w	r9, r0, #20
 800c0da:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800c0de:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800c0e2:	f1a7 0804 	sub.w	r8, r7, #4
 800c0e6:	4630      	mov	r0, r6
 800c0e8:	f7ff fd52 	bl	800bb90 <__hi0bits>
 800c0ec:	f1c0 0320 	rsb	r3, r0, #32
 800c0f0:	280a      	cmp	r0, #10
 800c0f2:	600b      	str	r3, [r1, #0]
 800c0f4:	491f      	ldr	r1, [pc, #124]	; (800c174 <__b2d+0xa4>)
 800c0f6:	dc17      	bgt.n	800c128 <__b2d+0x58>
 800c0f8:	45c1      	cmp	r9, r8
 800c0fa:	bf28      	it	cs
 800c0fc:	2200      	movcs	r2, #0
 800c0fe:	f1c0 0c0b 	rsb	ip, r0, #11
 800c102:	fa26 f30c 	lsr.w	r3, r6, ip
 800c106:	bf38      	it	cc
 800c108:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c10c:	ea43 0501 	orr.w	r5, r3, r1
 800c110:	f100 0315 	add.w	r3, r0, #21
 800c114:	fa06 f303 	lsl.w	r3, r6, r3
 800c118:	fa22 f20c 	lsr.w	r2, r2, ip
 800c11c:	ea43 0402 	orr.w	r4, r3, r2
 800c120:	4620      	mov	r0, r4
 800c122:	4629      	mov	r1, r5
 800c124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c128:	45c1      	cmp	r9, r8
 800c12a:	bf2e      	itee	cs
 800c12c:	2200      	movcs	r2, #0
 800c12e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c132:	f1a7 0808 	subcc.w	r8, r7, #8
 800c136:	f1b0 030b 	subs.w	r3, r0, #11
 800c13a:	d016      	beq.n	800c16a <__b2d+0x9a>
 800c13c:	f1c3 0720 	rsb	r7, r3, #32
 800c140:	fa22 f107 	lsr.w	r1, r2, r7
 800c144:	45c8      	cmp	r8, r9
 800c146:	fa06 f603 	lsl.w	r6, r6, r3
 800c14a:	ea46 0601 	orr.w	r6, r6, r1
 800c14e:	bf94      	ite	ls
 800c150:	2100      	movls	r1, #0
 800c152:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800c156:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800c15a:	fa02 f003 	lsl.w	r0, r2, r3
 800c15e:	40f9      	lsrs	r1, r7
 800c160:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c164:	ea40 0401 	orr.w	r4, r0, r1
 800c168:	e7da      	b.n	800c120 <__b2d+0x50>
 800c16a:	4614      	mov	r4, r2
 800c16c:	ea46 0501 	orr.w	r5, r6, r1
 800c170:	e7d6      	b.n	800c120 <__b2d+0x50>
 800c172:	bf00      	nop
 800c174:	3ff00000 	.word	0x3ff00000

0800c178 <__d2b>:
 800c178:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c17c:	2101      	movs	r1, #1
 800c17e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c182:	4690      	mov	r8, r2
 800c184:	461d      	mov	r5, r3
 800c186:	f7ff fc0d 	bl	800b9a4 <_Balloc>
 800c18a:	4604      	mov	r4, r0
 800c18c:	b930      	cbnz	r0, 800c19c <__d2b+0x24>
 800c18e:	4602      	mov	r2, r0
 800c190:	f240 310a 	movw	r1, #778	; 0x30a
 800c194:	4b24      	ldr	r3, [pc, #144]	; (800c228 <__d2b+0xb0>)
 800c196:	4825      	ldr	r0, [pc, #148]	; (800c22c <__d2b+0xb4>)
 800c198:	f7fb ff30 	bl	8007ffc <__assert_func>
 800c19c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c1a0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c1a4:	bb2d      	cbnz	r5, 800c1f2 <__d2b+0x7a>
 800c1a6:	9301      	str	r3, [sp, #4]
 800c1a8:	f1b8 0300 	subs.w	r3, r8, #0
 800c1ac:	d026      	beq.n	800c1fc <__d2b+0x84>
 800c1ae:	4668      	mov	r0, sp
 800c1b0:	9300      	str	r3, [sp, #0]
 800c1b2:	f7ff fd0d 	bl	800bbd0 <__lo0bits>
 800c1b6:	9900      	ldr	r1, [sp, #0]
 800c1b8:	b1f0      	cbz	r0, 800c1f8 <__d2b+0x80>
 800c1ba:	9a01      	ldr	r2, [sp, #4]
 800c1bc:	f1c0 0320 	rsb	r3, r0, #32
 800c1c0:	fa02 f303 	lsl.w	r3, r2, r3
 800c1c4:	430b      	orrs	r3, r1
 800c1c6:	40c2      	lsrs	r2, r0
 800c1c8:	6163      	str	r3, [r4, #20]
 800c1ca:	9201      	str	r2, [sp, #4]
 800c1cc:	9b01      	ldr	r3, [sp, #4]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	bf14      	ite	ne
 800c1d2:	2102      	movne	r1, #2
 800c1d4:	2101      	moveq	r1, #1
 800c1d6:	61a3      	str	r3, [r4, #24]
 800c1d8:	6121      	str	r1, [r4, #16]
 800c1da:	b1c5      	cbz	r5, 800c20e <__d2b+0x96>
 800c1dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c1e0:	4405      	add	r5, r0
 800c1e2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c1e6:	603d      	str	r5, [r7, #0]
 800c1e8:	6030      	str	r0, [r6, #0]
 800c1ea:	4620      	mov	r0, r4
 800c1ec:	b002      	add	sp, #8
 800c1ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c1f6:	e7d6      	b.n	800c1a6 <__d2b+0x2e>
 800c1f8:	6161      	str	r1, [r4, #20]
 800c1fa:	e7e7      	b.n	800c1cc <__d2b+0x54>
 800c1fc:	a801      	add	r0, sp, #4
 800c1fe:	f7ff fce7 	bl	800bbd0 <__lo0bits>
 800c202:	2101      	movs	r1, #1
 800c204:	9b01      	ldr	r3, [sp, #4]
 800c206:	6121      	str	r1, [r4, #16]
 800c208:	6163      	str	r3, [r4, #20]
 800c20a:	3020      	adds	r0, #32
 800c20c:	e7e5      	b.n	800c1da <__d2b+0x62>
 800c20e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c212:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c216:	6038      	str	r0, [r7, #0]
 800c218:	6918      	ldr	r0, [r3, #16]
 800c21a:	f7ff fcb9 	bl	800bb90 <__hi0bits>
 800c21e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c222:	6031      	str	r1, [r6, #0]
 800c224:	e7e1      	b.n	800c1ea <__d2b+0x72>
 800c226:	bf00      	nop
 800c228:	0800cbcc 	.word	0x0800cbcc
 800c22c:	0800ccc0 	.word	0x0800ccc0

0800c230 <__ratio>:
 800c230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c234:	4688      	mov	r8, r1
 800c236:	4669      	mov	r1, sp
 800c238:	4681      	mov	r9, r0
 800c23a:	f7ff ff49 	bl	800c0d0 <__b2d>
 800c23e:	460f      	mov	r7, r1
 800c240:	4604      	mov	r4, r0
 800c242:	460d      	mov	r5, r1
 800c244:	4640      	mov	r0, r8
 800c246:	a901      	add	r1, sp, #4
 800c248:	f7ff ff42 	bl	800c0d0 <__b2d>
 800c24c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c250:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c254:	468b      	mov	fp, r1
 800c256:	eba3 0c02 	sub.w	ip, r3, r2
 800c25a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c25e:	1a9b      	subs	r3, r3, r2
 800c260:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c264:	2b00      	cmp	r3, #0
 800c266:	bfd5      	itete	le
 800c268:	460a      	movle	r2, r1
 800c26a:	462a      	movgt	r2, r5
 800c26c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c270:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c274:	bfd8      	it	le
 800c276:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c27a:	465b      	mov	r3, fp
 800c27c:	4602      	mov	r2, r0
 800c27e:	4639      	mov	r1, r7
 800c280:	4620      	mov	r0, r4
 800c282:	f7f4 fa53 	bl	800072c <__aeabi_ddiv>
 800c286:	b003      	add	sp, #12
 800c288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c28c <__copybits>:
 800c28c:	3901      	subs	r1, #1
 800c28e:	b570      	push	{r4, r5, r6, lr}
 800c290:	1149      	asrs	r1, r1, #5
 800c292:	6914      	ldr	r4, [r2, #16]
 800c294:	3101      	adds	r1, #1
 800c296:	f102 0314 	add.w	r3, r2, #20
 800c29a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c29e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c2a2:	1f05      	subs	r5, r0, #4
 800c2a4:	42a3      	cmp	r3, r4
 800c2a6:	d30c      	bcc.n	800c2c2 <__copybits+0x36>
 800c2a8:	1aa3      	subs	r3, r4, r2
 800c2aa:	3b11      	subs	r3, #17
 800c2ac:	f023 0303 	bic.w	r3, r3, #3
 800c2b0:	3211      	adds	r2, #17
 800c2b2:	42a2      	cmp	r2, r4
 800c2b4:	bf88      	it	hi
 800c2b6:	2300      	movhi	r3, #0
 800c2b8:	4418      	add	r0, r3
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	4288      	cmp	r0, r1
 800c2be:	d305      	bcc.n	800c2cc <__copybits+0x40>
 800c2c0:	bd70      	pop	{r4, r5, r6, pc}
 800c2c2:	f853 6b04 	ldr.w	r6, [r3], #4
 800c2c6:	f845 6f04 	str.w	r6, [r5, #4]!
 800c2ca:	e7eb      	b.n	800c2a4 <__copybits+0x18>
 800c2cc:	f840 3b04 	str.w	r3, [r0], #4
 800c2d0:	e7f4      	b.n	800c2bc <__copybits+0x30>

0800c2d2 <__any_on>:
 800c2d2:	f100 0214 	add.w	r2, r0, #20
 800c2d6:	6900      	ldr	r0, [r0, #16]
 800c2d8:	114b      	asrs	r3, r1, #5
 800c2da:	4298      	cmp	r0, r3
 800c2dc:	b510      	push	{r4, lr}
 800c2de:	db11      	blt.n	800c304 <__any_on+0x32>
 800c2e0:	dd0a      	ble.n	800c2f8 <__any_on+0x26>
 800c2e2:	f011 011f 	ands.w	r1, r1, #31
 800c2e6:	d007      	beq.n	800c2f8 <__any_on+0x26>
 800c2e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c2ec:	fa24 f001 	lsr.w	r0, r4, r1
 800c2f0:	fa00 f101 	lsl.w	r1, r0, r1
 800c2f4:	428c      	cmp	r4, r1
 800c2f6:	d10b      	bne.n	800c310 <__any_on+0x3e>
 800c2f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	d803      	bhi.n	800c308 <__any_on+0x36>
 800c300:	2000      	movs	r0, #0
 800c302:	bd10      	pop	{r4, pc}
 800c304:	4603      	mov	r3, r0
 800c306:	e7f7      	b.n	800c2f8 <__any_on+0x26>
 800c308:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c30c:	2900      	cmp	r1, #0
 800c30e:	d0f5      	beq.n	800c2fc <__any_on+0x2a>
 800c310:	2001      	movs	r0, #1
 800c312:	e7f6      	b.n	800c302 <__any_on+0x30>

0800c314 <_calloc_r>:
 800c314:	b538      	push	{r3, r4, r5, lr}
 800c316:	fb02 f501 	mul.w	r5, r2, r1
 800c31a:	4629      	mov	r1, r5
 800c31c:	f7fb ff32 	bl	8008184 <_malloc_r>
 800c320:	4604      	mov	r4, r0
 800c322:	b118      	cbz	r0, 800c32c <_calloc_r+0x18>
 800c324:	462a      	mov	r2, r5
 800c326:	2100      	movs	r1, #0
 800c328:	f7fb fed8 	bl	80080dc <memset>
 800c32c:	4620      	mov	r0, r4
 800c32e:	bd38      	pop	{r3, r4, r5, pc}

0800c330 <_realloc_r>:
 800c330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c332:	4607      	mov	r7, r0
 800c334:	4614      	mov	r4, r2
 800c336:	460e      	mov	r6, r1
 800c338:	b921      	cbnz	r1, 800c344 <_realloc_r+0x14>
 800c33a:	4611      	mov	r1, r2
 800c33c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c340:	f7fb bf20 	b.w	8008184 <_malloc_r>
 800c344:	b922      	cbnz	r2, 800c350 <_realloc_r+0x20>
 800c346:	f7fb fed1 	bl	80080ec <_free_r>
 800c34a:	4625      	mov	r5, r4
 800c34c:	4628      	mov	r0, r5
 800c34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c350:	f000 fa72 	bl	800c838 <_malloc_usable_size_r>
 800c354:	42a0      	cmp	r0, r4
 800c356:	d20f      	bcs.n	800c378 <_realloc_r+0x48>
 800c358:	4621      	mov	r1, r4
 800c35a:	4638      	mov	r0, r7
 800c35c:	f7fb ff12 	bl	8008184 <_malloc_r>
 800c360:	4605      	mov	r5, r0
 800c362:	2800      	cmp	r0, #0
 800c364:	d0f2      	beq.n	800c34c <_realloc_r+0x1c>
 800c366:	4631      	mov	r1, r6
 800c368:	4622      	mov	r2, r4
 800c36a:	f7fb fea9 	bl	80080c0 <memcpy>
 800c36e:	4631      	mov	r1, r6
 800c370:	4638      	mov	r0, r7
 800c372:	f7fb febb 	bl	80080ec <_free_r>
 800c376:	e7e9      	b.n	800c34c <_realloc_r+0x1c>
 800c378:	4635      	mov	r5, r6
 800c37a:	e7e7      	b.n	800c34c <_realloc_r+0x1c>

0800c37c <__ssputs_r>:
 800c37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c380:	688e      	ldr	r6, [r1, #8]
 800c382:	4682      	mov	sl, r0
 800c384:	429e      	cmp	r6, r3
 800c386:	460c      	mov	r4, r1
 800c388:	4690      	mov	r8, r2
 800c38a:	461f      	mov	r7, r3
 800c38c:	d838      	bhi.n	800c400 <__ssputs_r+0x84>
 800c38e:	898a      	ldrh	r2, [r1, #12]
 800c390:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c394:	d032      	beq.n	800c3fc <__ssputs_r+0x80>
 800c396:	6825      	ldr	r5, [r4, #0]
 800c398:	6909      	ldr	r1, [r1, #16]
 800c39a:	3301      	adds	r3, #1
 800c39c:	eba5 0901 	sub.w	r9, r5, r1
 800c3a0:	6965      	ldr	r5, [r4, #20]
 800c3a2:	444b      	add	r3, r9
 800c3a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c3a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c3ac:	106d      	asrs	r5, r5, #1
 800c3ae:	429d      	cmp	r5, r3
 800c3b0:	bf38      	it	cc
 800c3b2:	461d      	movcc	r5, r3
 800c3b4:	0553      	lsls	r3, r2, #21
 800c3b6:	d531      	bpl.n	800c41c <__ssputs_r+0xa0>
 800c3b8:	4629      	mov	r1, r5
 800c3ba:	f7fb fee3 	bl	8008184 <_malloc_r>
 800c3be:	4606      	mov	r6, r0
 800c3c0:	b950      	cbnz	r0, 800c3d8 <__ssputs_r+0x5c>
 800c3c2:	230c      	movs	r3, #12
 800c3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3c8:	f8ca 3000 	str.w	r3, [sl]
 800c3cc:	89a3      	ldrh	r3, [r4, #12]
 800c3ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3d2:	81a3      	strh	r3, [r4, #12]
 800c3d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3d8:	464a      	mov	r2, r9
 800c3da:	6921      	ldr	r1, [r4, #16]
 800c3dc:	f7fb fe70 	bl	80080c0 <memcpy>
 800c3e0:	89a3      	ldrh	r3, [r4, #12]
 800c3e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c3e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3ea:	81a3      	strh	r3, [r4, #12]
 800c3ec:	6126      	str	r6, [r4, #16]
 800c3ee:	444e      	add	r6, r9
 800c3f0:	6026      	str	r6, [r4, #0]
 800c3f2:	463e      	mov	r6, r7
 800c3f4:	6165      	str	r5, [r4, #20]
 800c3f6:	eba5 0509 	sub.w	r5, r5, r9
 800c3fa:	60a5      	str	r5, [r4, #8]
 800c3fc:	42be      	cmp	r6, r7
 800c3fe:	d900      	bls.n	800c402 <__ssputs_r+0x86>
 800c400:	463e      	mov	r6, r7
 800c402:	4632      	mov	r2, r6
 800c404:	4641      	mov	r1, r8
 800c406:	6820      	ldr	r0, [r4, #0]
 800c408:	f7ff faa6 	bl	800b958 <memmove>
 800c40c:	68a3      	ldr	r3, [r4, #8]
 800c40e:	6822      	ldr	r2, [r4, #0]
 800c410:	1b9b      	subs	r3, r3, r6
 800c412:	4432      	add	r2, r6
 800c414:	2000      	movs	r0, #0
 800c416:	60a3      	str	r3, [r4, #8]
 800c418:	6022      	str	r2, [r4, #0]
 800c41a:	e7db      	b.n	800c3d4 <__ssputs_r+0x58>
 800c41c:	462a      	mov	r2, r5
 800c41e:	f7ff ff87 	bl	800c330 <_realloc_r>
 800c422:	4606      	mov	r6, r0
 800c424:	2800      	cmp	r0, #0
 800c426:	d1e1      	bne.n	800c3ec <__ssputs_r+0x70>
 800c428:	4650      	mov	r0, sl
 800c42a:	6921      	ldr	r1, [r4, #16]
 800c42c:	f7fb fe5e 	bl	80080ec <_free_r>
 800c430:	e7c7      	b.n	800c3c2 <__ssputs_r+0x46>
	...

0800c434 <_svfiprintf_r>:
 800c434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c438:	4698      	mov	r8, r3
 800c43a:	898b      	ldrh	r3, [r1, #12]
 800c43c:	4607      	mov	r7, r0
 800c43e:	061b      	lsls	r3, r3, #24
 800c440:	460d      	mov	r5, r1
 800c442:	4614      	mov	r4, r2
 800c444:	b09d      	sub	sp, #116	; 0x74
 800c446:	d50e      	bpl.n	800c466 <_svfiprintf_r+0x32>
 800c448:	690b      	ldr	r3, [r1, #16]
 800c44a:	b963      	cbnz	r3, 800c466 <_svfiprintf_r+0x32>
 800c44c:	2140      	movs	r1, #64	; 0x40
 800c44e:	f7fb fe99 	bl	8008184 <_malloc_r>
 800c452:	6028      	str	r0, [r5, #0]
 800c454:	6128      	str	r0, [r5, #16]
 800c456:	b920      	cbnz	r0, 800c462 <_svfiprintf_r+0x2e>
 800c458:	230c      	movs	r3, #12
 800c45a:	603b      	str	r3, [r7, #0]
 800c45c:	f04f 30ff 	mov.w	r0, #4294967295
 800c460:	e0d1      	b.n	800c606 <_svfiprintf_r+0x1d2>
 800c462:	2340      	movs	r3, #64	; 0x40
 800c464:	616b      	str	r3, [r5, #20]
 800c466:	2300      	movs	r3, #0
 800c468:	9309      	str	r3, [sp, #36]	; 0x24
 800c46a:	2320      	movs	r3, #32
 800c46c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c470:	2330      	movs	r3, #48	; 0x30
 800c472:	f04f 0901 	mov.w	r9, #1
 800c476:	f8cd 800c 	str.w	r8, [sp, #12]
 800c47a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c620 <_svfiprintf_r+0x1ec>
 800c47e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c482:	4623      	mov	r3, r4
 800c484:	469a      	mov	sl, r3
 800c486:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c48a:	b10a      	cbz	r2, 800c490 <_svfiprintf_r+0x5c>
 800c48c:	2a25      	cmp	r2, #37	; 0x25
 800c48e:	d1f9      	bne.n	800c484 <_svfiprintf_r+0x50>
 800c490:	ebba 0b04 	subs.w	fp, sl, r4
 800c494:	d00b      	beq.n	800c4ae <_svfiprintf_r+0x7a>
 800c496:	465b      	mov	r3, fp
 800c498:	4622      	mov	r2, r4
 800c49a:	4629      	mov	r1, r5
 800c49c:	4638      	mov	r0, r7
 800c49e:	f7ff ff6d 	bl	800c37c <__ssputs_r>
 800c4a2:	3001      	adds	r0, #1
 800c4a4:	f000 80aa 	beq.w	800c5fc <_svfiprintf_r+0x1c8>
 800c4a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4aa:	445a      	add	r2, fp
 800c4ac:	9209      	str	r2, [sp, #36]	; 0x24
 800c4ae:	f89a 3000 	ldrb.w	r3, [sl]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	f000 80a2 	beq.w	800c5fc <_svfiprintf_r+0x1c8>
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	f04f 32ff 	mov.w	r2, #4294967295
 800c4be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4c2:	f10a 0a01 	add.w	sl, sl, #1
 800c4c6:	9304      	str	r3, [sp, #16]
 800c4c8:	9307      	str	r3, [sp, #28]
 800c4ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4ce:	931a      	str	r3, [sp, #104]	; 0x68
 800c4d0:	4654      	mov	r4, sl
 800c4d2:	2205      	movs	r2, #5
 800c4d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4d8:	4851      	ldr	r0, [pc, #324]	; (800c620 <_svfiprintf_r+0x1ec>)
 800c4da:	f7ff fa2f 	bl	800b93c <memchr>
 800c4de:	9a04      	ldr	r2, [sp, #16]
 800c4e0:	b9d8      	cbnz	r0, 800c51a <_svfiprintf_r+0xe6>
 800c4e2:	06d0      	lsls	r0, r2, #27
 800c4e4:	bf44      	itt	mi
 800c4e6:	2320      	movmi	r3, #32
 800c4e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4ec:	0711      	lsls	r1, r2, #28
 800c4ee:	bf44      	itt	mi
 800c4f0:	232b      	movmi	r3, #43	; 0x2b
 800c4f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4f6:	f89a 3000 	ldrb.w	r3, [sl]
 800c4fa:	2b2a      	cmp	r3, #42	; 0x2a
 800c4fc:	d015      	beq.n	800c52a <_svfiprintf_r+0xf6>
 800c4fe:	4654      	mov	r4, sl
 800c500:	2000      	movs	r0, #0
 800c502:	f04f 0c0a 	mov.w	ip, #10
 800c506:	9a07      	ldr	r2, [sp, #28]
 800c508:	4621      	mov	r1, r4
 800c50a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c50e:	3b30      	subs	r3, #48	; 0x30
 800c510:	2b09      	cmp	r3, #9
 800c512:	d94e      	bls.n	800c5b2 <_svfiprintf_r+0x17e>
 800c514:	b1b0      	cbz	r0, 800c544 <_svfiprintf_r+0x110>
 800c516:	9207      	str	r2, [sp, #28]
 800c518:	e014      	b.n	800c544 <_svfiprintf_r+0x110>
 800c51a:	eba0 0308 	sub.w	r3, r0, r8
 800c51e:	fa09 f303 	lsl.w	r3, r9, r3
 800c522:	4313      	orrs	r3, r2
 800c524:	46a2      	mov	sl, r4
 800c526:	9304      	str	r3, [sp, #16]
 800c528:	e7d2      	b.n	800c4d0 <_svfiprintf_r+0x9c>
 800c52a:	9b03      	ldr	r3, [sp, #12]
 800c52c:	1d19      	adds	r1, r3, #4
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	9103      	str	r1, [sp, #12]
 800c532:	2b00      	cmp	r3, #0
 800c534:	bfbb      	ittet	lt
 800c536:	425b      	neglt	r3, r3
 800c538:	f042 0202 	orrlt.w	r2, r2, #2
 800c53c:	9307      	strge	r3, [sp, #28]
 800c53e:	9307      	strlt	r3, [sp, #28]
 800c540:	bfb8      	it	lt
 800c542:	9204      	strlt	r2, [sp, #16]
 800c544:	7823      	ldrb	r3, [r4, #0]
 800c546:	2b2e      	cmp	r3, #46	; 0x2e
 800c548:	d10c      	bne.n	800c564 <_svfiprintf_r+0x130>
 800c54a:	7863      	ldrb	r3, [r4, #1]
 800c54c:	2b2a      	cmp	r3, #42	; 0x2a
 800c54e:	d135      	bne.n	800c5bc <_svfiprintf_r+0x188>
 800c550:	9b03      	ldr	r3, [sp, #12]
 800c552:	3402      	adds	r4, #2
 800c554:	1d1a      	adds	r2, r3, #4
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	9203      	str	r2, [sp, #12]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	bfb8      	it	lt
 800c55e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c562:	9305      	str	r3, [sp, #20]
 800c564:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c630 <_svfiprintf_r+0x1fc>
 800c568:	2203      	movs	r2, #3
 800c56a:	4650      	mov	r0, sl
 800c56c:	7821      	ldrb	r1, [r4, #0]
 800c56e:	f7ff f9e5 	bl	800b93c <memchr>
 800c572:	b140      	cbz	r0, 800c586 <_svfiprintf_r+0x152>
 800c574:	2340      	movs	r3, #64	; 0x40
 800c576:	eba0 000a 	sub.w	r0, r0, sl
 800c57a:	fa03 f000 	lsl.w	r0, r3, r0
 800c57e:	9b04      	ldr	r3, [sp, #16]
 800c580:	3401      	adds	r4, #1
 800c582:	4303      	orrs	r3, r0
 800c584:	9304      	str	r3, [sp, #16]
 800c586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c58a:	2206      	movs	r2, #6
 800c58c:	4825      	ldr	r0, [pc, #148]	; (800c624 <_svfiprintf_r+0x1f0>)
 800c58e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c592:	f7ff f9d3 	bl	800b93c <memchr>
 800c596:	2800      	cmp	r0, #0
 800c598:	d038      	beq.n	800c60c <_svfiprintf_r+0x1d8>
 800c59a:	4b23      	ldr	r3, [pc, #140]	; (800c628 <_svfiprintf_r+0x1f4>)
 800c59c:	bb1b      	cbnz	r3, 800c5e6 <_svfiprintf_r+0x1b2>
 800c59e:	9b03      	ldr	r3, [sp, #12]
 800c5a0:	3307      	adds	r3, #7
 800c5a2:	f023 0307 	bic.w	r3, r3, #7
 800c5a6:	3308      	adds	r3, #8
 800c5a8:	9303      	str	r3, [sp, #12]
 800c5aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5ac:	4433      	add	r3, r6
 800c5ae:	9309      	str	r3, [sp, #36]	; 0x24
 800c5b0:	e767      	b.n	800c482 <_svfiprintf_r+0x4e>
 800c5b2:	460c      	mov	r4, r1
 800c5b4:	2001      	movs	r0, #1
 800c5b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5ba:	e7a5      	b.n	800c508 <_svfiprintf_r+0xd4>
 800c5bc:	2300      	movs	r3, #0
 800c5be:	f04f 0c0a 	mov.w	ip, #10
 800c5c2:	4619      	mov	r1, r3
 800c5c4:	3401      	adds	r4, #1
 800c5c6:	9305      	str	r3, [sp, #20]
 800c5c8:	4620      	mov	r0, r4
 800c5ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5ce:	3a30      	subs	r2, #48	; 0x30
 800c5d0:	2a09      	cmp	r2, #9
 800c5d2:	d903      	bls.n	800c5dc <_svfiprintf_r+0x1a8>
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d0c5      	beq.n	800c564 <_svfiprintf_r+0x130>
 800c5d8:	9105      	str	r1, [sp, #20]
 800c5da:	e7c3      	b.n	800c564 <_svfiprintf_r+0x130>
 800c5dc:	4604      	mov	r4, r0
 800c5de:	2301      	movs	r3, #1
 800c5e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5e4:	e7f0      	b.n	800c5c8 <_svfiprintf_r+0x194>
 800c5e6:	ab03      	add	r3, sp, #12
 800c5e8:	9300      	str	r3, [sp, #0]
 800c5ea:	462a      	mov	r2, r5
 800c5ec:	4638      	mov	r0, r7
 800c5ee:	4b0f      	ldr	r3, [pc, #60]	; (800c62c <_svfiprintf_r+0x1f8>)
 800c5f0:	a904      	add	r1, sp, #16
 800c5f2:	f7fc f817 	bl	8008624 <_printf_float>
 800c5f6:	1c42      	adds	r2, r0, #1
 800c5f8:	4606      	mov	r6, r0
 800c5fa:	d1d6      	bne.n	800c5aa <_svfiprintf_r+0x176>
 800c5fc:	89ab      	ldrh	r3, [r5, #12]
 800c5fe:	065b      	lsls	r3, r3, #25
 800c600:	f53f af2c 	bmi.w	800c45c <_svfiprintf_r+0x28>
 800c604:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c606:	b01d      	add	sp, #116	; 0x74
 800c608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c60c:	ab03      	add	r3, sp, #12
 800c60e:	9300      	str	r3, [sp, #0]
 800c610:	462a      	mov	r2, r5
 800c612:	4638      	mov	r0, r7
 800c614:	4b05      	ldr	r3, [pc, #20]	; (800c62c <_svfiprintf_r+0x1f8>)
 800c616:	a904      	add	r1, sp, #16
 800c618:	f7fc faa0 	bl	8008b5c <_printf_i>
 800c61c:	e7eb      	b.n	800c5f6 <_svfiprintf_r+0x1c2>
 800c61e:	bf00      	nop
 800c620:	0800c9ac 	.word	0x0800c9ac
 800c624:	0800c9b6 	.word	0x0800c9b6
 800c628:	08008625 	.word	0x08008625
 800c62c:	0800c37d 	.word	0x0800c37d
 800c630:	0800c9b2 	.word	0x0800c9b2

0800c634 <nan>:
 800c634:	2000      	movs	r0, #0
 800c636:	4901      	ldr	r1, [pc, #4]	; (800c63c <nan+0x8>)
 800c638:	4770      	bx	lr
 800c63a:	bf00      	nop
 800c63c:	7ff80000 	.word	0x7ff80000

0800c640 <_raise_r>:
 800c640:	291f      	cmp	r1, #31
 800c642:	b538      	push	{r3, r4, r5, lr}
 800c644:	4604      	mov	r4, r0
 800c646:	460d      	mov	r5, r1
 800c648:	d904      	bls.n	800c654 <_raise_r+0x14>
 800c64a:	2316      	movs	r3, #22
 800c64c:	6003      	str	r3, [r0, #0]
 800c64e:	f04f 30ff 	mov.w	r0, #4294967295
 800c652:	bd38      	pop	{r3, r4, r5, pc}
 800c654:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c656:	b112      	cbz	r2, 800c65e <_raise_r+0x1e>
 800c658:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c65c:	b94b      	cbnz	r3, 800c672 <_raise_r+0x32>
 800c65e:	4620      	mov	r0, r4
 800c660:	f000 f830 	bl	800c6c4 <_getpid_r>
 800c664:	462a      	mov	r2, r5
 800c666:	4601      	mov	r1, r0
 800c668:	4620      	mov	r0, r4
 800c66a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c66e:	f000 b817 	b.w	800c6a0 <_kill_r>
 800c672:	2b01      	cmp	r3, #1
 800c674:	d00a      	beq.n	800c68c <_raise_r+0x4c>
 800c676:	1c59      	adds	r1, r3, #1
 800c678:	d103      	bne.n	800c682 <_raise_r+0x42>
 800c67a:	2316      	movs	r3, #22
 800c67c:	6003      	str	r3, [r0, #0]
 800c67e:	2001      	movs	r0, #1
 800c680:	e7e7      	b.n	800c652 <_raise_r+0x12>
 800c682:	2400      	movs	r4, #0
 800c684:	4628      	mov	r0, r5
 800c686:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c68a:	4798      	blx	r3
 800c68c:	2000      	movs	r0, #0
 800c68e:	e7e0      	b.n	800c652 <_raise_r+0x12>

0800c690 <raise>:
 800c690:	4b02      	ldr	r3, [pc, #8]	; (800c69c <raise+0xc>)
 800c692:	4601      	mov	r1, r0
 800c694:	6818      	ldr	r0, [r3, #0]
 800c696:	f7ff bfd3 	b.w	800c640 <_raise_r>
 800c69a:	bf00      	nop
 800c69c:	20000054 	.word	0x20000054

0800c6a0 <_kill_r>:
 800c6a0:	b538      	push	{r3, r4, r5, lr}
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	4d06      	ldr	r5, [pc, #24]	; (800c6c0 <_kill_r+0x20>)
 800c6a6:	4604      	mov	r4, r0
 800c6a8:	4608      	mov	r0, r1
 800c6aa:	4611      	mov	r1, r2
 800c6ac:	602b      	str	r3, [r5, #0]
 800c6ae:	f7f5 ff4a 	bl	8002546 <_kill>
 800c6b2:	1c43      	adds	r3, r0, #1
 800c6b4:	d102      	bne.n	800c6bc <_kill_r+0x1c>
 800c6b6:	682b      	ldr	r3, [r5, #0]
 800c6b8:	b103      	cbz	r3, 800c6bc <_kill_r+0x1c>
 800c6ba:	6023      	str	r3, [r4, #0]
 800c6bc:	bd38      	pop	{r3, r4, r5, pc}
 800c6be:	bf00      	nop
 800c6c0:	20000a6c 	.word	0x20000a6c

0800c6c4 <_getpid_r>:
 800c6c4:	f7f5 bf38 	b.w	8002538 <_getpid>

0800c6c8 <__sread>:
 800c6c8:	b510      	push	{r4, lr}
 800c6ca:	460c      	mov	r4, r1
 800c6cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6d0:	f000 f8ba 	bl	800c848 <_read_r>
 800c6d4:	2800      	cmp	r0, #0
 800c6d6:	bfab      	itete	ge
 800c6d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c6da:	89a3      	ldrhlt	r3, [r4, #12]
 800c6dc:	181b      	addge	r3, r3, r0
 800c6de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c6e2:	bfac      	ite	ge
 800c6e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c6e6:	81a3      	strhlt	r3, [r4, #12]
 800c6e8:	bd10      	pop	{r4, pc}

0800c6ea <__swrite>:
 800c6ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ee:	461f      	mov	r7, r3
 800c6f0:	898b      	ldrh	r3, [r1, #12]
 800c6f2:	4605      	mov	r5, r0
 800c6f4:	05db      	lsls	r3, r3, #23
 800c6f6:	460c      	mov	r4, r1
 800c6f8:	4616      	mov	r6, r2
 800c6fa:	d505      	bpl.n	800c708 <__swrite+0x1e>
 800c6fc:	2302      	movs	r3, #2
 800c6fe:	2200      	movs	r2, #0
 800c700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c704:	f000 f886 	bl	800c814 <_lseek_r>
 800c708:	89a3      	ldrh	r3, [r4, #12]
 800c70a:	4632      	mov	r2, r6
 800c70c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c710:	81a3      	strh	r3, [r4, #12]
 800c712:	4628      	mov	r0, r5
 800c714:	463b      	mov	r3, r7
 800c716:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c71a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c71e:	f000 b835 	b.w	800c78c <_write_r>

0800c722 <__sseek>:
 800c722:	b510      	push	{r4, lr}
 800c724:	460c      	mov	r4, r1
 800c726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c72a:	f000 f873 	bl	800c814 <_lseek_r>
 800c72e:	1c43      	adds	r3, r0, #1
 800c730:	89a3      	ldrh	r3, [r4, #12]
 800c732:	bf15      	itete	ne
 800c734:	6560      	strne	r0, [r4, #84]	; 0x54
 800c736:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c73a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c73e:	81a3      	strheq	r3, [r4, #12]
 800c740:	bf18      	it	ne
 800c742:	81a3      	strhne	r3, [r4, #12]
 800c744:	bd10      	pop	{r4, pc}

0800c746 <__sclose>:
 800c746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c74a:	f000 b831 	b.w	800c7b0 <_close_r>

0800c74e <strncmp>:
 800c74e:	b510      	push	{r4, lr}
 800c750:	b16a      	cbz	r2, 800c76e <strncmp+0x20>
 800c752:	3901      	subs	r1, #1
 800c754:	1884      	adds	r4, r0, r2
 800c756:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c75a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c75e:	4293      	cmp	r3, r2
 800c760:	d103      	bne.n	800c76a <strncmp+0x1c>
 800c762:	42a0      	cmp	r0, r4
 800c764:	d001      	beq.n	800c76a <strncmp+0x1c>
 800c766:	2b00      	cmp	r3, #0
 800c768:	d1f5      	bne.n	800c756 <strncmp+0x8>
 800c76a:	1a98      	subs	r0, r3, r2
 800c76c:	bd10      	pop	{r4, pc}
 800c76e:	4610      	mov	r0, r2
 800c770:	e7fc      	b.n	800c76c <strncmp+0x1e>

0800c772 <__ascii_wctomb>:
 800c772:	4603      	mov	r3, r0
 800c774:	4608      	mov	r0, r1
 800c776:	b141      	cbz	r1, 800c78a <__ascii_wctomb+0x18>
 800c778:	2aff      	cmp	r2, #255	; 0xff
 800c77a:	d904      	bls.n	800c786 <__ascii_wctomb+0x14>
 800c77c:	228a      	movs	r2, #138	; 0x8a
 800c77e:	f04f 30ff 	mov.w	r0, #4294967295
 800c782:	601a      	str	r2, [r3, #0]
 800c784:	4770      	bx	lr
 800c786:	2001      	movs	r0, #1
 800c788:	700a      	strb	r2, [r1, #0]
 800c78a:	4770      	bx	lr

0800c78c <_write_r>:
 800c78c:	b538      	push	{r3, r4, r5, lr}
 800c78e:	4604      	mov	r4, r0
 800c790:	4608      	mov	r0, r1
 800c792:	4611      	mov	r1, r2
 800c794:	2200      	movs	r2, #0
 800c796:	4d05      	ldr	r5, [pc, #20]	; (800c7ac <_write_r+0x20>)
 800c798:	602a      	str	r2, [r5, #0]
 800c79a:	461a      	mov	r2, r3
 800c79c:	f7f5 ff0a 	bl	80025b4 <_write>
 800c7a0:	1c43      	adds	r3, r0, #1
 800c7a2:	d102      	bne.n	800c7aa <_write_r+0x1e>
 800c7a4:	682b      	ldr	r3, [r5, #0]
 800c7a6:	b103      	cbz	r3, 800c7aa <_write_r+0x1e>
 800c7a8:	6023      	str	r3, [r4, #0]
 800c7aa:	bd38      	pop	{r3, r4, r5, pc}
 800c7ac:	20000a6c 	.word	0x20000a6c

0800c7b0 <_close_r>:
 800c7b0:	b538      	push	{r3, r4, r5, lr}
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	4d05      	ldr	r5, [pc, #20]	; (800c7cc <_close_r+0x1c>)
 800c7b6:	4604      	mov	r4, r0
 800c7b8:	4608      	mov	r0, r1
 800c7ba:	602b      	str	r3, [r5, #0]
 800c7bc:	f7f5 ff16 	bl	80025ec <_close>
 800c7c0:	1c43      	adds	r3, r0, #1
 800c7c2:	d102      	bne.n	800c7ca <_close_r+0x1a>
 800c7c4:	682b      	ldr	r3, [r5, #0]
 800c7c6:	b103      	cbz	r3, 800c7ca <_close_r+0x1a>
 800c7c8:	6023      	str	r3, [r4, #0]
 800c7ca:	bd38      	pop	{r3, r4, r5, pc}
 800c7cc:	20000a6c 	.word	0x20000a6c

0800c7d0 <_fstat_r>:
 800c7d0:	b538      	push	{r3, r4, r5, lr}
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	4d06      	ldr	r5, [pc, #24]	; (800c7f0 <_fstat_r+0x20>)
 800c7d6:	4604      	mov	r4, r0
 800c7d8:	4608      	mov	r0, r1
 800c7da:	4611      	mov	r1, r2
 800c7dc:	602b      	str	r3, [r5, #0]
 800c7de:	f7f5 ff10 	bl	8002602 <_fstat>
 800c7e2:	1c43      	adds	r3, r0, #1
 800c7e4:	d102      	bne.n	800c7ec <_fstat_r+0x1c>
 800c7e6:	682b      	ldr	r3, [r5, #0]
 800c7e8:	b103      	cbz	r3, 800c7ec <_fstat_r+0x1c>
 800c7ea:	6023      	str	r3, [r4, #0]
 800c7ec:	bd38      	pop	{r3, r4, r5, pc}
 800c7ee:	bf00      	nop
 800c7f0:	20000a6c 	.word	0x20000a6c

0800c7f4 <_isatty_r>:
 800c7f4:	b538      	push	{r3, r4, r5, lr}
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	4d05      	ldr	r5, [pc, #20]	; (800c810 <_isatty_r+0x1c>)
 800c7fa:	4604      	mov	r4, r0
 800c7fc:	4608      	mov	r0, r1
 800c7fe:	602b      	str	r3, [r5, #0]
 800c800:	f7f5 ff0e 	bl	8002620 <_isatty>
 800c804:	1c43      	adds	r3, r0, #1
 800c806:	d102      	bne.n	800c80e <_isatty_r+0x1a>
 800c808:	682b      	ldr	r3, [r5, #0]
 800c80a:	b103      	cbz	r3, 800c80e <_isatty_r+0x1a>
 800c80c:	6023      	str	r3, [r4, #0]
 800c80e:	bd38      	pop	{r3, r4, r5, pc}
 800c810:	20000a6c 	.word	0x20000a6c

0800c814 <_lseek_r>:
 800c814:	b538      	push	{r3, r4, r5, lr}
 800c816:	4604      	mov	r4, r0
 800c818:	4608      	mov	r0, r1
 800c81a:	4611      	mov	r1, r2
 800c81c:	2200      	movs	r2, #0
 800c81e:	4d05      	ldr	r5, [pc, #20]	; (800c834 <_lseek_r+0x20>)
 800c820:	602a      	str	r2, [r5, #0]
 800c822:	461a      	mov	r2, r3
 800c824:	f7f5 ff06 	bl	8002634 <_lseek>
 800c828:	1c43      	adds	r3, r0, #1
 800c82a:	d102      	bne.n	800c832 <_lseek_r+0x1e>
 800c82c:	682b      	ldr	r3, [r5, #0]
 800c82e:	b103      	cbz	r3, 800c832 <_lseek_r+0x1e>
 800c830:	6023      	str	r3, [r4, #0]
 800c832:	bd38      	pop	{r3, r4, r5, pc}
 800c834:	20000a6c 	.word	0x20000a6c

0800c838 <_malloc_usable_size_r>:
 800c838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c83c:	1f18      	subs	r0, r3, #4
 800c83e:	2b00      	cmp	r3, #0
 800c840:	bfbc      	itt	lt
 800c842:	580b      	ldrlt	r3, [r1, r0]
 800c844:	18c0      	addlt	r0, r0, r3
 800c846:	4770      	bx	lr

0800c848 <_read_r>:
 800c848:	b538      	push	{r3, r4, r5, lr}
 800c84a:	4604      	mov	r4, r0
 800c84c:	4608      	mov	r0, r1
 800c84e:	4611      	mov	r1, r2
 800c850:	2200      	movs	r2, #0
 800c852:	4d05      	ldr	r5, [pc, #20]	; (800c868 <_read_r+0x20>)
 800c854:	602a      	str	r2, [r5, #0]
 800c856:	461a      	mov	r2, r3
 800c858:	f7f5 fe8f 	bl	800257a <_read>
 800c85c:	1c43      	adds	r3, r0, #1
 800c85e:	d102      	bne.n	800c866 <_read_r+0x1e>
 800c860:	682b      	ldr	r3, [r5, #0]
 800c862:	b103      	cbz	r3, 800c866 <_read_r+0x1e>
 800c864:	6023      	str	r3, [r4, #0]
 800c866:	bd38      	pop	{r3, r4, r5, pc}
 800c868:	20000a6c 	.word	0x20000a6c

0800c86c <_init>:
 800c86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c86e:	bf00      	nop
 800c870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c872:	bc08      	pop	{r3}
 800c874:	469e      	mov	lr, r3
 800c876:	4770      	bx	lr

0800c878 <_fini>:
 800c878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c87a:	bf00      	nop
 800c87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c87e:	bc08      	pop	{r3}
 800c880:	469e      	mov	lr, r3
 800c882:	4770      	bx	lr
